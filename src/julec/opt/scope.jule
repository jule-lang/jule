// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use path for std::fs::path
use std::jule::build::{PathStdlib}
use std::jule::constant::{Const}
use std::jule::lex::{TokenId, TokenKind}
use sema for std::jule::sema::{
    Var,
    Data,
    Scope,
    Stmt,
    ExprModel,
    FnCallExprModel,
    Conditional,
    CastingExprModel,
    If,
    Else,
    Case,
    Match,
    RangeIter,
    WhileIter,
    InfIter,
    MultiAssign,
    RetSt,
    BinaryExprModel,
    OperandExprModel,
    BuiltinAppendCallExprModel,
    SliceExprModel,
    StructSubIdentExprModel,
    SlicingExprModel,
    FallSt,
    TupleExprModel,
}
use strings for std::strings

// Scope optimizer that applies target-independent optimizations.
struct scopeOptimizer {
    i:     int
    scope: &Scope
}

impl scopeOptimizer {
    static fn new(mut scope: &Scope): &scopeOptimizer {
        ret &scopeOptimizer{
            scope: scope,
        }
    }

    fn setCurrentStmt(mut self, mut stmt: any) {
        self.scope.Stmts[self.i] = unsafe { *(*Stmt)(&stmt) }
    }

    // Removes current statement.
    fn removeCurrent(mut self) {
        self.scope.Stmts = append(self.scope.Stmts[:self.i], self.scope.Stmts[self.i+1:]...)
    }

    fn optimizeData(mut self, mut d: &Data) {
        match type d.Model {
        | &FnCallExprModel:
            mut m := (&FnCallExprModel)(d.Model)
            if env::Production {
                if !m.Func.IsBuiltin() &&
                    isStdPackage(m.Func.Decl.Token.File.Path, "debug") {
                    self.setCurrentStmt(nil)
                    ret
                }
            }
        }
        exprOptimizer.optimize(d.Model)
    }

    fn optimizeVar(mut self, mut v: &Var) {
        if v.Value != nil {
            exprOptimizer.optimize(v.Value.Data.Model)
        }
    }

    fn optimizeConditional(mut self, mut c: &Conditional) {
        for (_, mut elif) in c.Elifs {
            exprOptimizer.optimize(elif.Expr)
            self.optimizeChild(elif.Scope)
        }
        if c.Default != nil {
            self.optimizeChild(c.Default.Scope)
        }

        if !Cond {
            ret
        }

        mut constCase := false // Has cosntant true case.

        // Remove unnecessary trailing cases that comes after constant true case.
        for (i, mut elif) in c.Elifs {
            if !isConstantValidConditionalCase(elif) {
                continue
            }
            constCase = true
            c.Elifs = c.Elifs[:i]
            c.Default = &Else{
                Scope: elif.Scope,
            }
            break
        }

        if len(c.Elifs) == 0 {
            ret
        }

        // Remove unreachable cases.
        mut i := &c.Elifs[0]
        end := &c.Elifs[len(c.Elifs)-1]
        for i <= end; i++ {
            unsafe {
                if isUnreachableConditionalCase(*i) {
                    *i = nil
                }
            }
        }

        if len(c.Elifs) == 0 {
            ret
        }

        // Skip one-case checking if const-case is not exist.
        if !constCase {
            ret
        }

        mut only := -1
        for j, elif in c.Elifs {
            if elif != nil {
                if only != -1 {
                    // Break checking, there is more than one case.
                    ret
                }
                only = j
            }
        }

        // Here is one case.
        if only != -1 {
            self.setCurrentStmt(c.Elifs[only].Scope)
        }
    }

    fn buildDefaultConstantTrueCase(mut self, mut case: &Case, mut &i: int, mut &m: &Match) {
        case.Exprs = nil // Remove expressions to remove eval overhead.
        start := i
    loop:
        for {
            if len(case.Scope.Stmts) == 0 {
                break
            }
            mut &stmt := unsafe { *(&case.Scope.Stmts[len(case.Scope.Stmts)-1]) }
            match type stmt {
            | &FallSt:
                i++
                if i >= len(m.Cases) {
                    stmt = m.Default.Scope
                    break loop
                }
                case = m.Cases[i]
                stmt = case.Scope
            |:
                break loop
            }
        }
        m.Default = m.Cases[start]
        m.Cases = m.Cases[:start]
    }

    fn optimizeMatch(mut self, mut m: &Match) {
        for (_, mut case) in m.Cases {
            for (_, mut expr) in case.Exprs {
                exprOptimizer.optimize(expr.Model)
            }
            self.optimizeChild(case.Scope)
        }
        if m.Default != nil {
            self.optimizeChild(m.Default.Scope)
        }

        if !Cond {
            ret
        }

        mut constCase := false // Has cosntant true case.

        // Remove unnecessary trailing cases that comes after constant true case.
        for (mut i, mut case) in m.Cases {
            if !isConstantValidMatchCase(case) {
                continue
            }
            constCase = true
            self.buildDefaultConstantTrueCase(case, i, m)
            break
        }

        if len(m.Cases) == 0 {
            ret
        }

        // Remove unreachable cases.
        mut i := &m.Cases[0]
        end := &m.Cases[len(m.Cases)-1]
        for i <= end; i++ {
            unsafe {
                if isUnreachableMatchCase(*i) {
                    *i = nil
                }
            }
        }

        // Skip one-case checking if const-case is not exist.
        if !constCase {
            ret
        }

        mut only := -1
        for j, case in m.Cases {
            if case != nil {
                if only != -1 {
                    // Break checking, there is more than one case.
                    ret
                }
                only = j
            }
        }

        // Here is one case.
        if only != -1 {
            self.setCurrentStmt(m.Cases[only].Scope)
        }
    }

    fn optimizeRangeIter(mut self, mut it: &RangeIter) {
        exprOptimizer.optimize(it.Expr.Model)
        self.optimizeChild(it.Scope)
    }

    fn optimizeWhileIter(mut self, mut it: &WhileIter) {
        exprOptimizer.optimize(it.Expr)
        self.optimizeStmt(it.Next)
        self.optimizeChild(it.Scope)
    }

    fn substr(mut self, mut a: &sema::Assign): bool {
        if a.Op.Id != TokenId.Eq {
            ret false
        }
        match type a.R.Model {
        | &SlicingExprModel:
            mut sem := (&SlicingExprModel)(a.R.Model)
            if a.L.Model == sem.Expr {
                self.setCurrentStmt(&MutSlicingExprModel{
                    Token: sem.Token,
                    Expr: sem.Expr,
                    Left: sem.Left,
                    Right: sem.Right,
                })
                ret true
            }
        }
        ret false
    }

    fn strAssign(mut self, mut a: &sema::Assign): bool {
        if !Str {
            ret false
        }
        lp := a.L.Kind.Prim()
        if lp == nil || !lp.IsStr() {
            ret false
        }
        ret self.substr(a)
    }

    fn sliceAssign(mut self, mut a: &sema::Assign): bool {
        if !Slice || a.L.Kind.Slc() == nil {
            ret false
        }
        // [self.substr] applies this optimization without type dependence.
        ret self.substr(a)
    }

    fn optimizeAssign(mut self, mut assign: &sema::Assign) {
        if assign.Op.Id == TokenId.Eq &&
            equalModels(assign.L.Model, assign.R.Model) {
            self.removeCurrent()
            self.i-- // In next iteration, point to correct statement.
            ret
        }

        match {
        | self.strAssign(assign)
        | self.sliceAssign(assign):
            ret
        }

        exprOptimizer.optimize(assign.L.Model)
        exprOptimizer.optimize(assign.R.Model)

        match assign.Op.Id {
        | TokenId.SolidusEq | TokenId.PercentEq:
            // Do not check division of structures safety.
            if Math && assign.L.Kind.Struct() == nil {
                assign.Op.Kind = assign.Op.Kind[:len(assign.Op.Kind)-1]
                mut model := ExprModel(&BinaryExprModel{
                    Op: assign.Op,
                    Left: assign.L,
                    Right: assign.R,
                })
                exprOptimizer.optimize(model)
                match type model {
                | &BinaryExprModel:
                    assign.R = new(OperandExprModel, *assign.R)
                    assign.Op.Id = TokenId.Eq
                    assign.Op.Kind = TokenKind.Eq
                    assign.R.Model = model
                    ret
                }
                assign.Op.Kind += "="
                ret
            }
        }

        if Append {
            match type assign.R.Model {
            | &BuiltinAppendCallExprModel:
                mut m := (&BuiltinAppendCallExprModel)(assign.R.Model)
                if !areSameLvalueExprModel(assign.L.Model, m.Dest) {
                    ret
                }
                match type m.Elements {
                | &SliceExprModel:
                    // Push items one-by-one for self-appended memory.
                    self.setCurrentStmt(&PushToSliceExprModel{
                        Dest: m.Dest,
                        Elems: (&SliceExprModel)(m.Elements),
                    })
                |:
                    // Append directly if appended to slice and assigned to the same memory.
                    self.setCurrentStmt(&AppendToSliceExprModel{
                        Dest: assign.L.Model,
                        Slice: m.Elements,
                    })
                }
            }
        }
    }

    fn tryOptimizeSwap(mut self, mut &assign: &MultiAssign): bool {
        if !Assign || len(assign.L) != 2 {
            ret false
        }
        let mut tup: &TupleExprModel
        match type assign.R {
        | &TupleExprModel:
            tup = (&TupleExprModel)(assign.R)
        }
        if tup == nil || len(tup.Datas) != 2 {
            ret false
        }

        // Catch self assignments.
        if equalModels(assign.L[0].Model, tup.Datas[0].Model) &&
            equalModels(assign.L[1].Model, tup.Datas[1].Model) {
            self.removeCurrent()
            self.i-- // In next iteration, point to correct statement.
            ret true
        }

        // Catch swaps.
        if !equalModels(assign.L[0].Model, tup.Datas[1].Model) ||
            !equalModels(assign.L[1].Model, tup.Datas[0].Model) {
            ret false
        }
        mut model := &SwapExprModel{
            Left: assign.L[0],
            Right: assign.L[1],
        }
        exprOptimizer.optimize(model.Left.Model)
        exprOptimizer.optimize(model.Right.Model)
        self.setCurrentStmt(model)
        ret true
    }

    fn optimizeMultiAssign(mut self, mut assign: &MultiAssign) {
        if self.tryOptimizeSwap(assign) {
            ret
        }

        for (_, mut l) in assign.L {
            if l != nil {
                exprOptimizer.optimize(l.Model)
            }
        }
        exprOptimizer.optimize(assign.R)
    }

    fn optimizeRet(mut self, mut r: &RetSt) {
        exprOptimizer.optimize(r.Expr)
    }

    fn optimizeStmt(mut self, mut stmt: Stmt) {
        match type stmt {
        | &Scope:
            self.optimizeChild((&Scope)(stmt))
        | &Data:
            self.optimizeData((&Data)(stmt))
        | &Var:
            self.optimizeVar((&Var)(stmt))
        | &Conditional:
            self.optimizeConditional((&Conditional)(stmt))
        | &RangeIter:
            self.optimizeRangeIter((&RangeIter)(stmt))
        | &WhileIter:
            self.optimizeWhileIter((&WhileIter)(stmt))
        | &InfIter:
            self.optimizeChild((&InfIter)(stmt).Scope)
        | &sema::Assign:
            self.optimizeAssign((&sema::Assign)(stmt))
        | &MultiAssign:
            self.optimizeMultiAssign((&MultiAssign)(stmt))
        | &Match:
            self.optimizeMatch((&Match)(stmt))
        | &RetSt:
            self.optimizeRet((&RetSt)(stmt))
        }
    }

    fn optimizeChild(mut self, mut child: &Scope) {
        mut so := scopeOptimizer.new(child)
        so.optimize()
    }

    // Optimizes scope by enabled optimizations.
    fn optimize(mut self) {
        self.i = 0
        for self.i < len(self.scope.Stmts); self.i++ {
            self.optimizeStmt(self.scope.Stmts[self.i])
        }
    }
}

fn isStdPackage(&f: str, p: str): bool {
    ret strings::HasPrefix(f, path::Join(PathStdlib, p))
}

fn isConstantValidConditionalCase(&i: &If): bool {
    match type i.Expr {
    | &Const:
        c := (&Const)(i.Expr)
        ret c.IsBool() && c.ReadBool()
    }
    ret false
}

fn isUnreachableExpr(&expr: ExprModel): bool {
    match type expr {
    | &Const:
        c := (&Const)(expr)
        ret c.IsBool() && !c.ReadBool()
    | &BinaryExprModel:
        m := (&BinaryExprModel)(expr)
        if m.Op.Id == TokenId.DblAmper {
            ret isUnreachableExpr(m.Left.Model) ||
                isUnreachableExpr(m.Right.Model)
        }
    }
    ret false
}

fn isConstantValidMatchCase(&case: &Case): bool {
    for _, expr in case.Exprs {
        if expr.IsConst() && expr.Constant.IsBool() && expr.Constant.ReadBool() {
            ret true
        }
    }
    ret false
}

fn isUnreachableConditionalCase(&i: &If): bool {
    ret isUnreachableExpr(i.Expr)
}

fn isUnreachableMatchCase(&case: &Case): bool {
    for _, expr in case.Exprs {
        if !isUnreachableExpr(expr.Model) {
            ret false
        }
    }
    ret true
}