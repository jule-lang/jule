// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/jule/constant"
use "std/jule/sema"

fn typeData(&m: sema::ExprModel): uintptr {
	ret unsafe { uintptr(integ::Emit[*unsafe]("({}).type", m)) }
}

fn equalConst(l: &constant::Const, r: &constant::Const): bool {
	match {
	| l.IsI64():
		ret r.IsI64() && l.ReadI64() == r.ReadI64()
	| l.IsU64():
		ret r.IsU64() && l.ReadU64() == r.ReadU64()
	| l.IsF64():
		ret r.IsF64() && l.ReadF64() == r.ReadF64()
	| l.IsStr():
		ret r.IsStr() && l.ReadStr() == r.ReadStr()
	| l.IsBool():
		ret r.IsBool() && l.ReadBool() == r.ReadBool()
	| l.IsNil():
		ret r.IsNil()
	|:
		ret false
	}
}

fn equalCasting(l: &sema::CastingExprModel, r: &sema::CastingExprModel): bool {
	if !l.Kind.Equal(r.Kind) {
		ret false
	}
	ret equalModels(l.Expr.Model, r.Expr.Model)
}

fn equalUnary(l: &sema::UnaryExprModel, r: &sema::UnaryExprModel): bool {
	if l.Op.Id != r.Op.Id || l.Op.Kind != r.Op.Kind {
		ret false
	}
	ret equalModels(l.Expr.Model, r.Expr.Model)
}

fn equalIndexing(l: &sema::IndexingExprModel, r: &sema::IndexingExprModel): bool {
	ret equalModels(l.Expr.Model, r.Expr.Model) &&
		equalModels(l.Index.Model, r.Index.Model)
}

fn equalBinary(l: &sema::BinaryExprModel, r: &sema::BinaryExprModel): bool {
	if l.Op.Id != r.Op.Id || l.Op.Kind != r.Op.Kind {
		ret false
	}
	ret equalModels(l.Left.Model, r.Left.Model) &&
		equalModels(l.Right.Model, r.Right.Model)
}

// Reports whether expressions are equal.
// Designed lvalue equality comparison oriented,
// such as swap statement value comparisons.
fn equalModels(l: sema::ExprModel, r: sema::ExprModel): bool {
	if typeData(l) != typeData(r) {
		ret false
	}
	match type l {
	| &sema::Var:
		ret (&sema::Var)(l) == (&sema::Var)(r)
	| &sema::StructSubIdentExprModel:
		li := (&sema::StructSubIdentExprModel)(l)
		ri := (&sema::StructSubIdentExprModel)(r)
		ret li.Field == ri.Field && equalModels(li.Expr.Model, ri.Expr.Model)
	| &constant::Const:
		ret equalConst((&constant::Const)(l), (&constant::Const)(r))
	| &sema::CastingExprModel:
		ret equalCasting((&sema::CastingExprModel)(l), (&sema::CastingExprModel)(r))
	| &sema::UnaryExprModel:
		ret equalUnary((&sema::UnaryExprModel)(l), (&sema::UnaryExprModel)(r))
	| &sema::IndexingExprModel:
		ret equalIndexing((&sema::IndexingExprModel)(l), (&sema::IndexingExprModel)(r))
	| &sema::BinaryExprModel:
		ret equalBinary((&sema::BinaryExprModel)(l), (&sema::BinaryExprModel)(r))
	|:
		ret false
	}
}