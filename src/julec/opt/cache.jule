// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use obj::{IR}
use std::jule::sema::{Package, FnIns, FnCallExprModel}

// Std functions.
static stdInternalNosafeStobs = "std::internal::nosafe::Stobs"

// Package link-paths.
static stdPackageInternalNosafe = "std::internal::nosafe"

type optimizerFunc: fn(&op: exprOptimizer, &d: stdCacheData, mut &m: &FnCallExprModel)

struct stdCacheData {
    f:  &FnIns
    do: optimizerFunc
}

// General cache for standard library functions.
// Key's are pointer addresses for items.
static mut stdCache: map[uintptr]stdCacheData = nil

// Builds general cache for optimizer.
// Aims speed-up lookups with possibly high-repeated.
fn buildCache(mut &ir: &IR) {
    buildStdInternalNosafeCache(ir)
}

fn buildStdInternalNosafeCache(mut &ir: &IR) {
    let mut p = getPackage(ir, stdPackageInternalNosafe)
    if p == nil {
        ret
    }
    pushCache(p, "Stobs", doInternalNosafeStobs)
}

// Pushes function into cache by ident from p.
// Assumes function with ident is exist in p.
fn pushCache(mut &p: &Package, ident: str, do: optimizerFunc) {
    let mut f = getFunc(p, ident)
    stdCache[uintptr(f)] = stdCacheData{
        f: f,
        do: do,
    }
}

// Assumes ident targets only non-generic functions.
fn getFunc(mut &p: &Package, &ident: str): &FnIns {
    const Binded = false
    let mut f = p.FindFn(ident, Binded)
    if f == nil {
        ret nil
    }
    ret f.Instances[0]
}

fn getPackage(mut &ir: &IR, &path: str): &Package {
    for (_, mut u) in ir.Used {
        if u.Std && u.LinkPath == path {
            ret u.Package
        }
    }
    ret nil
}