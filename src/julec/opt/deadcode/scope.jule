// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use obj::{IR}
use std::jule::sema::{
    Package,
    Fn,
    Scope,
    Stmt,
    Data,
    RetSt,
    Label,
    GotoSt,
    BuiltinErrorCallExprModel,
    BuiltinPanicCallExprModel,
    RangeIter,
    WhileIter,
    InfIter,
    Conditional,
    Match,
    ExprModel,
    Assign,
    MultiAssign,
}

// Dead code eliminate optimizer for scopes.
struct scopeDeadCode {
    parent: &scopeDeadCode
    s:      &Scope
    stmts:  *[]Stmt
    i:      int            // Position.
    labels: &[]&Label
    gotos:  &[]&GotoSt
    except: bool
}

impl scopeDeadCode {
    fn optimizeChild(mut &self, mut &s: &Scope) {
        let mut sdc = &scopeDeadCode{
            parent: self,
            s: s,
            stmts: &s.Stmts,
            labels: self.labels,
            gotos: self.gotos,
        }
        unsafe { sdc.optimizeStmts() }
    }

    fn optimizeBodyChildExceptional(mut &self, mut &s: &Scope) {
        let mut sdc = &scopeDeadCode{
            s: s,
            stmts: &s.Stmts,
            labels: self.labels,
            gotos: self.gotos,
            except: true,
        }
        unsafe { sdc.optimizeStmts() }
    }

    fn optimizeBodyChild(mut &self, mut &s: &Scope) {
        let mut sdc = &scopeDeadCode{
            s: s,
            stmts: &s.Stmts,
            labels: self.labels,
            gotos: self.gotos,
        }
        unsafe { sdc.optimizeStmts() }
    }

    fn optimizeExprModel(mut &self, mut &model: ExprModel) {
        let edc = exprDeadCode.new(self)
        edc.optimize(model)
    }

    fn eliminateFollowed(mut self) {
        if self.gotos.len != 0 {
            ret
        }
        unsafe {
            *self.stmts = (*self.stmts)[:self.i+1]
        }
        let mut parent = self.parent
        for parent != nil {
            unsafe {
                *parent.stmts = (*parent.stmts)[:parent.i+1]
            }
            parent = parent.parent
        }
    }

    fn pushGoto(mut &self, mut gt: &GotoSt) {
        let mut i = 0
        for i < self.labels.len; i++ {
            if gt.Ident == (*self.labels)[i].Ident {
                ret
            }
        }
        *self.gotos = append(*self.gotos, gt)
    }

    fn pushLabel(mut &self, mut l: &Label) {
        let mut i = 0
        for i < self.gotos.len {
            if l.Ident == (*self.gotos)[i].Ident {
                copy((*self.gotos)[i:], (*self.gotos)[i+1:])
                *self.gotos = (*self.gotos)[:self.gotos.len-1]
                continue
            }
            i++
        }
        *self.labels = append(*self.labels, l)
    }

    fn optimizeRangeIter(mut &self, mut it: &RangeIter) {
        self.optimizeExprModel(it.Expr.Model)
        self.optimizeBodyChild(it.Scope)
    }

    fn optimizeWhileIter(mut &self, mut it: &WhileIter) {
        self.optimizeExprModel(it.Expr)
        if it.Next != nil {
            self.optimizeStmt(it.Next)
        }
        self.optimizeBodyChild(it.Scope)
    }

    fn optimizeInfIter(mut &self, mut it: &InfIter) {
        self.optimizeBodyChild(it.Scope)
    }

    fn optimizeConditional(mut &self, mut c: &Conditional) {
        for (_, mut case) in c.Elifs {
            if case != nil {
                self.optimizeExprModel(case.Expr)
                self.optimizeBodyChild(case.Scope)
            }
        }
        if c.Default != nil {
            if c.Elifs.len == 0 {
                // Use just child.
                // There one case, this default scope can accepted as plain anonymous scope.
                self.optimizeChild(c.Default.Scope)
            } else {
                self.optimizeBodyChild(c.Default.Scope)
            }
        }
    }

    fn optimizeMatch(mut &self, mut m: &Match) {
        for (_, mut case) in m.Cases {
            for (_, mut expr) in case.Exprs {
                self.optimizeExprModel(expr.Model)
            }
            self.optimizeBodyChild(case.Scope)
        }
        if m.Default != nil {
            if m.Cases.len == 0 {
                // Use just child.
                // There one case, this default scope can accepted as plain anonymous scope.
                self.optimizeChild(m.Default.Scope)
            } else {
                self.optimizeBodyChild(m.Default.Scope)
            }
        }
    }

    fn optimizeAssign(mut &self, mut assign: &Assign) {
        self.optimizeExprModel(assign.L.Model)
        self.optimizeExprModel(assign.R.Model)
    }

    fn optimizeMultiAssign(mut &self, mut assign: &MultiAssign) {
        for (_, mut l) in assign.L {
            if l != nil {
                self.optimizeExprModel(l)
            }
        }
        self.optimizeExprModel(assign.R)
    }

    fn optimizeStmt(mut &self, mut st: Stmt) {
        match type st {
        | &Scope:
            let mut scope = (&Scope)(st)
            if scope.Deferred {
                eliminateDeadCodeOfScope(scope)
            } else {
                self.optimizeChild(scope)
            }
        | &RangeIter:
            self.optimizeRangeIter((&RangeIter)(st))
        | &WhileIter:
            self.optimizeWhileIter((&WhileIter)(st))
        | &InfIter:
            self.optimizeInfIter((&InfIter)(st))
        | &Conditional:
            self.optimizeConditional((&Conditional)(st))
        | &Match:
            self.optimizeMatch((&Match)(st))
        | &Assign:
            self.optimizeAssign((&Assign)(st))
        | &MultiAssign:
            self.optimizeMultiAssign((&MultiAssign)(st))
        | &Data:
            let mut d = (&Data)(st)
            if self.except {
                break
            }
            match type d.Model {
            | &BuiltinErrorCallExprModel
            | &BuiltinPanicCallExprModel:
                // Remove followed statements of the function call.
                // Unreachable code.
                self.eliminateFollowed()
            |:
                self.optimizeExprModel(d.Model)
            }
        | &RetSt:
            // Remove followed statements of the return statement.
            // Unreachable code.
            self.eliminateFollowed()
        | &GotoSt:
            self.pushGoto((&GotoSt)(st))
            // Remove followed statements of the return statement.
            // Unreachable code.
            self.eliminateFollowed()
        | &Label:
            self.pushLabel((&Label)(st))
        }
    }

    unsafe fn optimizeStmts(mut &self) {
        self.i = 0
        for self.i < self.stmts.len; self.i++ {
            self.optimizeStmt((*self.stmts)[self.i])
        }
    }
}

fn eliminateDeadCodeOfScope(mut s: &Scope) {
    let labels = make([]&Label, 0, 1 << 4)
    let gotos = make([]&GotoSt, 0, 1 << 4)
    let mut sdc = &scopeDeadCode{
        s: s,
        stmts: &s.Stmts,
        labels: unsafe { (&[]&Label)(&labels) },
        gotos: unsafe { (&[]&GotoSt)(&gotos) },
    }
    unsafe { sdc.optimizeStmts() }
}

// Eliminates dead functions.
fn eliminateScopeFunctions(mut &funcs: []&Fn) {
    for (_, mut func) in funcs {
        for (_, mut ins) in func.Instances {
            eliminateDeadCodeOfScope(ins.Scope)
        }
    }
}

fn eliminateFunctionsScopePackage(mut &pkg: &Package) {
    for (_, mut f) in pkg.Files {
        eliminateScopeFunctions(f.Funcs)
    }
}

fn eliminateScopePackage(mut &pkg: &Package) {
    eliminateFunctionsScopePackage(pkg)
}

// Eliminate dead scope codes.
pub fn EliminateScopes(mut &ir: &IR) {
    let mut i = ir.Used.len - 1
    for i >= 0; i-- {
        let mut u = ir.Used[i]
        if !u.CppLinked {
            eliminateScopePackage(u.Package)
        }
    }
    eliminateScopePackage(ir.Main)
}