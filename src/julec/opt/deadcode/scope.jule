// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use obj::{IR}
use std::jule::sema::{
    Package,
    Fn,
    Scope,
    Stmt,
    Data,
    RetSt,
    Label,
    GotoSt,
    BuiltinErrorCallExprModel,
    BuiltinPanicCallExprModel,
    RangeIter,
    WhileIter,
    InfIter,
    Conditional,
    Match,
    ExprModel,
    Assign,
    MultiAssign,
}

// Dead code eliminate optimizer for scopes.
struct ScopeDeadCode {
    parent: &ScopeDeadCode
    s:      &Scope
    stmts:  *[]Stmt
    i:      int            // Position.
    labels: &[]&Label
    gotos:  &[]&GotoSt
}

impl ScopeDeadCode {
    fn optimize_child(mut &self, mut &s: &Scope) {
        let mut sdc = &ScopeDeadCode{
            parent: self,
            s: s,
            stmts: &s.stmts,
            labels: self.labels,
            gotos: self.gotos,
        }
        unsafe { sdc.optimize_stmts() }
    }

    fn optimize_body_child(mut &self, mut &s: &Scope) {
        let mut sdc = &ScopeDeadCode{
            s: s,
            stmts: &s.stmts,
            labels: self.labels,
            gotos: self.gotos,
        }
        unsafe { sdc.optimize_stmts() }
    }

    fn optimize_expr_model(mut &self, mut &model: ExprModel) {
        let edc = ExprDeadCode.new(self)
        edc.optimize(model)
    }

    fn eliminate_followed(mut self) {
        if self.gotos.len != 0 {
            ret
        }
        unsafe {
            *self.stmts = (*self.stmts)[:self.i+1]
        }
        let mut parent = self.parent
        for parent != nil {
            unsafe {
                *parent.stmts = (*parent.stmts)[:parent.i+1]
            }
            parent = parent.parent
        }
    }

    fn push_goto(mut &self, mut gt: &GotoSt) {
        let mut i = 0
        for i < self.labels.len; i++ {
            if gt.ident == (*self.labels)[i].ident {
                ret
            }
        }
        *self.gotos = append(*self.gotos, gt)
    }

    fn push_label(mut &self, mut l: &Label) {
        let mut i = 0
        for i < self.gotos.len {
            if l.ident == (*self.gotos)[i].ident {
                copy((*self.gotos)[i:], (*self.gotos)[i+1:])
                *self.gotos = (*self.gotos)[:self.gotos.len-1]
                continue
            }
            i++
        }
        *self.labels = append(*self.labels, l)
    }

    fn optimize_range_iter(mut &self, mut it: &RangeIter) {
        self.optimize_expr_model(it.expr.model)
        self.optimize_body_child(it.scope)
    }

    fn optimize_while_iter(mut &self, mut it: &WhileIter) {
        self.optimize_expr_model(it.expr)
        if it.next != nil {
            self.optimize_stmt(it.next)
        }
        self.optimize_body_child(it.scope)
    }

    fn optimize_inf_iter(mut &self, mut it: &InfIter) {
        self.optimize_body_child(it.scope)
    }

    fn optimize_conditional(mut &self, mut c: &Conditional) {
        for (_, mut case) in c.elifs {
            if case != nil {
                self.optimize_expr_model(case.expr)
                self.optimize_body_child(case.scope)
            }
        }
        if c.default != nil {
            if c.elifs.len == 0 {
                // Use just child.
                // There one case, this default scope can accepted as plain anonymous scope.
                self.optimize_child(c.default.scope)
            } else {
                self.optimize_body_child(c.default.scope)
            }
        }
    }

    fn optimize_match(mut &self, mut m: &Match) {
        for (_, mut case) in m.cases {
            for (_, mut expr) in case.exprs {
                self.optimize_expr_model(expr.model)
            }
            self.optimize_body_child(case.scope)
        }
        if m.default != nil {
            if m.cases.len == 0 {
                // Use just child.
                // There one case, this default scope can accepted as plain anonymous scope.
                self.optimize_child(m.default.scope)
            } else {
                self.optimize_body_child(m.default.scope)
            }
        }
    }

    fn optimize_assign(mut &self, mut assign: &Assign) {
        self.optimize_expr_model(assign.l.model)
        self.optimize_expr_model(assign.r.model)
    }

    fn optimize_multi_assign(mut &self, mut assign: &MultiAssign) {
        for (_, mut l) in assign.l {
            if l != nil {
                self.optimize_expr_model(l)
            }
        }
        self.optimize_expr_model(assign.r)
    }

    fn optimize_stmt(mut &self, mut st: Stmt) {
        match type st {
        | &Scope:
            let mut scope = (&Scope)(st)
            if scope.deferred {
                eliminate_dead_code_of_scope(scope)
            } else {
                self.optimize_child(scope)
            }
        | &RangeIter:
            self.optimize_range_iter((&RangeIter)(st))
        | &WhileIter:
            self.optimize_while_iter((&WhileIter)(st))
        | &InfIter:
            self.optimize_inf_iter((&InfIter)(st))
        | &Conditional:
            self.optimize_conditional((&Conditional)(st))
        | &Match:
            self.optimize_match((&Match)(st))
        | &Assign:
            self.optimize_assign((&Assign)(st))
        | &MultiAssign:
            self.optimize_multi_assign((&MultiAssign)(st))
        | &Data:
            let mut d = (&Data)(st)
            match type d.model {
            | &BuiltinErrorCallExprModel
            | &BuiltinPanicCallExprModel:
                // Remove followed statements of the function call.
                // Unreachable code.
                self.eliminate_followed()
            |:
                self.optimize_expr_model(d.model)
            }
        | &RetSt:
            // Remove followed statements of the return statement.
            // Unreachable code.
            self.eliminate_followed()
        | &GotoSt:
            self.push_goto((&GotoSt)(st))
            // Remove followed statements of the return statement.
            // Unreachable code.
            self.eliminate_followed()
        | &Label:
            self.push_label((&Label)(st))
        }
    }

    unsafe fn optimize_stmts(mut &self) {
        self.i = 0
        for self.i < self.stmts.len; self.i++ {
            self.optimize_stmt((*self.stmts)[self.i])
        }
    }
}

fn eliminate_dead_code_of_scope(mut s: &Scope) {
    let labels = make([]&Label, 0, 1 << 4)
    let gotos = make([]&GotoSt, 0, 1 << 4)
    let mut sdc = &ScopeDeadCode{
        s: s,
        stmts: &s.stmts,
        labels: unsafe { (&[]&Label)(&labels) },
        gotos: unsafe { (&[]&GotoSt)(&gotos) },
    }
    unsafe { sdc.optimize_stmts() }
}

// Eliminates dead functions.
fn eliminate_scope_functions(mut &funcs: []&Fn) {
    for (_, mut func) in funcs {
        for (_, mut ins) in func.instances {
            eliminate_dead_code_of_scope(ins.scope)
        }
    }
}

fn eliminate_functions_scope_package(mut &pkg: &Package) {
    for (_, mut f) in pkg.files {
        eliminate_scope_functions(f.funcs)
    }
}

fn eliminate_scope_package(mut &pkg: &Package) {
    eliminate_functions_scope_package(pkg)
}

// Eliminate dead scope codes.
pub fn eliminate_scopes(mut &ir: &IR) {
    let mut i = ir.used.len - 1
    for i >= 0; i-- {
        let mut u = ir.used[i]
        if !u.cpp_linked {
            eliminate_scope_package(u.package)
        }
    }
    eliminate_scope_package(ir.main)
}