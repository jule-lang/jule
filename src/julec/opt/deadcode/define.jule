// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use obj::{IR}
use build for std::jule::build::{Directive}
use ast for std::jule::ast
use std::jule::sema::{
    Package,
    SymbolTable,
    ReferenceStack,
    Var,
    Fn,
    FnIns,
    Struct,
    StructIns,
    Trait,
}

struct LiveTable {
    vars:    []&Var
    fns:     []&FnIns
    structs: []&StructIns
}

pub struct ObjectDeadCode {
    live: LiveTable
    ir:   &IR
}

impl ObjectDeadCode {
    static fn new(mut &ir: &IR): &ObjectDeadCode {
        ret &ObjectDeadCode{
            ir: ir,
        }
    }

    fn is_live[T](mut &self, &t: T): bool {
        let mut live: []T = nil
        match type T {
        | &FnIns:
            live = self.live.fns
        | &Var:
            live = self.live.vars
        | &StructIns:
            live = self.live.structs
        }
        for i in live {
            if live[i] == t {
                ret true
            }
        }
        ret false
    }

    fn push_live[T](mut &self, mut t: T) {
        if !self.is_live[T](t) {
            match type T {
            | &Var:
                self.live.vars = append(self.live.vars, t)
            | &FnIns:
                self.live.fns = append(self.live.fns, t)
            | &StructIns:
                self.live.structs = append(self.live.structs, t)
            }
        }
    }

    fn set_references_as_live(mut &self, mut &rs: &ReferenceStack) {
        if rs == nil {
            ret
        }
        let mut i = 0
        for i < rs.len(); i++ {
            let mut ref = rs.at(i)
            match type ref {
            | &FnIns:
                let mut f = (&FnIns)(ref)
                if self.is_live[&FnIns](f) {
                    break
                }
                if f.owner != nil && !f.decl.statically {
                    if !self.is_live[&StructIns](f.owner) {
                        self.push_live[&StructIns](f.owner)
                        self.set_references_as_live(f.owner.refers)
                    }
                }
                self.push_live[&FnIns](f)
                self.set_references_as_live(f.refers)
            | &Var:
                let mut v = (&Var)(ref)
                if self.is_live[&Var](v) {
                    break
                }
                self.push_live[&Var](v)
                self.set_references_as_live(v.refers)
            | &StructIns:
                let mut s = (&StructIns)(ref)
                if self.is_live[&StructIns](s) {
                    break
                }
                self.push_live[&StructIns](s)
                self.set_references_as_live(s.refers)
                for (_, mut ins) in s.methods {
                    for (_, mut mins) in ins.instances {
                        if self.is_live[&FnIns](mins) {
                            continue
                        }
                        self.push_live[&FnIns](mins)
                        self.set_references_as_live(mins.refers)
                    }
                }
            }
        }
    }

    fn inits(mut &self, mut &pkg: &Package) {
        for (_, mut file) in pkg.files {
            for (_, mut f) in file.funcs {
                if f.ident == build::INIT_FN {
                    let mut ins = f.instances[0]
                    self.live.fns = append(self.live.fns, ins)
                    self.set_references_as_live(ins.refers)
                }
            }
        }
    }

    fn collect_live_package(mut &self, mut &pkg: &Package) {
        // Collect live references based on initializer functions.
        self.inits(pkg)

        // Collect test functions if test compilation is enabled.
        if env::TEST {
            for (_, mut file) in pkg.files {
                for (_, mut f) in file.funcs {
                    if has_directive(f.directives, Directive.Test) {
                        let mut ins = f.instances[0]
                        self.live.fns = append(self.live.fns, ins)
                        self.set_references_as_live(ins.refers)
                    }
                }
            }
        }
    }

    fn collect_live(mut &self) {
        for (_, mut used) in self.ir.used {
            if !used.cpp_linked {
                self.collect_live_package(used.package)
            }
        }
        self.collect_live_package(self.ir.main)

        // Push live references based on entry point.
        let mut main = self.ir.main.find_fn(build::ENTRY_POINT, false)
        let mut ins = main.instances[0]
        self.live.fns = append(self.live.fns, ins)
        self.set_references_as_live(ins.refers)
    }

    fn remove_dead_globals(mut &self, mut &vars: []&Var) {
        let mut i = 0
        for i < vars.len {
            let v = vars[i]
            if self.is_live[&Var](v) {
                i++
                continue
            }
            vars = append(vars[:i], vars[i+1:]...)
        }
    }

    fn remove_dead_fns(mut &self, mut &funcs: []&Fn) {
        let mut i = 0
        for i < funcs.len {
            let mut f = funcs[i]
            let mut j = 0
            for j < f.instances.len {
                let ins = f.instances[j]
                if self.is_live[&FnIns](ins) {
                    j++
                    continue
                }
                f.instances = append(f.instances[:j], f.instances[j+1:]...)
            }
            if f.instances.len == 0 {
                funcs = append(funcs[:i], funcs[i+1:]...)
                continue
            }
            i++
        }
    }

    fn remove_dead_structs(mut &self, mut &structs: []&Struct) {
        let mut i = 0
        for i < structs.len {
            let mut s = structs[i]
            let mut j = 0
            for j < s.instances.len {
                let mut ins = s.instances[j]
                self.remove_dead_fns(ins.methods)
                if ins.methods.len != 0 || self.is_live[&StructIns](ins) {
                    j++
                    continue
                }
                s.instances = append(s.instances[:j], s.instances[j+1:]...)
            }
            if s.instances.len == 0 {
                structs = append(structs[:i], structs[i+1:]...)
                continue
            }
            i++
        }
    }

    fn remove_deads_file(mut &self, mut &file: &SymbolTable) {
        self.remove_dead_fns(file.funcs)
        self.remove_dead_structs(file.structs)
        self.remove_dead_globals(file.vars)
    }

    fn remove_deads_package(mut &self, mut &pkg: &Package) {
        for (_, mut file) in pkg.files {
            self.remove_deads_file(file)
        }
    }

    fn remove_deads(mut &self) {
        for (_, mut used) in self.ir.used {
            if !used.cpp_linked {
                self.remove_deads_package(used.package)
            }
        }
        self.remove_deads_package(self.ir.main)
    }

    fn elimanate(mut &self) {
        self.collect_live()
        self.remove_deads()
    }
}

pub fn eliminate_defines(mut &ir: &IR) {
    let mut ocd = ObjectDeadCode.new(ir)
    ocd.elimanate()
}

// Returns directive if exist.
fn find_directive(mut &directives: []&ast::Directive, tag: str): &ast::Directive {
    for (_, mut dr) in directives {
        if dr.tag.kind == tag {
            ret dr
        }
    }
    ret nil
}

// Reports whether directive is exist.
fn has_directive(&directives: []&ast::Directive, tag: str): bool {
    ret find_directive(unsafe { *(&directives) }, tag) != nil
}