// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

// Optimization preferences for the data.
enum dataFlag {
	Default,
	// Any conditional expression (such as x != nil) will not considered
	// as optimization opportunity.
	NoConditional,
}

static mut emptyData = new(data)

// Immutable copy for data.
struct dataCheckpoint {
	boundary: boundary
	nils:     nils
	dynamic:  dynamic
}

// All-in-one all analysis information structures.
struct data {
	boundary: &boundary
	nils:     &nils
	dynamic:  &dynamic
	flags:    dataFlag
}

impl data {
	fn getCheckpoint(mut self): dataCheckpoint {
		mut c := dataCheckpoint{}
		c.boundary.vars = append(make([]boundaryVar, 0), self.boundary.vars...)
		for i in c.boundary.vars {
			c.boundary.vars[i].maxSize = append(make([]sema::ExprModel, 0), c.boundary.vars[i].maxSize...)
		}
		c.nils.vars = append(make([]nilVar, 0), self.nils.vars...)
		c.dynamic.vars = append(make([]dynamicVar, 0), self.dynamic.vars...)
		ret c
	}

	fn loadCheckpoint(mut self, mut &c: dataCheckpoint) {
		*self.boundary = c.boundary
		*self.nils = c.nils
		*self.dynamic = c.dynamic
	}
}