// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "env"
use "obj"
use "std/jule/constant"
use "std/jule/lex"
use "std/jule/sema"
use "std/jule/types"
use "std/math"

// Expression optimizer that applies target-independent optimizations.
struct exprOptimizer {
	mut model:     &sema::ExprModel
	mut data:      &data // Should be non-nil guaranteed.
	mut inspector: &obj::ExprInspector
}

impl exprOptimizer {
	static fn optimize(mut &model: sema::ExprModel) {
		exprOptimizer.optimizeData(model, emptyData)
	}

	static fn optimizeData(mut &model: sema::ExprModel, mut &d: &data) {
		// Do optimizatitons if any enabled.
		if exprEnabled {
			mut exop := &exprOptimizer{
				model: unsafe { (&sema::ExprModel)(&model) },
				data: d,
				inspector: obj::ExprInspector.New(),
			}
			exop.do()
		}
	}

	fn selfCmpCond(self, mut &m: &sema::BinaryExprModel): bool {
		if !equalModels(m.Left.Model, m.Right.Model) {
			ret false
		}
		match m.Op.Id {
		| lex::TokenId.Eqs
		| lex::TokenId.LtEq
		| lex::TokenId.GtEq:
			// Operators used with itself: ==, <=, >=.
			// Evaluation will be always true.
			*self.model = constant::Const.NewBool(true)
			ret true
		| lex::TokenId.NotEq
		| lex::TokenId.Lt
		| lex::TokenId.Gt:
			// Operators used with itself: !=, <, >.
			// Evaluation will be always false.
			*self.model = constant::Const.NewBool(false)
			ret true
		|:
			ret false
		}
	}

	fn boolCond(self, mut &m: &sema::BinaryExprModel): bool {
		lp := m.Left.Kind.Prim()
		if lp == nil || !lp.IsBool() {
			ret false
		}
		match type m.Left.Model {
		| &constant::Const:
			// Equality comparison, swap operation is safe and will not change
			// the behavior of the program.
			m.Left, m.Right = m.Right, m.Left
		|:
			match type m.Right.Model {
			| &constant::Const:
				break
			|:
				ret false
			}
		}
		mut c := (&constant::Const)(m.Right.Model)
		match m.Op.Id {
		| lex::TokenId.DblAmper:
			if c.ReadBool() {
				// Use left operand as model directly.
				// Logical and with constant true exprssion is always will be true.
				// The non-constant left operand should be true,
				// this is the only important thing. So eliminate constant true.
				*self.model = m.Left.Model
			} else {
				// Logical and with constant false expression.
				// Binary expression is always will be false.
				c.SetBool(false)
				*self.model = c
			}
			ret true
		| lex::TokenId.DblVline:
			if c.ReadBool() {
				// Logical or with constant true expression.
				// Binary expression is always will be true.
				c.SetBool(true)
				*self.model = c
			} else {
				// Use left operand as model directly.
				// Logical or with constant false exprssion is always will be false.
				// The non-constant left operand should be true,
				// this is the only important thing. So eliminate constant false.
				*self.model = m.Left.Model
			}
			ret true
		|:
		}
		ret false
	}

	fn strCond(self, mut m: &sema::BinaryExprModel): bool {
		lp := m.Left.Kind.Prim()
		if lp == nil || !lp.IsStr() {
			ret false
		}
		if m.Op.Id != lex::TokenId.Eqs && m.Op.Id != lex::TokenId.NotEq {
			ret false
		}
		match type m.Left.Model {
		| &constant::Const:
			// Equality comparison, swap operation is safe and will not change
			// the behavior of the program.
			m.Left, m.Right = m.Right, m.Left
		|:
			match type m.Right.Model {
			| &constant::Const:
				break
			|:
				ret false
			}
		}
		mut c := (&constant::Const)(m.Right.Model)
		match m.Op.Id {
		| lex::TokenId.Eqs:
			if c.ReadStr() == "" {
				mut model := any(&EmptyCompareExprModel{
					Expr: m.Left.Model,
					Neg: false,
				})
				*self.model = unsafe { *(*sema::ExprModel)(&model) }
				break
			}
			mut model := any(&StrCompExprModel{
				Left: m.Left.Model,
				Right: c,
				NotEq: false,
			})
			*self.model = unsafe { *(*sema::ExprModel)(&model) }
		| lex::TokenId.NotEq:
			if c.ReadStr() == "" {
				mut model := any(&EmptyCompareExprModel{
					Expr: m.Left.Model,
					Neg: true,
				})
				*self.model = unsafe { *(*sema::ExprModel)(&model) }
				break
			}
			mut model := any(&StrCompExprModel{
				Left: m.Left.Model,
				Right: c,
				NotEq: true,
			})
			*self.model = unsafe { *(*sema::ExprModel)(&model) }
		}
		ret true
	}

	fn tryNeutralElement1(self, mut &m: &sema::BinaryExprModel, mut c: &constant::Const, &nc: &sema::OperandExprModel): bool {
		if c.IsStr() { // Constant is string, check for string optimizations.
			if !Str {
				ret false
			}
			if c.ReadStr() == "" && m.Op.Id == lex::TokenId.Plus {
				// Concatenation with empty string, use the non-constnat operand's model.
				*self.model = nc.Model
				ret true
			}
			ret false
		}

		// Following algoritms are designed for zero-constant math operations.
		// So make required conditions are guaranteed.
		if !Math || c.AsF64() != 0 {
			ret false
		}
		match m.Op.Id {
		| lex::TokenId.Shl
		| lex::TokenId.Shr:
			// If the constant expression is shifter, use the right operand's model.
			if nc == m.Left {
				*self.model = nc.Model
				ret true
			}
			// If the shifter expression is non-constant, shifted value is constant-zero.
			// Use zero-constant directly.
			*self.model = c
			ret true
		| lex::TokenId.Star:
			c.SetI64(0)
			*self.model = c
			ret true
		| lex::TokenId.Plus
		| lex::TokenId.Minus:
			*self.model = nc.Model
			ret true
		}
		ret false
	}

	// Tries optimize binary expression for neutral elements.
	// Specialized in math optimizations.
	fn tryNeutralElement(self, mut &m: &sema::BinaryExprModel): bool {
		// For netural element optimization, one of the operands should be constant.
		match type m.Left.Model {
		| &constant::Const:
			mut c := (&constant::Const)(m.Left.Model)
			ret self.tryNeutralElement1(m, c, m.Right)
		}
		match type m.Right.Model {
		| &constant::Const:
			mut c := (&constant::Const)(m.Right.Model)
			ret self.tryNeutralElement1(m, c, m.Left)
		}
		ret false
	}

	fn checkBinaryForBoundary(self, mut &m: &sema::BinaryExprModel) {
		if self.data.boundary == nil {
			ret
		}
		match type m.Left.Model {
		| &sema::BuiltinLenCallExprModel:
			mut blc := (&sema::BuiltinLenCallExprModel)(m.Left.Model)
			if !isBoundaryValidType(blc.Expr.Kind) {
				ret
			}
			if m.Op.Id != lex::TokenId.Gt && m.Op.Id != lex::TokenId.Eqs {
				ret
			}
			// len(x) > y, len(x) == y (constant)
			// Max guaranteed size of x is y.
			if m.Op.Id == lex::TokenId.Eqs {
				match type m.Right.Model {
				| &constant::Const:
					mut c := new(constant::Const, *(&constant::Const)(m.Right.Model)) // Do not mutate binary operand.
					c.Sub(*constant::Const.NewI64(1))
					self.data.boundary.pushVar(getBoundaryVar(blc.Expr.Model), c)
				}
				ret
			}
			self.data.boundary.pushVar(getBoundaryVar(blc.Expr.Model), m.Right.Model)
			ret
		}
		match type m.Right.Model {
		| &sema::BuiltinLenCallExprModel:
			mut blc := (&sema::BuiltinLenCallExprModel)(m.Right.Model)
			if !isBoundaryValidType(blc.Expr.Kind) {
				ret
			}
			if m.Op.Id != lex::TokenId.Lt && m.Op.Id != lex::TokenId.Eqs {
				ret
			}
			// y < len(x), y (constant) == len(x)
			// Max guaranteed size of x is y.
			if m.Op.Id == lex::TokenId.Eqs {
				match type m.Left.Model {
				| &constant::Const:
					mut c := new(constant::Const, *(&constant::Const)(m.Left.Model)) // Do not mutate binary operand.
					c.Sub(*constant::Const.NewI64(1))
					self.data.boundary.pushVar(getBoundaryVar(blc.Expr.Model), c)
				}
				ret
			}
			self.data.boundary.pushVar(getBoundaryVar(blc.Expr.Model), m.Left.Model)
			ret
		}
	}

	fn checkBinaryForNil(self, mut &m: &sema::BinaryExprModel) {
		if self.data.nils == nil {
			ret
		}
		mut var := getNilVar(m.Left.Model)
		if var != invalidNil {
			if !isNilValidType(m.Left.Kind) {
				ret
			}
			match type m.Right.Model {
			| &constant::Const:
				// No need to check whether constant variable is nil.
				// It only can be nil.
				self.data.nils.pushVar(var, m.Op.Id == lex::TokenId.NotEq)
			}
			ret
		}
		var = getNilVar(m.Right.Model)
		if var != invalidNil {
			if !isNilValidType(m.Right.Kind) {
				ret
			}
			match type m.Left.Model {
			| &constant::Const:
				// No need to check whether constant variable is nil.
				// It only can be nil.
				self.data.nils.pushVar(var, m.Op.Id == lex::TokenId.NotEq)
			}
			ret
		}
	}

	fn binary(self, mut m: &sema::BinaryExprModel) {
		self.checkBinaryForBoundary(m)
		self.checkBinaryForNil(m)

		if Cond {
			match {
			| self.strCond(m)
			| self.boolCond(m)
			| self.selfCmpCond(m):
				ret
			}
		}

		if self.tryNeutralElement(m) {
			ret
		}

		if !Math {
			ret
		}

		// Check whether the right operand is constant for safety.
		// The following algorithms assumes the right operand is constant.
		match type m.Right.Model {
		| &constant::Const:
			break
		|:
			ret
		}

		// Break optimizations if types are not primitive.
		// No need for checking whether types are arithmetic,
		// because relevant operators are conly avaliable for arithmetic primitives.
		lp := m.Left.Kind.Prim()
		if lp == nil {
			ret
		}
		rp := m.Right.Kind.Prim()
		if rp == nil {
			ret
		}

		match m.Op.Id {
		| lex::TokenId.Star:
			ok, x := checkForBitShiftOpt(m.Left, m.Right)
			if ok {
				m.Op = new(lex::Token, *m.Op)
				m.Op.Id = lex::TokenId.Shl
				m.Op.Kind = lex::TokenKind.Shl
				mut c := (&constant::Const)(m.Right.Model)
				c.SetU64(x)
				// No need to set model as UnsafeBinaryExprModel,
				// shl is not checked at runtime, so it is optimize enough.
				ret
			}
		| lex::TokenId.Solidus:
			ok, x := checkForBitShiftOpt(m.Left, m.Right)
			if ok {
				m.Op = new(lex::Token, *m.Op)
				m.Op.Id = lex::TokenId.Shr
				m.Op.Kind = lex::TokenKind.Shr
				mut c := (&constant::Const)(m.Right.Model)
				c.SetU64(x)
				// No need to set model as UnsafeBinaryExprModel,
				// shr is not checked at runtime, so it is optimize enough.
				ret
			}
		| lex::TokenId.Percent:
			mut c := (&constant::Const)(m.Right.Model)
			if c.AsF64() == 0b10 {
				m.Op = new(lex::Token, *m.Op)
				m.Op.Id = lex::TokenId.Amper
				m.Op.Kind = lex::TokenKind.Amper
				c.SetI64(1)
				// No need to set model as UnsafeBinaryExprModel,
				// bitwise and is not checked at runtime, so it is optimize enough.
				ret
			}
		| lex::TokenId.Shl | lex::TokenId.Shr:
			// semantic anlayzer guarantees right operator is unsigned if constant
			z := types::BitsizeOf(lp.Kind)
			s := (&constant::Const)(m.Right.Model).AsU64()
			if s >= u64(z) {
				// shifting greater than bitsize of the left operand
				// discard all bits, result always equals to zero
				*self.model = constant::Const.NewU64(0)
				ret
			}
		|:
			// Eliminate unsupported operators.
			ret
		}
		// Update model as UnsafeBinaryExprModel because it is safe, comptime checked.
		// There is no risk like zero-division.
		mut model := any(&UnsafeBinaryExprModel{Node: m})
		*self.model = unsafe { *(*sema::ExprModel)(&model) }
	}

	fn unary(self, mut m: &sema::UnaryExprModel) {
		if !Ptr {
			ret
		}
		match m.Op.Id {
		| lex::TokenId.Star:
			match type m.Expr.Model {
			| &sema::UnaryExprModel:
				mut um := (&sema::UnaryExprModel)(m.Expr.Model)
				if um.Op.Id == lex::TokenId.Amper {
					// Remove pointer overhead.
					// Expression is: *(&x)
					// Simplify to: x
					*self.model = um.Expr.Model
					ret
				}
				ret
			}
			if !Access {
				ret
			}
			if self.data.nils != nil && isNilValidType(m.Expr.Kind) {
				var := getNilVar(m.Expr.Model)
				if self.data.nils.isSafe(var) {
					mut model := any(&UnsafeDerefExprModel{Base: m})
					*self.model = unsafe { *(*sema::ExprModel)(&model) }
					ret
				}
				// Now this varible is safe until it mutated.
				self.data.nils.pushVar(var, true)
			}
		| lex::TokenId.Amper:
			match type m.Expr.Model {
			| &sema::Var:
				mut v := (&sema::Var)(m.Expr.Model)
				if v.Reference {
					mut model := any(&RefExprModel{Var: v})
					*self.model = unsafe { *(*sema::ExprModel)(&model) }
				}
			}
		}
	}

	fn structureLit(self, mut m: &sema::StructLitExprModel) {
		for (_, mut arg) in m.Args {
			if self.data.boundary != nil {
				if isBoundaryRiskyType(arg.Expr.Kind) {
					possibleBoundaryRemove(self.data.boundary, arg)
				}
			}
			if self.data.nils != nil {
				possibleNilRemove(self.data.nils, arg.Expr.Model)
			}
			if self.data.dynamic != nil {
				possibleDynamicRemove(self.data.dynamic, arg.Expr.Model)
			}
		}
	}

	fn casting(self, mut m: &sema::CastingExprModel) {
		valid := isDynamicValidType(m.ExprKind)
		var := getDynamicVar(m.Expr.Model)
		if valid && self.data.dynamic != nil && self.data.dynamic.isFits(var, m.Kind) {
			mut model := any(&UnsafeCastingExprModel{Base: m})
			*self.model = unsafe { *(*sema::ExprModel)(&model) }
			self.inspector.SkipChild = true
			ret
		}
		if self.data.dynamic != nil && valid {
			self.data.dynamic.pushVar(var, m.Kind)
		}
	}

	fn args(self, mut params: []&sema::ParamIns, mut &args: []sema::ExprModel) {
		for (i, mut arg) in args {
			if i >= len(params) {
				continue
			}
			mut p := params[i]
			if p.Decl.Mutable && p.Decl.Reference {
				if self.data.boundary != nil {
					if isBoundaryRiskyType(p.Kind) {
						possibleBoundaryRemove(self.data.boundary, arg)
					}
				}
				if self.data.nils != nil {
					possibleNilRemove(self.data.nils, arg)
				}
				if self.data.dynamic != nil {
					possibleDynamicRemove(self.data.dynamic, arg)
				}
			}
		}
	}

	fn scope(self, mut &s: &sema::Scope) {
		mut scopt := scopeOptimizer.new(s)
		scopt.data = self.data
		scopt.optimize()
	}

	fn funcCall(self, mut m: &sema::FnCallExprModel) {
		self.args(m.Func.Params, m.Args)
		if m.Except != nil {
			self.scope(m.Except)
		}
	}

	fn indexing(self, mut m: &sema::IndexingExprModel) {
		if !Access {
			ret
		}

		array := m.Expr.Kind.Arr() != nil
		// Constants checked by semantic analysis for arrays, safe.
		if array && m.Index.IsConst() {
			mut model := any(&UnsafeIndexingExprModel{Node: m})
			*self.model = unsafe { *(*sema::ExprModel)(&model) }
			ret
		}

		if self.data.boundary != nil && isBoundaryValidType(m.Expr.Kind) {
			var := getBoundaryVar(m.Expr.Model)
			if self.data.boundary.fitsMaxSize(var, m.Index.Model) {
				mut model := any(&UnsafeIndexingExprModel{Node: m})
				*self.model = unsafe { *(*sema::ExprModel)(&model) }
				ret
			}
			self.data.boundary.pushVar(var, m.Index.Model)
		}
	}

	fn anonFunc(self, mut m: &sema::AnonFnExprModel) {
		self.scope(m.Func.Scope)
	}

	fn do(self) {
		self.inspector.Inspect(*self.model, fn(mut &m: sema::ExprModel) {
			unsafe { self.model = (&sema::ExprModel)(&m) }
			match type m {
			| &sema::BinaryExprModel:
				unsafe { self.binary((&sema::BinaryExprModel)(m)) }
			| &sema::UnaryExprModel:
				unsafe { self.unary((&sema::UnaryExprModel)(m)) }
			| &sema::StructLitExprModel:
				unsafe { self.structureLit((&sema::StructLitExprModel)(m)) }
			| &sema::CastingExprModel:
				unsafe { self.casting((&sema::CastingExprModel)(m)) }
			| &sema::FnCallExprModel:
				unsafe { self.funcCall((&sema::FnCallExprModel)(m)) }
			| &sema::IndexingExprModel:
				unsafe { self.indexing((&sema::IndexingExprModel)(m)) }
			| &sema::AnonFnExprModel:
				unsafe { self.anonFunc((&sema::AnonFnExprModel)(m)) }
			}
		})
	}
}

// Checks for bit-shifting optimizations.
// Reports true if conditions are:
//   - l is integer
//   - r is integer
//   - r is constant
//   - r > 0 && r%2 == 0
//   - log2(r) returns integer without fraction
//
// As a result: returns whether bit-shifting is possible and what nth power of 2^r.
// Assumes the model r is constant.
fn checkForBitShiftOpt(&l: &sema::OperandExprModel, &r: &sema::OperandExprModel): (ok: bool, x: u64) {
	if !types::IsInt(l.Kind.Str()) || !types::IsInt(r.Kind.Str()) {
		ret false, 0
	}
	x = (&constant::Const)(r.Model).AsU64()
	if x == 0 || x%2 != 0 {
		ret false, 0
	}
	j := math::Log2(f64(x))
	z := u64(j)
	if f64(z) != j {
		ret false, 0
	}
	ret true, z
}

// Reports l and r the same lvalue expression.
fn areSameLvalueExprModel(&l: sema::ExprModel, &r: sema::ExprModel): bool {
	match type l {
	| &sema::Var:
		// Compare values directly.
		// If the l and r have same pointers, means same variable.
		ret l == r
	| &sema::StructSubIdentExprModel:
		match type r {
		| &sema::StructSubIdentExprModel:
			break
		|:
			ret false
		}
		lsi := (&sema::StructSubIdentExprModel)(l)
		rsi := (&sema::StructSubIdentExprModel)(r)
		// Compare fields directly.
		// If the l and r have same pointers,
		// means same variable of same struct instance.
		if lsi.Field != rsi.Field {
			ret false
		}
		// Check head expressions used for field access.
		ret areSameLvalueExprModel(lsi.Expr.Model, rsi.Expr.Model)
	| &sema::UnaryExprModel:
		match type r {
		| &sema::UnaryExprModel:
			ul := (&sema::UnaryExprModel)(l)
			ur := (&sema::UnaryExprModel)(r)
			// Unary operators should have the same operator.
			// The operator does not matter.
			if ul.Op.Id != ur.Op.Id || ul.Op.Kind != ur.Op.Kind {
				ret false
			}
			// Check expressions used for unary.
			ret areSameLvalueExprModel(ul.Expr.Model, ur.Expr.Model)
		}
	}
	ret false
}