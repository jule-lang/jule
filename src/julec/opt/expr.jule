// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use math for std::math
use std::jule::constant::{Const}
use std::jule::lex::{TokenId, TokenKind}
use std::jule::sema::{
    Scope,
    Data,
    Var,
    FnIns,
    ExprModel,
    BinaryExprModel,
    OperandExprModel,
    UnaryExprModel,
    StructLitExprModel,
    AllocStructLitExprModel,
    CastingExprModel,
    FnCallExprModel,
    SliceExprModel,
    ArrayExprModel,
    IndexingExprModel,
    AnonFnExprModel,
    MapExprModel,
    SlicingExprModel,
    TraitSubIdentExprModel,
    StructSubIdentExprModel,
    TupleExprModel,
    BuiltinNewCallExprModel,
    BuiltinOutCallExprModel,
    BuiltinOutlnCallExprModel,
    BuiltinPanicCallExprModel,
    BuiltinAssertCallExprModel,
    BuiltinErrorCallExprModel,
    BuiltinMakeCallExprModel,
    BuiltinAppendCallExprModel,
    BuiltinLenCallExprModel,
    BuiltinCapCallExprModel,
    BuiltinDeleteCallExprModel,
    SizeofExprModel,
    AlignofExprModel,
    IntegratedToStrExprModel,
    FreeExprModel,
    BackendEmitExprModel,
}
use types for std::jule::types

// Expression optimizer that applies target-independent optimizations.
struct exprOptimizer {
    mut model: &ExprModel
}

impl exprOptimizer {
    static fn optimize(mut &model: ExprModel) {
        // Do optimizatitons if any enabled.
        if exprEnabled {
            mut exop := &exprOptimizer{
                model: unsafe { (&ExprModel)(&model) },
            }
            exop.do()
        }
    }

    fn strCond(self, mut m: &BinaryExprModel): bool {
        lp := m.Left.Kind.Prim()
        if lp == nil || !lp.IsStr() {
            ret false
        }
        if m.Op.Id != TokenId.Eqs && m.Op.Id != TokenId.NotEq {
            ret false
        }
        match type m.Left.Model {
        | &Const:
            m.Left, m.Right = m.Right, m.Left
            goto opt
        }
        match type m.Right.Model {
        | &Const:
            break
        |:
            ret false
        }
    opt:
        mut c := (&Const)(m.Right.Model)
        match m.Op.Id {
        | TokenId.Eqs:
            if c.ReadStr() == "" {
                mut model := any(&EmptyCompareExprModel{
                    Expr: m.Left.Model,
                    Neg: false,
                })
                *self.model = unsafe { *(*ExprModel)(&model) }
                break
            }
            mut model := any(&StrCompExprModel{
                Left: m.Left.Model,
                Right: c,
                NotEq: false,
            })
            *self.model = unsafe { *(*ExprModel)(&model) }
        | TokenId.NotEq:
            if c.ReadStr() == "" {
                mut model := any(&EmptyCompareExprModel{
                    Expr: m.Left.Model,
                    Neg: true,
                })
                *self.model = unsafe { *(*ExprModel)(&model) }
                break
            }
            mut model := any(&StrCompExprModel{
                Left: m.Left.Model,
                Right: c,
                NotEq: true,
            })
            *self.model = unsafe { *(*ExprModel)(&model) }
        }
        ret true
    }

    fn binary(self, mut m: &BinaryExprModel) {
        exprOptimizer.optimize(m.Left.Model)
        exprOptimizer.optimize(m.Right.Model)

        match type m.Right.Model {
        | &Const:
            break
        |:
            ret
        }

        if Cond && self.strCond(m) {
            ret
        }

        if !Math {
            ret
        }
        match m.Op.Id {
        | TokenId.Star:
            ok, x := checkForBitShiftOpt(m.Left, m.Right)
            if ok {
                m.Op.Id = TokenId.Lshift
                m.Op.Kind = TokenKind.Lshift
                mut c := (&Const)(m.Right.Model)
                c.SetU64(x)
                ret
            }
        | TokenId.Solidus:
            ok, x := checkForBitShiftOpt(m.Left, m.Right)
            if ok {
                m.Op.Id = TokenId.Rshift
                m.Op.Kind = TokenKind.Rshift
                mut c := (&Const)(m.Right.Model)
                c.SetU64(x)
                ret
            }
        | TokenId.Percent:
            mut c := (&Const)(m.Right.Model)
            d := c.AsF64()
            if d == 2 {
                m.Op.Id = TokenId.Amper
                m.Op.Kind = TokenKind.Amper
                c.SetI64(1)
            }
        }
        mut model := any(&UnsafeBinaryExprModel{Node: m})
        *self.model = unsafe { *(*ExprModel)(&model) }
    }

    fn unary(self, mut m: &UnaryExprModel) {
        exprOptimizer.optimize(m.Expr.Model)
        if !Ptr {
            ret
        }
        match m.Op.Id {
        | TokenId.Star:
            match type m.Expr.Model {
            | &UnaryExprModel:
                mut um := (&UnaryExprModel)(m.Expr.Model)
                if um.Op.Id == TokenId.Amper {
                    *self.model = um.Expr.Model
                }
            }
        | TokenId.Amper:
            match type m.Expr.Model {
            | &Var:
                mut v := (&Var)(m.Expr.Model)
                if v.Reference {
                    mut model := any(&RefExprModel{Var: v})
                    *self.model = unsafe { *(*ExprModel)(&model) }
                }
            }
        }
    }

    fn structureLit(self, mut m: &StructLitExprModel) {
        for (_, mut arg) in m.Args {
            exprOptimizer.optimize(arg.Expr.Model)
        }
    }

    fn allocStructure(self, mut m: &AllocStructLitExprModel) {
        self.structureLit(m.Lit)
    }

    fn casting(self, mut m: &CastingExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn args(self, mut &args: []ExprModel) {
        for (i, mut arg) in args {
            exprOptimizer.optimize(arg)
            args[i] = arg
        }
    }

    fn scope(self, mut &s: &Scope) {
        mut scopt := scopeOptimizer.new(s)
        scopt.optimize()
    }

    fn funcCall(self, mut m: &FnCallExprModel) {
        exprOptimizer.optimize(m.Expr)
        self.args(m.Args)
        if m.Except != nil {
            self.scope(m.Except)
        }
    }

    fn slice(self, mut m: &SliceExprModel) {
        self.args(m.Elems)
    }

    fn array(self, mut m: &ArrayExprModel) {
        if len(m.Elems) == 2 && m.Elems[1] == nil {
            mut elem := m.Elems[0]
            exprOptimizer.optimize(elem)
            m.Elems[0] = elem
        }
        self.args(m.Elems)
    }

    fn indexing(self, mut m: &IndexingExprModel) {
        exprOptimizer.optimize(m.Expr.Model)
        exprOptimizer.optimize(m.Index.Model)
        if !Access {
            ret
        }
        array := m.Expr.Kind.Arr() != nil
        // Constants checked by semantic analysis for arrays, safe.
        if array && m.Index.IsConst() {
            mut model := any(&UnsafeIndexingExprModel{Node: m})
            *self.model = unsafe { *(*ExprModel)(&model) }
            ret
        }
        match type m.Index.Model {
        | &Var:
            i := (&Var)(m.Index.Model)
            if i.Mutable || i.IterRelation == nil {
                break
            }
            match type m.Expr.Model {
            | &Var:
                r := (&Var)(m.Expr.Model)
                // Iterated variable is indexed variable?
                if i.IterRelation.Range == r {
                    mut model := any(&UnsafeIndexingExprModel{Node: m})
                    *self.model = unsafe { *(*ExprModel)(&model) }
                }
            }
        }
    }

    fn anonFunc(self, mut m: &AnonFnExprModel) {
        self.scope(m.Func.Scope)
    }

    fn mapExpr(self, mut m: &MapExprModel) {
        for (_, mut pair) in m.Entries {
            exprOptimizer.optimize(pair.Key)
            exprOptimizer.optimize(pair.Val)
        }
    }

    fn slicing(self, mut m: &SlicingExprModel) {
        exprOptimizer.optimize(m.Expr)
        exprOptimizer.optimize(m.Left)
        if m.Right != nil {
            exprOptimizer.optimize(m.Right)
        }
    }

    fn traitSub(self, mut m: &TraitSubIdentExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn structureSub(self, mut m: &StructSubIdentExprModel) {
        exprOptimizer.optimize(m.Expr.Model)
    }

    fn tuple(self, mut m: &TupleExprModel) {
        for (_, mut d) in m.Datas {
            exprOptimizer.optimize(d.Model)
        }
    }

    fn newCall(self, mut m: &BuiltinNewCallExprModel) {
        if m.Init != nil {
            exprOptimizer.optimize(m.Init)
        }
    }

    fn outCall(self, mut m: &BuiltinOutCallExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn outlnCall(self, mut m: &BuiltinOutlnCallExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn panicCall(self, mut m: &BuiltinPanicCallExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn assertCall(self, mut m: &BuiltinAssertCallExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn errorCall(self, mut m: &BuiltinErrorCallExprModel) {
        exprOptimizer.optimize(m.Err.Model)
    }

    fn makeCall(self, mut m: &BuiltinMakeCallExprModel) {
        if m.Len != nil {
            exprOptimizer.optimize(m.Len)
        }
        if m.Cap != nil {
            exprOptimizer.optimize(m.Cap)
        }
    }

    fn appendCall(self, mut m: &BuiltinAppendCallExprModel) {
        exprOptimizer.optimize(m.Dest)
        exprOptimizer.optimize(m.Elements)
    }

    fn lenCall(self, mut m: &BuiltinLenCallExprModel) {
        exprOptimizer.optimize(m.Expr.Model)
    }

    fn capCall(self, mut m: &BuiltinCapCallExprModel) {
        exprOptimizer.optimize(m.Expr.Model)
    }

    fn deleteCall(self, mut m: &BuiltinDeleteCallExprModel) {
        exprOptimizer.optimize(m.Dest.Model)
        if m.Key != nil {
            exprOptimizer.optimize(m.Key.Model)
        }
    }

    fn sizeof(self, mut m: &SizeofExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn alignof(self, mut m: &AlignofExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn integratedToStr(self, mut m: &IntegratedToStrExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn free(self, mut m: &FreeExprModel) {
        exprOptimizer.optimize(m.Expr)
    }

    fn backendEmit(self, mut m: &BackendEmitExprModel) {
        self.args(m.Exprs)
    }

    fn do(self) {
        match type *self.model {
        | &BinaryExprModel:
            self.binary((&BinaryExprModel)(*self.model))
        | &UnaryExprModel:
            self.unary((&UnaryExprModel)(*self.model))
        | &StructLitExprModel:
            self.structureLit((&StructLitExprModel)(*self.model))
        | &AllocStructLitExprModel:
            self.allocStructure((&AllocStructLitExprModel)(*self.model))
        | &CastingExprModel:
            self.casting((&CastingExprModel)(*self.model))
        | &FnCallExprModel:
            self.funcCall((&FnCallExprModel)(*self.model))
        | &SliceExprModel:
            self.slice((&SliceExprModel)(*self.model))
        | &ArrayExprModel:
            self.array((&ArrayExprModel)(*self.model))
        | &IndexingExprModel:
            self.indexing((&IndexingExprModel)(*self.model))
        | &AnonFnExprModel:
            self.anonFunc((&AnonFnExprModel)(*self.model))
        | &MapExprModel:
            self.mapExpr((&MapExprModel)(*self.model))
        | &SlicingExprModel:
            self.slicing((&SlicingExprModel)(*self.model))
        | &TraitSubIdentExprModel:
            self.traitSub((&TraitSubIdentExprModel)(*self.model))
        | &StructSubIdentExprModel:
            self.structureSub((&StructSubIdentExprModel)(*self.model))
        | &TupleExprModel:
            self.tuple((&TupleExprModel)(*self.model))
        | &BuiltinOutCallExprModel:
            self.outCall((&BuiltinOutCallExprModel)(*self.model))
        | &BuiltinOutlnCallExprModel:
            self.outlnCall((&BuiltinOutlnCallExprModel)(*self.model))
        | &BuiltinNewCallExprModel:
            self.newCall((&BuiltinNewCallExprModel)(*self.model))
        | &BuiltinPanicCallExprModel:
            self.panicCall((&BuiltinPanicCallExprModel)(*self.model))
        | &BuiltinAssertCallExprModel:
            self.assertCall((&BuiltinAssertCallExprModel)(*self.model))
        | &BuiltinErrorCallExprModel:
            self.errorCall((&BuiltinErrorCallExprModel)(*self.model))
        | &BuiltinMakeCallExprModel:
            self.makeCall((&BuiltinMakeCallExprModel)(*self.model))
        | &BuiltinAppendCallExprModel:
            self.appendCall((&BuiltinAppendCallExprModel)(*self.model))
        | &BuiltinLenCallExprModel:
            self.lenCall((&BuiltinLenCallExprModel)(*self.model))
        | &BuiltinCapCallExprModel:
            self.capCall((&BuiltinCapCallExprModel)(*self.model))
        | &BuiltinDeleteCallExprModel:
            self.deleteCall((&BuiltinDeleteCallExprModel)(*self.model))
        | &SizeofExprModel:
            self.sizeof((&SizeofExprModel)(*self.model))
        | &AlignofExprModel:
            self.alignof((&AlignofExprModel)(*self.model))
        | &IntegratedToStrExprModel:
            self.integratedToStr((&IntegratedToStrExprModel)(*self.model))
        | &FreeExprModel:
            self.free((&FreeExprModel)(*self.model))
        | &BackendEmitExprModel:
            self.backendEmit((&BackendEmitExprModel)(*self.model))
        }
    }
}

// Checks for bit-shifting optimizations.
// Reports true if conditions are:
//   - l is integer
//   - r is integer
//   - r is constant
//   - r > 0 && r%2 == 0
//   - log2(r) returns integer without fraction
//
// As a result: returns whether bit-shifting is possible and what nth power of 2^r.
fn checkForBitShiftOpt(&l: &OperandExprModel, &r: &OperandExprModel): (ok: bool, x: u64) {
    if !types::IsInt(l.Kind.Str()) || !types::IsInt(r.Kind.Str()) {
        ret false, 0
    }
    match type r.Model {
    | &Const:
        break
    |:
        ret false, 0
    }
    x = (&Const)(r.Model).AsU64()
    if x == 0 || x%2 != 0 {
        ret false, 0
    }
    j := math::Log2(f64(x))
    z := u64(j)
    if f64(z) != j {
        ret false, 0
    }
    ret true, z
}

// Reports l and r the same lvalue expression.
fn areSameLvalueExprModel(&l: ExprModel, &r: ExprModel): bool {
    match type l {
    | &Var:
        // Compare values directly.
        // If the l and r have same pointers, means same variable.
        ret l == r
    | &StructSubIdentExprModel:
        match type r {
        | &StructSubIdentExprModel:
            break
        |:
            ret false
        }
        lsi := (&StructSubIdentExprModel)(l)
        rsi := (&StructSubIdentExprModel)(r)
        // Compare fields directly.
        // If the l and r have same pointers,
        // means same variable of same struct instance.
        if lsi.Field != rsi.Field {
            ret false
        }
        // Check head expressions used for field access.
        ret areSameLvalueExprModel(lsi.Expr.Model, rsi.Expr.Model)
    | &UnaryExprModel:
        match type r {
        | &UnaryExprModel:
            ul := (&UnaryExprModel)(l)
            ur := (&UnaryExprModel)(r)
            // Unary operators should have the same operator.
            // The operator does not matter.
            if ul.Op.Id != ur.Op.Id || ul.Op.Kind != ur.Op.Kind {
                ret false
            }
            // Check expressions used for unary.
            ret areSameLvalueExprModel(ul.Expr.Model, ur.Expr.Model)
        }
    }
    ret false
}