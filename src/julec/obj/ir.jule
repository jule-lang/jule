// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use importer::{PlainImporter}
use mod

use std::jule::build::{Log, LogKind}
use sema for std::jule::sema

// Intermediate representation of code for compiler.
pub struct IR {
    // Directory of root package.
    pub root:    str
    pub passes:  []str
    pub main:    &sema::Package
    pub used:    []&sema::ImportInfo
    pub ordered: OrderedDefines
}

impl IR {
    // Returns compiler IR of source code.
    // Returned IR is lexed, parsed, and analyzed.
    //
    // - Returns nil reference and nil logs if path has not any Jule file.
    // - Returns nil reference and logs if exist any log.
    // - Returns IR and nil logs if everything is fine.
    pub static fn build(path: str, flags: sema::SemaFlag): (&IR, []Log) {
        let mut importer = PlainImporter.new()
        let (mut files, mut logs) = importer.import_package(path, true)
        if logs.len > 0 {
            ret nil, logs
        }
        let root = path

        if files.len == 0 {
            ret nil, nil
        }

        let (mut pkg, logs) = sema::analyze_package(files, importer, flags)
        if logs.len > 0 {
            ret nil, logs
        }

        let mut ir = &IR{
            root: root,
            main: pkg,
            used: importer.all_packages,
        }
        ir.passes = get_all_unique_passes(ir.main, ir.used)

        ret ir, nil
    }
}

impl IR {
    fn append_structs(self, mut &p: &sema::Package, mut &buffer: []&sema::Struct) {
        for (_, mut f) in p.files {
            for (_, mut s) in f.structs {
                if !s.cpp_linked {
                    buffer = append(buffer, s)
                }
            }
        }
    }

    // Returns all structures of main package and used pakcages.
    // Ignores cpp-linked declarations.
    pub fn get_all_structures(mut self): []&sema::Struct {
        let mut buffer: []&sema::Struct = nil

        self.append_structs(self.main, buffer)

        for (_, mut u) in self.used {
            if !u.cpp_linked {
                self.append_structs(u.package, buffer)
            }
        }

        ret buffer
    }

    // Order defines at update ordered field of instance.
    pub fn order(mut self) {
        self.ordered.structs = self.get_all_structures()
        DefineOrderer.order_structures(self.ordered.structs)
    }
}

fn push_passes(mut &p: &sema::Package, mut &passes: []str) {
    for (_, mut f) in p.files {
    push:
        for _, pass in f.passes {
            if pass.text == "" {
                continue
            }
            for _, cpass in passes {
                if cpass == pass.text {
                    continue push
                }
            }
            passes = append(passes, pass.text)
        }
    }
}

fn get_all_unique_passes(mut &pkg: &sema::Package, mut uses: []&sema::ImportInfo): []str {
    let mut passes: []str = nil

    push_passes(pkg, passes)
    for (_, mut u) in uses {
        if !u.cpp_linked {
            push_passes(u.package, passes)
        }
    }

    ret passes
}
