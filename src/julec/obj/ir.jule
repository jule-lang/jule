// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "env"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/importer"
use "std/jule/token"
use "std/jule/sema"

// Intermediate representation of code for compiler.
struct IR {
	// Directory of root package.
	Root:    str
	Passes:  []str
	Main:    &sema::Package
	Runtime: &sema::ImportInfo // std::runtime
	Used:    []&sema::ImportInfo
	Ordered: OrderedDefines
}

impl IR {
	// Returns compiler IR of source code.
	// Returned IR is lexed, parsed, and analyzed.
	//
	// - Returns (nil, nil) logs if path has not any Jule file.
	// - Returns (nil, logs) if exist any log.
	// - Returns IR and nil logs if everything is fine.
	static fn Build(path: str, flags: sema::Flag): (&IR, []build::Log) {
		mut importer := importer::Importer.New(buildCompileInfo())
		const UpdateMod = true // Use root module for project if exist.
		mut files, mut logs := importer.ImportPackage(path, UpdateMod)
		if len(logs) > 0 {
			ret nil, logs
		}
		root := path

		if len(files) == 0 {
			ret nil, nil
		}

		// Push std::runtime package to first file.
		// Each Jule program should import this standard package.
		mut firstFile := files[0]
		pushRuntimeToAST(firstFile)

		mut pkg, logs := sema::AnalyzePackage(files, importer, flags)
		if len(logs) > 0 {
			ret nil, logs
		}

		mut ir := &IR{
			Root: root,
			Main: pkg,
			Used: importer.AllPackages(),
		}
		ir.Passes = getAllUniquePasses(ir.Main, ir.Used)

		// Set up special packages.
		ir.Runtime = pkg.Files[0].Imports[0] // std::runtime

		ret ir, nil
	}
}

impl IR {
	fn appendStructs(self, mut &p: &sema::Package, mut &buffer: []&sema::Struct) {
		for (_, mut f) in p.Files {
			for (_, mut s) in f.Structs {
				if !s.Binded {
					buffer = append(buffer, s)
				}
			}
		}
	}

	// Returns all structures of main package and used pakcages.
	// Ignores binded declarations.
	fn GetAllStructures(mut self): []&sema::Struct {
		let mut buffer: []&sema::Struct = nil
		self.appendStructs(self.Main, buffer)
		for (_, mut u) in self.Used {
			if !u.Binded {
				self.appendStructs(u.Package, buffer)
			}
		}
		ret buffer
	}

	fn appendGlobals(self, mut &p: &sema::Package, mut &buffer: []&sema::Var) {
		for (_, mut f) in p.Files {
			for (_, mut v) in f.Vars {
				if v.Token != nil && !v.Binded && !v.Constant {
					buffer = append(buffer, v)
				}
			}
		}
	}

	// Returns all globals of main package and used pakcages.
	// Ignores binded declarations and constants.
	fn GetAllGlobals(mut self): []&sema::Var {
		let mut buffer: []&sema::Var = nil
		self.appendGlobals(self.Main, buffer)
		for (_, mut u) in self.Used {
			if !u.Binded {
				self.appendGlobals(u.Package, buffer)
			}
		}
		ret buffer
	}

	// Order defines at update ordered field of instance.
	fn Order(mut self) {
		self.Ordered.Globals = self.GetAllGlobals()
		self.Ordered.Structs = self.GetAllStructures()
		order(self.Ordered.Globals)
		order(self.Ordered.Structs)
	}
}

fn pushPasses(mut &p: &sema::Package, mut &passes: []str) {
	for (_, mut f) in p.Files {
	push:
		for _, pass in f.Passes {
			if pass.Text == "" {
				continue
			}
			for _, cpass in passes {
				if cpass == pass.Text {
					continue push
				}
			}
			passes = append(passes, pass.Text)
		}
	}
}

fn getAllUniquePasses(mut &pkg: &sema::Package, mut uses: []&sema::ImportInfo): []str {
	let mut passes: []str = nil

	pushPasses(pkg, passes)
	for (_, mut u) in uses {
		if !u.Binded {
			pushPasses(u.Package, passes)
		}
	}

	ret passes
}

fn buildCompileInfo(): importer::CompileInfo {
	mut info := importer::CompileInfo{
		Prod: env::Production,
		Test: env::Test,
	}

	match env::Compiler {
	| importer::Compiler.Clang:
		info.Compiler = importer::Compiler.Clang
	| importer::Compiler.GCC:
		info.Compiler = importer::Compiler.GCC
	}

	match env::CppStd {
	| importer::CppStd.Cpp14:
		info.CppStd = importer::CppStd.Cpp14
	| importer::CppStd.Cpp17:
		info.CppStd = importer::CppStd.Cpp17
	| importer::CppStd.Cpp20:
		info.CppStd = importer::CppStd.Cpp20
	}

	ret info
}

// See "std/jule" developer reference (9).
fn pushRuntimeToAST(mut &f: &ast::AST) {
	mut decl := &ast::UseDecl{
		Token: nil, // Nil token is a flag for implicit declaration.
		Path: &token::Token{Id: token::Id.Lit, Kind: `"std/runtime"`},
		Alias: nil,
		Binded: false,
	}
	f.UseDecls = append(f.UseDecls, decl)
	if len(f.UseDecls) > 1 {
		// If we have another use declarations, move decl to first item.
		f.UseDecls[len(f.UseDecls)-1] = f.UseDecls[0]
		f.UseDecls[0] = decl
	}
}