// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/jule/ast"
use "std/jule/sema"
use "std/jule/token"

// Returns directive if exist.
fn FindDirective(mut &directives: []&ast::Directive, tag: str): &ast::Directive {
	for (_, mut dr) in directives {
		if dr.Tag.Kind == tag {
			ret dr
		}
	}
	ret nil
}

// Reports whether directive is exist.
fn HasDirective(&directives: []&ast::Directive, tag: str): bool {
	ret FindDirective(unsafe { *(&directives) }, tag) != nil
}

// Reports whether trait have method in this identifier.
fn ContainsTraitMethod(mut &t: &sema::Trait, &ident: str): bool {
	for _, m in t.Methods {
		if m.Ident == ident {
			ret true
		}
	}
	ret false
}

// Data offset of empty trait.
const emptyTraitOffset = 0

// Returns index of structu ins by trait implements.
fn FindTraitTypeOffsetS(t: &sema::Trait, mut s: &sema::StructIns): int {
	if len(t.Implemented) == 0 {
		ret emptyTraitOffset
	}
	mut i := 0
	for _, si in t.Implemented {
		if s.Decl == si {
			for _, ins in si.Instances {
				if ins == s {
					ret i
				}
				i++
			}
			break
		} else {
			i += len(si.Instances)
		}
	}
	ret -1
}

// Same as [FindTraitTypeOffsetS] but designed for TypeKind based lookup.
// It checks structure instances even used with smart pointer.
fn FindTraitTypeOffset(t: &sema::Trait, mut k: &sema::TypeKind): int {
	if len(t.Implemented) == 0 {
		ret emptyTraitOffset
	}
	let mut s: &sema::StructIns = nil
	if k.Sptr() != nil {
		k = k.Sptr().Elem
	}
	s = k.Struct()
	if s == nil {
		ret -1
	}
	ret FindTraitTypeOffsetS(t, s)
}

// Returns overloaded operator method by operator id.
fn FindOperator(mut &s: &sema::StructIns, op: token::Id, unary: bool): &sema::FnIns {
	match op {
	| token::Id.Eqs:
		ret s.Operators.Eq
	| token::Id.Gt:
		ret s.Operators.Gt
	| token::Id.GtEq:
		ret s.Operators.GtEq
	| token::Id.Lt:
		ret s.Operators.Lt
	| token::Id.LtEq:
		ret s.Operators.LtEq
	| token::Id.Shl:
		ret s.Operators.Shl
	| token::Id.Shr:
		ret s.Operators.Shr
	| token::Id.Plus:
		if unary {
			ret s.Operators.Pos
		}
		ret s.Operators.Add
	| token::Id.Minus:
		if unary {
			ret s.Operators.Neg
		}
		ret s.Operators.Sub
	| token::Id.Solidus:
		ret s.Operators.Div
	| token::Id.Star:
		ret s.Operators.Mul
	| token::Id.Percent:
		ret s.Operators.Mod
	| token::Id.Amper:
		ret s.Operators.BitAnd
	| token::Id.Vline:
		ret s.Operators.BitOr
	| token::Id.Caret:
		if unary {
			ret s.Operators.BitNot
		}
		ret s.Operators.BitXor
	| token::Id.PlusEq:
		ret s.Operators.AddAssign
	| token::Id.MinusEq:
		ret s.Operators.SubAssign
	| token::Id.SolidusEq:
		ret s.Operators.DivAssign
	| token::Id.StarEq:
		ret s.Operators.MulAssign
	| token::Id.PercentEq:
		ret s.Operators.ModAssign
	| token::Id.ShlEq:
		ret s.Operators.ShlAssign
	| token::Id.ShrEq:
		ret s.Operators.ShrAssign
	| token::Id.VlineEq:
		ret s.Operators.BitOrAssign
	| token::Id.AmperEq:
		ret s.Operators.BitAndAssign
	| token::Id.CaretEq:
		ret s.Operators.BitXorAssign
	|:
		ret nil
	}
}

// Returns function instance by generics.
// Assumes generics parameter have enough and same size with generic count of f.
// Panics if not exist any instance.
fn FindFnGenericInstance(mut &f: &sema::Fn, generics: ...&sema::TypeKind): &sema::FnIns {
lookup:
	for (_, mut ins) in f.Instances {
		for i in ins.Generics {
			if !ins.Generics[i].Kind.Equal(generics[i]) {
				continue lookup
			}
		}
		ret ins
	}
	panic("obj: generic instance lookup failed, this is an implementation mistake")
}

// Returns struct instance by generics.
// Assumes generics parameter have enough and same size with generic count of s.
// Panics if not exist any instance.
fn FindStructGenericInstance(mut &s: &sema::Struct, generics: ...&sema::TypeKind): &sema::StructIns {
lookup:
	for (_, mut ins) in s.Instances {
		for i in ins.Generics {
			if !ins.Generics[i].Kind.Equal(generics[i]) {
				continue lookup
			}
		}
		ret ins
	}
	panic("obj: generic instance lookup failed, this is an implementation mistake")
}