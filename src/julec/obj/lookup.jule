// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/sema"

// Returns directive if exist.
fn FindDirective(mut &directives: []&ast::Directive, tag: str): &ast::Directive {
	for (_, mut dr) in directives {
		if dr.Tag.Kind == tag {
			ret dr
		}
	}
	ret nil
}

// Reports whether directive is exist.
fn HasDirective(&directives: []&ast::Directive, tag: str): bool {
	ret FindDirective(unsafe { *(&directives) }, tag) != nil
}

// Reports whether trait have method in this identifier.
fn ContainsTraitMethod(mut &t: &sema::Trait, &ident: str): bool {
	for _, m in t.Methods {
		if m.Ident == ident {
			ret true
		}
	}
	ret false
}

// Data offset of empty trait.
const emptyTraitOffset = 0

// Returns index of structu ins by trait implements.
fn FindTraitTypeOffsetS(t: &sema::Trait, mut s: &sema::StructIns): int {
	if len(t.Implemented) == 0 {
		ret emptyTraitOffset
	}
	mut i := 0
	for _, si in t.Implemented {
		if s.Decl == si {
			for _, ins in si.Instances {
				if ins == s {
					ret i
				}
				i++
			}
			break
		} else {
			i += len(si.Instances)
		}
	}
	ret -1
}

// Same as [FindTraitTypeOffsetS] but designed for Type based lookup.
// It checks structure instances even used with smart pointer.
fn FindTraitTypeOffset(t: &sema::Trait, mut k: &sema::Type): int {
	if len(t.Implemented) == 0 {
		ret emptyTraitOffset
	}
	let mut s: &sema::StructIns = nil
	match type k.Kind {
	| &sema::Sptr:
		k = (&sema::Sptr)(k.Kind).Elem
		match type k.Kind {
		| &sema::StructIns:
			s = (&sema::StructIns)(k.Kind)
		}
	| &sema::StructIns:
		s = (&sema::StructIns)(k.Kind)
	}
	if s == nil {
		ret -1
	}
	ret FindTraitTypeOffsetS(t, s)
}

// Returns function instance by generics.
// Assumes generics parameter have enough and same size with generic count of f.
// Panics if not exist any instance.
fn FindFnGenericInstance(mut &f: &sema::Fn, generics: ...&sema::Type): &sema::FnIns {
lookup:
	for (_, mut ins) in f.Instances {
		for i in ins.Generics {
			if !ins.Generics[i].Type.Equal(generics[i]) {
				continue lookup
			}
		}
		ret ins
	}
	panic("obj: generic instance lookup failed, this is an implementation mistake")
}

// Returns struct instance by generics.
// Assumes generics parameter have enough and same size with generic count of s.
// Panics if not exist any instance.
fn FindStructGenericInstance(mut &s: &sema::Struct, generics: ...&sema::Type): &sema::StructIns {
lookup:
	for (_, mut ins) in s.Instances {
		for i in ins.Generics {
			if !ins.Generics[i].Type.Equal(generics[i]) {
				continue lookup
			}
		}
		ret ins
	}
	panic("obj: generic instance lookup failed, this is an implementation mistake")
}

// Returns import if found matched by linkpath.
// Returns nil, if not exist.
fn SelectImport(mut imports: []&sema::ImportInfo, linkpath: str): &sema::ImportInfo {
	for (_, mut imp) in imports {
		if imp.LinkPath == linkpath {
			ret imp
		}
	}
	ret nil
}

// Returns index of variable if found, otherwise returns -1.
fn FindVar(v: &sema::Var, vars: []&sema::Var): int {
	for i, v2 in vars {
		if v == v2 {
			ret i
		}
	}
	ret -1
}