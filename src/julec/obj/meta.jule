// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/jule/sema"

// Linkpath of common packages.
const linkpathRuntime = "std/runtime"
const linkpathStrings = "std/strings"

// Program metadata for the main IR.
// All required packages use this metada collection instead of
// transferring data between algorithms.
// It is safe to read for concurrent implementations.
// In good practice, it should be build once.
// Default value is nil, but it should be initialized before relevant algorithms.
// This variable always assumed as non-nil.
static mut ProgramMeta = (&Meta)(nil)

// Metadata for the strings::Builder.
struct MetaStrBuilder {
	Write:     &sema::FnIns
	WriteByte: &sema::FnIns
	WriteRune: &sema::FnIns
	WriteStr:  &sema::FnIns
}

// Metadata for the runtime package.
struct MetaRuntime {
	ToStr:        &sema::Fn
	ArrayCmp:     &sema::Fn
	RCAdd:        &sema::FnIns
	RCLoad:       &sema::FnIns
	RCDrop:       &sema::FnIns
	RCAddAtomic:  &sema::FnIns
	RCLoadAtomic: &sema::FnIns
	RCDropAtomic: &sema::FnIns
	RuneCount:    &sema::FnIns

	Map:         &sema::Struct
	MapIterator: &sema::Struct
}

// Metadata for common objects.
struct Meta {
	Runtime:    &MetaRuntime
	StrBuilder: &MetaStrBuilder
	EntryPoint: &sema::Fn
}

impl Meta {
	// Collects whole possible metadata from IR.
	static fn Collect(mut ir: &IR): &Meta {
		mut meta := new(Meta)
		meta.Runtime = Meta.CollectRuntime(ir)
		meta.StrBuilder = Meta.CollectStrBuilder(ir)
		ret meta
	}

	// Collects MetaRuntime from IR if possible.
	static fn CollectRuntime(mut &ir: &IR): &MetaRuntime {
		mut p := SelectImport(ir.Used, linkpathRuntime)
		if p == nil {
			ret nil
		}
		mut meta := new(MetaRuntime)

		// Functions.
		meta.ToStr = RuntimeFindFn(p, "toStr")
		meta.ArrayCmp = RuntimeFindFn(p, "arrayCmp")
		meta.RCAdd = RuntimeFindFn(p, "_RCAdd").Instances[0]
		meta.RCLoad = RuntimeFindFn(p, "_RCLoad").Instances[0]
		meta.RCDrop = RuntimeFindFn(p, "_RCDrop").Instances[0]
		meta.RCAddAtomic = RuntimeFindFn(p, "_RCAddAtomic").Instances[0]
		meta.RCLoadAtomic = RuntimeFindFn(p, "_RCLoadAtomic").Instances[0]
		meta.RCDropAtomic = RuntimeFindFn(p, "_RCDropAtomic").Instances[0]
		meta.RuneCount = RuntimeFindFn(p, "runeCount").Instances[0]

		// Structs.
		meta.Map = RuntimeFindStruct(p, "_Map")
		meta.MapIterator = RuntimeFindStruct(p, "mapIterator")

		ret meta
	}

	// Collects MetaStrBuilder from IR if possible.
	static fn CollectStrBuilder(mut &ir: &IR): &MetaStrBuilder {
		const Binded = false
		const Static = false
		mut p := SelectImport(ir.Used, linkpathStrings)
		if p == nil {
			ret nil
		}
		mut b := p.FindTypeAlias("Builder", Binded).TypeSym.Type.Struct()
		mut meta := new(MetaStrBuilder)
		const metav = comptime::ValueOf(*meta)
		const for _, f in metav.Type().Decl().Fields() {
			metav.Field(f.Name()).Unwrap() = b.FindMethod(f.Name(), Static).Instances[0]
		}
		ret meta
	}
}