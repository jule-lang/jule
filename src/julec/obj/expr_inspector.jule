// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/sema"

// Expression model inspector.
struct ExprInspector {
	// If it is true, skips child expression models of current handled model if exist.
	// For exmaple, after handling binary expression, walker skips left and right operands.
	SkipChild: bool

	handler: fn(mut &m: sema::ExprModel)
}

impl ExprInspector {
	// Returns new inspector.
	static fn New(): &ExprInspector {
		ret new(ExprInspector)
	}

	fn args(mut self, mut args: []sema::ExprModel) {
		for (_, mut arg) in args {
			self.inspect(arg)
		}
	}

	// Calls internal inspect step by expression model.
	// It's unsafe because this expression is may not be in ordinary order.
	// Internal configurations may change and unexpected behavior may occur.
	// Be careful when using.
	unsafe fn InspectStep(mut self, mut &m: sema::ExprModel) {
		self.inspect(m)
	}

	fn inspect(mut self, mut &m: sema::ExprModel) {
		self.SkipChild = false
		self.handler(m)
		if self.SkipChild {
			ret
		}
		match type m {
		| &sema::BinaryExprModel:
			mut b := (&sema::BinaryExprModel)(m)
			self.inspect(b.Left.Model)
			self.inspect(b.Right.Model)
		| &sema::UnaryExprModel:
			mut u := (&sema::UnaryExprModel)(m)
			self.inspect(u.Expr.Model)
		| &sema::StructLitExprModel:
			mut lit := (&sema::StructLitExprModel)(m)
			for (_, mut arg) in lit.Args {
				self.inspect(arg.Expr.Model)
			}
		| &sema::AllocStructLitExprModel:
			mut lit := (&sema::AllocStructLitExprModel)(m).Lit
			for (_, mut arg) in lit.Args {
				self.inspect(arg.Expr.Model)
			}
		| &sema::CastingExprModel:
			mut c := (&sema::CastingExprModel)(m)
			self.inspect(c.Expr.Model)
		| &sema::FnCallExprModel:
			mut fc := (&sema::FnCallExprModel)(m)
			self.inspect(fc.Expr)
			self.args(fc.Args)
		| &sema::SliceExprModel:
			mut s := (&sema::SliceExprModel)(m)
			self.args(s.Elems)
		| &sema::ArrayExprModel:
			mut a := (&sema::ArrayExprModel)(m)
			self.args(a.Elems)
		| &sema::IndexingExprModel:
			mut i := (&sema::IndexingExprModel)(m)
			self.inspect(i.Expr.Model)
			self.inspect(i.Index.Model)
		| &sema::MapExprModel:
			mut mp := (&sema::MapExprModel)(m)
			for (_, mut entry) in mp.Entries {
				self.inspect(entry.Key)
				self.inspect(entry.Val)
			}
		| &sema::SlicingExprModel:
			mut s := (&sema::SlicingExprModel)(m)
			self.inspect(s.Expr)
			self.inspect(s.Left)
			if s.Right != nil {
				self.inspect(s.Right)
			}
		| &sema::TraitSubIdentExprModel:
			mut t := (&sema::TraitSubIdentExprModel)(m)
			self.inspect(t.Expr)
		| &sema::StructSubIdentExprModel:
			mut s := (&sema::StructSubIdentExprModel)(m)
			self.inspect(s.Expr.Model)
		| &sema::TupleExprModel:
			mut t := (&sema::TupleExprModel)(m)
			for (_, mut d) in t.Datas {
				self.inspect(d.Model)
			}
		| &sema::BuiltinNewCallExprModel:
			mut b := (&sema::BuiltinNewCallExprModel)(m)
			if b.Init != nil {
				self.inspect(b.Init)
			}
		| &sema::BuiltinPrintCallExprModel:
			mut c := (&sema::BuiltinPrintCallExprModel)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinPrintlnCallExprModel:
			mut c := (&sema::BuiltinPrintlnCallExprModel)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinPanicCallExprModel:
			mut c := (&sema::BuiltinPanicCallExprModel)(m)
			self.inspect(c.Expr)
		| &sema::BuiltinErrorCallExprModel:
			mut c := (&sema::BuiltinErrorCallExprModel)(m)
			self.inspect(c.Err.Model)
		| &sema::BuiltinMakeCallExprModel:
			mut b := (&sema::BuiltinMakeCallExprModel)(m)
			if b.Len != nil {
				self.inspect(b.Len)
			}
			if b.Cap != nil {
				self.inspect(b.Cap)
			}
		| &sema::BuiltinAppendCallExprModel:
			mut b := (&sema::BuiltinAppendCallExprModel)(m)
			self.inspect(b.Dest)
			self.inspect(b.Elements)
		| &sema::BuiltinLenCallExprModel:
			mut l := (&sema::BuiltinLenCallExprModel)(m)
			self.inspect(l.Expr.Model)
		| &sema::BuiltinCapCallExprModel:
			mut c := (&sema::BuiltinCapCallExprModel)(m)
			self.inspect(c.Expr.Model)
		| &sema::BuiltinDeleteCallExprModel:
			mut b := (&sema::BuiltinDeleteCallExprModel)(m)
			self.inspect(b.Dest.Model)
			if b.Key != nil {
				self.inspect(b.Key.Model)
			}
		| &sema::SizeofExprModel:
			mut s := (&sema::SizeofExprModel)(m)
			self.inspect(s.Expr)
		| &sema::AlignofExprModel:
			mut a := (&sema::AlignofExprModel)(m)
			self.inspect(a.Expr)
		| &sema::FreeExprModel:
			mut f := (&sema::FreeExprModel)(m)
			self.inspect(f.Expr)
		| &sema::BackendEmitExprModel:
			mut e := (&sema::BackendEmitExprModel)(m)
			self.args(e.Exprs)
		}
	}

	// Inspect expression model.
	// Resets [SkipChild] to default.
	// Inspector guarantees the parameter m will always point to original model.
	fn Inspect(mut self, mut &m: sema::ExprModel, f: fn(mut &m: sema::ExprModel)) {
		self.handler = f
		self.inspect(m)
	}
}