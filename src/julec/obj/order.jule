// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::sema::{Struct, Var}

// Collection for ordered defines.
struct OrderedDefines {
    Structs: []&Struct
    Globals: []&Var
}

// Reports whether type in correct order by dependencies.
fn isOrdered[T](&t: &T, s: []&T): bool {
lookup:
    for _, d in t.Depends {
        const match type T {
        | Var:
            if d.Constant {
                // Skip constant variables for dependency analysis.
                // It is not cost for runtime, so it is not an real-memory dependency.
                continue
            }
        }
        for _, o in s {
            if d == o {
                continue lookup
            }
        }
        // Dependency is not ordered.
        // All dependencies should be ordered first.
        ret false
    }
    ret true
}

fn order[T](mut &s: []&T) {
    mut i := 0
repeat:
    mut j := i
iter:
    for j < len(s); j++ {
        mut t := s[j]
        for _, o in s[:i] {
            if t == o {
                // Do not iterate if already iterated and added to ordered list.
                continue iter
            }
        }
        if isOrdered(t, s[:i]) {
            if i != j {
                s[i], s[j] = s[j], s[i]
            }
            i++
        }
    }
    if i < len(s) {
        goto repeat
    }
}