// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::sema::{Struct, Var}

// Collection for ordered defines.
struct OrderedDefines {
    Structs: []&Struct
    Globals: []&Var
}

struct defineOrderer {}

impl defineOrderer {
    // Reports whether type in correct order by dependencies.
    // Checked "t" should have minimum 1 dependency.
    static fn isCommonOrdered[T](&s: []T, t: T): bool {
        for _, d in t.Depends {
            if d.CppLinked {
                continue
            }
            for _, t2 in s {
                if d == t2 {
                    break
                } else if t2 == t {
                    ret false
                }
            }
        }
        ret true
    }

    // Orders common types by their dependencies.
    // Type's dependencies always comes first itself.
    static fn orderCommon[T](mut &s: []T) {
        let mut i = 0
        for (j, mut t) in s {
            if t.CppLinked || len(t.Depends) == 0 {
                s.swap(i, j)
                i++
            }
        }

        let mut j = i
        for j < len(s); j++ {
            let mut k = i
            for k < len(s)-1; k++ {
                if !defineOrderer.isCommonOrdered[T](s, s[k]) {
                    s.swap(k, k + 1)
                }
            }
        }
    }

    // Orders structures by their dependencies.
    // Struct's dependencies always comes first itself.
    static fn orderStructures(mut &structs: []&Struct) {
        defineOrderer.orderCommon[&Struct](structs)
    }

    // Orders variables by their dependencies.
    // Var's dependencies always comes first itself.
    static fn orderVars(mut &vars: []&Var) {
        defineOrderer.orderCommon[&Var](vars)
    }
}