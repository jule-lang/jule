// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::sema::{Package, Struct, Var}

// Collection for ordered defines.
pub struct OrderedDefines {
    pub structs: []&Struct
    pub globals: []&Var
}

pub struct DefineOrderer {}

impl DefineOrderer {
    // Reports whether type in correct order by dependencies.
    // Checked "t" should have minimum 1 dependency.
    static fn is_common_ordered[T](&s: []&T, t: &T): bool {
        let mut p = &t.depends[0]
        let end = p + t.depends.len
        for _, tt in s {
            unsafe {
                if tt == t {
                    break
                }
                if (*p).cpp_linked || (*p).depends.len == 0 || tt == *p {
                    p++
                    if p == end {
                        ret true
                    }
                }
            }
        }
        ret false
    }

    // Orders common types by their dependencies.
    // Type's dependencies always comes first itself.
    pub static fn order_common[T](mut &s: []&T) {
        let mut i = 0
        for (j, mut t) in s {
            if t.cpp_linked || t.depends.len == 0 {
                s[i], s[j] = t, s[i]
                i++
            }
        }

        let mut j = i
        for j < s.len; j++ {
            let mut k = i
            for k < s.len-1; k++ {
                if !DefineOrderer.is_common_ordered[T](s, s[k]) {
                    s[k], s[k+1] = s[k+1], s[k]
                }
            }
        }
    }

    // Orders variables by their dependencies.
    // Variable's dependencies always comes first itself.
    pub static fn order_variables(mut &vars: []&Var) {
        DefineOrderer.order_common[Var](vars)
    }

    // Orders structures by their dependencies.
    // Struct's dependencies always comes first itself.
    pub static fn order_structures(mut &structs: []&Struct) {
        DefineOrderer.order_common[Struct](structs)
    }
}
