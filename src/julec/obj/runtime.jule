// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use sema for std::jule::sema

enum RuntimeFunc: str {
	arrayCmp: "arrayCmp",
	toStr: "toStr",
	_RCAdd: "_RCAdd",
	_RCLoad: "_RCLoad",
	_RCDrop: "_RCDrop",
	_RCAddAtomic: "_RCAddAtomic",
	_RCLoadAtomic: "_RCLoadAtomic",
	_RCDropAtomic: "_RCDropAtomic",
}

fn RuntimeFindFn(mut &runtime: &sema::ImportInfo, ident: RuntimeFunc): &sema::Fn {
	const Binded = false
	mut f := runtime.FindFn(ident, Binded)
	if f == nil {
		outln(ident)
		panic("runtime function is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}

enum RuntimeStruct: str {
	_Map: "_Map",
	mapIterator: "mapIterator",
}

fn RuntimeFindStruct(mut &runtime: &sema::ImportInfo, ident: RuntimeStruct): &sema::Struct {
	const Binded = false
	mut f := runtime.FindStruct(ident, Binded)
	if f == nil {
		panic("runtime struct is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}