// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/comptime"
use "std/jule/build"
use "std/jule/sema"
use "std/os/filepath"
use "std/strings"

// Reports whether exceptional scope s forwards exceptional.
fn IsForwarded(&s: &sema::Scope): bool {
	last := s.Stmts[len(s.Stmts)-1]
	match type last {
	| &sema::Data:
		match type (&sema::Data)(last).Model {
		| &sema::BuiltinErrorCallExprModel:
			ret true
		|:
			ret false
		}
	|:
		ret true
	}
}

// Reports whether expression comes from binded define.
fn IsExprComesFromBind(&d: &sema::Data): bool {
	match type d.Model {
	| &sema::Var:
		ret (&sema::Var)(d.Model).Binded
	| &sema::StructSubIdentExprModel:
		ret (&sema::StructSubIdentExprModel)(d.Model).Owner.Decl.Binded
	|:
		ret false
	}
}

// Reports whether type is handled as <any> type.
fn IsAny(mut &t: &sema::TypeKind): bool {
	if t.TypeEnum() != nil {
		ret true
	}
	prim := t.Prim()
	ret prim != nil && prim.IsAny()
}

// Reports whether anonymous function is closure.
fn IsClosure(&m: &sema::AnonFnExprModel): bool { ret len(m.Captured) > 0 }

// Reports whether the m is operator overloading method.
fn IsOpMethod(&m: &sema::Fn): bool {
	if len(m.Generics) > 0 || len(m.Instances) == 0 {
		ret false
	}
	mi := m.Instances[0]
	const tableT = comptime::TypeOf(mi.Owner.Operators).Decl()
	const tableV = comptime::ValueOf(mi.Owner.Operators)
	const for _, field in tableT.Fields() {
		if mi == tableV.Field(field.Name()).Unwrap() {
			ret true
		}
	}
	ret false
}

// Reports the f function of owner is implements a trait's method.
fn IsTraitMethod(mut &owner: &sema::StructIns, &f: &sema::FnIns): bool {
	for (_, mut t) in owner.Decl.Implements {
		if t.FindMethod(f.Decl.Ident) != nil {
			ret true
		}
	}
	ret false
}

// Reports whether f is standard library package p.
// Example use:
//  - IsStdPackage(f, "") for determine the whether f is standard library package
//  - IsStdPackage(f, "math") for "std/math"
//  - IsStdPackage(f, "math/big") for "std/math/big"
fn IsStdPackage(f: str, p: str): bool {
	// Do not handle '/' separators of p, because it
	// valid path separator for all supported platforms.
	ret strings::HasPrefix(f, filepath::Join(build::PathStdlib, p))
}

// Reports whether imp is implicitly imported.
// See developer reference (9).
fn IsImplicitImport(imp: &sema::ImportInfo): bool {
	ret imp.Decl.Token == nil
}