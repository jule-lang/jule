// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use obj::{IR}
use conv for std::conv
use std::fs::{File}
use jule for std::jule
use build for std::jule::build::{
    Directive,
    Derive,
}
use std::jule::lex::{
    Token,
    TokenId,
    is_ignore_ident,
    is_anon_ident,
}
use std::jule::sema::{
    FuncPattern,
    Package,
    SymbolTable,
    Param,
    ParamIns,
    Trait,
    Struct,
    FieldIns,
    Var,
    StructIns,
    Fn,
    FnIns,
    TypeKind,
    Prim,
    Sptr,
    TypeSymbol,
}
use path for std::fs::path
use strings for std::strings
use std::time::{Time}

pub struct SerializationInfo {
    pub compiler:         str
    pub compiler_command: str
}

pub struct ObjectCoder {
    ir:   &IR
    info: SerializationInfo
    f:    &File
}

impl ObjectCoder {
    pub static fn new(mut &ir: &IR, mut &f: &File, info: SerializationInfo): &ObjectCoder {
        let mut oc = &ObjectCoder{
            ir: ir,
            info: info,
            f: f,
        }
        ret oc
    }

    fn write(mut &self, mut s: str) {
        _ = self.f.write([]byte(s))!
    }

    fn head(mut &self) {
        let time = Time.now()
        let abs = time.abs()
        self.write("// Auto generated by JuleC.\n")
        self.write("// JuleC version: ")
        self.write(jule::VERSION)
        self.write("\n")
        self.write("// Date: ")
        self.write(conv::fmt_uint(abs.day, 10))
        self.write("/")
        self.write(conv::fmt_uint(abs.month, 10))
        self.write("/")
        self.write(conv::fmt_uint(abs.year, 10))
        self.write(" (DD/MM/YYYY) UTC\n//\n// Recomended Compile Command;\n// ")
        self.write(self.info.compiler)
        self.write(" ")
        self.write(self.info.compiler_command)
        self.write("\n\n")

        if env::PRODUCTION {
            self.write("#define __JULE_ENABLE__PRODUCTION\n")
        }
        if !env::RC {
            self.write("#define __JULE_DISABLE__REFERENCE_COUNTING\n")
        }
        if !env::SAFETY {
            self.write("#define __JULE_DISABLE__SAFETY\n")
        }
        self.write("\n\n#include \"")
        self.write(build::PATH_API)
        self.write("\"\n\n")
    }

    fn links(mut &self) {
        for _, used in self.ir.used {
            match {
            | !used.cpp_linked:
                continue
            | build::is_std_header_path(used.path):
                self.write("#include ")
                self.write(used.path)
                self.write("\n")
            |:
                self.write("#include \"")
                self.write(used.path)
                self.write("\n")
            }
        }
    }

    pub fn serialize(mut &self) {
        self.head()
        self.links()
    }
}
