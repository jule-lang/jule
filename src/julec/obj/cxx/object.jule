// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use obj::{IR}

use conv for std::conv
use std::jule::{VERSION}
use std::jule::build::{
    Directive,
    Derive,
    INIT_FN,
    PATH_API,
    PATH_STDLIB,
    is_std_header_path,
    is_valid_header_ext,
}
use std::jule::lex::{
    Token,
    TokenId,
    is_ignore_ident,
    is_anon_ident,
}
use std::jule::sema::{
    FuncPattern,
    Package,
    SymbolTable,
    Param,
    ParamIns,
    Trait,
    Struct,
    FieldIns,
    Var,
    StructIns,
    Fn,
    FnIns,
}
use path for std::fs::path
use strings for std::strings
use std::time::{Time}

pub struct SerializationInfo {
    pub compiler: str
    pub compiler_command: str
}

pub struct ObjectCoder {
    ir:   &IR
    info: SerializationInfo

    // Current indention.
    indent_buffer: str

    ec: &ExprCoder
    sc: &ScopeCoder
}

impl ObjectCoder {
    pub static fn new(mut &ir: &IR, info: SerializationInfo): &ObjectCoder {
        let mut oc = &ObjectCoder{
            ir:   ir,
            info: info,
        }
        oc.ec = ExprCoder.new(oc)
        oc.sc = ScopeCoder.new(oc)
        ret oc
    }

    // Increase indentation.
    fn add_indent(mut self) {
        const INDENT_KIND = "\t"
        self.indent_buffer += INDENT_KIND
    }

    // Decrase indentation.
    fn done_indent(mut self) {
        self.indent_buffer = self.indent_buffer[:self.indent_buffer.len - 1]
    }

    // Returns indention string by indent_buffer.
    fn indent(self): str {
        ret self.indent_buffer
    }

    // Returns location information of token as cstr bytes.
    fn loc_info(self, &t: Token): str {
        let mut loc = t.file.path

        // Normalize path if production compilation enabled.
        if env::PRODUCTION {
            match {
            | strings::has_prefix(loc, PATH_STDLIB):
                // Remove absolute path prefix of standard library.
                // Just keeps "std/" prefix.
                loc = loc[path::dir(PATH_STDLIB).len + 1:]
            | strings::has_prefix(loc, self.ir.root):
                // Remove absolute path prefix of root package.
                // Just keeps "[package_dir]/" prefix.
                loc = loc[path::dir(self.ir.root).len + 1:]
            }
        }
        loc += ":"
        loc += conv::itoa(t.row)
        loc += ":"
        loc += conv::itoa(t.column)
        ret cstr_bytes([]byte(loc))
    }

    // Generates all C/C++ include directives.
    fn links(mut self): str {
        let mut obj = ""
        for (_, mut pkg) in self.ir.used {
            match {
            | !pkg.cpp_linked:
                continue
            | is_std_header_path(pkg.path):
                obj += "#include "
                obj += pkg.path
                obj += "\n"
            }
        }

        for (_, mut pkg) in self.ir.used {
            match {
            | !pkg.cpp_linked:
                continue
            | is_cpp_header_file(pkg.path):
                obj += `#include "`
                obj += pkg.path
                obj += "\"\n"
            }
        }
        ret obj
    }

    // Generates C++ code of parameter instance.
    fn param_ins(self, mut &p: &ParamIns): str {
        let mut obj = TypeCoder.param_ins(p)
        obj += " "
        obj += IdentCoder.param(p.decl)
        ret obj
    }

    // Generates C++ code of parameter.
    fn param(mut self, mut &p: &Param): str {
        let mut obj = TypeCoder.param(p)
        if p.ident != "" && !is_ignore_ident(p.ident) && !is_anon_ident(p.ident) {
            obj += " "
            obj += IdentCoder.param(p)
        }
        ret obj
    }

    // Generates C++ code of parameters.
    fn params(mut self, mut &params: []&Param): str {
        match {
        | params.len == 0:
            ret "(void)"
        | params.len == 1 && params[0].is_self():
            ret "(void)"
        }
        let mut obj = "("
        for (_, mut p) in params {
            if !p.is_self() {
                obj += self.param(p) + ","
            }
        }

        // Remove comma.
        obj = obj[:obj.len-1]
        ret obj + ")"
    }

    fn params_ins(mut self, mut &params: []&ParamIns): str {
        match {
        | params.len == 0:
            ret "(void)"
        | params.len == 1 && params[0].decl.is_self():
            ret "(void)"
        }

        let mut obj = "("
        for (_, mut p) in params {
            if !p.decl.is_self() {
                obj += self.param_ins(p) + ","
            }
        }

        // Remove comma.
        obj = obj[:obj.len-1]
        ret obj + ")"
    }

    // Generates C++ declaration code of parameters.
    fn params_decls(mut self, mut &params: []&ParamIns): str {
        match {
        | params.len == 0:
            ret "(void)"
        | params.len == 1 && params[0].decl.is_self():
            ret "(void)"
        }

        let mut obj = "("
        for (_, mut p) in params {
            if !p.decl.is_self() {
                obj += TypeCoder.param_ins(p)
                obj += ","
            }
        }

        // Remove comma.
        obj = obj[:obj.len-1]
        ret obj + ")"
    }

    // Generates C++ code of trait.
    fn trait_def(mut self, mut &t: &Trait): str {
        const INDENTION = "\t"
        let outid = IdentCoder.trait_decl(t)

        let mut obj = "struct "
        obj += outid
        obj += " {\n"
        obj += INDENTION
        obj += "virtual ~"
        obj += outid
        obj += "(void) {}\n\n"
        for (_, mut f) in t.methods {
            obj += INDENTION
            obj += "virtual "
            obj += TypeCoder.func_result(f)
            obj += " _method_"
            obj += f.ident
            obj += self.params(f.params)
            obj += " {"
            if !f.is_void() {
                obj += " return {}; "
            }
            obj += "}\n"
        }
        obj += "};"
        ret obj
    }

    // Generates C++ code of SymbolTable's all traits.
    fn traits_tbl(mut self, mut &tbl: &SymbolTable): str {
        let mut obj = ""
        for (_, mut t) in tbl.traits {
            obj += self.trait_def(t)
            obj += "\n\n"
        }
        ret obj
    }

    // Generates C++ code of package's all traits.
    fn traits_pkg(mut self, mut &pkg: &Package): str {
        let mut obj = ""
        for (_, mut tbl) in pkg.files {
            obj += self.traits_tbl(tbl)
        }
        ret obj
    }

    // Generates C++ code of all traits.
    fn traits(mut self): str {
        let mut obj = ""
        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                obj += self.traits_pkg(u.package)
            }
        }
        obj += self.traits_pkg(self.ir.main)
        ret obj
    }

    // Generates C++ declaration code of trait.
    fn trait_decl(mut self, &t: &Trait): str {
        let mut obj = "struct "
        obj += IdentCoder.trait_decl(t)
        obj += ";"
        ret obj
    }

    // Generates C++ declaration code of all traits.
    fn trait_decls(mut self, mut &p: &Package): str {
        let mut obj = ""
        for (_, mut f) in p.files {
            for _, t in f.traits {
                if t.token.id != TokenId.Na {
                    obj += self.trait_decl(t)
                    obj += "\n"
                }
            }
        }
        ret obj
    }

    // Generates C++ plain-prototype code of structure.
    fn structure_plain_decl(mut self, mut &s: &Struct): str {
        let mut obj = ""
        for (_, mut ins) in s.instances {
            obj += "\nstruct "
            obj += IdentCoder.structure_ins(ins)
            obj += ";\n"
        }
        ret obj
    }

    // Generates C++ plain-prototype code of all structures.
    fn structure_plain_decls(mut self): str {
        let mut obj = ""
        for (_, mut s) in self.ir.ordered.structs {
            if !s.cpp_linked && s.token.id != TokenId.Na {
                obj += self.structure_plain_decl(s)
                obj += "\n"
            }
        }
        ret obj
    }

    // Generates C++ derive code of structure's implemented traits.
    fn structure_traits(mut self, &s: &Struct): str {
        if s.implements.len == 0 {
            ret ""
        }
        let mut obj = ": "
        for _, i in s.implements {
            obj += "public "
            obj += IdentCoder.trait_decl(i)
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
        ret obj
    }

    // Generats C++ code of variable with initialize expression.
    fn var_init_expr(mut self, mut &v: &Var, init: str): str {
        let mut obj = ""
        if v.statically {
            obj += "static "
        }

        obj += TypeCoder.kind(v.kind.kind)
        obj += " "
        if v.reference {
            obj += "&"
        }
        obj += IdentCoder.var(v)
        if init != "" {
            obj += " = "
            obj += init
        }
        obj += ";"
        ret obj
    }

    // Generates C++ code of variable.
    fn var(mut self, mut v: &Var): str {
        if is_ignore_ident(v.ident) {
            ret ""
        }
        if v.value != nil && v.value.expr != nil {
            if v.value.data.model != nil {
                ret self.var_init_expr(v, self.ec.val(v.value))
            }
            ret self.var_init_expr(v, "")
        }
        ret self.var_init_expr(v, self.ec.init_expr(v.kind.kind))
    }

    // Generates C++ declaration code of field.
    fn field_decl(mut self, mut &f: &FieldIns): str {
        let mut obj = TypeCoder.kind(f.kind)
        obj += " "
        obj += IdentCoder.field(f.decl)
        obj += " = "
        if f.default == nil {
            // No default expression.
            // Use default expression of data-type.
            obj += self.ec.init_expr(f.kind)
        } else {
            obj += self.ec.expr(f.default.model)
        }
        obj += ";"
        ret obj
    }

    fn build_structure_self_field_kind(mut self, mut &s: &StructIns): str {
        ret TypeCoder.as_sptr(TypeCoder.structure_ins(s))
    }

    // Generates C++ field declaration code of structure's self field.
    fn structure_self_field(mut self, mut &s: &StructIns): str {
        let mut obj = self.build_structure_self_field_kind(s)
        obj += " self;"
        ret obj
    }

    fn structure_self_field_init_st(mut self, mut &s: &StructIns): str {
        let mut obj = "this->self = "
        obj += self.build_structure_self_field_kind(s)
        obj += "::make(this, nullptr);"
        ret obj
    }

    fn structure_constructor(mut self, mut &s: &StructIns): str {
        let mut obj = IdentCoder.structure_ins(s)

        obj += "("
        if s.fields.len > 0 {
            for (_, mut f) in s.fields {
                obj += TypeCoder.kind(f.kind)
                obj += " __param_"
                obj += f.decl.ident
                obj += ", "
            }
            obj = obj[:obj.len-2] // Remove last comma.
        } else {
            obj += "void"
        }

        obj += ")"
        if s.fields.len > 0 {
            obj += ": "
            for _, f in s.fields {
                obj += IdentCoder.field(f.decl)
                obj += "("
                obj += "__param_"
                obj += f.decl.ident
                obj += "), "
            }
            obj = obj[:obj.len-2] // Remove trailing comma.
        }

        obj += " {"
        if s.decl.has_ref_accessible() {
            obj += "\n"
            self.add_indent()
            obj += self.indent()
            obj += self.structure_self_field_init_st(s)
            obj += "\n"
            self.done_indent()
            obj += "\n"
            obj += self.indent()
        }
        obj += "}"
        ret obj
    }

    fn structure_destructor(mut self, mut &s: &StructIns): str {
        const STATIC = false // Dispose method must be non-static
        let dispose_method = s.find_method("dispose", STATIC)
        let mut disposed = FuncPattern.dispose(dispose_method)
        let ref_access = s.decl.has_ref_accessible()
        // Call destructor if implemented.
        if !ref_access && !disposed {
            ret ""
        }

        let mut obj = "~"
        obj += IdentCoder.structure_ins(s)
        obj += "(void) { "

        if disposed {
            obj += "this->"
            obj += IdentCoder.func(dispose_method)
            obj += "(); "
        }

        if ref_access {
            obj += "this->self.ref = nullptr; "
        }

        obj += "}"
        ret obj
    }

    fn structure_operator_eq(mut self, mut &obj: str, &ident: str, mut &s: &StructIns) {
        // Operator overloading.
        if s.operators.eq != nil {
            self.structure_operator(obj, ident, s.operators.eq, "==")
            ret
        }

        obj += self.indent()
        if env::OPT_INLINE {
            obj += "inline "
        }
        obj += "bool operator==("
        obj += ident
        obj += " _other) {"
        if s.fields.len > 0 {
            self.add_indent()
            obj += "\n"
            obj += self.indent()
            obj += "return "
            self.add_indent()
            let mut n = 0
            for (_, mut f) in s.fields {
                // Skip C++-linked struct kinds.
                let strct = f.kind.strct()
                if strct != nil && strct.decl != nil && strct.decl.cpp_linked {
                    continue
                }

                n++
                obj += "\n"
                obj += self.indent()
                obj += "this->"
                let f_ident = IdentCoder.field(f.decl)
                obj += f_ident
                obj += " == _other."
                obj += f_ident
                obj += " &&"
            }
            self.done_indent()
            if n > 0 {
                obj = obj[:obj.len-3] // Remove last suffix " &&"
            } else {
                obj += "true"
            }
            obj += ";\n"
            self.done_indent()
            obj += self.indent()
            obj += "}"
        } else {
            obj += " return true; }"
        }
        obj += "\n\n"
    }

    fn structure_operator_not_eq(mut self, mut &obj: str, &ident: str, mut &s: &StructIns) {
        obj += self.indent()
        if env::OPT_INLINE {
            obj += "inline "
        }
        obj += "bool operator!=("
        obj += ident
        obj += " _other) { return !this->operator==(_other); }\n\n"
    }

    // Write operator overloading forwarding for reserved function.
    fn structure_operator(mut self, mut &obj: str, &ident: str, mut &f: &FnIns, op: str) {
        if f == nil {
            ret
        }

        let unary = f.params.len == 1 // Just self parameter.
        let assignment = f.decl.is_void()

        obj += self.indent()
        if env::OPT_INLINE {
            obj += "inline "
        }
        if assignment {
            obj += ident
            obj += "&"
        } else {
            if f.result.prim() == nil {
                // If result type is not primitive, always structure's itself.
                obj += ident
            } else {
                // Logical.
                obj += TypeCoder.Bool
            }
        }
        obj += " operator"
        obj += op
        obj += "("
        if !unary {
            let mut p = f.params[1]
            obj += TypeCoder.param_ins(p)
            obj += " _other"
        }
        obj += ") { "
        if !assignment {
            obj += "return "
        }
        obj += "this->"
        obj += IdentCoder.func_ins(f)
        if !unary {
            obj += "(_other); "
            if assignment {
                obj += "return *this; "
            }
            obj += "}"
        } else {
            obj += "(); }"
        }
        obj += "\n\n"
    }

    fn structure_operators(mut self, mut &s: &StructIns): str {
        let ident = IdentCoder.structure_ins(s)
        let mut obj = ""

        // Binary.
        self.structure_operator_eq(obj, ident, s)
        self.structure_operator_not_eq(obj, ident, s)
        self.structure_operator(obj, ident, s.operators.gt, ">")
        self.structure_operator(obj, ident, s.operators.gt_eq, ">=")
        self.structure_operator(obj, ident, s.operators.lt, "<")
        self.structure_operator(obj, ident, s.operators.lt_eq, "<=")
        self.structure_operator(obj, ident, s.operators.shl, "<<")
        self.structure_operator(obj, ident, s.operators.shr, ">>")
        self.structure_operator(obj, ident, s.operators.add, "+")
        self.structure_operator(obj, ident, s.operators.sub, "-")
        self.structure_operator(obj, ident, s.operators.div, "/")
        self.structure_operator(obj, ident, s.operators.mul, "*")
        self.structure_operator(obj, ident, s.operators.mod, "%")
        self.structure_operator(obj, ident, s.operators.bit_and, "&")
        self.structure_operator(obj, ident, s.operators.bit_or, "|")
        self.structure_operator(obj, ident, s.operators.bit_xor, "^")

        // Unary.
        self.structure_operator(obj, ident, s.operators.neg, "-")
        self.structure_operator(obj, ident, s.operators.pos, "+")
        self.structure_operator(obj, ident, s.operators.bit_not, "~")

        // Assignment.
        self.structure_operator(obj, ident, s.operators.add_assign, "+=")
        self.structure_operator(obj, ident, s.operators.sub_assign, "-=")
        self.structure_operator(obj, ident, s.operators.div_assign, "/=")
        self.structure_operator(obj, ident, s.operators.mul_assign, "*=")
        self.structure_operator(obj, ident, s.operators.mod_assign, "%=")
        self.structure_operator(obj, ident, s.operators.shl_assign, "<<=")
        self.structure_operator(obj, ident, s.operators.shr_assign, ">>=")
        self.structure_operator(obj, ident, s.operators.bit_or_assign, "|=")
        self.structure_operator(obj, ident, s.operators.bit_and_assign, "&=")
        self.structure_operator(obj, ident, s.operators.bit_xor_assign, "^=")
        ret obj
    }

    fn structure_derive_defs_decls(mut self, &s: &StructIns): str {
        let mut obj = ""
        if s.decl.is_derives(Derive.Clone) {
            obj += self.indent()
            obj += DeriveCoder.clone_func_decl(s.decl)
            obj += ";\n\n"
        }
        ret obj
    }

    fn structure_ins_decl(mut self, mut &s: &StructIns): str {
        let mut obj = "struct "
        let out_ident = IdentCoder.structure_ins(s)

        obj += out_ident
        obj += self.structure_traits(s.decl)
        obj += " {\n"

        let ref_access = s.decl.has_ref_accessible()

        self.add_indent()
        if ref_access {
            obj += self.indent()
            obj += self.structure_self_field(s)
            obj += "\n\n"
        }
        if s.fields.len > 0 {
            for (_, mut f) in s.fields {
                obj += self.indent()
                obj += self.field_decl(f)
                obj += "\n"
            }
            obj += "\n\n"
            obj += self.indent()
            obj += self.structure_constructor(s)
            obj += "\n\n"
        }

        obj += self.indent()
        obj += self.structure_destructor(s)
        obj += "\n\n"

        // Default constructor.
        obj += self.indent()
        obj += out_ident
        if ref_access {
            obj += "(void) { "
            obj += self.structure_self_field_init_st(s)
            obj += " }\n\n"
        } else {
           obj += "(void) = default;\n\n"
        }

        for (_, mut f) in s.methods {
            obj += self.func_decl(f, true)
            obj += "\n\n"
        }

        obj += self.structure_derive_defs_decls(s)

        obj += self.structure_operators(s)
        obj += "\n"

        self.done_indent()
        obj += self.indent() + "};"
        ret obj
    }

    // Generates C++ declaration code of structure.
    fn structure_decl(mut self, mut &s: &Struct): str {
        let mut obj = ""
        for (_, mut ins) in s.instances {
            obj += self.structure_ins_decl(ins)
            obj += "\n\n"
        }
        ret obj
    }

    // Generates C++ declaration code of all structures.
    fn structure_decls(mut self): str {
        let mut obj = ""
        for (_, mut s) in self.ir.ordered.structs {
            if !s.cpp_linked && s.token.id != TokenId.Na {
                obj += self.structure_decl(s)
                obj += "\n"
            }
        }
        ret obj
    }

    fn func_head(mut self, mut &f: &FnIns, method: bool): str {
        let mut obj = ""

        if method && f.decl.statically {
            obj += "static "
        }

        if env::OPT_INLINE && !f.decl.is_entry_point() {
            obj += "inline "
        }

        obj += TypeCoder.func_ins_result(f)
        obj += " "
        if !method && f.decl.owner != nil {
            obj += IdentCoder.structure_ins(f.owner)
            obj += "::"
        }
        obj += IdentCoder.func_ins(f)
        ret obj
    }

    // Generates C++ declaration code of function's combinations.
    fn func_decl(mut self, mut &f: &Fn, method: bool): str {
        let mut obj = ""
        for (_, mut c) in f.instances {
            obj += self.indent()
            obj += self.func_head(c, method)
            obj += self.params_decls(c.params)
            obj += ";\n"
        }
        ret obj
    }

    // Generates C++ declaration code of all functions.
    fn func_decls(mut self, mut &pkg: &Package): str {
        let mut obj = ""
        for (_, mut file) in pkg.files {
            for (_, mut f) in file.funcs {
                if !f.cpp_linked && f.token.id != TokenId.Na {
                    obj += self.func_decl(f, false)
                }
            }
        }
        ret obj
    }

    // Generates C++ code of all can-be-prototyped declarations.
    fn decls(mut self): str {
        let mut obj = ""

        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                obj += self.trait_decls(u.package)
            }
        }
        obj += self.trait_decls(self.ir.main)


        obj += self.structure_plain_decls()

        obj += self.traits()
        obj += "\n"

        obj += self.structure_decls()

        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                obj += self.func_decls(u.package)
            }
        }
        obj += self.func_decls(self.ir.main)

        ret obj
    }

    fn pkg_globals(mut self, mut &p: &Package, mut &global_initializers: str): str {
        let mut obj = ""
        for (_, mut f) in p.files {
            for (_, mut v) in f.vars {
                if v.token.id != TokenId.Na && !v.cpp_linked && !v.constant {
                    obj += TypeCoder.kind(v.kind.kind)
                    obj += " "
                    if v.reference {
                        obj += "&"
                    }
                    obj += IdentCoder.var(v)
                    obj += ";\n"

                    global_initializers += self.indent() // Indentation for initializer scope.
                    global_initializers += IdentCoder.var(v)
                    if v.value != nil && v.value.expr != nil {
                        if v.value.data.model != nil {
                            global_initializers += " = "
                            global_initializers += self.ec.val(v.value)
                        }
                    } else {
                        global_initializers += " = "
                        global_initializers += self.ec.init_expr(v.kind.kind)
                    }
                    global_initializers += ";\n"
                }
            }
        }
        ret obj
    }

    // Generates C++ code of all globals.
    fn globals(mut self, mut &global_initializers: str): str {
        let mut obj = ""
        self.add_indent() // For global initializers's function indentation.
        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                obj += self.pkg_globals(u.package, global_initializers)
            }
        }
        obj += self.pkg_globals(self.ir.main, global_initializers)
        self.done_indent()
        ret obj
    }

    // Generates C++ code of function.
    fn func(mut self, mut &f: &Fn): str {
        let mut obj = ""
        for (_, mut ins) in f.instances {
            obj += self.func_head(ins, false)
            obj += self.params_ins(ins.params)
            obj += " "
            obj += self.sc.func_scope(ins)
            obj += "\n\n"
        }
        ret obj
    }

    // Generates C++ code of all functions of package.
    fn pkg_funcs(mut self, mut &p: &Package): str {
        let mut obj = ""
        for (_, mut f) in p.files {
            for (_, mut f) in f.funcs {
                if !env::TEST && has_directive(f.directives, Directive.Test) {
                    continue
                }
                if !f.cpp_linked && f.token.id != TokenId.Na {
                    obj += self.func(f)
                    obj += "\n\n"
                }
            }
        }
        ret obj
    }

    // Generates C++ code of structure's methods.
    fn structure_methods(mut self, mut &s: &StructIns): str {
        let mut obj = ""
        for (_, mut f) in s.methods {
            obj += self.indent()
            obj += self.func(f)
            obj += "\n\n"
        }
        ret obj
    }

    // Generates C++ code of structure's ostream.
    fn structure_ostream(mut self, mut &s: &StructIns): str {
        let mut obj = ""
        obj += self.indent()
        obj += "std::ostream &operator<<(std::ostream &_Stream, const "
        obj += IdentCoder.structure_ins(s)
        obj += " &_Src) {\n"
        self.add_indent()
        obj += self.indent()

        let mut fts = s.find_method("to_str", false)
        if FuncPattern.to_str(fts) {
            obj += "_Stream << (("
            obj += IdentCoder.structure_ins(s)
            obj += ")(_Src))."
            obj += IdentCoder.func(fts)
            obj += "();\n"
        } else {
            obj += `_Stream << "`
            obj += s.decl.ident
            obj += "{\";\n"

            for (i, mut f) in s.fields {
                obj += self.indent()
                obj += `_Stream << "`
                obj += f.decl.ident
                obj += `:`

                // Skip C++-linked struct kinds.
                let strct = f.kind.strct()
                if strct != nil && strct.decl != nil && strct.decl.cpp_linked {
                    obj += ` cpp.`
                    obj += IdentCoder.field(f.decl)
                    obj += `"`
                } else {
                    obj += `" << _Src.`
                    obj += IdentCoder.field(f.decl)
                }
                if i+1 < s.fields.len {
                    obj += " << \", \""
                }
                obj += ";\n"
            }

            obj += self.indent()
            obj += "_Stream << \"}\";\n"
        }

        obj += self.indent()
        obj += "return _Stream;\n"

        self.done_indent()
        obj += self.indent()
        obj += "}"
        ret obj
    }

    fn structure_derive_defs(mut self, mut &s: &StructIns): str {
        let mut obj = ""
        if s.decl.is_derives(Derive.Clone) {
            obj += self.indent()
            obj += DeriveCoder.clone_func_def(s.decl)
            obj += "{\n"
            self.add_indent()
            obj += self.indent()
            obj += TypeCoder.structure_ins(s)
            obj += " clone;\n"
            for _, f in s.fields {
                let ident = IdentCoder.field(f.decl)
                obj += self.indent()
                obj += "clone."
                obj += ident
                obj += " = jule::clone(this->"
                obj += ident
                obj += ");\n"
            }
            obj += self.indent()
            obj += "return clone;\n"
            self.done_indent()
            obj += self.indent()
            obj += "}"
        }
        ret obj
    }

    // Generates C++ code of structure instance definition.
    fn structure_ins(mut self, mut &s: &StructIns): str {
        let mut obj = self.structure_methods(s)
        obj += "\n\n"
        obj += self.structure_derive_defs(s)
        obj += "\n\n"
        obj += self.structure_ostream(s)
        ret obj
    }

    // Generates C++ code of structure definition.
    fn structure(mut self, mut &s: &Struct): str {
        let mut obj = ""
        for (_, mut ins) in s.instances {
            obj += self.structure_ins(ins)
            obj += "\n\n"
        }
        ret obj
    }

    // Generates C++ code of all structures.
    fn structures(mut self): str {
        let mut obj = ""
        for (_, mut s) in self.ir.ordered.structs {
            if !s.cpp_linked && s.token.id != TokenId.Na {
                obj += self.structure(s)
                obj += "\n\n"
            }
        }
        ret obj
    }

    // Generates C++ code of all functions.
    fn funcs(mut self): str {
        let mut obj = ""
        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                obj += self.pkg_funcs(u.package)
            }
        }
        obj += self.pkg_funcs(self.ir.main)
        ret obj
    }

    fn push_init(self, mut &pkg: &Package, mut &obj: str) {
        const INDENTION = "\t"
        for _, file in pkg.files {
            for _, f in file.funcs {
                if f.ident == INIT_FN {
                    obj += "\n" + INDENTION
                    obj += IdentCoder.func(f)
                    obj += "();"
                }
            }
        }
    }

    // Generated C++ code of all initializer functions.
    fn init_caller(mut self, &global_initializers: str): str {
        let mut obj = "void "
        obj += INIT_CALLER_IDENT
        obj += "(void) {\n"
        obj += global_initializers

        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                self.push_init(u.package, obj)
            }
        }
        self.push_init(self.ir.main, obj)

        obj += "\n}"
        ret obj
    }

    // Appends standard codes to object code.
    // Usually includes top comments and entry point of program.
    pub fn append_standard(self, mut &obj_code: str) {
        let time = Time.now().abs()

        let mut time_str = ""
        time_str += conv::fmt_uint(time.day, 10)
        time_str += "/"
        time_str += conv::fmt_uint(time.month, 10)
        time_str += "/"
        time_str += conv::fmt_uint(time.year, 10)
        time_str += " "
        time_str += conv::fmt_uint(time.hour, 10)
        time_str += "."
        time_str += conv::fmt_uint(time.minute, 10)
        time_str += " (DD/MM/YYYY) (HH.MM) UTC"

        let mut s = ""
        s += "// Auto generated by JuleC.\n"
        s += "// JuleC version: "
        s += VERSION
        s += "\n"
        s += "// Date: "
        s += time_str
        s += "\n//\n// Recommended Compile Command;\n// "
        s += self.info.compiler
        s += " "
        s += self.info.compiler_command
        s += "\n\n"

        if env::PRODUCTION {
            s += "#define __JULE_ENABLE__PRODUCTION\n"
        }
        if !env::RC {
            s += "#define __JULE_DISABLE__REFERENCE_COUNTING\n"
        }
        if !env::SAFETY {
            s += "#define __JULE_DISABLE__SAFETY\n"
        }

        s += "\n\n#include \""
        s += PATH_API
        s += "\"\n\n"
        s += obj_code
        s += `
int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    `
        if env::TEST {
            s += "test_point();"
        } else {
            s += "entry_point();"
        }

        s += `

    return EXIT_SUCCESS;
}`
        obj_code = s
    }

    // Serializes IR to C++.
    // Returns fully implemented IR in C++.
    // Except standard content, to add standard content, use [ObjectCoder.append_standard].
    pub fn serialize(mut self): str {
        let mut global_initializers = ""
        let mut obj = ""
        obj += self.links()
        obj += "\n"
        obj += self.decls()
        obj += "\n\n"
        obj += self.globals(global_initializers)
        obj += "\n"
        obj += self.structures()
        obj += self.funcs()
        obj += "\n"
        obj += self.init_caller(global_initializers)
        obj += "\n"
        ret obj
    }
}

fn is_cpp_header_file(path: str): bool {
    let offset = strings::find_last_byte(path, '.')
    if offset == -1 {
        ret false
    }
    ret is_valid_header_ext(path[offset:])
}
