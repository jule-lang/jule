// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use std::jule::constant::{Const}
use std::jule::lex::{TokenKind, is_ignore_ident, is_anon_ident}
use std::jule::sema::{
    Data,
    St,
    FnIns,
    Var,
    Scope,
    If,
    Else,
    Conditional,
    InfIter,
    WhileIter,
    RangeIter,
    ContSt,
    BreakSt,
    Label,
    GotoSt,
    Postfix,
    Assign,
    MultiAssign,
    Match,
    Case,
    FallSt,
    RetSt,
    Recover,
    FnCallExprModel,
    TupleExprModel,
    TypeKind,
    BuiltinAppendCallExprModel,
}

fn iter_expr_is_copy_optimizable(&expr: &Data, &v: &Var): bool {
    ret (!expr.lvalue || !expr.mutable) && !v.mutable || v.kind.kind.mutable()
}

fn gen_range_index_iter(mut &it: &RangeIter): str {
    let begin = iter_begin_label_ident(uintptr(&it))
    let next = iter_next_label_ident(uintptr(&it))

    let mut obj = "{\n"
    add_indent()
    obj += indent()
    obj += "auto "
    if *env::OPT_COPY && it.expr.lvalue && !it.expr.mutable {
        obj += "&"
    }
    obj += "expr = "
    obj += gen_expr_model(it.expr.model)
    obj += ";\n"
    obj += indent()
    obj += "auto it = expr.begin();\n"
    obj += indent()
    obj += begin
    obj += ":;\n"
    obj += indent()
    obj += "if (it != expr.end()) {\n"
    add_indent()
    obj += indent()
    if real(it.key_a) {
        obj += gen_var_init_expr(it.key_a, "it - expr.begin()");
        obj += "\n"
        obj += indent()
    }
    if real(it.key_b) {
        if *env::OPT_COPY {
            it.key_b.reference = iter_expr_is_copy_optimizable(it.expr, it.key_b)
        }
        obj += gen_var_init_expr(it.key_b, "*it")
        obj += "\n"
        obj += indent()
    }
    obj += gen_scope(it.scope)
    obj += "\n"
    obj += indent()
    obj += next;
    obj += ":;\n"
    obj += indent()
    obj += "++it;\n"
    obj += indent()
    if real(it.key_a) {
        obj += var_out_ident(it.key_a);
        obj += "++;\n"
        obj += indent()
    }
    obj += "goto "
    obj += begin
    obj += ";\n"

    // Close if.
    done_indent()
    obj += indent()
    obj += "}\n"

    obj += indent()
    obj += iter_end_label_ident(uintptr(&it))
    obj += ":;\n"

    // Close scope.
    done_indent()
    obj += indent()
    obj += "}"

    ret obj
}

fn gen_range_hashmap_iter(mut &it: &RangeIter): str {
    let begin = iter_begin_label_ident(uintptr(&it))
    let next = iter_next_label_ident(uintptr(&it))

    let mut obj = "{\n"
    add_indent()
    obj += indent()
    obj += "auto "
    if *env::OPT_COPY && it.expr.lvalue && !it.expr.mutable {
        obj += "&"
    }
    obj += "expr = "
    obj += gen_expr_model(it.expr.model)
    obj += ";\n"
    obj += indent()
    obj += "auto it = expr.begin();\n"
    obj += indent()
    obj += begin
    obj += ":;\n"
    obj += indent()
    obj += "if (it != expr.end()) {\n"
    add_indent()
    obj += indent()
    if real(it.key_a) {
        if *env::OPT_COPY {
            it.key_a.reference = iter_expr_is_copy_optimizable(it.expr, it.key_a)
        }
        obj += gen_var_init_expr(it.key_a, "it->first")
        obj += "\n"
        obj += indent()
    }
    if real(it.key_b) {
        if *env::OPT_COPY {
            it.key_b.reference = iter_expr_is_copy_optimizable(it.expr, it.key_b)
        }
        obj += gen_var_init_expr(it.key_b, "it->second")
        obj += "\n"
        obj += indent()
    }
    obj += gen_scope(it.scope)
    obj += "\n"
    obj += indent()
    obj += next;
    obj += ":;\n"
    obj += indent()
    obj += "++it;\n"
    obj += indent()
    obj += "goto "
    obj += begin
    obj += ";\n"

    // Close if.
    done_indent()
    obj += indent()
    obj += "}\n"

    obj += indent()
    obj += iter_end_label_ident(uintptr(&it))
    obj += ":;\n"

    // Close scope.
    done_indent()
    obj += indent()
    obj += "}"

    ret obj
}

fn gen_if(mut i: &If): str {
    let mut obj = "if ("
    obj += gen_expr(i.expr)
    obj += ") "
    obj += gen_scope(i.scope)
    ret obj
}

fn gen_conditional(mut c: &Conditional): str {
    let mut obj = gen_if(c.elifs[0])

    for (_, mut elif) in c.elifs[1:] {
        obj += " else "
        obj += gen_if(elif)
    }

    if real(c.default) {
        obj += " else "
        obj += gen_scope(c.default.scope)
    }

    ret obj
}

fn gen_inf_iter(mut it: &InfIter): str {
    let mut obj = "for (;;) {\n"

    add_indent() // Indent scope.
    obj += indent()
    obj += gen_scope(it.scope)
    done_indent()

    let indent = indent()

    obj += "\n"
    obj += indent
    obj += iter_next_label_ident(uintptr(&it))
    obj += ":;\n"
    obj += indent
    obj += "}\n"
    obj += indent
    obj += iter_end_label_ident(uintptr(&it))
    obj += ":;"

    ret obj
}

fn gen_while_iter(mut it: &WhileIter): str {
    let mut obj = ""
    if it.expr != nil && it.next == nil {
        obj += "while ("
        obj += gen_expr(it.expr)
        obj += ") {\n"
    } else {
        obj += "for (; "
        if it.expr != nil {
            obj += gen_expr(it.expr)
        }
        obj += "; "
        if it.next != nil {
            let st = gen_st(it.next)
            obj += st[:st.len - 1]
        }
        obj += ") {\n"
    }

    add_indent()
    obj += indent()
    obj += gen_scope(it.scope)
    obj += "\n"
    done_indent()
    obj += indent()

    obj += iter_next_label_ident(uintptr(&it))
    obj += ":;\n"
    obj += indent()
    obj += "}\n"
    obj += indent()
    obj += iter_end_label_ident(uintptr(&it))
    obj += ":;"
    ret obj
}

fn gen_range_iter(mut it: &RangeIter): str {
    match {
    | real(it.expr.kind.slc()): ret gen_range_index_iter(it)
    | real(it.expr.kind.arr()): ret gen_range_index_iter(it)
    | real(it.expr.kind.map()): ret gen_range_hashmap_iter(it)
    |:                          ret gen_range_index_iter(it) // Str
    }
}

fn gen_cont(c: &ContSt): str {
    let mut obj = "goto "
    obj += iter_next_label_ident(c.it)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_label(l: &Label): str {
    ret label_ident(l.ident) + ":;"
}

fn gen_goto(gt: &GotoSt): str {
    let mut obj = "goto "
    obj += label_ident(gt.ident)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_postfix(mut p: &Postfix): str {
    let mut obj = "("
    obj += gen_expr(p.expr)
    obj += ")"
    obj += p.op
    obj += CPP_ST_TERM
    ret obj
}

fn gen_div_by_zero_assign(mut a: &Assign): str {
    let mut obj = gen_expr(a.l)
    obj += " = "
    obj += gen_div_by_zero_binop_expr_model(a.op[:1], a.l, a.r)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_assign(mut a: &Assign): str {
    match a.op {
    | str(TokenKind.SolidusEq)
    | str(TokenKind.PercentEq):
        ret gen_div_by_zero_assign(a)
    }

    let mut obj = gen_expr(a.l)
    obj += a.op
    if *env::OPT_APPEND {
        match type a.r {
        | &BuiltinAppendCallExprModel:
            let mut model = (&BuiltinAppendCallExprModel)(a.r)
            let (expr, optimized) = gen_builtin_append_call_expr_model_assign(a.l, model)
            if optimized {
                ret expr
            }
            obj += expr

        |:
            obj += gen_expr(a.r)
        }
    } else {
        obj += gen_expr(a.r)
    }
    obj += CPP_ST_TERM
    ret obj
}

fn gen_multi_assign(mut a: &MultiAssign): str {
    let mut obj = "std::tie("

    for (_, mut l) in a.l {
        if l == nil {
            obj += CPP_IGNORE
            obj += ","
        } else {
            obj += gen_expr(l)
            obj += ","
        }
    }
    obj = obj[:obj.len-1] // Remove last comma.

    obj += ") = "
    obj += gen_expr(a.r)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_case(mut m: &Match, mut c: &Case): str {
    const MATCH_EXPR = "_match_expr"

    let end = case_end_label_ident(uintptr(&c))
    let mut obj = ""

    if c.exprs.len > 0 && !m.is_generic_type_match() {
        obj += "if (!("
        for (i, mut expr) in c.exprs {
            match {
            | !m.type_match:
                obj += "("
                obj += gen_expr(expr)
                obj += ")"

                if m.expr.is_const() {
                    if !m.expr.constant.is_bool() || !m.expr.constant.read_bool() {
                        obj += " == "
                        obj += gen_expr_model(m.expr.model)
                    }
                } else {
                    obj += " == "
                    obj += MATCH_EXPR
                }

            |:
                obj += MATCH_EXPR
                obj += ".type_is<"
                obj += gen_expr(expr)
                obj += ">()"
            }

            if i+1 < c.exprs.len {
                obj += " || "
            }
        }
        obj += ")) { goto "
        obj += end
        obj += "; }\n"
    }

    if c.scope.stmts.len > 0 {
        obj += indent()
        obj += case_begin_label_ident(uintptr(&c))
        obj += ":;\n"
        obj += indent()
        obj += gen_scope(c.scope)
        obj += "\n"
    }

    obj += indent()
    obj += "goto "
    obj += match_end_label_ident(uintptr(&m)) + CPP_ST_TERM
    obj += "\n"
    obj += indent()
    obj += end
    obj += ":;"
    ret obj
}

fn gen_match(mut m: &Match): str {
    if m.cases.len == 0 && !real(m.default) {
        ret ""
    }

    let generic_type_match = m.is_generic_type_match()
    if generic_type_match && (!real(m.default) || m.default.scope.stmts.len == 0) {
        ret ""
    }

    let mut obj = "{\n"

    add_indent()

    obj += indent()

    // Constant expressions generated as literals in conditions.
    if !generic_type_match && !m.expr.is_const() {
        if m.expr.lvalue && *env::OPT_COPY {
            obj += "auto &_match_expr{ "
        } else {
            obj += "auto _match_expr{ "
        }
        obj += gen_expr(m.expr.model)
        obj += " };\n"
        obj += indent()
    }

    if m.cases.len > 0 {
        obj += gen_case(m, m.cases[0])
        for (_, mut c) in m.cases[1:] {
            obj += "\n"
            obj += indent()
            obj += gen_case(m, c)
        }
    }

    if real(m.default) {
        obj += "\n"
        obj += gen_case(m, m.default)
    }

    obj += "\n"
    obj += indent()
    obj += match_end_label_ident(uintptr(&m))
    obj += ":;"
    obj += "\n"

    done_indent()

    obj += indent()
    obj += "}"

    ret obj
}

fn gen_fall_st(f: &FallSt): str {
    let mut obj = "goto "
    obj += case_begin_label_ident(f.dest_case)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_break_st(b: &BreakSt): str {
    let mut obj = "goto "
    if b.it != 0 {
        obj += iter_end_label_ident(b.it)
    } else {
        obj += match_end_label_ident(b.mtch)
    }

    obj += CPP_ST_TERM
    ret obj
}

fn gen_ret_vars(mut r: &RetSt): str {
    let mut obj = ""
    for (_, mut v) in r.vars {
        if is_ignore_ident(v.ident) {
            obj += get_init_expr(v.kind.kind)
        } else {
            obj += var_out_ident(v)
        }

        obj += str(TokenKind.Comma)
    }

    obj = obj[:obj.len-1] // Remove last comma.

    if r.vars.len > 1 {
        obj = "return std::make_tuple(" + obj + ")"
    } else {
        obj = "return " + obj
    }

    obj += CPP_ST_TERM
    ret obj
}

fn gen_ret_expr_tuple(mut r: &RetSt): str {
    match type r.expr {
    | &FnCallExprModel:
        let mut obj = "return "
        obj += gen_expr_model(r.expr)
        obj += CPP_ST_TERM
        ret obj
    }

    let mut datas = (&TupleExprModel)(r.expr).datas
    let mut obj = ""

    for (i, mut v) in r.vars {
        if !is_ignore_ident(v.ident) {
            let ident = var_out_ident(v)
            obj += ident
            obj += " = "
            obj += gen_expr(datas[i].model)
            obj += ";\n"
            obj += indent()
        }
    }

    obj += "return std::make_tuple("
    for (i, mut d) in datas {
        let mut v = r.vars[i]
        if is_ignore_ident(v.ident) {
            obj += gen_expr(d.model)
        } else {
            obj += var_out_ident(v)
        }

        obj += ","
    }
    obj = obj[:obj.len-1] // Remove last comma.
    obj += ");"

    ret obj
}

fn gen_ret_expr(mut r: &RetSt): str {
    if r.vars.len == 0 {
        let mut obj = "return "
        obj += gen_expr(r.expr)
        obj += CPP_ST_TERM
        ret obj
    }

    if r.vars.len > 1 {
        ret gen_ret_expr_tuple(r)
    }

    if !is_ignore_ident(r.vars[0].ident) {
        let ident = var_out_ident(r.vars[0])
        let mut obj = ident
        obj += " = "
        obj += gen_expr(r.expr)
        obj += ";\n"
        obj += indent()
        obj += "return "
        obj += ident
        obj += CPP_ST_TERM
        ret obj
    }

    let mut obj = "return "
    obj += gen_expr(r.expr)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_ret_st(mut r: &RetSt): str {
    if r.expr == nil && r.vars.len == 0 {
        ret "return;"
    }

    if r.expr == nil {
        ret gen_ret_vars(r)
    }

    ret gen_ret_expr(r)
}

fn gen_ret_st_with_defaults(mut result: &TypeKind): str {
    let mut obj = "return "
    if real(result.tup()) {
        obj += "std::make_tuple("
        for (_, mut t) in result.tup().types {
            obj += get_init_expr(t)
            obj += str(TokenKind.Comma)
        }
        obj = obj[:obj.len-1] // Remove last comma.
        obj += ")"
    } else {
        obj += get_init_expr(result)
    }
    obj += CPP_ST_TERM
    ret obj
}

fn gen_recover(mut r: &Recover): str {
    let mut obj = "try "
    obj += gen_scope(r.scope)
    obj += " catch(jule::Exception e) "
    if r.handler.is_anon() {
        // Anonymous function.

        add_indent()
        obj += "{\n"
        obj += indent()
        obj += gen_expr(r.handler_expr)
        obj += "(jule::exception_to_error(e))" + CPP_ST_TERM

        if !r.scope_owner.decl.is_void() {
            obj += "\n"
            obj += indent()
            done_indent()
            obj += gen_ret_st_with_defaults(r.scope_owner.result)
        } else {
            done_indent()
        }
        obj += "\n"
        obj += indent()
        obj += "}"
    } else {
        // Passed defined function.
        // Therefore, call passed function with error.

        obj += "{\n"
        add_indent()
        obj += indent()
        obj += gen_expr(r.handler_expr)
        obj += "(jule::exception_to_error(e));\n"
        obj += indent()
        if r.scope_owner.decl.is_void() {
            done_indent()
            obj += " }"
        } else {
            obj += gen_ret_st_with_defaults(r.scope_owner.result)
            obj += "\n"
            done_indent()
            obj += indent()
            obj += "}"
        }
    }

    ret obj
}

fn gen_data_expr(mut d: &Data): str {
    ret gen_expr(d.model) + CPP_ST_TERM
}

fn gen_scope_var(mut v: &Var): str {
    if v.constant {
        ret ""
    }
    ret gen_var(v)
}

// Generates C++ code of statement.
fn gen_st(mut st: St): str {
    match type st {
    | &Scope:       ret gen_scope((&Scope)(st))
    | &Var:         ret gen_scope_var((&Var)(st))
    | &Data:        ret gen_data_expr((&Data)(st))
    | &Conditional: ret gen_conditional((&Conditional)(st))
    | &InfIter:     ret gen_inf_iter((&InfIter)(st))
    | &WhileIter:   ret gen_while_iter((&WhileIter)(st))
    | &RangeIter:   ret gen_range_iter((&RangeIter)(st))
    | &ContSt:      ret gen_cont((&ContSt)(st))
    | &Label:       ret gen_label((&Label)(st))
    | &GotoSt:      ret gen_goto((&GotoSt)(st))
    | &Postfix:     ret gen_postfix((&Postfix)(st))
    | &Assign:      ret gen_assign((&Assign)(st))
    | &MultiAssign: ret gen_multi_assign((&MultiAssign)(st))
    | &Match:       ret gen_match((&Match)(st))
    | &FallSt:      ret gen_fall_st((&FallSt)(st))
    | &BreakSt:     ret gen_break_st((&BreakSt)(st))
    | &RetSt:       ret gen_ret_st((&RetSt)(st))
    | &Recover:     ret gen_recover((&Recover)(st))
    |:              ret "<unimplemented_stmt>"
    }
}

// Generates C++ code of scope.
fn gen_scope(mut s: &Scope): str {
    let mut obj = "{\n"
    add_indent()

    for (_, mut st) in s.stmts {
        obj += indent()
        obj += gen_st(st)
        obj += "\n"
    }

    done_indent()
    obj += indent()
    obj += "}"

    if s.deferred {
        obj = "__JULE_DEFER(" + obj + ");"
    }

    ret obj
}

// Generates C++ code of function's scope.
fn gen_fn_scope(mut f: &FnIns): str {
    if real(f.owner) {
        ret gen_method_scope(f)
    }

    ret gen_scope(f.scope)
}

// Generates C++ code of method's scope.
fn gen_method_scope(mut f: &FnIns): str {
    ret gen_scope(f.scope)
}
