// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use opt::{
    self,
    PushToSliceExprModel,
    MutSlicingExprModel,
    StrInsertBeginExprModel,
}
use conv for std::conv
use lex for std::jule::lex::{TokenKind}
use std::jule::sema::{
    Data,
    Stmt,
    FnIns,
    Var,
    Scope,
    If,
    Conditional,
    InfIter,
    WhileIter,
    RangeIter,
    ContSt,
    BreakSt,
    Label,
    GotoSt,
    Postfix,
    Assign,
    MultiAssign,
    Match,
    Case,
    FallSt,
    RetSt,
    TupleExprModel,
    TypeKind,
    SlicingExprModel,
    IndexingExprModel,
    FnCallExprModel,
}

const matchExpr = "_match_expr"
const resultName = "__jule_func_result"
const assignResultName = "__jule_assign_result"
const resultArgName = "__jule_result_arg"
static assignArgName = "__jule_assign_arg"

// Common group of semantic analysis stmt types and optimizer specific types.
enum compStmt: type {
    Stmt: Stmt,
    &StrInsertBeginExprModel,
    &MutSlicingExprModel,
    &PushToSliceExprModel,
}

struct scopeCoder {
    oc: &ObjectCoder
}

impl scopeCoder {
    static fn new(mut &oc: &ObjectCoder): &scopeCoder {
        ret &scopeCoder{
            oc: oc,
        }
    }

    fn rangeIndexIter(mut &self, mut &it: &RangeIter) {
        let begin = identCoder.iterBegin(uintptr(it))
        let next = identCoder.iterNext(uintptr(it))

        self.oc.write("{\n")
        self.oc.addIndent()
        self.oc.indent()
        self.oc.write("auto ")
        if opt::Copy && isCopyOptimizable(it.Expr) {
            self.oc.write("&")
        }
        self.oc.write("expr = ")
        self.oc.ec.model(it.Expr.Model)
        self.oc.write(";\n")
        self.oc.indent()
        self.oc.write("auto it = expr.begin();\n")
        self.oc.indent()
        self.oc.write(begin)
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("if (it != expr.end()) {\n")
        self.oc.addIndent()
        self.oc.indent()
        if it.KeyA != nil {
            self.oc.varInitExpr(it.KeyA, fn() { self.oc.write("it - expr.begin()") })
            self.oc.write("\n")
            self.oc.indent()
        }
        if it.KeyB != nil {
            if opt::Copy {
                it.KeyB.Reference = isIterCopyOptimizable(it.Expr, it.KeyB)
            }
            self.oc.varInitExpr(it.KeyB, fn() { self.oc.write("*it") })
            self.oc.write("\n")
            self.oc.indent()
        }
        self.scope(it.Scope)
        self.oc.write("\n")
        self.oc.indent()
        self.oc.write(next)
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("++it;\n")
        self.oc.indent()
        if it.KeyA != nil {
            self.oc.write(identCoder.var(it.KeyA))
            self.oc.write("++;\n")
            self.oc.indent()
        }
        self.oc.write("goto ")
        self.oc.write(begin)
        self.oc.write(";\n")

        // Close if.
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}\n")

        self.oc.indent()
        self.oc.write(identCoder.iterEnd(uintptr(it)))
        self.oc.write(":;\n")

        // Close scope.
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}")
    }

    fn rangeHashmapIter(mut &self, mut &it: &RangeIter) {
        let begin = identCoder.iterBegin(uintptr(it))
        let next = identCoder.iterNext(uintptr(it))

        self.oc.write("{\n")
        self.oc.addIndent()
        self.oc.indent()
        self.oc.write("auto ")
        if opt::Copy && isCopyOptimizable(it.Expr) {
            self.oc.write("&")
        }
        self.oc.write("expr = ")
        self.oc.ec.model(it.Expr.Model)
        self.oc.write(";\n")
        self.oc.indent()
        self.oc.write("auto it = expr.begin();\n")
        self.oc.indent()
        self.oc.write(begin)
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("if (it != expr.end()) {\n")
        self.oc.addIndent()
        self.oc.indent()
        if it.KeyA != nil {
            if opt::Copy {
                it.KeyA.Reference = isIterCopyOptimizable(it.Expr, it.KeyA)
            }
            self.oc.varInitExpr(it.KeyA, fn() { self.oc.write("it->first") })
            self.oc.write("\n")
            self.oc.indent()
        }
        if it.KeyB != nil {
            if opt::Copy {
                it.KeyB.Reference = isIterCopyOptimizable(it.Expr, it.KeyB)
            }
            self.oc.varInitExpr(it.KeyB, fn() { self.oc.write("it->second") })
            self.oc.write("\n")
            self.oc.indent()
        }
        self.scope(it.Scope)
        self.oc.write("\n")
        self.oc.indent()
        self.oc.write(next)
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("++it;\n")
        self.oc.indent()
        self.oc.write("goto ")
        self.oc.write(begin)
        self.oc.write(";\n")

        // Close if.
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}\n")

        self.oc.indent()
        self.oc.write(identCoder.iterEnd(uintptr(it)))
        self.oc.write(":;\n")

        // Close scope.
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}")
    }

    fn ifCase(mut &self, mut i: &If) {
        if i.Expr != nil {
            self.oc.write("if (")
            self.oc.ec.expr(i.Expr)
            self.oc.write(") ")
        }
        self.scope(i.Scope)
    }

    fn conditional(mut &self, mut c: &Conditional) {
        let mut writed = false
        for (_, mut elif) in c.Elifs {
            if elif == nil {
                continue
            }
            if writed {
                self.oc.write(" else ")
            }
            writed = true
            self.ifCase(elif)
        }
        if c.Default != nil {
            if writed {
                self.oc.write(" else ")
            }
            self.scope(c.Default.Scope)
        }
    }

    fn infIter(mut &self, mut it: &InfIter) {
        self.oc.write("for (;;) {\n")
        self.oc.addIndent() // Indent scope.
        self.oc.indent()
        self.scope(it.Scope)
        self.oc.doneIndent()
        self.oc.write("\n")
        self.oc.indent()
        self.oc.write(identCoder.iterNext(uintptr(it)))
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("}\n")
        self.oc.indent()
        self.oc.write(identCoder.iterEnd(uintptr(it)))
        self.oc.write(":;")
    }

    fn whileIter(mut &self, mut it: &WhileIter) {
        if it.Expr != nil && it.Next == nil {
            self.oc.write("while (")
            self.oc.ec.expr(it.Expr)
            self.oc.write(") {\n")
        } else {
            self.oc.write("for (; ")
            if it.Expr != nil {
                self.oc.ec.expr(it.Expr)
            }
            self.oc.write("; ")
            if it.Next != nil {
                self.st(it.Next)
            }
            self.oc.write(") {\n")
        }

        self.oc.addIndent()
        self.oc.indent()
        self.scope(it.Scope)
        self.oc.write("\n")
        self.oc.doneIndent()
        self.oc.indent()

        self.oc.write(identCoder.iterNext(uintptr(it)))
        self.oc.write(":;\n")
        self.oc.indent()
        self.oc.write("}\n")
        self.oc.indent()
        self.oc.write(identCoder.iterEnd(uintptr(it)))
        self.oc.write(":;")
    }

    fn rangeIter(mut &self, mut it: &RangeIter) {
        match {
        | it.Expr.Kind.Slc() != nil:
            self.rangeIndexIter(it)
        | it.Expr.Kind.Arr() != nil:
            self.rangeIndexIter(it)
        | it.Expr.Kind.Map() != nil:
            self.rangeHashmapIter(it)
        |:
            self.rangeIndexIter(it) // Str
        }
    }

    fn cont(mut &self, c: &ContSt) {
        self.oc.write("goto ")
        self.oc.write(identCoder.iterNext(c.It))
    }

    fn label(mut &self, l: &Label) {
        self.oc.write(identCoder.label(l.Ident))
        self.oc.write(":")
    }

    fn gotoSt(mut &self, gt: &GotoSt) {
        self.oc.write("goto ")
        self.oc.write(identCoder.label(gt.Ident))
    }

    fn postfix(mut &self, mut p: &Postfix) {
        self.oc.write("(")
        self.oc.ec.expr(p.Expr)
        self.oc.write(")")
        self.oc.write(p.Op)
    }

    fn assign(mut &self, mut a: &Assign) {
        self.oc.ec.expr(a.L.Model)
        self.oc.write(a.Op.Kind)
        self.oc.ec.expr(a.R.Model)
    }

    fn mapLookupAssign(mut &self, mut &a: &MultiAssign) {
        let mut iem = (&IndexingExprModel)(a.R)
        self.oc.ec.expr(iem.Expr.Model)
        self.oc.write(".lookup(")
        self.oc.ec.expr(iem.Index.Model)
        self.oc.write(", ")
        if a.L[0] != nil {
            self.oc.write("&(")
            self.oc.ec.expr(a.L[0].Model)
            self.oc.write("), ")
        } else {
            self.oc.write("nullptr, ")
        }
        if a.L[1] != nil {
            self.oc.write("&(")
            self.oc.ec.expr(a.L[1].Model)
            self.oc.write(")")
        } else {
            self.oc.write("nullptr")
        }
        self.oc.write(")")
    }

    fn multiAssignTup(mut &self, mut &a: &MultiAssign) {
        self.oc.write("({\n")
        self.oc.addIndent()

        let mut tup = (&TupleExprModel)(a.R)

        for (i, mut r) in tup.Datas {
            self.oc.indent()
            let mut l = a.L[i]
            if l != nil {
                self.oc.write(self.oc.tc.kind(l.Kind))
                self.oc.write(" ")
                self.oc.write(identCoder.toOut(assignArgName, uintptr(i)))
                self.oc.write(" = ")
            }
            self.oc.ec.expr(r.Model)
            self.oc.write(";\n")
        }

        for (i, mut l) in a.L {
            if l != nil {
                self.oc.indent()
                self.oc.ec.expr(l.Model)
                self.oc.write(" = ")
                self.oc.write(identCoder.toOut(assignArgName, uintptr(i)))
                self.oc.write(";\n")
            }
        }

        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("})")
    }

    fn multiAssignFn(mut &self, mut &a: &MultiAssign) {
        self.oc.write("({\n")
        self.oc.addIndent()
        self.oc.indent()

        let mut f = (&FnCallExprModel)(a.R)
        self.oc.tc.rc.codeMut1(self.oc.Obj, f.Func.Result)
        self.oc.write(" " + assignResultName + " = ")
        self.oc.ec.expr(a.R)
        self.oc.write(";\n")

        for (i, mut l) in a.L {
            if l != nil {
                self.oc.indent()
                self.oc.ec.expr(l.Model)
                self.oc.write(" = " + assignResultName + "." + resultArgName)
                self.oc.write(conv::Itoa(i))
                self.oc.write(";\n")
            }
        }

        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("})")
    }

    fn multiAssign(mut &self, mut a: &MultiAssign) {
        // Special cases.
        match type a.R {
        | &IndexingExprModel: // Map lookup.
            self.mapLookupAssign(a)
            ret
        }

        match type a.R {
        | &TupleExprModel:
            self.multiAssignTup(a)
        | &FnCallExprModel:
            self.multiAssignFn(a)
        |:
            panic("this panic call should be unreachable")
        }
    }

    fn matchExpr(mut &self, mut m: &Match): fn() {
        if !m.Expr.IsConst() {
            ret fn() { self.oc.write(matchExpr) }
        }
        if !m.Expr.Constant.IsBool() || !m.Expr.Constant.ReadBool() {
            ret fn() { self.oc.ec.model(m.Expr.Model) }
        }
        ret nil
    }

    fn case(mut &self, mut m: &Match, mut c: &Case) {
        if len(c.Exprs) != 0 && !m.IsGenericTypeMatch() {
            if len(m.Cases) > 0 && m.Cases[0] == c {
                self.oc.write("if (")
            } else {
                self.oc.write("else if (")
            }
            for (i, mut expr) in c.Exprs {
                match {
                | !m.TypeMatch:
                    let caseExpr = self.matchExpr(m)
                    if m.Expr.GoodOperand(expr) {
                        if caseExpr != nil {
                            caseExpr()
                            self.oc.write(" == ")
                        }
                        self.oc.ec.expr(expr.Model)
                    } else {
                        self.oc.ec.expr(expr.Model)
                        if caseExpr != nil {
                            self.oc.write(" == ")
                            caseExpr()
                        }
                    }
                |:
                    self.oc.write(matchExpr)
                    let mut tk = (&TypeKind)(expr.Model)
                    if m.Expr.Kind.Trait() != nil {
                        self.oc.write(".type_is(")
                        self.oc.ec.boolean(expr.Kind.Sptr() != nil)
                        self.oc.write(", ")
                        self.oc.write(conv::Itoa(self.oc.findTypeOffset(m.Expr.Kind.Trait(), expr.Kind)))
                        self.oc.write(")")
                    } else { // Any type.
                        let j = self.oc.pushAnyType(tk)
                        self.oc.write(".type == &" + anyTypeIdent)
                        self.oc.write(conv::Itoa(j))
                    }
                }

                if len(c.Exprs)-i > 1 {
                    self.oc.write(" || ")
                }
            }
            self.oc.write(") ")
        } else if m.Default == c && len(m.Cases) != 0 {
            self.oc.indent()
            self.oc.write("else ")
        }

        self.oc.addIndent()

        self.oc.write("{\n")
        self.oc.indent()
        self.oc.write(identCoder.caseBegin(uintptr(c)))
        self.oc.write(":;\n")
        if len(c.Scope.Stmts) > 0 {
            self.oc.indent()
            self.scope(c.Scope)
            self.oc.write("\n")
        }

        self.oc.doneIndent()

        self.oc.indent()
        self.oc.write("}")
    }

    fn matchSt(mut &self, mut m: &Match) {
        if len(m.Cases) == 0 && m.Default == nil {
            ret
        }

        let genericTypeMatch = m.IsGenericTypeMatch()
        if genericTypeMatch && (m.Default == nil || len(m.Default.Scope.Stmts) == 0) {
            ret
        }

        self.oc.write("{\n")

        self.oc.addIndent()

        self.oc.indent()

        // Constant expressions generated as literals in conditions.
        if !genericTypeMatch && !m.Expr.IsConst() {
            if opt::Copy && isCopyOptimizable(m.Expr) {
                self.oc.write("auto &_match_expr{ ")
            } else {
                self.oc.write("auto _match_expr{ ")
            }
            self.oc.ec.expr(m.Expr.Model)
            self.oc.write(" };\n")
            self.oc.indent()
        }

        if len(m.Cases) > 0 {
            for (_, mut c) in m.Cases {
                if c == nil {
                    continue
                }
                self.oc.write("\n")
                self.oc.indent()
                self.case(m, c)
            }
        }

        if m.Default != nil {
            self.oc.write("\n")
            self.case(m, m.Default)
        }

        self.oc.write("\n")
        self.oc.indent()
        self.oc.write(identCoder.matchEnd(uintptr(m)))
        self.oc.write(":;")
        self.oc.write("\n")

        self.oc.doneIndent()

        self.oc.indent()
        self.oc.write("}")
    }

    fn fallSt(mut &self, f: &FallSt) {
        self.oc.write("goto ")
        self.oc.write(identCoder.caseBegin(f.DestCase))
    }

    fn breakSt(mut &self, b: &BreakSt) {
        self.oc.write("goto ")
        if b.It != 0 {
            self.oc.write(identCoder.iterEnd(b.It))
        } else {
            self.oc.write(identCoder.matchEnd(b.Mtch))
        }
    }

    fn setResult(mut &self, mut r: &RetSt) {
        if len(r.Func.Decl.Result.Idents) == 1 {
            self.oc.write(resultName + " = ")
            self.oc.ec.expr(r.Expr)
            self.oc.write(";\n")
            self.oc.indent()
            ret
        }
        let mut datas = (&TupleExprModel)(r.Expr).Datas
        for i, data in datas {
            self.oc.write(resultName + "." + resultArgName)
            self.oc.write(conv::Itoa(i))
            self.oc.write(" = ")
            self.oc.ec.expr(data.Model)
            self.oc.write(";\n")
            self.oc.indent()
        }
    }

    fn retSt(mut &self, mut r: &RetSt) {
        // Void.
        if r.Func.Decl.IsVoid() {
            if r.Func.Decl.Exceptional {
                self.oc.write("return jule::VoidExceptional();")
                ret
            }
            self.oc.write("return;")
            ret
        } else if len(r.Func.Decl.Result.Idents) == 0 {
            if r.Func.Decl.Exceptional {
                self.oc.write("return jule::Exceptional<")
                self.oc.write(self.oc.tc.kind(r.Func.Result))
                self.oc.write(">(jule::Any(), ")
                self.oc.ec.expr(r.Expr)
                self.oc.write(");")
            } else {
                self.oc.write("return ")
                self.oc.ec.expr(r.Expr)
                self.oc.write(";")
            }
            ret
        }

        if r.Expr != nil {
            self.setResult(r)
        }
        if r.Func.Decl.Exceptional {
            self.oc.write("return jule::Exceptional<")
            self.oc.tc.rc.codeMut1(self.oc.Obj, r.Func.Result)
            self.oc.write(">(jule::Any(), " + resultName + ");")
        } else {
            self.oc.write("return " + resultName + ";")
        }
    }

    fn var(mut &self, mut v: &Var) {
        if !v.Constant {
            self.oc.var(v)
        }
    }

    // Generates C++ code of statement.
    fn st(mut &self, mut st: compStmt) {
        if st == nil {
            ret
        }
        match type st {
        | &Scope:
            self.scope((&Scope)(st))
        | &Var:
            self.var((&Var)(st))
        | &Data:
            self.oc.ec.expr((&Data)(st).Model)
        | &Conditional:
            self.conditional((&Conditional)(st))
        | &InfIter:
            self.infIter((&InfIter)(st))
        | &WhileIter:
            self.whileIter((&WhileIter)(st))
        | &RangeIter:
            self.rangeIter((&RangeIter)(st))
        | &ContSt:
            self.cont((&ContSt)(st))
        | &Label:
            self.label((&Label)(st))
        | &GotoSt:
            self.gotoSt((&GotoSt)(st))
        | &Postfix:
            self.postfix((&Postfix)(st))
        | &Assign:
            self.assign((&Assign)(st))
        | &MultiAssign:
            self.multiAssign((&MultiAssign)(st))
        | &Match:
            self.matchSt((&Match)(st))
        | &FallSt:
            self.fallSt((&FallSt)(st))
        | &BreakSt:
            self.breakSt((&BreakSt)(st))
        | &RetSt:
            self.retSt((&RetSt)(st))
        | &PushToSliceExprModel:
            self.oc.ec.pushToSlice((&PushToSliceExprModel)(st))
        | &MutSlicingExprModel:
            self.oc.ec.mutSlicing((&MutSlicingExprModel)(st))
        | &StrInsertBeginExprModel:
            self.oc.ec.strInsertBegin((&StrInsertBeginExprModel)(st))
        |:
            self.oc.write("<unimplemented_stmt>")
        }
    }

    fn scopeStmts(mut &self, mut &s: &Scope) {
        for (_, mut st) in s.Stmts {
            self.oc.indent()
            self.st(st)
            self.oc.write(";\n")
        }
    }

    // Generates C++ code of scope.
    fn scope(mut &self, mut s: &Scope) {
        self.oc.addIndent()
        if s.Deferred {
            self.oc.write("__JULE_DEFER(")
        }
        self.oc.write("{\n")
        self.scopeStmts(s)
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}")
        if s.Deferred {
            self.oc.write(");")
        }
    }

    // Generates C++ code of function's scope.
    fn funcScope(mut &self, mut f: &FnIns) {
        if f.Scope == nil {
            ret
        }
        self.oc.write("{\n")
        self.oc.addIndent()
        if !f.Decl.IsVoid() {
            let mut tup = f.Result.Tup()
            if tup != nil {
                self.oc.indent()
                self.oc.tc.rc.tup(self.oc.Obj, tup)
                self.oc.write(" " + resultName + ";\n")
                for (i, mut t) in tup.Types {
                    if shouldInitialized(t) {
                        self.oc.indent()
                        self.oc.write(resultName + "." + resultArgName)
                        self.oc.write(conv::Itoa(i))
                        self.oc.write(" = ")
                        self.oc.ec.initExpr(t)
                        self.oc.write(";\n")
                    }
                }
            } else if len(f.Decl.Result.Idents) == 1 {
                self.oc.indent()
                self.oc.write(self.oc.tc.kind(f.Result))
                self.oc.write(" " + resultName)
                if shouldInitialized(f.Result) {
                    self.oc.write(" = ")
                    self.oc.ec.initExpr(f.Result)
                }
                self.oc.write(";\n")
            }
        }
        self.scopeStmts(f.Scope)
        if f.Decl.Exceptional && f.Decl.IsVoid() {
            // Just for void exceptionals.
            // Other cases checked by semantic analsis and disallowed
            // if they are not returns.
            self.oc.indent()
            self.oc.write("return jule::VoidExceptional();\n")
        }
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}")
    }
}

fn isCopyOptimizable(&expr: &Data): bool {
    if !expr.Lvalue {
        ret false
    }
    match type expr.Model {
    | &SlicingExprModel:
        ret false
    }
    ret true
}

fn isIterCopyOptimizable(&expr: &Data, &v: &Var): bool {
    if !expr.Lvalue && !expr.Kind.Mutable() {
        ret true
    }
    ret !v.Mutable && !expr.Mutable
}