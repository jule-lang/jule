// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use conv for std::conv
use ast for std::jule::ast
use std::jule::build::{Directive}
use std::jule::sema::{
    Prim,
    Tuple,
    Sptr,
    Ptr,
    Slc,
    Enum,
    TypeKind,
    Map,
    Trait,
    Struct,
    StructIns,
    FnIns,
    Arr,
}

// Returns directive by tag.
fn find_directive(mut &directives: []&ast::Directive, tag: str): &ast::Directive {
    for (_, mut dr) in directives {
        if dr.tag.kind == tag {
            ret dr
        }
    }
    ret nil
}

// Reports wherher tag is exist in directives.
fn has_directive(&directives: []&ast::Directive, tag: str): bool {
    ret find_directive(unsafe { *(&directives) }, tag) != nil
}

// Generates C++ code of Prim TypeKind.
fn gen_prim_kind(p: &Prim): str {
    ret as_jt(p.to_str())
}

// Generates C++ code of Tupe TypeKind.
fn gen_tuple_kind(mut t: &Tuple): str {
    let mut obj = "std::tuple<"
    for (_, mut tk) in t.types {
        obj += gen_type_kind(tk)
        obj += ","
    }
    obj = obj[:obj.len-1] // Remove comma
    obj += ">"
    ret obj
}

// Returns C++ code of smart pointer type with element type.
fn as_sptr_kind(elem: str): str {
    let mut obj = as_jt("ptr")
    obj += "<"
    obj += elem
    obj += ">"
    ret obj
}

// Generates C++ code of smart pointer TypeKind.
fn gen_sptr_kind(mut sptr: &Sptr): str {
    ret as_sptr_kind(gen_type_kind(sptr.elem))
}

// Generates C++ code of Ptr TypeKind.
fn gen_ptr_kind(mut p: &Ptr): str {
    const CPP_POINTER_MARK = "*"
    if p.is_unsafe() {
        ret "void" + CPP_POINTER_MARK
    }

    let mut elem = gen_type_kind(p.elem)
    elem += CPP_POINTER_MARK
    ret elem
}

// Generates C++ code of Enum TypeKind.
fn gen_enum_kind(mut e: &Enum): str {
    ret gen_type_kind(e.kind.kind)
}

fn as_slice_kind(mut elem: &TypeKind): str {
    let mut obj = as_jt("slice")
    obj += "<"
    obj += gen_type_kind(elem)
    obj += ">"
    ret obj
}

// Generates C++ code of Slc TypeKind.
fn gen_slice_kind(mut s: &Slc): str {
    ret as_slice_kind(s.elem)
}

// Generates C++ code of Map TypeKind.
fn gen_map_kind(mut m: &Map): str {
    let mut obj = as_jt("map")
    obj += "<"
    obj += gen_type_kind(m.key)
    obj += ","
    obj += gen_type_kind(m.val)
    obj += ">"
    ret obj
}

fn gen_trait_kind_from_ident(ident: str): str {
    let mut obj = as_jt("trait")
    obj += "<"
    obj += ident
    obj += ">"
    ret obj
}

// Generates C++ code of Trait TypeKind.
fn gen_trait_kind(t: &Trait): str {
    let ident = trait_out_ident(t)
    ret gen_trait_kind_from_ident(ident)
}

// Generates C++ code of Struct TypeKind.
fn gen_struct_kind(s: &Struct): str {
    let mut rep = ""
    if s.cpp_linked && !has_directive(s.directives, str(Directive.Typedef)) {
        rep += "struct "
    }

    rep += struct_out_ident(s)
    ret rep
}

// Generates C++ code of Struct instance TypeKind.
fn gen_struct_kind_ins(mut s: &StructIns): str {
    if s.decl.cpp_linked {
        let mut ident = struct_ins_out_ident(s)
        if s.generics.len > 0 {
            ident += "<"
            for (_, mut g) in s.generics {
                ident += gen_type_kind(g)
                ident += ","
            }
            ident = ident[:ident.len-1] // Remove last comma.
            ident += ">"
        }
        let d = find_directive(s.decl.directives, str(Directive.Namespace))
        if d != nil {
            ident = concat_all_parts(d.args...) + "::" + ident
        }
        ret ident
    }
    ret struct_ins_out_ident(s)
}

// Generates C++ code of Arr TypeKind.
fn gen_array_kind(mut a: &Arr): str {
    let mut obj = as_jt("array")
    obj += "<"
    obj += gen_type_kind(a.elem)
    obj += ","
    obj += conv::itoa(a.n)
    obj += ">"
    ret obj
}

fn gen_fn_anon_decl(mut f: &FnIns): str {
    let mut decl = gen_fn_ins_result(f)

    decl += "("
    if f.params.len > 0 {
        for (_, mut param) in f.params {
            if param.decl.is_self() {
                continue
            }

            decl += gen_param_ins_prototype(param)
            decl += ","
        }
        decl = decl[:decl.len-1] // Remove last comma.
    } else {
        decl += "void"
    }
    decl += ")"

    ret decl
}

// Generates C++ code of Fn TypeKind.
fn gen_fn_kind(mut f: &FnIns): str {
    let mut obj = as_jt("fn")
    obj += "<"
    obj += gen_fn_anon_decl(f)
    obj += ">"
    ret obj
}

// Generates C++ code of TypeKind.
fn gen_type_kind(mut k: &TypeKind): str {
    match {
    | k.cpp_linked():   ret k.cpp_ident
    | k.prim() != nil:  ret gen_prim_kind(k.prim())
    | k.tup() != nil:   ret gen_tuple_kind(k.tup())
    | k.sptr() != nil:  ret gen_sptr_kind(k.sptr())
    | k.ptr() != nil:   ret gen_ptr_kind(k.ptr())
    | k.enm() != nil:   ret gen_enum_kind(k.enm())
    | k.slc() != nil:   ret gen_slice_kind(k.slc())
    | k.map() != nil:   ret gen_map_kind(k.map())
    | k.trt() != nil:   ret gen_trait_kind(k.trt())
    | k.strct() != nil: ret gen_struct_kind_ins(k.strct())
    | k.arr() != nil:   ret gen_array_kind(k.arr())
    | k.fnc() != nil:   ret gen_fn_kind(k.fnc())
    |:                  ret "[<unimplemented_type_kind>]"
    }
}
