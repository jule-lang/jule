// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use obj::{IR}
use std::jule::build::{
    Directive,
}
use std::jule::sema::{
    ImportInfo,
    Package,
    Fn,
    FnIns,
    StructIns,
}

struct TestCoder {
    t:         &StructIns
    tmReset:   &Fn
    tmFailed:  &Fn
    tmSkipped: &Fn

    oc: &ObjectCoder
}

impl TestCoder {
    static fn New(mut &oc: &ObjectCoder): &TestCoder {
        ret &TestCoder{
            oc: oc,
        }
    }

    fn findTestingPackage(mut &self): &ImportInfo {
        for (_, mut imp) in self.oc.ir.Used {
            if imp.LinkPath == "std::testing" {
                ret imp
            }
        }
        ret nil
    }

    fn appendTest(mut &self, mut f: &FnIns) {
        self.oc.indent()
        self.callTmReset()
        self.oc.write(";\n")
        self.oc.indent()
        self.oc.write("std::cout << \">>> TEST RUNNING: \";\n")
        self.oc.indent()
        self.oc.write("jule::outln(")
        self.oc.write(cstrLit([]byte(f.Decl.Ident)))
        self.oc.write(");\n")
        self.oc.indent()
        self.oc.write(identCoder.funcIns(f))
        self.oc.write("(_t);\n")
        self.oc.indent()
        self.oc.write("post_test();\n")
    }

    fn appendPackageTests(mut &self, mut &p: &Package) {
        for (_, mut file) in p.Files {
            for (_, mut f) in file.Funcs {
                if hasDirective(f.Directives, Directive.Test) {
                    self.appendTest(f.Instances[0])
                }
            }
        }
    }

    fn readyTestingPackage(mut &self): bool {
        let mut p = self.findTestingPackage()
        if p == nil {
            // std::testing is not used.
            // So, developers cannot write valid test functions.
            ret false
        }

        self.t = p.FindStruct("T", false).Instances[0]

        self.tmReset = self.t.FindMethod("reset", false)
        self.tmFailed = self.t.FindMethod("Failed", false)
        self.tmSkipped = self.t.FindMethod("Skipped", false)
        ret true
    }

    fn callTmReset(mut &self) {
        self.oc.write(identCoder.func(self.tmReset))
        self.oc.write("(_t)")
    }

    fn callTmFailed(mut &self) {
        self.oc.write(identCoder.func(self.tmFailed))
        self.oc.write("(_t)")
    }

    fn callTmSkipped(mut &self) {
        self.oc.write(identCoder.func(self.tmSkipped))
        self.oc.write("(_t)")
    }

    // Serialize tests and test point.
    // Appends to object code.
    fn Serialize(mut &self) {
        self.oc.serializeHead()
        defer {
            self.oc.end()
        }

        self.oc.write("\nvoid test_point(void) {\n")
        self.oc.addIndent()
        self.oc.indent()

        if !self.readyTestingPackage() {
            self.oc.write("}")
            self.oc.doneIndent()
            ret
        }

        self.oc.write(typeCoder.asSptr(typeCoder.structureIns(self.t)))
        self.oc.write(" _t = jule::new_ptr<")
        self.oc.write(typeCoder.structureIns(self.t))
        self.oc.write(">(); _t.ref = nullptr;\n")

        self.oc.indent()
        self.oc.write("jule::Uint total = 0, failed = 0, skipped = 0;\n")
        self.oc.indent()

        self.oc.write("auto post_test = [&](void) {\n")
        self.oc.addIndent()
        self.oc.indent()
        self.oc.write("++total;\n")
        self.oc.indent()
        self.oc.write("if (")
        self.callTmFailed()
        self.oc.write(") { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n")
        self.oc.indent()
        self.oc.write("else if (")
        self.callTmSkipped()
        self.oc.write(") { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n")
        self.oc.indent()
        self.oc.write("else { std::cout << \"    [*] PASSED\" << std::endl; }\n")
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("};\n")

        self.appendPackageTests(self.oc.ir.Main)

        self.oc.write("\n\n")
        self.oc.indent()
        self.oc.write("std::cout << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n")
        self.oc.indent()
        self.oc.write("if (failed != 0) std::exit(1);\n")

        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}\n")
    }
}