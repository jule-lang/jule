// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use conv for std::conv
use std::jule::build::{EntryPoint, Directive}
use std::jule::lex::{TokenKind, IsAnonIdent, IsIgnoreIdent}
use std::jule::sema::{
    Fn,
    FnIns,
    Trait,
    Struct,
    StructIns,
    Field,
    Var,
    Param,
}

// Identifier of initialize function caller function.
const initCallerIdent = "__jule_call_initializers"

struct identCoder {}

impl identCoder {
    const Self = "_self_"

    // Returns cpp output identifier form of given identifier.
    //
    // Parameters:
    //   - ident: Identifier.
    //   - addr:  Pointer address of package file handler.
    static fn toOut(&ident: str, addr: uintptr): str {
        if addr != 0 {
            let mut obj = make(str, 0, 40)
            obj += "_"
            obj += conv::FmtUint(u64(addr), 0xF)
            obj += "_"
            obj += ident
            ret obj
        }
        let mut obj = make(str, 0, len(ident) + 1)
        obj += "_"
        obj += ident
        ret obj
    }

    // Returns cpp output local identifier form of fiven identifier.
    //
    // Parameters:
    //   - row:   Row of definition.
    //   - col:   Column of definition.
    //   - ident: Identifier of definition.
    static fn toLocal(row: int, col: int, &ident: str): str {
        let mut obj = make(str, 0, 40)
        obj += "_"
        obj += conv::Itoa(row)
        obj += conv::Itoa(col)
        obj += "_"
        obj += ident
        ret obj
    }

    // Returns output identifier of function.
    static fn func(&f: &Fn): str {
        match {
        | f.CppLinked:
            ret f.Ident
        | f.Ident == EntryPoint:
            ret "entry_point"
        | f.IsMethod():
            let mut obj = identCoder.toOut(f.Ident, uintptr(f))
            if f.Statically {
                obj = "static_" + obj
                ret obj
            }
            ret obj
        |:
            ret identCoder.toOut(f.Ident, uintptr(f))
        }
    }

    // Returns output identifier of function instance.
    static fn funcIns(&f: &FnIns): str {
        if f.IsBuiltin() {
            ret "jule::" + f.Decl.Ident
        }
        if f.Decl.CppLinked || len(f.Generics) == 0 {
            ret identCoder.func(f.Decl)
        }
        ret identCoder.toOut(f.Decl.Ident, uintptr(f))
    }

    // Returns output identifier of trait.
    static fn traitDecl(t: &Trait): str {
        if t.IsBuiltin() {
            ret "jule::" + t.Ident
        }
        ret identCoder.toOut(t.Ident, uintptr(t))
    }

    // Returns output identifier of parameter.
    static fn param(&p: &Param): str {
        if IsAnonIdent(p.Ident) || IsIgnoreIdent(p.Ident) {
            ret ""
        }
        if p.IsSelf() {
            ret identCoder.Self
        }
        if p.Token == nil {
            ret identCoder.toLocal(0, 0, p.Ident)
        }
        ret identCoder.toLocal(p.Token.Row, p.Token.Column, p.Ident)
    }

    // Returns output identifier of structure.
    static fn structure(&s: &Struct): str {
        if s.CppLinked {
            if hasDirective(s.Directives, Directive.Typedef) {
                ret s.Ident
            }
            ret "struct " + s.Ident
        }
        ret identCoder.toOut(s.Ident, uintptr(s))
    }

    // Returns output identifier of structure instance.
    static fn structureIns(&s: &StructIns): str {
        if s.Decl.CppLinked || len(s.Generics) == 0 {
            ret identCoder.structure(s.Decl)
        }
        ret identCoder.toOut(s.Decl.Ident, uintptr(s))
    }

    // Returns output identifier of field.
    static fn field(&f: &Field): str {
        if f.Owner.CppLinked {
            ret f.Ident
        }
        ret "_field_" + f.Ident
    }

    // Returns output identifier of variable.
    static fn var(mut v: &Var): str {
        match {
        | v.CppLinked:
            ret v.Ident
        | v.Ident == TokenKind.Error:
            ret "except.error"
        | v.Ident == TokenKind.Self:
            if v.Kind.Kind.Sptr() == nil {
                ret "(*" + identCoder.Self + ")"
            }
            ret identCoder.Self
        | v.RetOrder == -1:
            ret resultName
        | v.RetOrder >= 0:
            ret resultName + "." + resultArgName + conv::Itoa(v.RetOrder)
        | v.Scope != nil:
            ret identCoder.toLocal(v.Token.Row, v.Token.Column, v.Ident)
        |:
            ret identCoder.toOut(v.Ident, uintptr(v))
        }
    }

    // Returns begin label identifier of iteration.
    static fn iterBegin(it: uintptr): str {
        let mut obj = make(str, 0, 30)
        obj += "_iter_begin_"
        obj += conv::FmtUint(u64(it), 0xF)
        ret obj
    }

    // Returns end label identifier of iteration.
    static fn iterEnd(it: uintptr): str {
        let mut obj = make(str, 0, 30)
        obj += "_iter_end_"
        obj += conv::FmtUint(u64(it), 0xF)
        ret obj
    }

    // Returns next label identifier of iteration.
    static fn iterNext(it: uintptr): str {
        let mut obj = make(str, 0, 30)
        obj += "_iter_next_"
        obj += conv::FmtUint(u64(it), 0xF)
        ret obj
    }

    // Returns label identifier.
    static fn label(&ident: str): str {
        let mut obj = make(str, 0, 30)
        obj += "_julec_label_"
        obj += ident
        ret obj
    }

    // Returns end label identifier of match-case.
    static fn matchEnd(m: uintptr): str {
        let mut obj = make(str, 0, 30)
        obj += "_match_end_"
        obj += conv::FmtUint(u64(m), 0xF)
        ret obj
    }

    // Returns begin label identifier of case.
    static fn caseBegin(c: uintptr): str {
        let mut obj = make(str, 0, 30)
        obj += "_case_begin_"
        obj += conv::FmtUint(u64(c), 0xF)
        ret obj
    }
}