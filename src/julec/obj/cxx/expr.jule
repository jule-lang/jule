// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use optimizing::{
    UnsafeBinopExprModel,
    UnsafeIndexingExprModel,
    PushToSliceExprModel,
}

use conv for std::conv
use std::env::{ARCH}
use fmt for std::fmt
use std::jule::build::{Directive, is_64bit}
use std::jule::constant::{Const}
use std::jule::lex::{Token, TokenKind}
use std::jule::sema::{
    Var,
    Struct,
    FnIns,
    Trait,
    StructIns,
    TypeKind,
    Data,
    Value,
    ExprModel,
    BinopExprModel,
    UnaryExprModel,
    StructLitExprModel,
    AllocStructLitExprModel,
    CastingExprModel,
    FnCallExprModel,
    SliceExprModel,
    IndexingExprModel,
    AnonFnExprModel,
    MapExprModel,
    SlicingExprModel,
    TraitSubIdentExprModel,
    StructSubIdentExprModel,
    ArrayExprModel,
    CommonIdentExprModel,
    CommonSubIdentExprModel,
    TupleExprModel,
    BuiltinOutCallExprModel,
    BuiltinOutlnCallExprModel,
    BuiltinCloneCallExprModel,
    BuiltinNewCallExprModel,
    BuiltinPanicCallExprModel,
    BuiltinAssertCallExprModel,
    BuiltinMakeCallExprModel,
    BuiltinAppendCallExprModel,
    BuiltinErrorCallExprModel,
    SizeofExprModel,
    AlignofExprModel,
    RuneExprModel,
    StructStaticIdentExprModel,
    IntegratedToStrExprModel,
    BackendEmitExprModel,
    TernaryExprModel,
    FreeExprModel,
    OperandExprModel,
    Scope,
}
use types for std::jule::types::{
    MAX_F32,
    MAX_F64,
    MIN_F32,
    MIN_F64,
    MAX_I64,
    MIN_I64,
    MAX_U64,
}
use math for std::math
use strings for std::strings
use utf8 for std::unicode::utf8

// Ignore expression for std::tie function.
const CPP_IGNORE = "std::ignore"

// Represents default expression for type.
const CPP_DEFAULT_EXPR = "{}"

struct ExprCoder {
    oc: &ObjectCoder
}

impl ExprCoder {
    static fn new(mut &oc: &ObjectCoder): &ExprCoder {
        ret &ExprCoder{
            oc: oc,
        }
    }

    fn string(self, &c: &Const): str {
        let content = c.read_str()
        if content.len == 0 { // Empty.
            ret TypeCoder.Str + "()"
        }
        let bytes = []byte(content)
        let len = conv::fmt_int(i64(bytes.len), 10)
        let lit = cstr_lit(bytes)
        ret TypeCoder.Str + "(" + lit + ", " + len + ")"
    }

    fn boolean(self, &c: &Const): str {
        ret if c.read_bool() { "true" } else { "false" }
    }

    fn nil_lit(self): str {
        ret "nullptr"
    }

    fn ftoa_special_cases(self, &x: f64): str {
        match {
        | math::is_nan(x):
            ret "NAN"
        | math::is_inf(x, 1):
            ret "INFINITY"
        | math::is_inf(x, -1):
            ret "-INFINITY"
        |:
            ret ""
        }
    }

    fn float32(self, &c: &Const): str {
        let x = c.as_f64()

        // Special cases.
        let f = self.ftoa_special_cases(x)
        if f != "" {
            ret f
        }

        match {
        | x == MAX_F32:
            ret "jule::MAX_F32"
        | x == MIN_F32:
            ret "jule::MIN_F32"
        |:
            ret ftoa(x, 32) + "f"
        }
    }

    fn float64(self, &c: &Const): str {
        let x = c.as_f64()

        // Special cases.
        let f = self.ftoa_special_cases(x)
        if f != "" {
            ret f
        }

        match {
        | x == MAX_F64:
            ret "jule::MAX_F64"
        | x == MIN_F64:
            ret "jule::MIN_F64"
        |:
            ret ftoa(x, 64)
        }
    }

    // fx32: 32-bit floating-point
    fn constant(self, mut c: &Const, fx32: bool): str {
        match {
        | c.is_str():
            ret self.string(c)
        | c.is_bool():
            ret self.boolean(c)
        | c.is_f64():
            match {
            | fx32:
                ret self.float32(c)
            |:
                ret self.float64(c)
            }
        | c.is_i64():
            ret itoa(c.read_i64())
        | c.is_u64():
            ret utoa(c.read_u64())
        | c.is_nil():
            ret self.nil_lit()
        |:
            ret "<unimplemented_constant_expression>"
        }
    }

    fn div_by_zero_binary(mut self, &op: Token, mut &l: &OperandExprModel, mut &r: &OperandExprModel): str {
        let mut op_func = ""
        match op.kind {
        | TokenKind.Solidus
        | TokenKind.SolidusEq:
            op_func = "div"
        | TokenKind.Percent
        | TokenKind.PercentEq:
            op_func = "mod"
        }

        let mut obj = "jule::"
        obj += op_func
        obj += "("
        if !env::PRODUCTION {
            obj += "\""
            obj += self.oc.loc_info(op)
            obj += "\","
        }
        obj += self.expr(l.model)
        obj += ","
        obj += self.expr(r.model)
        obj += ")"
        ret obj
    }

    fn unsafe_binary(mut self, mut m: &BinopExprModel): str {
        let mut obj = "("
        obj += self.model(m.left.model)
        obj += " "
        obj += m.op.kind
        obj += " "
        obj += self.model(m.right.model)
        obj += ")"
        ret obj
    }

    fn binary(mut self, mut m: &BinopExprModel): str {
        match m.op.kind {
        | TokenKind.Solidus | TokenKind.Percent:
            // Do not check division of structures safety.
            if m.left.kind.strct() == nil {
                ret self.div_by_zero_binary(m.op, m.left, m.right)
            }
        }
        ret self.unsafe_binary(m)
    }

    fn var(self, mut m: &Var): str {
        if m.cpp_linked {
            let d = find_directive(m.directives, Directive.Namespace)
            if d != nil {
                let mut obj = concat_all_parts(d.args...)
                obj += "::"
                obj += IdentCoder.var(m)
                ret obj
            }
        }
        ret IdentCoder.var(m)
    }

    fn structure(self, m: &Struct): str {
        ret TypeCoder.structure(m)
    }

    fn structure_ins(self, mut m: &StructIns): str {
        ret TypeCoder.structure_ins(m)
    }

    fn unary(mut self, mut m: &UnaryExprModel): str {
        match m.op.kind {
        | TokenKind.Caret:
            let mut obj = "(~("
            obj += self.expr(m.expr.model)
            obj += "))"
            ret obj
        | TokenKind.Star:
            if env::PRODUCTION || m.expr.kind.sptr() == nil {
                break
            }
            let mut obj = self.expr(m.expr.model)
            obj += ".get(\""
            obj += self.oc.loc_info(m.op)
            obj += "\")"
            ret obj
        }

        let mut obj = "("
        obj += m.op.kind
        obj += "("
        obj += self.expr(m.expr.model)
        obj += "))"
        ret obj
    }

    fn cpp_structure_lit(mut self, mut m: &StructLitExprModel): str {
        let mut obj = "(" + TypeCoder.structure_ins(m.strct)
        obj += "){"
        if m.args.len > 0 {
        iter:
            for (_, mut f) in m.strct.fields {
                if m.strct.decl.cpp_linked {
                    for (_, mut arg) in m.args {
                        if arg.field == f {
                            obj += "."
                            obj += IdentCoder.field(f.decl)
                            obj += "="
                            obj += self.expr(arg.expr)
                            obj += ","
                            continue iter
                        }
                    }
                    continue
                }
                obj += IdentCoder.field(f.decl)
                obj += ": "
                for (_, mut arg) in m.args {
                    if arg.field == f {
                        obj += self.expr(arg.expr)
                        obj += ","
                        continue iter
                    }
                }
                obj += self.init_expr(f.kind)
                obj += ","
            }
            obj = obj[:obj.len-1] // Remove last comma.
        }
        obj += "}"
        ret obj
    }

    fn structure_lit(mut self, mut m: &StructLitExprModel): str {
        if m.strct.decl.cpp_linked {
            ret self.cpp_structure_lit(m)
        }

        let mut obj = IdentCoder.structure_ins(m.strct)
        obj += "("
        if m.args.len > 0 {
        iter:
            for (_, mut f) in m.strct.fields {
                for (_, mut arg) in m.args {
                    if arg.field == f {
                        obj += self.expr(arg.expr)
                        obj += ","
                        continue iter
                    }
                }
                obj += self.init_expr(f.kind)
                obj += ","
            }
            obj = obj[:obj.len-1] // Remove last comma.
        }
        obj += ")"
        ret obj
    }

    fn alloc_structure(mut self, mut m: &AllocStructLitExprModel): str {
        let mut obj = "jule::new_struct"
        if m.lit.strct.decl.has_ref_accessible() {
            obj += "_ptr"
        }
        obj += "<"
        obj += IdentCoder.structure_ins(m.lit.strct)
        obj += ">("
        if !env::PRODUCTION {
            obj += "\""
            obj += self.oc.loc_info(m.lit.token)
            obj += "\","
        }
        obj += "new( std::nothrow ) "
        obj += self.structure_lit(m.lit)
        obj += ")"
        ret obj
    }

    fn casting(mut self, mut m: &CastingExprModel): str {
        let mut obj = ""
        match {
        | m.kind.prim() != nil && m.kind.prim().is_any():
            obj += TypeCoder.kind(m.kind)
            obj += "("
            obj += self.model(m.expr)
            obj += ")"
        | m.expr_kind.ptr() != nil
        | m.kind.ptr() != nil:
            obj += "(("
            obj += TypeCoder.kind(m.kind)
            obj += ")("
            obj += self.expr(m.expr)
            obj += "))"
        | m.expr_kind.trt() != nil
        | m.expr_kind.prim() != nil && m.expr_kind.prim().is_any():
            obj += self.model(m.expr)
            obj += "."
            if env::PRODUCTION {
                obj += "operator "
                obj += TypeCoder.kind(m.kind)
                obj += "()"
            } else {
                if m.expr_kind.trt() != nil && m.kind.sptr() != nil {
                    obj += "cast_ptr<"
                    obj += TypeCoder.kind(m.kind.sptr().elem)
                } else {
                    obj += "cast<"
                    obj += TypeCoder.kind(m.kind)
                }
                obj += ">(\""
                obj += self.oc.loc_info(m.token)
                obj += "\")"
            }
        |:
            obj += "static_cast<"
            obj += TypeCoder.kind(m.kind)
            obj += ">("
            obj += self.expr(m.expr)
            obj += ")"
        }
        ret obj
    }

    fn args(mut self, mut args: []ExprModel): str {
        if args.len == 0 {
            ret ""
        }
        let mut obj = ""
        for (_, mut a) in args {
            obj += self.expr(a)
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
        ret obj
    }

    fn model_for_call(mut self, mut expr: ExprModel): str {
        match type expr {
        | &FnIns:
            ret self.func_ins((&FnIns)(expr))
        |:
            ret self.model(expr)
        }
    }

    fn push_call_inf(mut self, mut &obj: str, &m: &FnCallExprModel) {
        if env::PRODUCTION || (!m.func.anon && !is_builtin_call_has_debuginf(m)) {
            obj += "("
            ret
        }
        if m.func.anon {
            match type m.expr {
            | &StructSubIdentExprModel:
                if (&StructSubIdentExprModel)(m.expr).field.decl.owner.cpp_linked {
                    obj += "("
                    ret
                }
                fall
            |:
                obj += ".call"
            }
        }
        obj += "(\""
        obj += self.oc.loc_info(m.token)
        obj += "\""
        if m.args.len != 0 {
            obj += ","
        }
    }

    fn pure_func_call(mut self, mut &m: &FnCallExprModel): str {
        let mut obj = self.model_for_call(m.expr)
        if !m.func.is_builtin() {
            if m.func.decl.cpp_linked && m.func.generics.len > 0 {
                if !has_directive(m.func.decl.directives, Directive.Cdef) {
                    obj += "<"
                    for (_, mut g) in m.func.generics {
                        obj += TypeCoder.kind(g)
                        obj += ","
                    }
                    obj = obj[:obj.len-1] // Remove last comma.
                    obj += ">"
                }
            }
        }
        self.push_call_inf(obj, m)
        obj += self.args(m.args)
        obj += ")"

        if m.is_co {
            obj = "__JULE_CO(" + obj
            obj += ")"
        }

        ret obj
    }

    fn func_call(mut self, mut m: &FnCallExprModel): str {
        if m.func.is_builtin() ||
            !m.func.decl.exceptional ||
            m.except != nil && m.except.stmts.len == 0 {
            ret self.pure_func_call(m)
        }

        // Generate code for exceptional.
        let mut obj = "({\n"
        self.oc.add_indent()
        obj += self.oc.indent()
        obj += "auto except = "
        obj += self.pure_func_call(m)
        obj += ";\n"
        obj += self.oc.indent()
        if m.except != nil {
            if m.func.result == nil || !m.assigned {
                obj += "if (!except.ok()) "
                obj += self.oc.sc.scope(m.except)
                obj += "\n"
            } else {
                let forwarded = is_forwarded(m.except)
                obj += "(except.ok()) ? (except.result) : ("
                if forwarded {
                    obj += "{"
                }
                obj += self.oc.sc.scope(m.except)
                if forwarded {
                    obj += " "
                    obj += self.init_expr(m.func.result)
                    obj += ";}"
                }
                obj += ");\n"
            }
            self.oc.done_indent()
        } else {
            obj += `if (!except.ok()) jule::panic(jule::Str("`
            obj += `unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: `
            obj += self.oc.loc_info(m.token)
            obj += "\"));\n"
            if !m.func.decl.is_void() {
                obj += self.oc.indent()
                obj += "(except.result);\n"
            }
            self.oc.done_indent()
        }

        obj += self.oc.indent()
        obj += "})"
        ret obj
    }

    fn slice(mut self, mut m: &SliceExprModel): str {
        if m.elems.len == 0 {
            ret TypeCoder.as_slice(m.elem_kind) + "()"
        }
        let mut obj = TypeCoder.as_slice(m.elem_kind)
        obj += "({"
        obj += self.args(m.elems)
        obj += "})"
        ret obj
    }

    fn indexing(mut self, mut m: &IndexingExprModel): str {
        let mut obj = self.model(m.expr.model)
        // Index access with safety measures.
        match {
        | env::PRODUCTION
        | m.expr.kind.ptr() != nil
        | m.expr.kind.map() != nil:
            obj += "["
            obj += self.expr(m.index.model)
            obj += "]"
        |:
            obj += ".at(\""
            obj += self.oc.loc_info(m.token)
            obj += "\","
            obj += self.expr(m.index.model)
            obj += ")"
        }
        ret obj
    }

    fn unsafe_indexing(mut self, mut m: &UnsafeIndexingExprModel): str {
        let mut obj = self.model(m.node.expr.model)
        // Index access with safety measures.
        match {
        | env::PRODUCTION
        | m.node.expr.kind.ptr() != nil
        | m.node.expr.kind.map() != nil:
            obj += "["
            obj += self.expr(m.node.index.model)
            obj += "]"
        |:
            obj += ".__at("
            obj += self.expr(m.node.index.model)
            obj += ")"
        }
        ret obj
    }

    fn anon_func(mut self, mut m: &AnonFnExprModel): str {
        let mut obj = TypeCoder.func(m.func)
        obj += "([=]"
        obj += self.oc.params_ins(m.func.params)
        obj += " mutable -> "
        obj += TypeCoder.func_ins_result(m.func)
        obj += " "
        obj += self.oc.sc.func_scope(m.func)
        obj += ")"
        ret obj
    }

    fn map(mut self, mut m: &MapExprModel): str {
        let mut obj = TypeCoder.Map + "<"
        obj += TypeCoder.kind(m.key_kind)
        obj += ","
        obj += TypeCoder.kind(m.val_kind)
        obj += ">({"
        if m.entries.len > 0 {
            for (_, mut pair) in m.entries {
                let mut pair_obj = "{"
                pair_obj += self.expr(pair.key)
                pair_obj += ","
                pair_obj += self.expr(pair.val)
                pair_obj += "}"
                obj += pair_obj
                obj += ","
            }
            obj = obj[:obj.len-1] // Remove last comma.
        }
        obj += "})"
        ret obj
    }

    fn slicing(mut self, mut m: &SlicingExprModel): str {
        let mut obj = self.model(m.expr)
        obj += ".slice("
        if !env::PRODUCTION {
            obj += "\""
            obj += self.oc.loc_info(m.token)
            obj += "\","
        }
        obj += self.expr(m.left)
        if m.right != nil {
            obj += ","
            obj += self.expr(m.right)
        }
        obj += ")"
        ret obj
    }

    fn trait_sub(mut self, mut m: &TraitSubIdentExprModel): str {
        let mut obj = self.model(m.expr)
        obj += ".get("
        if !env::PRODUCTION {
            obj += "\""
            obj += self.oc.loc_info(m.token)
            obj += "\""
        }
        obj += ")._method_"
        obj += m.ident
        ret obj
    }

    fn structure_sub(mut self, mut m: &StructSubIdentExprModel): str {
        let mut obj = self.model(m.expr)
        obj += "."
        if m.field != nil {
            obj += IdentCoder.field(m.field.decl)
        } else {
            obj += IdentCoder.func_ins(m.method)
        }
        ret obj
    }

    fn common_ident(self, m: &CommonIdentExprModel): str {
        ret m.ident
    }

    fn common_sub(mut self, mut m: &CommonSubIdentExprModel): str {
        let mut obj = self.model(m.expr)
        obj += "."
        obj += m.ident
        ret obj
    }

    fn array(mut self, mut m: &ArrayExprModel): str {
        let mut obj = TypeCoder.array(m.kind)
        if m.elems.len == 0 {
            obj += "()"
            ret obj
        }

        // Filled.
        if m.elems.len == 2 && m.elems[1] == nil {
            obj += "("
            obj += self.expr(m.elems[0])
            obj += ")"
            ret obj
        }

        obj += "({"
        obj += self.args(m.elems)
        obj += "})"
        ret obj
    }

    // Returns complete expression model of function instance.
    // Usefull for strict type safety.
    fn func_ins_common(self, mut m: &FnIns): str {
        let mut obj = TypeCoder.func(m)
        obj += "("
        obj += self.func_ins(m)
        obj += ")"
        ret obj
    }

    // Returns elementary expression model of function instance.
    fn func_ins(self, mut m: &FnIns): str {
        if m.decl != nil && m.decl.cpp_linked {
            let d = find_directive(m.decl.directives, Directive.Namespace)
            if d != nil {
                let mut obj = concat_all_parts(d.args...)
                obj += "::"
                obj += IdentCoder.func_ins(m)
                ret obj
            }
        }
        ret IdentCoder.func_ins(m)
    }

    fn tuple(mut self, mut m: &TupleExprModel): str {
        let mut obj = "std::make_tuple("
        for (_, mut d) in m.datas {
            obj += self.expr(d.model)
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
        obj += ")"
        ret obj
    }

    fn new_call(mut self, mut m: &BuiltinNewCallExprModel): str {
        let mut obj = "jule::new_ptr<"
        obj += TypeCoder.kind(m.kind)
        obj += ">("
        if m.init != nil {
            obj += self.expr(m.init)
        }
        obj += ")"
        ret obj
    }

    fn out_call(mut self, mut m: &BuiltinOutCallExprModel): str {
        if m.debug && env::PRODUCTION {
            ret ""
        }
        let mut obj = "jule::out("
        obj += self.expr(m.expr)
        obj += ")"
        ret obj
    }

    fn outln_call(mut self, mut m: &BuiltinOutlnCallExprModel): str {
        if m.debug && env::PRODUCTION {
            ret ""
        }
        let mut obj = "jule::outln("
        obj += self.expr(m.expr)
        obj += ")"
        ret obj
    }

    fn panic_call(mut self, mut m: &BuiltinPanicCallExprModel): str {
        let mut obj = "jule::panic("
        obj += self.expr(m.expr)
        obj += ` + jule::Str("\nlocation: `
        obj += self.oc.loc_info(m.token)
        obj += "\"));"
        ret obj
    }

    fn assert_call(mut self, mut m: &BuiltinAssertCallExprModel): str {
        if env::PRODUCTION {
            ret ""
        }
        let mut obj = "if (!("
        obj += self.expr(m.expr)
        obj += ")) jule::panic(jule::Str("
        obj += cstr_lit([]byte(m.log))
        obj += `) + jule::Str("\nlocation: `
        obj += self.oc.loc_info(m.token)
        obj += "\"));"
        ret obj
    }

    fn error_call(mut self, mut m: &BuiltinErrorCallExprModel): str {
        let mut obj = "return "
        if m.func.decl.is_void() {
            obj += "jule::VoidExceptional("
        } else {
            obj += "jule::Exceptional<"
            obj += TypeCoder.kind(m.func.result)
            obj += ">("
        }
        obj += self.expr(m.err)
        obj += ")"
        ret obj
    }

    fn make_call(mut self, mut m: &BuiltinMakeCallExprModel): str {
        let mut obj = ""
        if m.len != nil {
            obj += self.expr(m.len)
        } else {
            obj += "0"
        }
        if m.cap != nil {
            obj += "," + self.expr(m.cap)
        }

        if m.kind.slc().elem.enm() != nil {
            obj += ","
            obj += self.init_expr(m.kind.slc().elem)
            if m.cap != nil {
                obj = TypeCoder.kind(m.kind) + "::alloc(" + obj
            } else {
                obj = TypeCoder.kind(m.kind) + "::alloc_def(" + obj
            }
        } else {
            obj = TypeCoder.kind(m.kind) + "::alloc(" + obj
        }

        obj += ")"
        ret obj
    }

    fn push_to_slice(mut self, mut m: &PushToSliceExprModel): str {
        let dest = self.model(m.dest)
        let mut obj = dest
        obj += " = jule::alloc_for_append("
        obj += dest
        obj += ","
        obj += conv::itoa(m.elems.elems.len)
        obj += ");"
        for (_, mut e) in m.elems.elems {
            obj += dest
            // Use the "__push" function to skip allocation boundary checking.
            obj += ".__push("
            obj += self.model(e)
            obj += ");"
        }
        ret obj
    }

    fn append_call(mut self, mut m: &BuiltinAppendCallExprModel): str {
        let mut obj = "jule::append("
        obj += self.model(m.dest)
        obj += ","
        obj += self.model(m.elements)
        obj += ")"
        ret obj
    }

    fn clone_call(mut self, mut m: &BuiltinCloneCallExprModel): str {
        let mut obj = "jule::clone("
        obj += self.model(m.expr)
        obj += ")"
        ret obj
    }

    fn sizeof(mut self, mut m: &SizeofExprModel): str {
        let mut obj = "sizeof("
        obj += self.expr(m.expr)
        obj += ")"
        ret obj
    }

    fn alignof(mut self, mut m: &AlignofExprModel): str {
        let mut obj = "alignof("
        obj += self.expr(m.expr)
        obj += ")"
        ret obj
    }

    fn rune_lit(self, m: &RuneExprModel): str {
        if m.code <= 127 { // ASCII
            let mut b = sbtoa(byte(m.code))
            if b == "'" {
                b = "\\'"
            }
            ret "'" + b + "'"
        }
        ret itoa(i64(m.code))
    }

    fn structure_static(self, mut m: &StructStaticIdentExprModel): str {
        let mut obj = IdentCoder.structure_ins(m.structure)
        obj += "::"
        obj += IdentCoder.func_ins(m.method)
        ret obj
    }

    fn integrated_to_str(mut self, mut m: &IntegratedToStrExprModel): str {
        let mut obj = "jule::to_str("
        obj += self.model(m.expr)
        obj += ")"
        ret obj
    }

    fn ternary(mut self, mut m: &TernaryExprModel): str {
        let mut obj = "(("
        obj += self.model(m.condition)
        obj += ") ? ("
        obj += self.model(m.true_expr)
        obj += ") : ("
        obj += self.model(m.false_expr)
        obj += "))"
        ret obj
    }

    fn backend_emit(mut self, mut m: &BackendEmitExprModel): str {
        if m.exprs.len == 0 {
            ret m.code
        }
        for (i, mut expr) in m.exprs {
            m.exprs[i] = self.expr(expr)
        }
        ret fmt::format(m.code, m.exprs...)
    }

    fn free(mut self, mut m: &FreeExprModel): str {
        if env::RC {
            ret self.expr(m.expr) + ".dealloc()"
        }
        ret self.expr(m.expr) + ".__free()"
    }

    fn model(mut self, mut m: ExprModel): str {
        match type m {
        | &Data:
            ret self.model((&Data)(m).model)
        | &TypeKind:
            ret TypeCoder.kind((&TypeKind)(m))
        | &Const:
            ret self.constant((&Const)(m), false)
        | &Var:
            ret self.var((&Var)(m))
        | &Trait:
            ret IdentCoder.trait_decl((&Trait)(m))
        | &Struct:
            ret self.structure((&Struct)(m))
        | &StructIns:
            ret self.structure_ins((&StructIns)(m))
        | &FnIns:
            ret self.func_ins_common((&FnIns)(m))
        | &UnsafeBinopExprModel:
            ret self.unsafe_binary((&UnsafeBinopExprModel)(m).node)
        | &BinopExprModel:
            ret self.binary((&BinopExprModel)(m))
        | &UnaryExprModel:
            ret self.unary((&UnaryExprModel)(m))
        | &StructLitExprModel:
            ret self.structure_lit((&StructLitExprModel)(m))
        | &AllocStructLitExprModel:
            ret self.alloc_structure((&AllocStructLitExprModel)(m))
        | &CastingExprModel:
            ret self.casting((&CastingExprModel)(m))
        | &FnCallExprModel:
            ret self.func_call((&FnCallExprModel)(m))
        | &SliceExprModel:
            ret self.slice((&SliceExprModel)(m))
        | &ArrayExprModel:
            ret self.array((&ArrayExprModel)(m))
        | &UnsafeIndexingExprModel:
            ret self.unsafe_indexing((&UnsafeIndexingExprModel)(m))
        | &IndexingExprModel:
            ret self.indexing((&IndexingExprModel)(m))
        | &AnonFnExprModel:
            ret self.anon_func((&AnonFnExprModel)(m))
        | &MapExprModel:
            ret self.map((&MapExprModel)(m))
        | &SlicingExprModel:
            ret self.slicing((&SlicingExprModel)(m))
        | &TraitSubIdentExprModel:
            ret self.trait_sub((&TraitSubIdentExprModel)(m))
        | &StructSubIdentExprModel:
            ret self.structure_sub((&StructSubIdentExprModel)(m))
        | &CommonIdentExprModel:
            ret self.common_ident((&CommonIdentExprModel)(m))
        | &CommonSubIdentExprModel:
            ret self.common_sub((&CommonSubIdentExprModel)(m))
        | &TupleExprModel:
            ret self.tuple((&TupleExprModel)(m))
        | &BuiltinOutCallExprModel:
            ret self.out_call((&BuiltinOutCallExprModel)(m))
        | &BuiltinOutlnCallExprModel:
            ret self.outln_call((&BuiltinOutlnCallExprModel)(m))
        | &BuiltinNewCallExprModel:
            ret self.new_call((&BuiltinNewCallExprModel)(m))
        | &BuiltinPanicCallExprModel:
            ret self.panic_call((&BuiltinPanicCallExprModel)(m))
        | &BuiltinAssertCallExprModel:
            ret self.assert_call((&BuiltinAssertCallExprModel)(m))
        | &BuiltinErrorCallExprModel:
            ret self.error_call((&BuiltinErrorCallExprModel)(m))
        | &BuiltinMakeCallExprModel:
            ret self.make_call((&BuiltinMakeCallExprModel)(m))
        | &BuiltinAppendCallExprModel:
            ret self.append_call((&BuiltinAppendCallExprModel)(m))
        | &BuiltinCloneCallExprModel:
            ret self.clone_call((&BuiltinCloneCallExprModel)(m))
        | &SizeofExprModel:
            ret self.sizeof((&SizeofExprModel)(m))
        | &AlignofExprModel:
            ret self.alignof((&AlignofExprModel)(m))
        | &RuneExprModel:
            ret self.rune_lit((&RuneExprModel)(m))
        | &StructStaticIdentExprModel:
            ret self.structure_static((&StructStaticIdentExprModel)(m))
        | &IntegratedToStrExprModel:
            ret self.integrated_to_str((&IntegratedToStrExprModel)(m))
        | &TernaryExprModel:
            ret self.ternary((&TernaryExprModel)(m))
        | &BackendEmitExprModel:
            ret self.backend_emit((&BackendEmitExprModel)(m))
        | &FreeExprModel:
            ret self.free((&FreeExprModel)(m))
        |:
            ret "<unimplemented_expression_model>"
        }
    }

    fn expr(mut self, mut e: ExprModel): str {
        let mut obj = self.model(e)
        if obj.len == 0 || obj[0] != '(' {
            ret obj
        }
        match type e {
        | &BinopExprModel:
            obj = obj[1:obj.len-1]
        }
        ret obj
    }

    fn val(mut self, mut v: &Value): str {
        if v.data.is_const() {
            ret self.constant(v.data.constant, v.data.kind != nil && v.data.kind.prim().is_f32())
        }
        ret self.expr(v.data.model)
    }

    fn init_expr(mut self, mut t: &TypeKind): str {
        if t.ptr() != nil {
            ret "nullptr"
        }
        let mut enm = t.enm()
        if enm != nil {
            ret self.val(enm.items[0].value)
        }
        ret TypeCoder.kind(t) + "()"
    }
}

// Concatenate all strings into single string.
fn concat_all_parts(parts: ...Token): str {
    let mut s = ""
    for _, p in parts {
        s += p.kind
    }
    ret s
}

fn decompose_common_esq(b: byte): str {
    match b {
    | '\\':
        ret "\\\\"
    | '\'':
        ret "'"
    | '"':
        ret `\"`
    | '\a':
        ret `\a`
    | '\b':
        ret `\b`
    | '\f':
        ret `\f`
    | '\n':
        ret `\n`
    | '\r':
        ret `\r`
    | '\t':
        ret `\t`
    | '\v':
        ret `\v`
    |:
        ret ""
    }
}

fn sbtoa(b: byte): str {
    if b == 0 {
        ret "\\x00"
    }
    if b < utf8::RUNE_SELF { // ASCII, fast way.
        let seq = decompose_common_esq(b)
        if seq != "" {
            ret seq
        }
        if 32 <= b && b <= 126 {
            ret str(b)
        }
    }
    let seq = conv::fmt_uint(u64(b), 8)
    if seq.len == 2 {
        ret "\\0" + seq
    }
    ret "\\" + seq
}

fn cstr_bytes(bytes: []byte): str {
    let mut lit = ""
    for _, b in bytes {
        lit += sbtoa(b)
    }
    ret lit
}

fn cstr_lit(bytes: []byte): str {
    ret `"` + cstr_bytes(bytes) + `"`
}

fn ftoa(f: f64, bitsize: int): str {
    if bitsize != 32 {
        if f == f64(i64(f)) {
            ret itoa(i64(f))
        }
        if f == f64(u64(f)) {
            ret utoa(u64(f))
        }
    }
    let mut m = conv::fmt_float(f, 'f', -1, bitsize)
    if !strings::contains(m, ".") {
        m += ".0"
    }
    ret m
}

fn itoa(x: i64): str {
    match {
    | x == MAX_I64:
        ret "jule::MAX_I64"
    | x == MIN_I64:
        ret "jule::MIN_I64"
    }

    let fmt = conv::fmt_int(x, 10)
    if is_64bit(ARCH) {
        ret fmt + "LL"
    }
    ret fmt + "L"
}

fn utoa(x: u64): str {
    match {
    | x == MAX_U64:
        ret "jule::MAX_U64"
    }

    let fmt = conv::fmt_uint(x, 10)
    if is_64bit(ARCH) {
        ret fmt + "LLU"
    }
    ret fmt + "LU"
}

fn is_forwarded(&s: &Scope): bool {
    let last = s.stmts[s.stmts.len-1]
    match type last {
    | &Data:
        match type (&Data)(last).model {
        | &BuiltinErrorCallExprModel:
            ret true
        |:
            ret false
        }
    |:
        ret true
    }
}

fn is_builtin_call_has_debuginf(&m: &FnCallExprModel): bool {
    if !m.func.is_builtin() {
        ret false
    }
    match type m.expr {
    | &CommonSubIdentExprModel:
        let csie = (&CommonSubIdentExprModel)(m.expr)
        ret csie.ident == "swap"
    |:
        ret false
    }
}
