// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use conv for std::conv
use fmt for std::fmt
use std::jule::build::{Directive, is_64bit}
use std::jule::constant::{Const}
use std::jule::lex::{Token, TokenKind}
use std::jule::sema::{
    Var,
    Struct,
    FnIns,
    Trait,
    StructIns,
    FieldIns,
    TypeKind,
    Data,
    Value,
    ExprModel,
    BinopExprModel,
    UnaryExprModel,
    StructArgExprModel,
    StructLitExprModel,
    AllocStructLitExprModel,
    CastingExprModel,
    FnCallExprModel,
    SliceExprModel,
    IndexigExprModel,
    AnonFnExprModel,
    KeyValPairExprModel,
    MapExprModel,
    SlicingExprModel,
    TraitSubIdentExprModel,
    StructSubIdentExprModel,
    ArrayExprModel,
    CommonIdentExprModel,
    CommonSubIdentExprModel,
    TupleExprModel,
    BuiltinOutCallExprModel,
    BuiltinOutlnCallExprModel,
    BuiltinCloneCallExprModel,
    BuiltinNewCallExprModel,
    BuiltinPanicCallExprModel,
    BuiltinMakeCallExprModel,
    BuiltinAppendCallExprModel,
    BuiltinErrorCallExprModel,
    SizeofExprModel,
    AlignofExprModel,
    StrConstructorCallExprModel,
    RuneExprModel,
    StructStaticIdentExprModel,
    IntegratedToStrExprModel,
    TernaryExprModel,
    Scope,
}
use std::jule::types::{
    MAX_F32,
    MAX_F64,
    MIN_F32,
    MIN_F64,
    MAX_I64,
    MIN_I64,
    MAX_U64,
}
use math for std::math
use std::runtime::{ARCH}

// Ignore expression for std::tie function.
const CPP_IGNORE = "std::ignore"

// Represents default expression for type.
const CPP_DEFAULT_EXPR = "{}"

// Concatenate all strings into single string.
fn concat_all_parts(parts: ...Token): str {
    let mut s = ""
    for _, part in parts {
        s += part.kind
    }
    ret s
}

fn get_accessor(mut &t: &TypeKind): str {
    if t.sptr() != nil || t.ptr() != nil {
        ret "->"
    }
    ret str(TokenKind.Dot)
}

fn decompose_common_esq(b: byte): str {
    match b {
    | '\\': ret "\\\\"
    | '\'': ret "'"
    | '"':  ret `\"`
    | '\a': ret `\a`
    | '\b': ret `\b`
    | '\f': ret `\f`
    | '\n': ret `\n`
    | '\r': ret `\r`
    | '\t': ret `\t`
    | '\v': ret `\v`
    |:      ret ""
    }
}

fn sbtoa(b: byte): str {
    if b == 0 {
        ret "\\x00"
    }

    if b <= 127 { // ASCII
        let seq = decompose_common_esq(b)
        if seq != "" {
            ret seq
        }

        if 32 <= b && b <= 126 {
            ret str(b)
        }
    }

    let seq = conv::fmt_uint(u64(b), 8)
    if seq.len == 2 {
        ret "\\0" + seq
    }
    ret "\\" + seq
}

fn get_cstr_model(bytes: []byte): str {
    let mut lit = ""
    for _, b in bytes {
        lit += sbtoa(b)
    }

    ret `"` + lit + `"`
}

fn get_str_model(&c: &Const): str {
    let content = c.read_str()
    if content.len == 0 { // Empty.
        ret as_jt("str") + "()"
    }

    let bytes = []byte(content)
    let len = conv::fmt_int(bytes.len, 10)
    let lit = get_cstr_model(bytes)
    ret as_jt("str") + "(" + lit + ", " + len + ")"
}

fn get_bool_model(&c: &Const): str {
    if c.read_bool() {
        ret "true"
    }
    ret "false"
}

fn get_nil_model(): str { ret "nullptr" }

fn gen_float_special_cases(&x: f64): str {
    match {
    | math::is_nan(x):     ret "NAN"
    | math::is_inf(x, 1):  ret "INFINITY"
    | math::is_inf(x, -1): ret "-INFINITY"
    |:                     ret ""
    }
}

fn ftoa(f: f64, bitsize: int): str {
    if bitsize != 32 {
        if f == f64(i64(f)) {
            ret i64toa(i64(f))
        }
        if f == f64(u64(f)) {
            ret u64toa(u64(f))
        }
    }

    let mut m = conv::fmt_float(f, 'f', -1, bitsize)
    if m.find(".") == -1  {
        m += ".0"
    }
    ret m
}

fn get_f32_model(&c: &Const): str {
    let x = c.as_f64()

    // Special cases.
    let f = gen_float_special_cases(x)
    if f != "" {
        ret f
    }

    match {
    | x == MAX_F32: ret "jule::MAX_F32"
    | x == MIN_F32: ret "jule::MIN_F32"
    }

    ret ftoa(x, 32) + "f"
}

fn get_f64_model(&c: &Const): str {
    let x = c.as_f64()

    // Special cases.
    let f = gen_float_special_cases(x)
    if f != "" {
        ret f
    }

    match {
    | x == MAX_F64: ret "jule::MAX_F64"
    | x == MIN_F64: ret "jule::MIN_F64"
    }

    ret ftoa(x, 64)
}

fn get_float_model(mut &d: &Data): str {
    match {
    | d.kind.prim().is_f32(): ret get_f32_model(d.constant)
    |:                        ret get_f64_model(d.constant) // 64-bit
    }
}

fn i64toa(x: i64): str {
    match {
    | x == MAX_I64: ret "jule::MAX_I64"
    | x == MIN_I64: ret "jule::MIN_I64"
    }

    let fmt = conv::fmt_int(x, 10)
    if is_64bit(ARCH) {
        ret fmt + "LL"
    }
    ret fmt + "L"
}

fn get_i64_model(&c: &Const): str {
    ret i64toa(c.read_i64())
}

fn u64toa(x: u64): str {
    match {
    | x == MAX_U64:
        ret "jule::MAX_U64"
    }

    let fmt = conv::fmt_uint(x, 10)
    if is_64bit(ARCH) {
        ret fmt + "LLU"
    }
    ret fmt + "LU"
}

fn get_u64_model(c: &Const): str {
    ret u64toa(c.read_u64())
}

fn gen_const_expr(mut d: &Data): str {
    match {
    | d.constant.is_str():  ret get_str_model(d.constant)
    | d.constant.is_bool(): ret get_bool_model(d.constant)
    | d.constant.is_f64():  ret get_float_model(d)
    | d.constant.is_i64():  ret get_i64_model(d.constant)
    | d.constant.is_u64():  ret get_u64_model(d.constant)
    | d.constant.is_nil():  ret get_nil_model()
    |:                      ret "" // Here is should be unreachable code.
    }
}

fn gen_const_expr_model(m: &Const): str {
    match {
    | m.is_str():  ret get_str_model(m)
    | m.is_bool(): ret get_bool_model(m)
    | m.is_f64():  ret get_f64_model(m)
    | m.is_i64():  ret get_i64_model(m)
    | m.is_u64():  ret get_u64_model(m)
    | m.is_nil():  ret get_nil_model()
    |:             ret "" // Here is should be unreachable code.
    }
}

fn gen_div_by_zero_binop_expr_model(op: str, mut l: ExprModel, mut r: ExprModel): str {
    let mut op_func = ""
    match op {
    | str(TokenKind.Solidus): op_func = "div"
    | str(TokenKind.Percent): op_func = "mod"
    }

    if env::OPT_MATH {
        match type r {
        | &Const:
            op_func = "unsafe_" + op_func
        }
    }

    let mut obj = "jule::"
    obj += op_func
    obj += "("
    obj += gen_expr(l)
    obj += ","
    obj += gen_expr(r)
    obj += ")"
    ret obj
}

fn gen_binop_expr_model(mut m: &BinopExprModel): str {
    match m.op {
    | str(TokenKind.Solidus)
    | str(TokenKind.Percent):
        ret gen_div_by_zero_binop_expr_model(m.op, m.left, m.right)
    }

    let mut obj = "("
    obj += gen_expr_model(m.left)
    obj += " "
    obj += m.op
    obj += " "
    obj += gen_expr_model(m.right)
    obj += ")"
    ret obj
}

fn gen_var_expr_model(mut m: &Var): str {
    if m.cpp_linked {
        let d = find_directive(m.directives, str(Directive.Namespace))
        if d != nil {
            let mut obj = concat_all_parts(d.args...)
            obj += "::"
            obj += var_out_ident(m)
            ret obj
        }
    }
    ret var_out_ident(m)
}

fn gen_struct_expr_model(m: &Struct): str {
    ret gen_struct_kind(m)
}

fn gen_struct_ins_expr_model(mut m: &StructIns): str {
    ret gen_struct_kind_ins(m)
}

fn gen_unary_expr_model(mut m: &UnaryExprModel): str {
    if env::OPT_PTR && m.op == str(TokenKind.Star) {
        match type m.expr {
        | &UnaryExprModel:
            let mut um = (&UnaryExprModel)(m.expr)
            if um.op == str(TokenKind.Amper) {
                ret gen_expr_model(um.expr)
            }
        }
    }

    match m.op {
    | str(TokenKind.Caret):
        let mut obj = "(~("
        obj += gen_expr(m.expr)
        obj += "))"
        ret obj

    |:
        let mut obj = "("
        obj += m.op
        obj += "("
        obj += gen_expr(m.expr)
        obj += "))"
        ret obj
    }
}

fn gen_cpp_struct_lit_expr_model(mut m: &StructLitExprModel): str {
    let mut obj = "(" + gen_struct_kind_ins(m.strct)
    obj += "){"
    if m.args.len > 0 {
    iter:
        for (_, mut f) in m.strct.fields {
            if m.strct.decl.cpp_linked {
                for (_, mut arg) in m.args {
                    if arg.field == f {
                        obj += "."
                        obj += field_out_ident(f.decl)
                        obj += "="
                        obj += gen_expr(arg.expr)
                        obj += ","
                        continue iter
                    }
                }
                continue
            }

            obj += field_out_ident(f.decl)
            obj += ": "
            for (_, mut arg) in m.args {
                if arg.field == f {
                    obj += gen_expr(arg.expr)
                    obj += ","
                    continue iter
                }
            }
            obj += get_init_expr(f.kind)
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
    }
    obj += "}"
    ret obj
}

fn gen_struct_lit_expr_model(mut m: &StructLitExprModel): str {
    if m.strct.decl.cpp_linked {
        ret gen_cpp_struct_lit_expr_model(m)
    }

    let mut obj = struct_ins_out_ident(m.strct)
    obj += "("
    if m.args.len > 0 {
    iter:
        for (_, mut f) in m.strct.fields {
            for (_, mut arg) in m.args {
                if arg.field == f {
                    obj += gen_expr(arg.expr)
                    obj += ","
                    continue iter
                }
            }
            obj += get_init_expr(f.kind)
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
    }
    obj += ")"
    ret obj
}

fn gen_alloc_struct_lit_expr_model(mut m: &AllocStructLitExprModel): str {
    let mut obj = "jule::new_struct"
    if m.lit.strct.decl.has_ref_accessible() {
        obj += "_ptr"
    }
    obj += "<"
    obj += struct_ins_out_ident(m.lit.strct)
    obj += ">(new( std::nothrow ) "
    obj += gen_struct_lit_expr_model(m.lit)
    obj += ")"
    ret obj
}

fn gen_casting_expr_model(mut m: &CastingExprModel): str {
    let mut obj = ""
    match {
    | m.kind.prim() != nil && m.kind.prim().is_any():
        obj += gen_type_kind(m.kind)
        obj += "("
        obj += gen_expr_model(m.expr)
        obj += ")"

    | m.expr_kind.ptr() != nil
    | m.kind.ptr() != nil:
        obj += "(("
        obj += gen_type_kind(m.kind)
        obj += ")("
        obj += gen_expr(m.expr)
        obj += "))"

    | m.expr_kind.trt() != nil
    | m.expr_kind.prim() != nil && m.expr_kind.prim().is_any():
        obj += gen_expr_model(m.expr)
        obj += get_accessor(m.expr_kind)
        obj += "operator "
        obj += gen_type_kind(m.kind)
        obj += "()"

    |:
        obj += "static_cast<"
        obj += gen_type_kind(m.kind)
        obj += ">("
        obj += gen_expr(m.expr)
        obj += ")"
    }
    ret obj
}

fn gen_arg_expr_models(mut models: []ExprModel): str {
    if models.len == 0 {
        ret ""
    }

    let mut obj = ""
    for (_, mut m) in models {
        obj += gen_expr(m)
        obj += ","
    }
    obj = obj[:obj.len-1] // Remove last comma.
    ret obj
}

fn gen_expr_model_for_call(mut expr: ExprModel): str {
    match type expr {
    | &FnIns: ret gen_fn_ins_expr_model((&FnIns)(expr))
    |:        ret gen_expr_model(expr)
    }
}

fn gen_pure_fn_call_expr_model(mut &m: &FnCallExprModel): str {
    let mut obj = gen_expr_model_for_call(m.expr)
    if !m.func.is_builtin() {
        if m.func.decl.cpp_linked && m.func.generics.len > 0 {
            if !has_directive(m.func.decl.directives, str(Directive.Cdef)) {
                obj += "<"
                for (_, mut g) in m.func.generics {
                    obj += gen_type_kind(g)
                    obj += ","
                }
                obj = obj[:obj.len-1] // Remove last comma.
                obj += ">"
            }
        }
    }
    obj += "("
    obj += gen_arg_expr_models(m.args)
    obj += ")"

    if m.is_co {
        obj = "__JULE_CO(" + obj
        obj += ")"
    }

    ret obj
}

fn is_forwarded(&s: &Scope): bool {
    let last = s.stmts[s.stmts.len-1]
    match type last {
    | &Data:
        match type (&Data)(last).model {
        | &BuiltinErrorCallExprModel:
            ret true

        |:
            ret false
        }

    |:
        ret true
    }
}

fn gen_fn_call_expr_model(mut m: &FnCallExprModel): str {
    if m.func.is_builtin() || !m.func.decl.exceptional {
        ret gen_pure_fn_call_expr_model(m)
    }

    let mut obj = "({\n"
    add_indent()
    obj += indent()
    obj += "auto except = "
    obj += gen_pure_fn_call_expr_model(m)
    obj += ";\n"
    obj += indent()
    if m.except != nil {
        let forwarded = is_forwarded(m.except)
        obj += "(except.ok()) ? (except.result) : ("
        if forwarded {
            obj += "{"
        }
        obj += gen_scope(m.except)
        if forwarded {
            obj += " "
            obj += get_init_expr(m.func.result)
            obj += CPP_ST_TERM + "}"
        }
        obj += ");\n"
        done_indent()
    } else {
        obj += `if (!except.ok()) jule::panic(jule::Str("`
        obj += fmt::format(
            `unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: {}:{}:{}"));`,
            m.token.file.path(), conv::itoa(m.token.row), conv::itoa(m.token.column))
        obj += "\n"
        if !m.func.decl.is_void() {
            obj += indent()
            obj += "(except.result);\n"
            done_indent()
        }
    }

    obj += indent()
    obj += "})"
    ret obj
}

fn gen_slice_expr_model(mut m: &SliceExprModel): str {
    if m.elems.len == 0 {
        ret as_slice_kind(m.elem_kind) + "()"
    }

    let mut obj = as_slice_kind(m.elem_kind)
    obj += "({"
    obj += gen_arg_expr_models(m.elems)
    obj += "})"
    ret obj
}

fn gen_indexing_expr_model(mut m: &IndexigExprModel): str {
    let mut obj = gen_expr_model(m.expr.model)

    // Try access optimization.
    if env::OPT_ACCESS {
        let array = m.expr.kind.arr() != nil

        // Constants checked by semantic analysis for arrays, safe.
        if array && m.index.is_const() {
            obj += ".__at("
            obj += gen_expr(m.index.model)
            obj += ")"
            ret obj
        }

        match type m.index.model {
        | &Var:
            let i = (&Var)(m.index.model)
            if i.mutable || i.iter_relation == nil {
                break
            }
            match type m.expr.model {
            | &Var:
                let r = (&Var)(m.expr.model)

                // Iterated variable is indexed variable?
                if i.iter_relation.range == r {
                    obj += ".__at("
                    obj += gen_expr(m.index.model)
                    obj += ")"
                    ret obj
                }
            }
        }
    }

    // Index access with safety measures.
    obj += "["
    obj += gen_expr(m.index.model)
    obj += "]"
    ret obj
}

fn gen_anon_fn_expr_model(mut m: &AnonFnExprModel): str {
    let mut obj = gen_fn_kind(m.func)
    obj += "([=]"
    obj += gen_params_ins(m.func.params)
    obj += " mutable -> "
    obj += gen_fn_ins_result(m.func)
    obj += " "
    obj += gen_fn_scope(m.func)
    obj += ")"
    ret obj
}

fn gen_map_expr_model(mut m: &MapExprModel): str {
    let mut obj = as_jt("map")
    obj += "<"
    obj += gen_type_kind(m.key_kind)
    obj += ","
    obj += gen_type_kind(m.val_kind)
    obj += ">({"
    if m.entries.len > 0 {
        for (_, mut pair) in m.entries {
            let mut pair_obj = "{"
            pair_obj += gen_expr(pair.key)
            pair_obj += ","
            pair_obj += gen_expr(pair.val)
            pair_obj += "}"
            obj += pair_obj
            obj += ","
        }
        obj = obj[:obj.len-1] // Remove last comma.
    }
    obj += "})"
    ret obj
}

fn gen_slicing_expr_model(mut m: &SlicingExprModel): str {
    let mut obj = gen_expr_model(m.expr)
    obj += ".slice("
    obj += gen_expr(m.left)
    if m.right != nil {
        obj += ","
        obj += gen_expr(m.right)
    }
    obj += ")"
    ret obj
}

fn gen_trait_sub_ident_expr_model(mut m: &TraitSubIdentExprModel): str {
    let mut obj = gen_expr_model(m.expr)
    obj += ".get()._method_"
    obj += m.ident
    ret obj
}

fn gen_struct_sub_ident_expr_model(mut m: &StructSubIdentExprModel): str {
    let mut obj = gen_expr_model(m.expr)
    obj += get_accessor(m.expr_kind)
    if m.field != nil {
        obj += field_out_ident(m.field.decl)
    } else {
        obj += fn_ins_out_ident(m.method)
    }
    ret obj
}

fn gen_common_ident_expr_model(m: &CommonIdentExprModel): str {
    ret m.ident
}

fn gen_common_sub_ident_expr_model(mut m: &CommonSubIdentExprModel): str {
    let mut obj = gen_expr_model(m.expr)
    obj += get_accessor(m.expr_kind)
    obj += m.ident
    ret obj
}

fn gen_array_expr_model(mut m: &ArrayExprModel): str {
    if m.elems.len == 0 {
        ret gen_array_kind(m.kind) + "()"
    }

    let mut obj = gen_array_kind(m.kind)
    obj += "({"
    obj += gen_arg_expr_models(m.elems)
    obj += "})"
    ret obj
}

// Returns complete expression model of function instance.
// Usefull for strict type safety.
fn gen_fn_ins_expr_model_common(mut m: &FnIns): str {
    let mut obj = gen_fn_kind(m)
    obj += "("
    obj += gen_fn_ins_expr_model(m)
    obj += ")"
    ret obj
}

// Returns elementary expression model of function instance.
fn gen_fn_ins_expr_model(mut m: &FnIns): str {
    if m.decl != nil && m.decl.cpp_linked {
        let d = find_directive(m.decl.directives, str(Directive.Namespace))
        if d != nil {
            let mut obj = concat_all_parts(d.args...)
            obj += "::"
            obj += fn_ins_out_ident(m)
            ret obj
        }
    }
    ret fn_ins_out_ident(m)
}

fn gen_tuple_expr_model(mut m: &TupleExprModel): str {
    let mut obj = "std::make_tuple("
    for (_, mut d) in m.datas {
        obj += gen_expr(d.model)
        obj += ","
    }
    obj = obj[:obj.len-1] // Remove last comma.
    obj += ")"
    ret obj
}

fn gen_builtin_new_call_expr_model(mut m: &BuiltinNewCallExprModel): str {
    let mut obj = "jule::new_ptr<"
    obj += gen_type_kind(m.kind)
    obj += ">("
    if m.init != nil {
        obj += gen_expr(m.init)
    }
    obj += ")"
    ret obj
}

fn gen_builtin_out_call_expr_model(mut m: &BuiltinOutCallExprModel): str {
    let mut obj = "jule::out("
    obj += gen_expr(m.expr)
    obj += ")"
    ret obj
}

fn gen_builtin_outln_call_expr_model(mut m: &BuiltinOutlnCallExprModel): str {
    let mut obj = "jule::outln("
    obj += gen_expr(m.expr)
    obj += ")"
    ret obj
}

fn gen_builtin_panic_call_expr_model(mut m: &BuiltinPanicCallExprModel): str {
    let mut obj = "jule::panic("
    obj += gen_expr(m.expr)
    obj += ")"
    ret obj
}

fn gen_builtin_error_call_expr_model(mut m: &BuiltinErrorCallExprModel): str {
    let mut obj = "return "
    if m.func.decl.is_void() {
        obj += "jule::VoidExceptional("
    } else {
        obj += "jule::Exceptional<"
        obj += gen_type_kind(m.func.result)
        obj += ">("
    }
    obj += gen_expr(m.err)
    obj += ")"
    ret obj
}

fn gen_builtin_make_call_expr_model(mut m: &BuiltinMakeCallExprModel): str {
    let mut obj = ""
    if m.len != nil {
        obj += gen_expr(m.len)
    } else {
        obj += "0"
    }
    if m.cap != nil {
        obj += "," + gen_expr(m.cap)
    }

    if m.kind.slc().elem.enm() != nil {
        obj += ","
        obj += get_init_expr(m.kind.slc().elem)
        if m.cap != nil {
            obj = gen_type_kind(m.kind) + "::alloc(" + obj
        } else {
            obj = gen_type_kind(m.kind) + "::alloc_def(" + obj
        }
    } else {
        obj = gen_type_kind(m.kind) + "::alloc(" + obj
    }

    obj += ")"
    ret obj
}

fn gen_builtin_append_call_expr_model_assign_opt(
    same_dest: bool,
    &dest_expr: str,
    mut &dest_kind: &TypeKind,
    mut &s: &SliceExprModel,
    mut &m: &BuiltinAppendCallExprModel): str {
    let mut obj = ""
    if !same_dest {
        obj += dest_expr
        obj += " = jule::alloc_for_append("
        obj += gen_expr_model(m.dest)
        obj += ","
        obj += conv::itoa(s.elems.len)
        obj += ")" + CPP_ST_TERM
    }
    for (_, mut e) in s.elems {
        obj += dest_expr
        obj += get_accessor(dest_kind)
        obj += "push("
        obj += gen_expr_model(e)
        obj += ")" + CPP_ST_TERM
    }
    ret obj
}

fn gen_builtin_append_call_expr_model_assign(mut dest: ExprModel, mut m: &BuiltinAppendCallExprModel): (str, optimized: bool) {
    match type m.elements {
    | &SliceExprModel:
        match type dest {
        | &Var:
            let mut s = (&SliceExprModel)(m.elements)
            let dest_expr = gen_expr_model(dest)
            let mut dest_var = (&Var)(dest)
            let same_dest = m.dest == dest_var
            ret gen_builtin_append_call_expr_model_assign_opt(
                same_dest, dest_expr, dest_var.kind.kind, s, m), true

        | &StructSubIdentExprModel:
            let mut s = (&SliceExprModel)(m.elements)
            let dest_expr = gen_expr_model(dest)
            let mut dest_field = (&StructSubIdentExprModel)(dest).field
            let same_dest = m.dest == dest_field
            ret gen_builtin_append_call_expr_model_assign_opt(
                same_dest, dest_expr, dest_field.kind, s, m), true
        }

    }
    ret gen_builtin_append_call_expr_model(m), false
}

fn gen_builtin_append_call_expr_model(mut m: &BuiltinAppendCallExprModel): str {
    let mut obj = "jule::append("
    obj += gen_expr_model(m.dest)
    obj += ","
    obj += gen_expr_model(m.elements)
    obj += ")"
    ret obj
}

fn gen_builtin_clone_call_expr_model(mut m: &BuiltinCloneCallExprModel): str {
    let mut obj = "jule::clone("
    obj += gen_expr_model(m.expr)
    obj += ")"
    ret obj
}

fn gen_sizeof_expr_model(mut m: &SizeofExprModel): str {
    let mut obj = "sizeof("
    obj += gen_expr(m.expr)
    obj += ")"
    ret obj
}

fn gen_alignof_expr_model(mut m: &AlignofExprModel): str {
    let mut obj = "alignof("
    obj += gen_expr(m.expr)
    obj += ")"
    ret obj
}

fn gen_rune_expr_model(m: &RuneExprModel): str {
    if m.code <= 127 { // ASCII
        let mut b = sbtoa(byte(m.code))
        if b == "'" {
            b = "\\'"
        }
        ret "'" + b + "'"
    }
    ret i64toa(i64(m.code))
}

fn gen_struct_static_ident_expr_model(mut m: &StructStaticIdentExprModel): str {
    let mut obj = struct_ins_out_ident(m.structure)
    obj += "::"
    obj += fn_ins_out_ident(m.method)
    ret obj
}

fn gen_integrated_to_str_expr_model(mut m: &IntegratedToStrExprModel): str {
    let mut obj = "jule::to_str("
    obj += gen_expr_model(m.expr)
    obj += ")"
    ret obj
}

fn gen_ternary_expr_model(mut m: &TernaryExprModel): str {
    let mut obj = "(("
    obj += gen_expr_model(m.condition)
    obj += ") ? ("
    obj += gen_expr_model(m.true_expr)
    obj += ") : ("
    obj += gen_expr_model(m.false_expr)
    obj += "))"
    ret obj
}

fn gen_expr_model(mut m: ExprModel): str {
    match type m {
    | &TypeKind:
        ret gen_type_kind((&TypeKind)(m))

    | &Const:
        ret gen_const_expr_model((&Const)(m))

    | &Var:
        ret gen_var_expr_model((&Var)(m))

    | &Trait:
        ret trait_out_ident((&Trait)(m))

    | &Struct:
        ret gen_struct_expr_model((&Struct)(m))

    | &StructIns:
        ret gen_struct_ins_expr_model((&StructIns)(m))

    | &FnIns:
        ret gen_fn_ins_expr_model_common((&FnIns)(m))

    | &BinopExprModel:
        ret gen_binop_expr_model((&BinopExprModel)(m))

    | &UnaryExprModel:
        ret gen_unary_expr_model((&UnaryExprModel)(m))

    | &StructLitExprModel:
        ret gen_struct_lit_expr_model((&StructLitExprModel)(m))

    | &AllocStructLitExprModel:
        ret gen_alloc_struct_lit_expr_model((&AllocStructLitExprModel)(m))

    | &CastingExprModel:
        ret gen_casting_expr_model((&CastingExprModel)(m))

    | &FnCallExprModel:
        ret gen_fn_call_expr_model((&FnCallExprModel)(m))

    | &SliceExprModel:
        ret gen_slice_expr_model((&SliceExprModel)(m))

    | &ArrayExprModel:
        ret gen_array_expr_model((&ArrayExprModel)(m))

    | &IndexigExprModel:
        ret gen_indexing_expr_model((&IndexigExprModel)(m))

    | &AnonFnExprModel:
        ret gen_anon_fn_expr_model((&AnonFnExprModel)(m))

    | &MapExprModel:
        ret gen_map_expr_model((&MapExprModel)(m))

    | &SlicingExprModel:
        ret gen_slicing_expr_model((&SlicingExprModel)(m))

    | &TraitSubIdentExprModel:
        ret gen_trait_sub_ident_expr_model((&TraitSubIdentExprModel)(m))

    | &StructSubIdentExprModel:
        ret gen_struct_sub_ident_expr_model((&StructSubIdentExprModel)(m))

    | &CommonIdentExprModel:
        ret gen_common_ident_expr_model((&CommonIdentExprModel)(m))

    | &CommonSubIdentExprModel:
        ret gen_common_sub_ident_expr_model((&CommonSubIdentExprModel)(m))

    | &TupleExprModel:
        ret gen_tuple_expr_model((&TupleExprModel)(m))

    | &BuiltinOutCallExprModel:
        ret gen_builtin_out_call_expr_model((&BuiltinOutCallExprModel)(m))

    | &BuiltinOutlnCallExprModel:
        ret gen_builtin_outln_call_expr_model((&BuiltinOutlnCallExprModel)(m))

    | &BuiltinNewCallExprModel:
        ret gen_builtin_new_call_expr_model((&BuiltinNewCallExprModel)(m))

    | &BuiltinPanicCallExprModel:
        ret gen_builtin_panic_call_expr_model((&BuiltinPanicCallExprModel)(m))

    | &BuiltinErrorCallExprModel:
        ret gen_builtin_error_call_expr_model((&BuiltinErrorCallExprModel)(m))

    | &BuiltinMakeCallExprModel:
        ret gen_builtin_make_call_expr_model((&BuiltinMakeCallExprModel)(m))

    | &BuiltinAppendCallExprModel:
        ret gen_builtin_append_call_expr_model((&BuiltinAppendCallExprModel)(m))

    | &BuiltinCloneCallExprModel:
        ret gen_builtin_clone_call_expr_model((&BuiltinCloneCallExprModel)(m))

    | &SizeofExprModel:
        ret gen_sizeof_expr_model((&SizeofExprModel)(m))

    | &AlignofExprModel:
        ret gen_alignof_expr_model((&AlignofExprModel)(m))

    | &RuneExprModel:
        ret gen_rune_expr_model((&RuneExprModel)(m))

    | &StructStaticIdentExprModel:
        ret gen_struct_static_ident_expr_model((&StructStaticIdentExprModel)(m))

    | &IntegratedToStrExprModel:
        ret gen_integrated_to_str_expr_model((&IntegratedToStrExprModel)(m))

    | &TernaryExprModel:
        ret gen_ternary_expr_model((&TernaryExprModel)(m))

    |:
        ret "<unimplemented_expression_model>"
    }
}

fn gen_expr(mut e: ExprModel): str {
    let mut obj = gen_expr_model(e)
    if obj[0] != '(' {
        ret obj
    }

    match type e {
    | &BinopExprModel:
        obj = obj[1:obj.len-1]
    }
    ret obj
}

fn gen_val(mut v: &Value): str {
    if v.data.is_const() {
        ret gen_const_expr(v.data)
    }
    ret gen_expr(v.data.model)
}

fn get_init_expr(mut t: &TypeKind): str {
    if t.ptr() != nil {
        ret "nullptr"
    }

    let mut enm = t.enm()
    if enm != nil {
        ret gen_val(enm.items[0].value)
    }
    ret gen_type_kind(t) + "()"
}
