// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use opt::{
    RefExprModel,
    UnsafeBinopExprModel,
    UnsafeIndexingExprModel,
    PushToSliceExprModel,
    AppendToSliceExprModel,
    InlineStdInternalNosafeStobs,
    StrCompExprModel,
    EmptyCompareExprModel,
}
use conv for std::conv
use std::env::{Arch}
use fmt for std::fmt
use std::jule::build::{Directive, Is64Bit}
use std::jule::constant::{Const}
use std::jule::lex::{Token, TokenId, TokenKind}
use std::jule::sema::{
    Trait,
    Var,
    FnIns,
    StructIns,
    TypeKind,
    Data,
    Value,
    ExprModel,
    BinopExprModel,
    UnaryExprModel,
    StructLitExprModel,
    AllocStructLitExprModel,
    CastingExprModel,
    Stmt,
    FnCallExprModel,
    SliceExprModel,
    IndexingExprModel,
    AnonFnExprModel,
    MapExprModel,
    SlicingExprModel,
    TraitSubIdentExprModel,
    StructSubIdentExprModel,
    ArrayExprModel,
    CommonIdentExprModel,
    CommonSubIdentExprModel,
    TupleExprModel,
    BuiltinOutCallExprModel,
    BuiltinOutlnCallExprModel,
    BuiltinCloneCallExprModel,
    BuiltinNewCallExprModel,
    BuiltinPanicCallExprModel,
    BuiltinAssertCallExprModel,
    BuiltinMakeCallExprModel,
    BuiltinAppendCallExprModel,
    BuiltinErrorCallExprModel,
    BuiltinCopyCallExprModel,
    BuiltinLenCallExprModel,
    BuiltinCapCallExprModel,
    BuiltinDeleteCallExprModel,
    SizeofExprModel,
    AlignofExprModel,
    RuneExprModel,
    StructStaticIdentExprModel,
    IntegratedToStrExprModel,
    BackendEmitExprModel,
    FreeExprModel,
    OperandExprModel,
    Scope,
}
use types for std::jule::types::{
    MaxF32,
    MaxF64,
    MinF32,
    MinF64,
    MaxI64,
    MinI64,
    MaxU64,
}
use math for std::math
use strings for std::strings::{StrBuilder}
use utf8 for std::unicode::utf8

// Ignore expression for std::tie function.
const cppIgnore = "std::ignore"

// Represents default expression for type.
const cPpDefaultExpr = "{}"

type PrimKind: types::TypeKind

// Common group of semantic analysis expression model types and optimizer specific types.
enum compExprModel: type {
    ExprModel: ExprModel,
    str,                      // For built-in expressions.
    &UnsafeBinopExprModel,
    &UnsafeIndexingExprModel,
    &InlineStdInternalNosafeStobs,
    &StrCompExprModel,
    &RefExprModel,
    &EmptyCompareExprModel,
}

struct exprCoder {
    oc: &ObjectCoder
}

impl exprCoder {
    static fn new(mut &oc: &ObjectCoder): &exprCoder {
        ret &exprCoder{
            oc: oc,
        }
    }

    fn string(mut &self, &c: &Const) {
        let content = c.ReadStr()
        if len(content) == 0 { // Empty.
            self.oc.write(typeCoder.Str + "()")
            ret
        }
        let len = conv::FmtInt(i64(len(content)), 10)
        self.oc.write(typeCoder.Str)
        self.oc.write("(")
        cstrLit(self.oc.Obj, content)
        self.oc.write(", ")
        self.oc.write(len)
        self.oc.write(")")
    }

    fn boolean(mut &self, b: bool) {
        if b {
            self.oc.write("true")
        } else {
            self.oc.write("false")
        }
    }

    fn nilLit(mut &self) {
        self.oc.write("nullptr")
    }

    fn ftoaSpecialCases(mut &self, &x: f64): bool {
        match {
        | math::IsNaN(x):
            self.oc.write("NAN")
        | math::IsInf(x, 1):
            self.oc.write("INFINITY")
        | math::IsInf(x, -1):
            self.oc.write("-INFINITY")
        |:
            ret false
        }
        ret true
    }

    fn float32(mut &self, &c: &Const) {
        let x = c.AsF64()

        // Special cases.
        if self.ftoaSpecialCases(x) {
            ret
        }

        match {
        | x == MaxF32:
            self.oc.write("jule::MAX_F32")
        | x == MinF32:
            self.oc.write("jule::MIN_F32")
        |:
            ftoa(self.oc.Obj, x, 1 << 5)
            self.oc.write("f")
        }
    }

    fn float64(mut &self, &c: &Const) {
        let x = c.AsF64()

        // Special cases.
        if self.ftoaSpecialCases(x) {
            ret
        }

        match {
        | x == MaxF64:
            self.oc.write("jule::MAX_F64")
        | x == MinF64:
            self.oc.write("jule::MIN_F64")
        |:
            ftoa(self.oc.Obj, x, 1 << 6)
        }
    }

    fn constant(mut &self, mut c: &Const) {
        match {
        | c.IsStr():
            self.string(c)
        | c.IsBool():
            self.boolean(c.ReadBool())
        | c.IsF64():
            match {
            | c.Kind == PrimKind.F32:
                self.float32(c)
            |:
                self.float64(c)
            }
        | c.IsI64():
            itoa(self.oc.Obj, c.ReadI64())
        | c.IsU64():
            utoa(self.oc.Obj, c.ReadU64())
        | c.IsNil():
            self.nilLit()
        |:
            self.oc.write("<unimplemented_constant_expression>")
        }
    }

    fn divByZeroBinary(mut &self, &op: &Token, mut &l: &OperandExprModel, mut &r: &OperandExprModel) {
        self.oc.write("jule::")
        match op.Id {
        | TokenId.Solidus
        | TokenId.SolidusEq:
            self.oc.write("div(")
        | TokenId.Percent
        | TokenId.PercentEq:
            self.oc.write("mod(")
        }

        if !env::Production {
            self.oc.write("\"")
            self.oc.locInfo(op)
            self.oc.write("\",")
        }
        self.possibleRefExpr(l.Model)
        self.oc.write(",")
        self.possibleRefExpr(r.Model)
        self.oc.write(")")
    }

    fn unsafeBinary(mut &self, mut m: &BinopExprModel) {
        if m.Op.Id == TokenId.Eqs || m.Op.Id == TokenId.NotEq {
            // If this binary operator comparing <any> type.
            // The m.Left is will be <any> one always.
            if isAny(m.Left.Kind) {
                if !m.Right.Kind.IsNil() && !isAny(m.Right.Kind) {
                    self.oc.write("(")
                    if m.Op.Id == TokenId.NotEq {
                        self.oc.write("!")
                    }
                    let i = self.oc.pushAnyType(m.Right.Kind)
                    self.oc.write(anyTypeIdent)
                    self.oc.write(conv::Itoa(i))
                    self.oc.write("_compare(")
                    self.possibleRefExpr(m.Left.Model)
                    self.oc.write(", ")
                    self.possibleRefExpr(m.Right.Model)
                    self.oc.write("))")
                    ret
                }
            }
        }
        self.oc.write("(")
        self.possibleRefExpr(m.Left.Model)
        self.oc.write(" ")
        self.oc.write(m.Op.Kind)
        self.oc.write(" ")
        self.possibleRefExpr(m.Right.Model)
        self.oc.write(")")
    }

    fn binary(mut &self, mut m: &BinopExprModel) {
        match m.Op.Id {
        | TokenId.Solidus | TokenId.Percent:
            // Do not check division of structures safety.
            if m.Left.Kind.Struct() == nil {
                self.divByZeroBinary(m.Op, m.Left, m.Right)
                ret
            }
        }
        self.unsafeBinary(m)
    }

    fn var(mut &self, mut m: &Var) {
        if m.Binded {
            let d = findDirective(m.Directives, Directive.Namespace)
            if d != nil {
                self.oc.write(concatAllParts(d.Args...))
                self.oc.write("::")
            }
        }
        self.oc.write(identCoder.var(m))
    }

    fn structureIns(mut &self, mut m: &StructIns) {
        self.oc.write(self.oc.tc.structureIns(m))
    }

    fn unary(mut &self, mut m: &UnaryExprModel) {
        match m.Op.Id {
        | TokenId.Caret:
            self.oc.write("(~(")
            self.possibleRefExpr(m.Expr.Model)
            self.oc.write("))")
            ret
        | TokenId.Star:
            if env::Production || m.Expr.Kind.Sptr() == nil {
                break
            }
            self.possibleRefExpr(m.Expr.Model)
            self.oc.write(".get(\"")
            self.oc.locInfo(m.Op)
            self.oc.write("\")")
            ret
        }
        self.oc.write("(")
        self.oc.write(m.Op.Kind)
        self.oc.write("(")
        self.possibleRefExpr(m.Expr.Model)
        self.oc.write("))")
    }

    fn structureLit(mut &self, mut m: &StructLitExprModel) {
        if m.Strct.Decl.Binded {
            self.oc.write("(")
        }
        self.oc.write(identCoder.structureIns(m.Strct))
        if m.Strct.Decl.Binded {
            self.oc.write(")")
        }
        self.oc.write("{")
        if len(m.Args) > 0 {
            // Fields are should be in order.
            // In other words, GCC will produce error(s).
        iter:
            for i, f in m.Strct.Fields {
                for (_, mut arg) in m.Args {
                    if arg.Field == f {
                        self.oc.write(".")
                        self.oc.write(identCoder.field(arg.Field.Decl))
                        self.oc.write("=")
                        self.possibleRefExpr(arg.Expr.Model)
                        if len(m.Strct.Fields)-i > 1 {
                            self.oc.write(", ")
                        }
                        continue iter
                    }
                }
            }
        }
        self.oc.write("}")
    }

    fn allocStructure(mut &self, mut m: &AllocStructLitExprModel) {
        self.oc.write("jule::new_ptr<")
        self.oc.write(identCoder.structureIns(m.Lit.Strct))
        self.oc.write(">(")
        self.structureLit(m.Lit)
        self.oc.write(")")
    }

    fn possibleRefExpr(mut &self, expr: compExprModel) {
        match type expr {
        | &Var:
            let v = (&Var)(expr)
            if v.Reference {
                self.oc.write("(*(")
                self.model(expr)
                self.oc.write("))")
                ret
            }
        }
        self.model(expr)
    }

    fn castTraitFromTrait(mut &self, mut &m: &CastingExprModel, mut t1: &Trait, mut t2: &Trait) {
        self.possibleRefExpr(m.Expr)
        self.oc.write(".mask<")
        self.oc.write(identCoder.traitDecl(t1))
        self.oc.write(">(")
        self.oc.pushAndWriteMaskMapper(t1, t2)
        self.oc.write(")")
    }

    // Casting expression.
    //
    // Special cases:
    //  - The any type castings should be came first than others.
    //    Otherwise, code generation might be wrong because <any> the
    //    uses special casting algorithms.
    fn casting(mut &self, mut m: &CastingExprModel) {
        match {
        | isAny(m.Kind):
            if m.ExprKind.IsNil() {
                self.oc.write(typeCoder.Any + "()")
                ret
            }
            if m.ExprKind.TypeEnum() != nil {
                self.possibleRefExpr(m.Expr)
                ret
            }
            let i = self.oc.pushAnyType(m.ExprKind)
            self.oc.write(typeCoder.Any + "(")
            match type m.Expr {
            | &Const:
                let prim = m.ExprKind.Prim()
                if prim != nil && types::IsInt(prim.Kind) {
                    self.oc.write("static_cast<")
                    self.oc.write(self.oc.tc.prim(prim))
                    self.oc.write(">(")
                    self.possibleRefExpr(m.Expr)
                    self.oc.write(")")
                    break
                }
                fall
            |:
                self.possibleRefExpr(m.Expr)
            }
            self.oc.write(", &" + anyTypeIdent)
            self.oc.write(conv::Itoa(i))
            self.oc.write(")")
            ret
        | isAny(m.ExprKind):
            self.possibleRefExpr(m.Expr)
            self.oc.write(".")
            if m.Kind.Sptr() != nil {
                self.oc.write("cast_ptr<")
                self.oc.write(self.oc.tc.kind(m.Kind.Sptr().Elem))
            } else {
                self.oc.write("cast<")
                self.oc.write(self.oc.tc.kind(m.Kind))
            }
            self.oc.write(">(")
            if !env::Production {
                self.oc.write("\"")
                self.oc.locInfo(m.Token)
                self.oc.write("\", ")
            }
            self.oc.write("&" + anyTypeIdent)
            self.oc.write(conv::Itoa(self.oc.pushAnyType(m.Kind)))
            self.oc.write(")")
            ret
        | m.ExprKind.Ptr() != nil
        | m.Kind.Ptr() != nil:
            self.oc.write("((")
            self.oc.write(self.oc.tc.kind(m.Kind))
            self.oc.write(")(")
            self.possibleRefExpr(m.Expr)
            self.oc.write("))")
            ret
        | m.ExprKind.Trait() != nil:
            if m.Kind.Trait() != nil {
                self.castTraitFromTrait(m, m.Kind.Trait(), m.ExprKind.Trait())
                ret
            }
            self.possibleRefExpr(m.Expr)
            self.oc.write(".")
            if m.Kind.Sptr() != nil {
                self.oc.write("cast_ptr<")
                self.oc.write(self.oc.tc.kind(m.Kind.Sptr().Elem))
            } else {
                self.oc.write("cast<")
                self.oc.write(self.oc.tc.kind(m.Kind))
            }
            self.oc.write(">(")
            if !env::Production {
                self.oc.write("\"")
                self.oc.locInfo(m.Token)
                self.oc.write("\", ")
            }
            self.oc.write(conv::Itoa(self.oc.findTypeOffset(m.ExprKind.Trait(), m.Kind)))
            self.oc.write(")")
            ret
        | m.Kind.Trait() != nil:
            self.oc.write(self.oc.tc.kind(m.Kind))
            self.oc.write("(")
            self.possibleRefExpr(m.Expr)
            self.oc.write(", ")
            self.oc.write(conv::Itoa(self.oc.findTypeOffset(m.Kind.Trait(), m.ExprKind)))
            self.oc.write(")")
            ret
        }
        let prim = m.Kind.Prim()
        let eprim = m.ExprKind.Prim()
        if eprim != nil && prim != nil && prim.IsStr() {
            if eprim.IsU8() {
                self.oc.write(typeCoder.Str + "::from_byte(")
            } else {
                self.oc.write(typeCoder.Str + "::from_rune(")
            }
            self.possibleRefExpr(m.Expr)
            self.oc.write(")")
            ret
        }
        self.oc.write("static_cast<")
        self.oc.write(self.oc.tc.kind(m.Kind))
        self.oc.write(">(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn models(mut &self, mut args: []ExprModel) {
        if len(args) == 0 {
            ret
        }
        for (i, mut a) in args {
            self.possibleRefExpr(a)
            if len(args)-i > 1 {
                self.oc.write(",")
            }
        }
    }

    fn args(mut &self, mut &m: &FnCallExprModel) {
        let mut j = 0
        if m.Func.Owner != nil && !m.Func.Decl.Statically ||
            len(m.Func.Params) > 0 && m.Func.Params[0].Decl.IsSelf() {
            j++ // Skip receiver parameter.
        }
        for i, arg in m.Args {
            let p = m.Func.Params[j]
            if p.Decl != nil && p.Decl.Reference {
                match type arg {
                | &Var:
                    let v = (&Var)(arg)
                    if v.Reference {
                        self.model(arg)
                        goto end
                    }
                }
                self.oc.write("&(")
                self.model(arg)
                self.oc.write(")")
                goto end
            }
            self.possibleRefExpr(arg)
        end:
            if len(m.Args)-i > 1 {
                self.oc.write(", ")
            }
            j++
        }
    }

    fn modelForCall(mut &self, mut expr: compExprModel) {
        match type expr {
        | &FnIns:
            self.funcIns((&FnIns)(expr))
            ret
        | &StructSubIdentExprModel:
            let mut ssie = (&StructSubIdentExprModel)(expr)
            if ssie.Method != nil {
                self.funcIns(ssie.Method)
                ret
            }
        }
        self.possibleRefExpr(expr)
    }

    fn pushCallInf(mut &self, &m: &FnCallExprModel) {
        if env::Production || (!m.Func.Anon && !isBuiltinCallHasDebuginf(m)) {
            self.oc.write("(")
            ret
        }
        if m.Func.Anon {
            match type m.Expr {
            | &StructSubIdentExprModel:
                if (&StructSubIdentExprModel)(m.Expr).Field.Decl.Owner.Binded {
                    self.oc.write("(")
                    ret
                }
                fall
            |:
                self.oc.write(".call")
            }
        }
        self.oc.write("(\"")
        self.oc.locInfo(m.Token)
        self.oc.write("\"")
        if len(m.Args) != 0 {
            self.oc.write(", ")
        }
    }

    fn isWrapped(mut &self, mut &m: &FnCallExprModel): bool {
        if !m.Func.IsBuiltin() && len(m.Func.Decl.Params) > 0 && m.Func.Decl.Params[0].IsSelf() {
            match type m.Expr {
            | &StructSubIdentExprModel:
                let mut ssie = (&StructSubIdentExprModel)(m.Expr)
                match {
                | m.Func.Decl.Params[0].IsRef()
                | ssie.Expr.Kind.Sptr() != nil:
                    break
                |:
                    if ssie.Expr.Kind.Struct() != nil {
                        if !ssie.Expr.Lvalue {
                            self.oc.write("({ auto _wrap_copy = ")
                            self.model(ssie.Expr.Model)
                            self.oc.write("; ")
                            ret true
                        }
                    }
                }
            }
        }
        ret false
    }

    fn pureFuncCall(mut &self, mut &m: &FnCallExprModel) {
        let wrapped = self.isWrapped(m)
        self.modelForCall(m.Expr)
        if !m.Func.IsBuiltin() {
            if m.Func.Decl.Binded && len(m.Func.Generics) > 0 {
                if !hasDirective(m.Func.Decl.Directives, Directive.Cdef) {
                    self.oc.write("<")
                    for (i, mut g) in m.Func.Generics {
                        self.oc.write(self.oc.tc.kind(g.Kind))
                        if len(m.Func.Generics)-i > 1 {
                            self.oc.write(", ")
                        }
                    }
                    self.oc.write(">")
                }
            }
        }
        self.pushCallInf(m)
        let mut locinfo = false
        if !m.Func.IsBuiltin() && len(m.Func.Decl.Params) > 0 && m.Func.Decl.Params[0].IsSelf() {
            match type m.Expr {
            | &StructSubIdentExprModel:
                let mut ssie = (&StructSubIdentExprModel)(m.Expr)
                match {
                | m.Func.Decl.Params[0].IsRef():
                    // Ignore dereferencing, use data directly to call method.
                    self.possibleRefExpr((&UnaryExprModel)(ssie.Expr.Model).Expr.Model)
                | ssie.Expr.Kind.Sptr() != nil:
                    // Ignore dereferencing, use data directly to call [ptr] method.
                    self.possibleRefExpr((&UnaryExprModel)(ssie.Expr.Model).Expr.Model)
                    self.oc.write(".ptr(")
                    if !env::Production {
                        self.oc.write("\"")
                        self.oc.locInfo(m.Token)
                        self.oc.write("\"")
                    }
                    self.oc.write(")")
                |:
                    if ssie.Expr.Kind.Struct() != nil {
                        match type ssie.Expr.Model {
                        | &Var:
                            let v = (&Var)(ssie.Expr.Model)
                            if v.Reference {
                                break
                            }
                            fall
                        |:
                            // Add address taking operation for non-pointers.
                            self.oc.write("&")
                        }
                    }
                    if wrapped {
                        self.oc.write("_wrap_copy")
                    } else if ssie.Expr.Kind.Ptr() == nil {
                        self.model(ssie.Expr.Model)
                    } else {
                        // Ignore dereferencing, use data directly to call method.
                        self.possibleRefExpr((&UnaryExprModel)(ssie.Expr.Model).Expr.Model)
                    }
                }
                if len(m.Args) > 0 {
                    self.oc.write(", ")
                }
            | &TraitSubIdentExprModel:
                self.possibleRefExpr((&TraitSubIdentExprModel)(m.Expr).Expr)
                if !env::Production {
                    locinfo = true
                }
                if len(m.Args) > 0 {
                    self.oc.write(", ")
                }
            }
        }
        self.args(m)
        if locinfo {
            self.oc.write(", \"")
            self.oc.locInfo(m.Token)
            self.oc.write("\"")
        }
        self.oc.write(")")

        if wrapped {
            self.oc.write("; })")
        }
    }

    fn coFuncCall(mut &self, mut &m: &FnCallExprModel) {
        self.oc.write("{\n")
        self.oc.addIndent()
        let mut head = StrBuilder.New(1 << 5)
        head.WriteStr("std::thread([")
        if m.Func.Owner != nil {
            head.WriteStr(identCoder.Self)
            if len(m.Args) > 0 {
                head.WriteStr(", ")
            }
        }
        for i, arg in m.Args {
            if i > 0 {
                head.WriteStr(", ")
            }
            match type arg {
            | &Var:
                let mut v = (&Var)(arg)
                head.WriteStr(identCoder.var(v))
                continue
            }
            let name = "_co_arg_" + conv::Itoa(i)
            head.WriteStr(name)
            self.oc.indent()
            self.oc.write(self.oc.tc.kind(m.Func.Params[i].Kind))
            self.oc.write(" ")
            if m.Func.Params[i].Decl.Reference {
                self.oc.write("&")
            }
            self.oc.write(name)
            self.oc.write(" = ")
            self.possibleRefExpr(arg)
            self.oc.write(";\n")
            let argS: any = name
            m.Args[i] = unsafe { *(*ExprModel)(&argS) }
        }
        self.oc.indent()
        self.oc.Obj.Write(unsafe{ head.Buf() })
        self.oc.write("](void) mutable -> void {\n")
        self.oc.addIndent()
        self.oc.indent()
        self.pureFuncCall(m)
        self.oc.write(";\n")
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}).detach();\n")
        self.oc.doneIndent()
        self.oc.indent()
        self.oc.write("}")
    }

    fn writeUseExpr(mut &self, mut &f: &FnIns, mut d: &Data) {
        if d.Kind.Tup() == nil {
            self.possibleRefExpr(d.Model)
            self.oc.write(";")
            ret
        }
        let mut tup = (&TupleExprModel)(d.Model)
        self.oc.tc.rc.tup(self.oc.Obj, f.Result.Tup())
        self.oc.write("{")
        for i, data in tup.Datas {
            self.oc.write("." + resultArgName)
            self.oc.write(conv::Itoa(i))
            self.oc.write("=")
            self.possibleRefExpr(data.Model)
            if len(tup.Datas)-i > 1 {
                self.oc.write(", ")
            }
        }
        self.oc.write("};")
    }

    fn funcCall(mut &self, mut m: &FnCallExprModel) {
        if m.IsCo {
            self.coFuncCall(m)
            ret
        }
        if m.Func.IsBuiltin() ||
            !m.Func.Decl.Exceptional ||
            m.Except != nil && len(m.Except.Stmts) == 0 {
            self.pureFuncCall(m)
            ret
        }

        // Generate code for exceptional.
        self.oc.write("({\n")
        self.oc.addIndent()
        self.oc.indent()
        self.oc.write("auto except = ")
        self.pureFuncCall(m)
        self.oc.write(";\n")
        self.oc.indent()
        if m.Except != nil {
            if m.Func.Result == nil || !m.Assigned {
                self.oc.write("if (!except.ok()) ")
                self.oc.sc.scope(m.Except)
                self.oc.write("\n")
            } else {
                let forwarded = isForwarded(m.Except)
                self.oc.write("(except.ok()) ? (except.result) : (")
                if forwarded {
                    self.oc.write("{")
                }
                let mut stmt = m.Except.Stmts[len(m.Except.Stmts)-1]
                match type stmt {
                | &Data:
                    m.Except.Stmts = m.Except.Stmts[:len(m.Except.Stmts)-1]
                    self.oc.write("{\n")
                    self.oc.addIndent()
                    self.oc.sc.scopeStmts(m.Except)
                    self.oc.write("\n")
                    self.oc.indent()
                    self.writeUseExpr(m.Func, (&Data)(stmt))
                    self.oc.write("\n")
                    self.oc.doneIndent()
                    self.oc.indent()
                    self.oc.write("}")
                |:
                    self.oc.sc.scope(m.Except)
                }
                if forwarded {
                    self.oc.write(" ")
                    self.initExpr(m.Func.Result)
                    self.oc.write(";}")
                }
                self.oc.write(");\n")
            }
            self.oc.doneIndent()
        } else {
            self.oc.write(`if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: `)
            self.oc.locInfo(m.Token)
            self.oc.write("\"));\n")
            if !m.Func.Decl.IsVoid() {
                self.oc.indent()
                self.oc.write("(except.result);\n")
            }
            self.oc.doneIndent()
        }

        self.oc.indent()
        self.oc.write("})")
    }

    fn slice(mut &self, mut m: &SliceExprModel) {
        if len(m.Elems) == 0 {
            self.oc.write(self.oc.tc.asSlice(m.ElemKind))
            self.oc.write("()")
            ret
        }
        self.oc.write(self.oc.tc.asSlice(m.ElemKind))
        self.oc.write("::make({")
        self.models(m.Elems)
        self.oc.write("})")
    }

    fn indexing(mut &self, mut m: &IndexingExprModel) {
        self.possibleRefExpr(m.Expr.Model)
        // Index access with safety measures.
        match {
        | env::Production
        | m.Expr.Kind.Ptr() != nil
        | m.Expr.Kind.Map() != nil
        | isExprComesFromBind(m.Expr):
            self.oc.write("[")
            self.possibleRefExpr(m.Index.Model)
            self.oc.write("]")
        |:
            self.oc.write(".at(\"")
            self.oc.locInfo(m.Token)
            self.oc.write("\", ")
            self.possibleRefExpr(m.Index.Model)
            self.oc.write(")")
        }
    }

    fn unsafeIndexing(mut &self, mut m: &UnsafeIndexingExprModel) {
        self.possibleRefExpr(m.Node.Expr.Model)
        // Index access with safety measures.
        match {
        | env::Production
        | m.Node.Expr.Kind.Ptr() != nil
        | m.Node.Expr.Kind.Map() != nil:
            self.oc.write("[")
            self.possibleRefExpr(m.Node.Index.Model)
            self.oc.write("]")
        |:
            self.oc.write(".__at(")
            self.possibleRefExpr(m.Node.Index.Model)
            self.oc.write(")")
        }
    }

    fn anonFunc(mut &self, mut m: &AnonFnExprModel) {
        self.oc.write(self.oc.tc.func(m.Func))
        self.oc.write("([=]")
        self.oc.paramsIns(m.Func.Params)
        self.oc.write(" mutable -> ")
        self.oc.tc.funcInsResult(self.oc.Obj, m.Func)
        self.oc.write(" ")
        self.oc.sc.funcScope(m.Func)
        self.oc.write(")")
    }

    fn mapExpr(mut &self, mut m: &MapExprModel) {
        self.oc.write(typeCoder.Map + "<")
        self.oc.write(self.oc.tc.kind(m.KeyKind))
        self.oc.write(", ")
        self.oc.write(self.oc.tc.kind(m.ValKind))
        self.oc.write(">({")
        if len(m.Entries) > 0 {
            for (i, mut pair) in m.Entries {
                self.oc.write("{")
                self.possibleRefExpr(pair.Key)
                self.oc.write(",")
                self.possibleRefExpr(pair.Val)
                self.oc.write("}")
                if len(m.Entries)-i > 1 {
                    self.oc.write(",")
                }
            }
        }
        self.oc.write("})")
    }

    fn slicing(mut &self, mut m: &SlicingExprModel) {
        self.possibleRefExpr(m.Expr)
        self.oc.write(".slice(")
        if !env::Production {
            self.oc.write("\"")
            self.oc.locInfo(m.Token)
            self.oc.write("\", ")
        }
        self.possibleRefExpr(m.Left)
        if m.Right != nil {
            self.oc.write(", ")
            self.possibleRefExpr(m.Right)
        }
        self.oc.write(")")
    }

    fn traitSub(mut &self, mut m: &TraitSubIdentExprModel) {
        self.oc.write(identCoder.traitDecl(m.Trt))
        self.oc.write("_mptr_data")
        self.oc.write("[(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(").type_offset].")
        self.oc.write(identCoder.func(m.Method))
    }

    fn structureSub(mut &self, mut m: &StructSubIdentExprModel) {
        self.possibleRefExpr(m.Expr.Model)
        if m.Field == nil {
            ret
        }
        self.oc.write(".")
        self.oc.write(identCoder.field(m.Field.Decl))
    }

    fn commonIdent(mut &self, m: &CommonIdentExprModel) {
        self.oc.write(m.Ident)
    }

    fn commonSub(mut &self, mut m: &CommonSubIdentExprModel) {
        self.possibleRefExpr(m.Expr)
        self.oc.write(".")
        self.oc.write(m.Ident)
    }

    fn array(mut &self, mut m: &ArrayExprModel) {
        self.oc.write(self.oc.tc.array(m.Kind))
        if len(m.Elems) == 0 {
            self.oc.write("()")
            ret
        }

        // Filled.
        if len(m.Elems) == 2 && m.Elems[1] == nil {
            self.oc.write("(")
            self.possibleRefExpr(m.Elems[0])
            self.oc.write(")")
            ret
        }

        self.oc.write("({")
        self.models(m.Elems)
        self.oc.write("})")
        ret
    }

    // Writes complete expression model of function instance.
    // Usefull for strict type safety.
    fn funcInsCommon(mut &self, mut m: &FnIns) {
        self.oc.write(self.oc.tc.func(m))
        self.oc.write("(")
        self.funcIns(m)
        self.oc.write(")")
    }

    fn funcIns(mut &self, mut m: &FnIns) {
        if m.Decl != nil && m.Decl.Binded {
            let d = findDirective(m.Decl.Directives, Directive.Namespace)
            if d != nil {
                self.oc.write(concatAllParts(d.Args...))
                self.oc.write("::")
            }
        }
        self.oc.write(identCoder.funcIns(m))
    }

    fn tuple(mut &self, mut m: &TupleExprModel) {
        for (i, mut d) in m.Datas {
            self.possibleRefExpr(d.Model)
            self.oc.write(";")
            if len(m.Datas)-i > 1 {
                self.oc.write("\n")
                self.oc.indent()
            }
        }
    }

    fn newCall(mut &self, mut m: &BuiltinNewCallExprModel) {
        self.oc.write("jule::new_ptr<")
        self.oc.write(self.oc.tc.kind(m.Kind))
        self.oc.write(">(")
        if m.Init != nil {
            self.possibleRefExpr(m.Init)
        }
        self.oc.write(")")
    }

    fn outCall(mut &self, mut m: &BuiltinOutCallExprModel) {
        if m.Debug && env::Production {
            ret
        }
        self.oc.write("jule::out(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn outlnCall(mut &self, mut m: &BuiltinOutlnCallExprModel) {
        if m.Debug && env::Production {
            ret
        }
        self.oc.write("jule::outln(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn panicCall(mut &self, mut m: &BuiltinPanicCallExprModel) {
        self.oc.write("jule::panic(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(` + jule::Str("\nlocation: `)
        self.oc.locInfo(m.Token)
        self.oc.write("\"));")
    }

    fn assertCall(mut &self, mut m: &BuiltinAssertCallExprModel) {
        if env::Production {
            ret
        }
        self.oc.write("if (!(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")) jule::panic(jule::Str(")
        cstrLit(self.oc.Obj, m.Log)
        self.oc.write(`) + jule::Str("\nlocation: `)
        self.oc.locInfo(m.Token)
        self.oc.write("\"));")
    }

    fn errorCall(mut &self, mut m: &BuiltinErrorCallExprModel) {
        self.oc.write("return ")
        if m.Func.Decl.IsVoid() {
            match type m.Err.Model {
            | &Var:
                let v = (&Var)(m.Err.Model)
                if v.Ident == TokenKind.Error {
                    self.oc.write("jule::VoidExceptional(except.error)")
                    ret
                }
            }
            self.oc.write("jule::VoidExceptional(" + typeCoder.Any + "(")
        } else {
            self.oc.write("jule::Exceptional<")
            self.oc.tc.rc.codeMut1(self.oc.Obj, m.Func.Result)
            match type m.Err.Model {
            | &Var:
                let v = (&Var)(m.Err.Model)
                if v.Ident == TokenKind.Error {
                    self.oc.write(">(except.error)")
                    ret
                }
            }
            self.oc.write(">(" + typeCoder.Any + "(")
        }
        self.possibleRefExpr(m.Err.Model)
        let i = self.oc.pushAnyType(m.Err.Kind)
        self.oc.write(", &" + anyTypeIdent)
        self.oc.write(conv::Itoa(i))
        self.oc.write("))")
    }

    fn copyCall(mut &self, mut m: &BuiltinCopyCallExprModel) {
        self.oc.write("jule::copy((")
        self.possibleRefExpr(m.Dest.Model)
        self.oc.write(")")
        if m.Dest.Kind.Prim() != nil { // String destination.
            self.oc.write(".fake_slice()")
        }
        self.oc.write(", (")
        self.possibleRefExpr(m.Src.Model)
        self.oc.write(")")
        if m.Src.Kind.Prim() != nil { // String source.
            self.oc.write(".fake_slice()")
        }
        self.oc.write(")")
    }

    fn lenCall(mut &self, mut m: &BuiltinLenCallExprModel) {
        self.possibleRefExpr(m.Expr.Model)
        self.oc.write(".len()")
    }

    fn capCall(mut &self, mut m: &BuiltinCapCallExprModel) {
        self.possibleRefExpr(m.Expr.Model)
        self.oc.write(".cap()")
    }

    fn deleteCall(mut &self, mut m: &BuiltinDeleteCallExprModel) {
        self.possibleRefExpr(m.Dest.Model)
        if m.Key != nil {
            self.oc.write(".del(")
            self.possibleRefExpr(m.Key.Model)
            self.oc.write(")")
        } else {
            self.oc.write(".clear()")
        }
    }

    fn makeCallSlice(mut &self, mut &m: &BuiltinMakeCallExprModel) {
        let mut slice = m.Kind.Slc()
        self.oc.write(self.oc.tc.kind(m.Kind))
        self.oc.write("::alloc(")
        self.possibleRefExpr(m.Len)
        self.oc.write(", ")
        if m.Cap != nil {
            self.possibleRefExpr(m.Cap)
        } else {
            self.possibleRefExpr(m.Len)
        }
        if shouldInitialized(slice.Elem) {
            self.oc.write(", ")
            self.initExpr(slice.Elem)
        }
        self.oc.write(")")
    }

    fn makeCallStr(mut &self, mut &m: &BuiltinMakeCallExprModel) {
        self.oc.write(typeCoder.Str)
        self.oc.write("::alloc(")
        self.possibleRefExpr(m.Len)
        if m.Cap != nil {
            self.oc.write(", ")
            self.possibleRefExpr(m.Cap)
        }
        self.oc.write(")")
    }

    fn makeCall(mut &self, mut m: &BuiltinMakeCallExprModel) {
        if m.Kind.Slc() != nil {
            self.makeCallSlice(m)
            ret
        }
        self.makeCallStr(m)
    }

    fn pushToSlice(mut &self, mut m: &PushToSliceExprModel) {
        // Use l-value advantage and define reference variable to destination
        // in the child scope to avoid potential repeated high-cost memory access overhead.
        const destIdent = "__jule_push_dest"

        self.oc.write("{ ")
        self.oc.write(self.oc.tc.asSlice(m.Elems.ElemKind))

        let mut ptr = false
        match type m.Dest {
        | &UnaryExprModel:
            // Use raw pointer directly if exist.
            let mut u = (&UnaryExprModel)(m.Dest)
            if u.Expr.Kind.Ptr() != nil {
                self.oc.write(" *" + destIdent + " = ")
                self.possibleRefExpr(u.Expr.Model)
                self.oc.write("; ")
                ptr = true
                break
            }
            fall
        |:
            self.oc.write(" &" + destIdent + " = ")
            self.possibleRefExpr(m.Dest)
            self.oc.write("; ")
        }
        // Pushed single item.
        if len(m.Elems.Elems) == 1 {
            if ptr {
                self.oc.write(destIdent + "->push(")
            } else {
                self.oc.write(destIdent + ".push(")
            }
            self.possibleRefExpr(m.Elems.Elems[0])
            self.oc.write("); }")
            ret
        }
        // Pushed more than single item.
        // Pre-allocate enough capacity if not exist for appendation.
        if ptr {
            self.oc.write(destIdent + "->alloc_for_append(")
        } else {
            self.oc.write(destIdent + ".alloc_for_append(")
        }
        self.oc.write(conv::Itoa(len(m.Elems.Elems)))
        self.oc.write("); ")
        for (_, mut e) in m.Elems.Elems {
            self.oc.write(destIdent)
            // Use the "__push" method to skip allocation boundary checking.
            if ptr {
                self.oc.write("->__push(")
            } else {
                self.oc.write(".__push(")
            }
            self.possibleRefExpr(e)
            self.oc.write("); ")
        }
        self.oc.write("}")
    }

    fn appendToSlice(mut &self, mut m: &AppendToSliceExprModel) {
        self.oc.write("(")
        self.possibleRefExpr(m.Dest)
        self.oc.write(").append(")
        self.possibleRefExpr(m.Slice)
        self.oc.write(");")
    }

    fn appendCall(mut &self, mut m: &BuiltinAppendCallExprModel) {
        self.oc.write("jule::append(")
        self.possibleRefExpr(m.Dest)
        self.oc.write(",")
        self.possibleRefExpr(m.Elements)
        self.oc.write(")")
    }

    fn cloneCall(mut &self, mut m: &BuiltinCloneCallExprModel) {
        self.oc.write("jule::clone(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn sizeof(mut &self, mut m: &SizeofExprModel) {
        self.oc.write("sizeof(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn alignof(mut &self, mut m: &AlignofExprModel) {
        self.oc.write("alignof(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn runeLit(mut &self, m: &RuneExprModel) {
        if m.Code <= 127 { // ASCII.
            self.oc.Obj.WriteByte('\'')
            let mut b = sbtoa(byte(m.Code))
            if b == "'" {
                self.oc.Obj.WriteByte('\\')
            }
            self.oc.Obj.WriteStr(b)
            self.oc.Obj.WriteByte('\'')
            ret
        }
        itoa(self.oc.Obj, i64(m.Code))
    }

    fn structureStatic(mut &self, mut m: &StructStaticIdentExprModel) {
        self.oc.write(identCoder.funcIns(m.Method))
    }

    fn integratedToStr(mut &self, mut m: &IntegratedToStrExprModel) {
        self.oc.write("jule::to_str(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(")")
    }

    fn backendEmit(mut &self, mut m: &BackendEmitExprModel) {
        if len(m.Exprs) == 0 {
            self.oc.write(m.Code)
            ret
        }
        let n = self.oc.Obj.Len()
        let mut args = make([]any, len(m.Exprs))
        for (i, mut expr) in m.Exprs {
            self.possibleRefExpr(expr)
            let mut buf = unsafe { self.oc.Obj.Buf() }
            args[i] = str(buf[n:])
            unsafe { self.oc.Obj.SetBuf(buf[:n]) }
        }
        self.oc.write(fmt::Format(m.Code, args...))
    }

    fn free(mut &self, mut m: &FreeExprModel) {
        self.possibleRefExpr(m.Expr)
        if env::RC {
            self.oc.write(".dealloc()")
            ret
        }
        self.oc.write(".__free()")
    }

    fn strComp(mut &self, mut m: &StrCompExprModel) {
        if m.NotEq {
            self.oc.write("(!")
        }
        let s = m.Right.ReadStr()
        self.possibleRefExpr(m.Left)
        self.oc.write(".equal(")
        cstrLit(self.oc.Obj, s)
        self.oc.write(", ")
        self.oc.write(conv::Itoa(len(s)))
        self.oc.write(")")
        if m.NotEq {
            self.oc.write(")")
        }
    }

    fn inlineStdInternalNosafeStobs(mut &self, mut m: &InlineStdInternalNosafeStobs) {
        self.possibleRefExpr(m.Str)
        self.oc.write(".fake_slice()")
    }

    fn emptyCompare(mut &self, mut m: &EmptyCompareExprModel) {
        if m.Neg {
            self.oc.write("!")
        }
        self.oc.write("(")
        self.possibleRefExpr(m.Expr)
        self.oc.write(").empty()")
    }

    fn model(mut &self, mut m: compExprModel) {
        match type m {
        | str:
            self.oc.write(str(m))
        | &TypeKind:
            self.oc.write(self.oc.tc.kind((&TypeKind)(m)))
        | &Const:
            self.constant((&Const)(m))
        | &Var:
            self.var((&Var)(m))
        | &StructIns:
            self.structureIns((&StructIns)(m))
        | &FnIns:
            self.funcInsCommon((&FnIns)(m))
        | &UnsafeBinopExprModel:
            self.unsafeBinary((&UnsafeBinopExprModel)(m).Node)
        | &BinopExprModel:
            self.binary((&BinopExprModel)(m))
        | &UnaryExprModel:
            self.unary((&UnaryExprModel)(m))
        | &StructLitExprModel:
            self.structureLit((&StructLitExprModel)(m))
        | &AllocStructLitExprModel:
            self.allocStructure((&AllocStructLitExprModel)(m))
        | &CastingExprModel:
            self.casting((&CastingExprModel)(m))
        | &FnCallExprModel:
            self.funcCall((&FnCallExprModel)(m))
        | &SliceExprModel:
            self.slice((&SliceExprModel)(m))
        | &ArrayExprModel:
            self.array((&ArrayExprModel)(m))
        | &UnsafeIndexingExprModel:
            self.unsafeIndexing((&UnsafeIndexingExprModel)(m))
        | &IndexingExprModel:
            self.indexing((&IndexingExprModel)(m))
        | &AnonFnExprModel:
            self.anonFunc((&AnonFnExprModel)(m))
        | &MapExprModel:
            self.mapExpr((&MapExprModel)(m))
        | &SlicingExprModel:
            self.slicing((&SlicingExprModel)(m))
        | &TraitSubIdentExprModel:
            self.traitSub((&TraitSubIdentExprModel)(m))
        | &StructSubIdentExprModel:
            self.structureSub((&StructSubIdentExprModel)(m))
        | &CommonIdentExprModel:
            self.commonIdent((&CommonIdentExprModel)(m))
        | &CommonSubIdentExprModel:
            self.commonSub((&CommonSubIdentExprModel)(m))
        | &TupleExprModel:
            self.tuple((&TupleExprModel)(m))
        | &BuiltinOutCallExprModel:
            self.outCall((&BuiltinOutCallExprModel)(m))
        | &BuiltinOutlnCallExprModel:
            self.outlnCall((&BuiltinOutlnCallExprModel)(m))
        | &BuiltinNewCallExprModel:
            self.newCall((&BuiltinNewCallExprModel)(m))
        | &BuiltinPanicCallExprModel:
            self.panicCall((&BuiltinPanicCallExprModel)(m))
        | &BuiltinAssertCallExprModel:
            self.assertCall((&BuiltinAssertCallExprModel)(m))
        | &BuiltinErrorCallExprModel:
            self.errorCall((&BuiltinErrorCallExprModel)(m))
        | &BuiltinMakeCallExprModel:
            self.makeCall((&BuiltinMakeCallExprModel)(m))
        | &BuiltinAppendCallExprModel:
            self.appendCall((&BuiltinAppendCallExprModel)(m))
        | &BuiltinCloneCallExprModel:
            self.cloneCall((&BuiltinCloneCallExprModel)(m))
        | &BuiltinCopyCallExprModel:
            self.copyCall((&BuiltinCopyCallExprModel)(m))
        | &BuiltinLenCallExprModel:
            self.lenCall((&BuiltinLenCallExprModel)(m))
        | &BuiltinCapCallExprModel:
            self.capCall((&BuiltinCapCallExprModel)(m))
        | &BuiltinDeleteCallExprModel:
            self.deleteCall((&BuiltinDeleteCallExprModel)(m))
        | &SizeofExprModel:
            self.sizeof((&SizeofExprModel)(m))
        | &AlignofExprModel:
            self.alignof((&AlignofExprModel)(m))
        | &RuneExprModel:
            self.runeLit((&RuneExprModel)(m))
        | &StructStaticIdentExprModel:
            self.structureStatic((&StructStaticIdentExprModel)(m))
        | &IntegratedToStrExprModel:
            self.integratedToStr((&IntegratedToStrExprModel)(m))
        | &BackendEmitExprModel:
            self.backendEmit((&BackendEmitExprModel)(m))
        | &FreeExprModel:
            self.free((&FreeExprModel)(m))
        | &StrCompExprModel:
            self.strComp((&StrCompExprModel)(m))
        | &InlineStdInternalNosafeStobs:
            self.inlineStdInternalNosafeStobs((&InlineStdInternalNosafeStobs)(m))
        | &RefExprModel:
            self.var((&RefExprModel)(m).Var)
        | &EmptyCompareExprModel:
            self.emptyCompare((&EmptyCompareExprModel)(m))
        |:
            self.oc.write("<unimplemented_expression_model>")
        }
    }

    fn initExpr(mut &self, mut t: &TypeKind) {
        if t.NilCompatible() {
            if t.Ptr() != nil {
                self.oc.write("nullptr")
            } else {
                self.oc.write(self.oc.tc.kind(t))
                self.oc.write("(nullptr)")
            }
            ret
        }
        let mut tup = t.Tup()
        if tup != nil {
            self.oc.tc.rc.tup(self.oc.Obj, tup)
            self.oc.write("{")
            for (i, mut tt) in tup.Types {
                if !shouldInitialized(tt) {
                    continue
                }
                self.oc.write("." + resultArgName)
                self.oc.write(conv::Itoa(i))
                self.oc.write("=")
                self.initExpr(tt)
                if len(tup.Types)-i > 1 {
                    self.oc.write(", ")
                }
            }
            self.oc.write("}")
            ret
        }
        let mut enm = t.Enum()
        if enm != nil {
            self.model(enm.Items[0].Value.Data.Model)
            ret
        }
        let prim = t.Prim()
        if prim != nil {
            if types::IsNum(prim.Kind) {
                self.oc.write("0")
            } else if prim.IsBool() {
                self.oc.write("false")
            } else if prim.IsStr() {
                self.oc.write(typeCoder.Str + "()")
            }
            ret
        }
        if t.Arr() != nil {
            let mut arr = t.Arr()
            self.oc.write(self.oc.tc.kind(t))
            self.oc.write("(")
            self.initExpr(arr.Elem)
            self.oc.write(")")
            ret
        }
        let mut s = t.Struct()
        if s != nil && s.Decl.Binded && findDirective(s.Decl.Directives, Directive.Typedef) == nil {
            self.oc.write("(")
            self.oc.write(self.oc.tc.kind(t))
            self.oc.write("){}")
            ret
        }
        self.oc.write(self.oc.tc.kind(t))
        self.oc.write("()")
    }
}

fn decomposeCommonEsq(b: byte): str {
    match b {
    | '\\':
        ret "\\\\"
    | '\'':
        ret "'"
    | '"':
        ret `\"`
    | '\a':
        ret `\a`
    | '\b':
        ret `\b`
    | '\f':
        ret `\f`
    | '\n':
        ret `\n`
    | '\r':
        ret `\r`
    | '\t':
        ret `\t`
    | '\v':
        ret `\v`
    |:
        ret ""
    }
}

fn sbtoa(b: byte): str {
    if b == 0 {
        ret "\\x00"
    }
    if b < utf8::RuneSelf { // ASCII, fast way.
        let seq = decomposeCommonEsq(b)
        if seq != "" {
            ret seq
        }
        if 32 <= b && b <= 126 {
            ret str(b)
        }
    }
    let seq = conv::FmtUint(u64(b), 8)
    if len(seq) == 2 {
        ret "\\0" + seq
    }
    ret "\\" + seq
}

fn cstrBytes(mut &s: StrBuilder, ctx: str) {
    for _, b in ctx {
        s.WriteStr(sbtoa(b))
    }
}

fn cstrLit(mut &s: StrBuilder, ctx: str) {
    s.WriteByte('"')
    cstrBytes(s, ctx)
    s.WriteByte('"')
}

fn ftoa(mut &s: StrBuilder, f: f64, bitsize: int) {
    if bitsize != 32 {
        if f == f64(i64(f)) {
            itoa(s, i64(f))
            ret
        }
        if f == f64(u64(f)) {
            utoa(s, u64(f))
            ret
        }
    }
    let m = conv::FmtFloat(f, 'f', -1, bitsize)
    s.WriteStr(m)
    if !strings::Contains(m, ".") {
        s.WriteStr(".0")
    }
}

fn itoa(mut &s: StrBuilder, x: i64) {
    match {
    | x == MaxI64:
        s.WriteStr("jule::MAX_I64")
        ret
    | x == MinI64:
        s.WriteStr("jule::MIN_I64")
        ret
    }

    s.WriteStr(conv::FmtInt(x, 10))
    if Is64Bit(Arch) {
        s.WriteByte('L')
    }
    s.WriteByte('L')
}

fn utoa(mut &s: StrBuilder, x: u64) {
    match {
    | x == MaxU64:
        s.WriteStr("jule::MAX_U64")
        ret
    }

    s.WriteStr(conv::FmtUint(x, 10))
    if Is64Bit(Arch) {
        s.WriteByte('L')
    }
    s.WriteStr("LU")
}

fn isForwarded(&s: &Scope): bool {
    let last = s.Stmts[len(s.Stmts)-1]
    match type last {
    | &Data:
        match type (&Data)(last).Model {
        | &BuiltinErrorCallExprModel:
            ret true
        |:
            ret false
        }
    |:
        ret true
    }
}

fn isBuiltinCallHasDebuginf(&m: &FnCallExprModel): bool {
    if !m.Func.IsBuiltin() {
        ret false
    }
    match type m.Expr {
    | &CommonSubIdentExprModel:
        ret (&CommonSubIdentExprModel)(m.Expr).Ident == "swap"
    |:
        ret false
    }
}

fn isExprComesFromBind(&d: &Data): bool {
    match type d.Model {
    | &Var:
        ret (&Var)(d.Model).Binded
    | &StructSubIdentExprModel:
        ret (&StructSubIdentExprModel)(d.Model).Owner.Decl.Binded
    |:
        ret false
    }
}

// Reports whether type is handled as <any> type.
fn isAny(mut &t: &TypeKind): bool {
    if t.TypeEnum() != nil {
        ret true
    }
    let prim = t.Prim()
    ret prim != nil && prim.IsAny()
}