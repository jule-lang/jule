// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env
use obj::{IR}

use conv for std::conv
use std::jule::{VERSION}
use std::jule::build::{
    Derive,
    INIT_FN,
    PATH_API,
    is_std_header_path,
    is_valid_cpp_ext,
    is_valid_header_ext,
}
use std::jule::lex::{
    TokenId,
    TokenKind,
    is_ignore_ident,
    is_anon_ident,
}
use std::jule::sema::{
    Package,
    ImportInfo,
    SymbolTable,
    Var,
    StructIns,
    Struct,
    FieldIns,
    Fn,
    FnIns,
    Trait,
    Param,
    ParamIns,
    BUILTIN_TRAIT_DISPOSE,
}
use std::time::{Time}

// The self keyword equavalent of generated cpp.
const CPP_SELF = "this"

// C++ statement terminator.
const CPP_ST_TERM = ";"

const INDENT_KIND = '\t'

// Current indention count.
static mut INDENT: []byte = nil

// Increase indentation.
fn add_indent() {
    INDENT = append(INDENT, INDENT_KIND)
}

// Decrase indentation.
fn done_indent() {
    INDENT = INDENT[:INDENT.len - 1]
}

// Returns indention string by INDENT.
fn indent(): str {
    ret str(INDENT)
}

fn is_cpp_header_file(path: str): bool {
    let offset = path.rfind(".")
    if offset == -1 {
        ret false
    }
    ret is_valid_header_ext(path[offset:])
}

// Generates all C/C++ include directives.
fn gen_links(mut &ir: &IR): str {
    let mut obj = ""
    for (_, mut pkg) in ir.used {
        match {
        | !pkg.cpp_linked:
            continue

        | is_std_header_path(pkg.path):
            obj += "#include "
            obj += pkg.path
            obj += "\n"
        }
    }

    for (_, mut pkg) in ir.used {
        match {
        | !pkg.cpp_linked:
            continue

        | is_cpp_header_file(pkg.path):
            obj += `#include "`
            obj += pkg.path
            obj += "\"\n"
        }
    }
    ret obj
}

// Generates C++ code of function's result type.
fn gen_fn_result(mut &f: &Fn): str {
    if f.is_void() {
        if f.exceptional {
            ret "jule::VoidExceptional"
        }
        ret "void"
    }
    if f.exceptional {
        ret "jule::Exceptional<" + gen_type_kind(f.result.kind.kind) + ">"
    }
    ret gen_type_kind(f.result.kind.kind)
}

// Generates C++ code of function instance's result type.
fn gen_fn_ins_result(mut &f: &FnIns): str {
    if f.decl.is_void() {
        if f.decl.exceptional {
            ret "jule::VoidExceptional"
        }
        ret "void"
    }
    if f.decl.exceptional {
        ret "jule::Exceptional<" + gen_type_kind(f.result) + ">"
    }
    ret gen_type_kind(f.result)
}

// Generates C++ prototype code of parameter.
fn gen_param_prototype(mut &p: &Param): str {
    let mut obj = ""
    if p.variadic {
        obj += as_jt("slice")
        obj += "<"
        obj += gen_type_kind(p.kind.kind)
        obj += ">"
    } else {
        obj += gen_type_kind(p.kind.kind)
    }
    ret obj
}

// Generates C++ code of parameter instance.
fn gen_param_ins(mut &p: &ParamIns): str {
    let mut obj = gen_param_ins_prototype(p)
    obj += " "
    obj += param_out_ident(p.decl)
    ret obj
}

// Generates C++ prototype code of parameter instance.
fn gen_param_ins_prototype(mut &p: &ParamIns): str {
    let mut obj = ""
    if p.decl.variadic {
        obj += as_jt("slice")
        obj += "<"
        obj += gen_type_kind(p.kind)
        obj += ">"
    } else {
        obj += gen_type_kind(p.kind)
    }

    if p.decl.reference {
        obj += "&"
    }

    ret obj
}

// Generates C++ code of parameter.
fn gen_param(mut &p: &Param): str {
    let mut obj = gen_param_prototype(p)
    if p.ident != "" && !is_ignore_ident(p.ident) && !is_anon_ident(p.ident) {
        obj += " "
        obj += param_out_ident(p)
    }
    ret obj
}

// Generates C++ code of parameters.
fn gen_params(mut &params: []&Param): str {
    match {
    | params.len == 0:
        ret "(void)"

    | params.len == 1 && params[0].is_self():
        ret "(void)"
    }

    let mut obj = "("
    for (_, mut p) in params {
        if !p.is_self() {
            obj += gen_param(p) + ","
        }
    }

    // Remove comma.
    obj = obj[:obj.len-1]
    ret obj + ")"
}

fn gen_params_ins(mut &params: []&ParamIns): str {
    match {
    | params.len == 0:
        ret "(void)"

    | params.len == 1 && params[0].decl.is_self():
        ret "(void)"
    }

    let mut obj = "("
    for (_, mut p) in params {
        if !p.decl.is_self() {
            obj += gen_param_ins(p) + ","
        }
    }

    // Remove comma.
    obj = obj[:obj.len-1]
    ret obj + ")"
}

// Generates C++ declaration code of parameters.
fn gen_params_prototypes(mut &params: []&ParamIns): str {
    match {
    | params.len == 0:
        ret "(void)"

    | params.len == 1 && params[0].decl.is_self():
        ret "(void)"
    }

    let mut obj = "("
    for (_, mut p) in params {
        if !p.decl.is_self() {
            obj += gen_param_ins_prototype(p)
            obj += ","
        }
    }

    // Remove comma.
    obj = obj[:obj.len-1]
    ret obj + ")"
}

// Generates C++ code of trait.
fn gen_trait(mut &t: &Trait): str {
    const INDENTION = "\t"
    let outid = trait_out_ident(t)

    let mut obj = "struct "
    obj += outid
    obj += " {\n"
    obj += INDENTION
    obj += "virtual ~"
    obj += outid
    obj += "(void) {}\n\n"
    for (_, mut f) in t.methods {
        obj += INDENTION
        obj += "virtual "
        obj += gen_fn_result(f)
        obj += " _method_"
        obj += f.ident
        obj += gen_params(f.params)
        obj += " {"
        if !f.is_void() {
            obj += " return {}; "
        }
        obj += "}\n"
    }
    obj += "};"
    ret obj
}

// Generates C++ code of SymbolTable's all traits.
fn gen_traits_tbl(mut &tbl: &SymbolTable): str {
    let mut obj = ""
    for (_, mut t) in tbl.traits {
        obj += gen_trait(t)
        obj += "\n\n"
    }
    ret obj
}

// Generates C++ code of package's all traits.
fn gen_traits_pkg(mut &pkg: &Package): str {
    let mut obj = ""
    for (_, mut tbl) in pkg.files {
        obj += gen_traits_tbl(tbl)
    }
    ret obj
}

// Generates C++ code of all traits.
fn gen_traits(mut &ir: &IR): str {
    let mut obj = ""
    for (_, mut u) in ir.used {
        if !u.cpp_linked {
            obj += gen_traits_pkg(u.package)
        }
    }
    obj += gen_traits_pkg(ir.main)
    ret obj
}

// Generates C++ declaration code of trait.
fn gen_trait_prototype(&t: &Trait): str {
    let mut obj = "struct "
    obj += trait_out_ident(t)
    obj += CPP_ST_TERM
    ret obj
}

// Generates C++ declaration code of all traits.
fn gen_trait_prototypes(mut &p: &Package): str {
    let mut obj = ""
    for (_, mut f) in p.files {
        for _, t in f.traits {
            if t.token.id != TokenId.Na {
                obj += gen_trait_prototype(t)
                obj += "\n"
            }
        }
    }
    ret obj
}

// Generates C++ plain-prototype code of structure.
fn gen_struct_plain_prototype(mut &s: &Struct): str {
    let mut obj = ""
    for (_, mut ins) in s.instances {
        obj += "\nstruct "
        obj += struct_ins_out_ident(ins)
        obj += CPP_ST_TERM
        obj += "\n"
    }
    ret obj
}

// Generates C++ plain-prototype code of all structures.
fn gen_struct_plain_prototypes(mut &structs: []&Struct): str {
    let mut obj = ""
    for (_, mut s) in structs {
        if !s.cpp_linked && s.token.id != TokenId.Na {
            obj += gen_struct_plain_prototype(s)
            obj += "\n"
        }
    }
    ret obj
}

// Generates C++ derive code of structure's implemented traits.
fn gen_struct_traits(&s: &Struct): str {
    if s.implements.len == 0 {
        ret ""
    }

    let mut obj = ": "
    for _, i in s.implements {
        obj += "public "
        obj += trait_out_ident(i)
        obj += ","
    }
    obj = obj[:obj.len-1] // Remove last comma.
    ret obj
}

// Generates C++ declaration code of field.
fn gen_field_decl(mut &f: &FieldIns): str {
    let mut obj = gen_type_kind(f.kind)
    obj += " "
    obj += field_out_ident(f.decl)
    obj += " = "
    obj += get_init_expr(f.kind)
    obj += CPP_ST_TERM
    ret obj
}

fn gen_struct_self_field_type_kind(mut &s: &StructIns): str {
    ret as_sptr_kind(gen_struct_kind_ins(s))
}

// Generates C++ field declaration code of structure's self field.
fn gen_struct_self_field(mut &s: &StructIns): str {
    let mut obj = gen_struct_self_field_type_kind(s)
    obj += " self;"
    ret obj
}

fn gen_struct_self_field_init_st(mut &s: &StructIns): str {
    let mut obj = "this->self = "
    obj += gen_struct_self_field_type_kind(s)
    obj += "::make(this, nullptr);"
    ret obj
}

fn gen_struct_constructor(mut &s: &StructIns): str {
    let mut obj = struct_ins_out_ident(s)

    obj += "("
    if s.fields.len > 0 {
        for (_, mut f) in s.fields {
            obj += gen_type_kind(f.kind)
            obj += " __param_"
            obj += f.decl.ident
            obj += ", "
        }
        obj = obj[:obj.len-2] // Remove last comma.
    } else {
        obj += "void"
    }

    obj += ")"
    if s.fields.len > 0 {
        obj += ": "
        for _, f in s.fields {
            obj += field_out_ident(f.decl)
            obj += "("
            obj += "__param_"
            obj += f.decl.ident
            obj += "), "
        }
        obj = obj[:obj.len-2] // Remove trailing comma.
    }

    obj += " {"
    if s.decl.has_ref_accessible() {
        obj += "\n"
        add_indent()
        obj += indent()
        obj += gen_struct_self_field_init_st(s)
        obj += "\n"
        done_indent()
        obj += "\n"
        obj += indent()
    }
    obj += "}"
    ret obj
}

fn gen_struct_destructor(mut &s: &StructIns): str {
    let disposed = s.decl.is_implements(BUILTIN_TRAIT_DISPOSE)
    let ref_access = s.decl.has_ref_accessible()
    // Call destructor if implemented.
    if !ref_access && !disposed {
        ret ""
    }

    let mut obj = "~"
    obj += struct_ins_out_ident(s)
    obj += "(void) { "

    if disposed {
        let dispose_method = s.find_method("dispose", false)
        obj += "this->"
        obj += fn_out_ident(dispose_method)
        obj += "(); "
    }

    if ref_access {
        obj += "this->self.ref = nullptr; "
    }

    obj += "}"
    ret obj
}

fn gen_struct_operators(mut &s: &StructIns): str {
    let out_ident = struct_ins_out_ident(s)
    let mut obj = ""

    obj += indent()
    if env::OPT_INLINE {
        obj += "inline "
    }
    obj += "bool operator==(const "
    obj += out_ident
    obj += " &_Src) const {"
    if s.fields.len > 0 {
        add_indent()
        obj += "\n"
        obj += indent()
        obj += "return "
        add_indent()
        let mut n = 0
        for (_, mut f) in s.fields {
            // Skip C++-linked struct kinds.
            let strct = f.kind.strct()
            if strct != nil && strct.decl != nil && strct.decl.cpp_linked {
                continue
            }

            n++
            obj += "\n"
            obj += indent()
            obj += "this->"
            let f_ident = field_out_ident(f.decl)
            obj += f_ident
            obj += " == _Src."
            obj += f_ident
            obj += " &&"
        }
        done_indent()
        if n > 0 {
            obj = obj[:obj.len-3] // Remove last suffix " &&"
        } else {
            obj += "true"
        }
        obj += ";\n"
        done_indent()
        obj += indent()
        obj += "}"
    } else {
        obj += " return true; }"
    }
    obj += "\n\n"
    obj += indent()
    if env::OPT_INLINE {
        obj += "inline "
    }
    obj += "bool operator!=(const "
    obj += out_ident
    obj += " &_Src) const { return !this->operator==(_Src); }"
    ret obj
}

fn gen_struct_derive_defs_prototypes(&s: &StructIns): str {
    let mut obj = ""

    if s.decl.is_derives(str(Derive.Clone)) {
        obj += indent()
        obj += get_derive_fn_decl_clone(s.decl)
        obj += ";\n\n"
    }

    ret obj
}

fn gen_struct_ins_prototype(mut &s: &StructIns): str {
    let mut obj = "struct "
    let out_ident = struct_ins_out_ident(s)

    obj += out_ident
    obj += gen_struct_traits(s.decl)
    obj += " {\n"

    let ref_access = s.decl.has_ref_accessible()

    add_indent()
    if ref_access {
        obj += indent()
        obj += gen_struct_self_field(s)
        obj += "\n\n"
    }
    if s.fields.len > 0 {
        for (_, mut f) in s.fields {
            obj += indent()
            obj += gen_field_decl(f)
            obj += "\n"
        }
        obj += "\n\n"
        obj += indent()
        obj += gen_struct_constructor(s)
        obj += "\n\n"
    }

    obj += indent()
    obj += gen_struct_destructor(s)
    obj += "\n\n"

    // Default constructor.
    obj += indent()
    obj += out_ident
    if ref_access {
        obj += "(void) { "
        obj += gen_struct_self_field_init_st(s)
        obj += " }\n\n"
    } else {
       obj += "(void) = default;\n\n"
    }

    for (_, mut f) in s.methods {
        obj += gen_fn_prototype(f, true)
        obj += "\n\n"
    }

    obj += gen_struct_derive_defs_prototypes(s)

    obj += gen_struct_operators(s)
    obj += "\n"

    done_indent()
    obj += indent() + "};"
    ret obj
}

// Generates C++ declaration code of structure.
fn gen_struct_prototype(mut &s: &Struct): str {
    let mut obj = ""
    for (_, mut ins) in s.instances {
        obj += gen_struct_ins_prototype(ins)
        obj += "\n\n"
    }
    ret obj
}

// Generates C++ declaration code of all structures.
fn gen_struct_prototypes(mut &structs: []&Struct): str {
    let mut obj = ""
    for (_, mut s) in structs {
        if !s.cpp_linked && s.token.id != TokenId.Na {
            obj += gen_struct_prototype(s)
            obj += "\n"
        }
    }
    ret obj
}

fn gen_fn_decl_head(mut &f: &FnIns, method: bool): str {
    let mut obj = ""

    if method && f.decl.statically {
        obj += "static "
    }

    if env::OPT_INLINE && !f.decl.is_entry_point() {
        obj += "inline "
    }

    obj += gen_fn_ins_result(f) + " "

    if !method && f.decl.owner != nil {
        obj += struct_ins_out_ident(f.owner)
        obj += str(TokenKind.DblColon)
    }
    obj += fn_ins_out_ident(f)
    ret obj
}

// Generates C++ declaration code of function's combinations.
fn gen_fn_prototype(mut &f: &Fn, method: bool): str {
    let mut obj = ""
    for (_, mut c) in f.instances {
        obj += indent()
        obj += gen_fn_decl_head(c, method)
        obj += gen_params_prototypes(c.params)
        obj += CPP_ST_TERM + "\n"
    }
    ret obj
}

// Generates C++ declaration code of all functions.
fn gen_fn_prototypes(mut &pkg: &Package): str {
    let mut obj = ""
    for (_, mut file) in pkg.files {
        for (_, mut f) in file.funcs {
            if !f.cpp_linked && f.token.id != TokenId.Na {
                obj += gen_fn_prototype(f, false)
            }
        }
    }
    ret obj
}

// Generates C++ code of all can-be-prototyped declarations.
fn gen_prototypes(mut &ir: &IR): str {
    let mut obj = ""

    for (_, mut u) in ir.used {
        if !u.cpp_linked {
            obj += gen_trait_prototypes(u.package)
        }
    }
    obj += gen_trait_prototypes(ir.main)

    
    obj += gen_struct_plain_prototypes(ir.ordered.structs)

    obj += gen_traits(ir)
    obj += "\n"

    obj += gen_struct_prototypes(ir.ordered.structs)

    for (_, mut u) in ir.used {
        if !u.cpp_linked {
            obj += gen_fn_prototypes(u.package)
        }
    }
    obj += gen_fn_prototypes(ir.main)

    ret obj
}

// Generats C++ code of variable with initialize expression.
fn gen_var_init_expr(mut &v: &Var, init: str): str {
    let mut obj = ""
    if v.statically {
        obj += "static "
    }

    obj += gen_type_kind(v.kind.kind)
    obj += " "
    if v.reference {
        obj += "&"
    }
    obj += var_out_ident(v)
    if init != "" {
        obj += " = "
        obj += init
    }
    obj += CPP_ST_TERM
    ret obj
}

// Generates C++ code of variable.
fn gen_var(mut v: &Var): str {
    if is_ignore_ident(v.ident) {
        ret ""
    }

    if v.value != nil && v.value.expr != nil {
        if v.value.data.model != nil {
            ret gen_var_init_expr(v, gen_val(v.value))
        }
        ret gen_var_init_expr(v, "")
    }
    ret gen_var_init_expr(v, get_init_expr(v.kind.kind))
}

// Generates C++ code of all globals.
fn gen_globals(mut &globals: []&Var): str {
    let mut obj = ""

    for (_, mut v) in globals {
        if v.token.id != TokenId.Na {
            obj += gen_var(v)
            obj += "\n"
        }
    }

    ret obj
}

// Generates C++ code of function.
fn gen_fn(mut &f: &Fn): str {
    let mut obj = ""
    for (_, mut ins) in f.instances {
        obj += gen_fn_decl_head(ins, false)
        obj += gen_params_ins(ins.params)
        obj += " "
        obj += gen_fn_scope(ins)
        obj += "\n\n"
    }
    ret obj
}

// Generates C++ code of all functions of package.
fn gen_pkg_fns(mut &p: &Package): str {
    let mut obj = ""
    for (_, mut f) in p.files {
        for (_, mut f) in f.funcs {
            if !f.cpp_linked && f.token.id != TokenId.Na {
                obj += gen_fn(f)
                obj += "\n\n"
            }
        }
    }
    ret obj
}

// Generates C++ code of structure's methods.
fn gen_struct_method_defs(mut &s: &StructIns): str {
    let mut obj = ""
    for (_, mut f) in s.methods {
        obj += indent()
        obj += gen_fn(f)
        obj += "\n\n"
    }
    ret obj
}

// Generates C++ code of structure's ostream.
fn gen_struct_ostream(mut &s: &StructIns): str {
    let mut obj = ""
    obj += indent()
    obj += "std::ostream &operator<<(std::ostream &_Stream, const "
    obj += struct_ins_out_ident(s)
    obj += " &_Src) {\n"
    add_indent()
    obj += indent()
    obj += `_Stream << "`
    obj += s.decl.ident
    obj += "{\";\n"

    for (i, mut f) in s.fields {
        obj += indent()
        obj += `_Stream << "`
        obj += f.decl.ident
        obj += `:`

        // Skip C++-linked struct kinds.
        let strct = f.kind.strct()
        if strct != nil && strct.decl != nil && strct.decl.cpp_linked {
            obj += ` cpp.`
            obj += field_out_ident(f.decl)
            obj += `"`
        } else {
            obj += `" << _Src.`
            obj += field_out_ident(f.decl)
        }
        if i+1 < s.fields.len {
            obj += " << \", \""
        }
        obj += ";\n"
    }

    obj += indent()
    obj += "_Stream << \"}\";\n"
    obj += indent()
    obj += "return _Stream;\n"
    done_indent()
    obj += indent()
    obj += "}"
    ret obj
}

fn gen_struct_derive_defs(mut &s: &StructIns): str {
    let mut obj = ""

    if s.decl.is_derives(str(Derive.Clone)) {
        obj += indent()
        obj += get_derive_fn_def_clone(s.decl)
        obj += "{\n"
        add_indent()
        obj += indent()
        obj += gen_struct_kind_ins(s)
        obj += " clone;\n"
        for _, f in s.fields {
            let ident = field_out_ident(f.decl)

            obj += indent()
            obj += "clone."
            obj += ident
            obj += " = jule::clone(this->"
            obj += ident
            obj += ");\n"
        }
        obj += indent()
        obj += "return clone;\n"
        done_indent()
        obj += indent()
        obj += "}"
    }

    ret obj
}

// Generates C++ code of structure instance definition.
fn gen_struct_ins(mut &s: &StructIns): str {
    let mut obj = gen_struct_method_defs(s)
    obj += "\n\n"
    obj += gen_struct_derive_defs(s)
    obj += "\n\n"
    obj += gen_struct_ostream(s)
    ret obj
}

// Generates C++ code of structure definition.
fn gen_struct(mut &s: &Struct): str {
    let mut obj = ""
    for (_, mut ins) in s.instances {
        obj += gen_struct_ins(ins)
        obj += "\n\n"
    }
    ret obj
}

// Generates C++ code of all structures.
fn gen_structs(mut &structs: []&Struct): str {
    let mut obj = ""
    for (_, mut s) in structs {
        if !s.cpp_linked && s.token.id != TokenId.Na {
            obj += gen_struct(s)
            obj += "\n\n"
        }
    }
    ret obj
}

// Generates C++ code of all functions.
fn gen_fns(mut &ir: &IR): str {
    let mut obj = ""

    for (_, mut u) in ir.used {
        if !u.cpp_linked {
            obj += gen_pkg_fns(u.package)
        }
    }
    obj += gen_pkg_fns(ir.main)

    ret obj
}

fn push_init(mut &pkg: &Package, mut &obj: str) {
    const INDENTION = "\t"

    const CPP_LINKED = false
    let f = pkg.find_fn(INIT_FN, CPP_LINKED)
    if f == nil {
        ret
    }

    obj += "\n" + INDENTION
    obj += fn_out_ident(f)
    obj += "();"
}

// Generated C++ code of all initializer functions.
fn gen_init_caller(mut &ir: &IR): str {
    let mut obj = "void "
    obj += INIT_CALLER_IDENT
    obj += "(void) {"

    for (_, mut u) in ir.used {
        if !u.cpp_linked {
            push_init(u.package, obj)
        }
    }
    push_init(ir.main, obj)

    obj += "\n}"
    ret obj
}

pub fn append_standard(mut &obj_code: str, compiler: str, compiler_cmd: str) {
    let time = Time.now().abs()
    
    let mut time_str = ""
    time_str += conv::fmt_uint(time.day, 10)
    time_str += "/"
    time_str += conv::fmt_uint(time.month, 10)
    time_str += "/"
    time_str += conv::fmt_uint(time.year, 10)
    time_str += " "
    time_str += conv::fmt_uint(time.hour, 10)
    time_str += "."
    time_str += conv::fmt_uint(time.minute, 10)
    time_str += " (DD/MM/YYYY) (HH.MM) UTC"

    let mut s = ""
    s += "// Auto generated by JuleC.\n"
    s += "// JuleC version: "
    s += VERSION
    s += "\n"
    s += "// Date: "
    s += time_str
    s += `
//
// Recommended Compile Command;
// `
    s += compiler
    s += " "
    s += compiler_cmd
    s += "\n\n#include \""
    s += PATH_API
    s += "\"\n\n"
    s += obj_code
    s += `
int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}`
    obj_code = s
}

// Generates C++ codes from SymbolTables.
pub fn gen(mut &ir: &IR): str {
    let mut obj = ""
    obj += gen_links(ir)
    obj += "\n"
    obj += gen_prototypes(ir)
    obj += "\n\n"
    obj += gen_globals(ir.ordered.globals)
    obj += "\n"
    obj += gen_structs(ir.ordered.structs)
    obj += gen_fns(ir)
    obj += "\n"
    obj += gen_init_caller(ir)
    obj += "\n"
    ret obj
}
