// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{File, Directory, DirEntry}
use path for std::fs::path
use build for std::jule::build::{Log, LogKind}

fn __find_module_file(&dirents: []&DirEntry): bool {
    for _, d in dirents {
        if !d.stat.is_dir() && d.name == build::MODULE_FILE {
            ret true
        }
    }
    ret false
}

fn find_module_file(mut path: str): str {
    for {
        let mut dirents = Directory.read(path) else {
            break
        }

        let exist = __find_module_file(dirents)
        if exist {
            ret path
        }

        let n = path.len
        path = path::join("..", path)
        if path.len == n { // Same path, no difference.
            break
        }
    }

    ret ""
}

fn check_module_file(path: str): []Log {
    let bytes = File.read(path::join(path, build::MODULE_FILE)) else {
        ret [{
            kind: LogKind.Flat,
            text: "module file could not checked because of a problem",
        }]
    }

    let s = str(bytes).trim(" \t\v\n")
    if s.len != 0 {
        ret [{
            kind: LogKind.Flat,
            text: "module file has syntax error(s)",
        }]
    }

    ret nil
}
