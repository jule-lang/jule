// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

// Execute common initialize instructions.
// These codes should be executed on all platforms.
fn __init_common() {
    // Configure compiler to default by platform
    *COMPILER = "clang"
    *COMPILER_PATH = "clang++"

    flagset.add_var[bool](SHADOWING, "shadowing", 0, "Let shadowing")
    flagset.add_var[bool](TRANSPILATION, "transpile", 't', "Transpile code")
    flagset.add_var[str](COMPILER, "compiler", 0, "Backend compiler")
    flagset.add_var[str](OPT, "opt", 0, "Optimization level")
    flagset.add_var[str](TARGET, "target", 0, "Target system")
    flagset.add_var[str](OUT, "out", 'o', "Output identifier")

    flagset.add_var[bool](env::OPT_COPY, "opt-copy", 0, "Copy optimization")
    flagset.add_var[bool](env::OPT_DEADCODE, "opt-deadcode", 0, "Deadcode optimization")
    flagset.add_var[bool](env::OPT_APPEND, "opt-append", 0, "Append optimization")
    flagset.add_var[bool](env::OPT_MATH, "opt-math", 0, "Math optimization")
    flagset.add_var[bool](env::OPT_ACCESS, "opt-access", 0, "Access optimization")
    flagset.add_var[bool](env::OPT_INLINE, "opt-inline", 0, "Inline optimization")
}
