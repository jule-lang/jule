// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use conv for std::conv
use std::jule::build::{Log, LogKind}

enum AnsiSeq: str {
    Reset = "\033[0m",
    Bold = "\u001b[1m",
    Red = "\033[31m",
    BrightMagenta = "\033[95m",
}

struct AnsiEscape {}

impl AnsiEscape {
    static fn reset() { out(AnsiSeq.Reset) }

    static fn print(escape: str, text: str) {
        out(escape)
        out(text)
        AnsiEscape.reset()
    }
}

struct Logger{}

impl Logger {
    // Prints flag log.
    static fn log_flat(&l: Log) { outln(l.text) }

    // Prints error log.
    static fn log_error(&l: Log) {
        out(AnsiSeq.Red)
        out("error: ")
        out(l.text)
        AnsiEscape.reset()

        if l.path.len != 0 {
            out("\n  --> ")
            out(l.path)
        }
        if l.row != 0 && l.column != 0 {
            out(":")
            out(conv::itoa(l.row))
            out(":")
            out(conv::itoa(l.column))
        }
        if l.line.len != 0 {
            let mut line = l.line.ltrim("\r\n\v\b ")
            let mut offset = l.line.len-line.len+1
            let mut old_len = line.len
            line = line.ltrim("\t")
            if old_len != line.len {
                offset += (old_len-line.len)*8
            }
            out("\n  ")
            let row = conv::itoa(l.row)
            out(row)
            out(" | ")
            out(line)
            out("\n  ")
            out(str_repeat(" ", row.len))
            out(" | ")
            out(str_repeat(" ", l.column-offset))
            out("^")
            if l.suggestion.len != 0 {
                out("\n  ")
                out(str_repeat(" ", row.len))
                out(" | ")
                AnsiEscape.print(AnsiSeq.BrightMagenta, "suggestion: ")
                out(l.suggestion)
            }
        }
        outln("\n")
    }

    // Log.
    static fn log(&l: Log) {
        match l.kind {
        | LogKind.Flat:  Logger.log_flat(l)
        | LogKind.Error: Logger.log_error(l)
        }
    }

    // Prints logs.
    static fn print_logs(&logs: []Log) {
        for _, l in logs {
            Logger.log(l)
        }
        out("=== ")
        out(conv::itoa(logs.len))
        outln(" error generated ===")
    }
}
