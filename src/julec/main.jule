// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This is the main package of JuleC.

use env
use std::fs::{File}
use jule for std::jule
use build for std::jule::build
use std::env
use strings for std::strings::{StrBuilder}

// Compiler commands.
const CmdHelp = "help"
const CmdVersion = "version"
const CmdTool = "tool"
const CmdJulenv = "julenv"
const CmdMod = "mod"

// Map for "julec help" command.
static HelpMap: [...][2]str = [
    [CmdHelp, "Show help"],
    [CmdVersion, "Show version"],
    [CmdTool, "Tools for effective Jule"],
    [CmdJulenv, "Show information about native jule environment"],
    [CmdMod, "Module management"],
]

fn printErrorMessage(msg: str) {
    outln(msg)
}

// Command: julec help
fn help(&args: []str) {
    if len(args) > 2 {
        printErrorMessage("invalid command: " + args[2])
        ret
    }

    mut max := len(HelpMap[0][0])
    for _, k in HelpMap {
        n := len(k[0])
        if n > max {
            max = n
        }
    }

    mut s := StrBuilder.New(1 << 5)
    const Space = 5 // Space of between command name and description.
    for i, part in HelpMap {
        s.WriteStr(part[0])
        s.WriteStr(strings::Repeat(" ", (max - len(part[0])) + Space))
        s.WriteStr(part[1])
        if i+1 < len(HelpMap) {
            s.WriteByte('\n')
        }
    }
    outln(s)
}

// Command: julec version
fn version(&args: []str) {
    if len(args) > 2 {
        printErrorMessage("invalid command: " + args[2])
        ret
    }
    outln(jule::Version)
}

// Command: julec tool distos
fn toolDistos() {
    out("supported operating systems:\n ")
    out(build::DistOs.Windows)
    out(" ")
    out(build::DistOs.Linux)
    out(" ")
    out(build::DistOs.Darwin)
    outln("")
}

// Command: julec tool distarch
fn toolDistarch() {
    out("supported architects:\n ")
    out(build::DistArch.Amd64)
    out(" ")
    out(build::DistArch.I386)
    out(" ")
    out(build::DistArch.Arm64)
    outln("")
}

// Command: julec tool
fn tool(&args: []str) {
    if len(args) == 2 {
        outln(`tool commands:
 distos     Lists all supported operating systems
 distarch   Lists all supported architects`)
        ret
    } else if len(args) > 3 {
        printErrorMessage("invalid command: " + args[3])
        ret
    }

    cmd := args[2]
    match cmd {
    | "distos":
        toolDistos()
    | "distarch":
        toolDistarch()
    |:
        printErrorMessage("undefined command: " + cmd)
    }
}

// Command: julec julenv
fn julenv(&args: []str) {
    if len(args) > 2 {
        printErrorMessage("invalid command: " + args[2])
        ret
    }
    outln("julec version: " + jule::Version)
    outln("architecture: " + std::env::Arch)
    outln("operating system: " + std::env::Os)
    outln("default compiler: " + env::Compiler)
    outln("default C++ standard: " + env::CppStd)
}

// Command: julec mod
fn mod(&args: []str) {
    if len(args) == 2 {
        outln("command is not given, try julec mod init")
        ret
    }

    if len(args) > 3 {
        printErrorMessage("invalid command: " + args[3])
        ret
    }

    match args[2] {
    | "init": // julec mod init
        File.Write(build::ModuleFile, [], 0o660) else {
            printErrorMessage("module could not generated because of a problem")
        }
    |:
        printErrorMessage("invalid command: " + args[2])
    }
}

// Try to process compiler commands.
// Reports whether "ARGS" is command and processed.
fn processCommand(&args: []str): bool {
    match args[1] {
    | CmdHelp:
        help(args)
    | CmdVersion:
        version(args)
    | CmdTool:
        tool(args)
    | CmdJulenv:
        julenv(args)
    | CmdMod:
        mod(args)
    |:
        ret false
    }

    ret true
}

fn showInfo() {
    outln(
        `JuleC is a tool for Jule source code and developers.

Commands:
    help          Show help
    version       Show version
    tool          Tools for effective Jule
    julenv        Show information about native jule environment
    mod           Module management

Compilation:
    julec [OPTIONS] INPUT
`)
}

fn main() {
    mut args := std::env::Args()

    // Not started with arguments.
    // Here is "2" but "args" always have one element for store program name.
    if len(args) < 2 {
        showInfo()
        ret
    }

    if processCommand(args) {
        ret
    }

    compileCommand(args)
}