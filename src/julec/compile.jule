// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use deadcode
use env::{self, OptLevel, push_opt_level}
use handle::{AnsiEscape, Logger, throw}
use obj::{IR}
use cxx for obj::cxx
use optimizing::{Optimizer}
use std::flag::{FlagSet}
use std::fs::{FsError, OFlag, File, Directory, Status}
use path for std::fs::path::{join, dir}
use integrated for std::jule::integrated
use std::jule::lex::{is_decimal, is_ident_rune, is_letter, is_space}
use std::jule::sema::{
    ImportInfo,
    Package,
    SemaFlag,
    analyze_package,
}
use build for std::jule::build::{
    self,
    LogMsg,
    Log,
    PATH_WD,
    PATH_STDLIB,
    DISTOS,
    DISTARCH,
    ENTRY_POINT,
    INIT_FN,
    logf,
    is_valid_cpp_ext,
}
use types for std::jule::types
use std::process::{ProcessError, Cmd}
use strings for std::strings

static mut OUT_DIR = "dist"
static mut OUT_NAME = "ir.cpp"
static mut OUT = ""

fn init() {
    // Configure compiler to default by platform
    // Compiler path will be set by compiler before compilation if still unassigned.
    env::COMPILER = "clang"
}

fn open_output(&path: str): &File {
    let dir = dir(path)

    Status.of(dir) else {
        Directory.create(dir) else {
            throw("a problem occurs when code generation")
        }
    }

    ret File.create(path) else {
        throw("a problem occurs when code generation")
        use nil
    }
}

// Remove generated objects for compilation.
fn clear_objects() {
    File.remove(get_compile_path()) else {
        outln("a problem occurs when object cleaning")
        ret
    }

    // All created objects are cleaned.
    // So, deletes directory if empty after cleaned all objects,
    // if not, leaves the directory.
    Directory.remove(OUT_DIR) else {}
}

// Compie generated IR.
fn compile_ir(compiler: str, compiler_cmd: str) {
    let mut cmd = Cmd.new(compiler)
    cmd.args = [compiler]
    cmd.args = append(cmd.args, strings::split(compiler_cmd, " ", -1)...)
    let status = cmd.spawn() else {
        match error {
        | ProcessError.Fork:
            AnsiEscape.print(AnsiEscape.Red, "back-end compiler could not used because of fork problem")
        | ProcessError.NotExist:
            AnsiEscape.print(AnsiEscape.Red, "back-end compiler could not used because of compiler path is not exist")
        | ProcessError.NotExec:
            AnsiEscape.print(AnsiEscape.Red, "back-end compiler could not used because of compiler path is not in the proper format")
        | ProcessError.Denied:
            AnsiEscape.print(AnsiEscape.Red, "back-end compiler could not used because of permission denied")
        |:
            AnsiEscape.print(AnsiEscape.Red, "back-end compiler could not used because of unkown problem")
        }
        throw("")
        use 0
    }
    if status != 0 {
        let error_message = "\n>>> your backend compiler (" + env::COMPILER + `) reports problems
>>> please check errors above
>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose`

        AnsiEscape.print(AnsiEscape.Red, error_message)
        throw("")
    }

    clear_objects()
}

fn is_cpp_source_file(path: str): bool {
    let offset = strings::find_last_byte(path, '.')
    if offset == -1 {
        ret false
    }
    ret is_valid_cpp_ext(path[offset:])
}

fn push_comp_cmd_clang(mut &cmd: str) {
    // Disable all warnings.
    cmd += "-Wno-everything "

    // Set C++ standard.
    cmd += "--std="
    match env::CPP_STD {
    | "cpp14":
        cmd += "c++14"
    | "cpp17":
        cmd += "c++17"
    | "cpp20":
        cmd += "c++20"
    }
    cmd += " "

    if env::PRODUCTION {
        cmd += "-O3 " // Enable all optimizations.
        cmd += "-flto " // Enable LTO.
        cmd += "-DNDEBUG " // Define NDEBUG, turn off assertions.
        cmd += "-fomit-frame-pointer " // Do not use frame pointer.
    } else {
        cmd += "-O0 " // No optimization.
    }
}

fn push_comp_cmd_gcc(mut &cmd: str) {
    // Disable all warnings.
    cmd += "-w "

    // Set C++ standard.
    cmd += "--std="
    match env::CPP_STD {
    | "cpp14":
        cmd += "c++14"
    | "cpp17":
        cmd += "c++17"
    | "cpp20":
        cmd += "c++20"
    }
    cmd += " "

    if env::PRODUCTION {
        cmd += "-O3 " // Enable all optimizations.
        cmd += "-DNDEBUG " // Define NDEBUG, turn off assertions.
        cmd += "-fomit-frame-pointer " // Do not use frame pointer.
    } else {
        cmd += "-O0 " // No optimization.
    }
}

// Generate compile command for backend-compiler.
fn gen_compile_cmd(source_path: str, &ir: &IR): (str, str) {
    let &compiler = env::COMPILER_PATH
    let mut cmd = ""

    match env::COMPILER {
    | "gcc":
        push_comp_cmd_gcc(cmd)
    | "clang":
        push_comp_cmd_clang(cmd)
    }

    // Push passes.
    for _, pass in ir.passes {
        cmd += pass
        cmd += " "
    }

    // Push linked source files.
    for _, u in ir.used {
        if u.cpp_linked && is_cpp_source_file(u.path) {
            cmd += u.path
            cmd += " "
        }
    }

    if OUT != "" {
        cmd += "-o "
        cmd += OUT
        cmd += " "
    }
    cmd += source_path

    ret compiler, cmd
}

fn get_compile_path(): str {
    // let mut path = join(PATH_WD, OUT_DIR)
    // path = join(path, OUT_NAME)
    // ret path

    // Return command-line argument form
    // instead of absolute path.
    ret join(OUT_DIR, OUT_NAME)
}

fn apply_target_independent_optimizations(mut &ir: &IR) {
    if env::OPT_DEADCODE {
        // See compiler reference (2)
        deadcode::eliminate_defines(ir)
    }

    // Apply target-independent optimizations.
    let mut opt = Optimizer.new(ir)
    opt.optimize()

    if env::OPT_DEADCODE {
        // See compiler reference (3)
        deadcode::eliminate_scopes(ir)
    }
}

fn check_compiler_flag() {
    match env::COMPILER {
    | "":
        throw("missing option value: --compiler")
    | "clang":
        if env::COMPILER_PATH == "" {
            env::COMPILER_PATH = "clang++"
        }
    | "gcc":
        if env::COMPILER_PATH == "" {
            env::COMPILER_PATH = "g++"
        }
    |:
        throw("invalid option value for --compiler: " + env::COMPILER)
    }
}

fn check_target_arch(arch: str) {
    for _, distarch in DISTARCH {
        if arch == distarch {
            ret
        }
    }
    throw("--target: unsupported/undefined architecture: " + arch)
}

fn check_target_os(os: str) {
    for _, distos in DISTOS {
        if os == distos {
            ret
        }
    }
    throw("--target: unsupported/undefined operating system: " + os)
}

fn check_target_flag(&target: str) {
    if target == "" {
        throw("missing option value: --target")
    }

    let parts = strings::split(target, "-", -1)
    if parts.len != 2 {
        throw("--target: undefined platform target format: " + target)
    }

    let (os, arch) = parts[0], parts[1]

    if os != "native" {
        check_target_os(os)
        build::OS = os
    }
    if arch != "native" {
        check_target_arch(arch)
        build::ARCH = arch
    }
    types::update_target()
}

fn check_opt_flag(&opt: str) {
    if opt == "" {
        throw("missing option value: --opt")
    }

    match opt {
    | "L0": // Nothing.
    | "L1":
        push_opt_level(OptLevel.L1)
    |:
        throw("--opt: invalid optimization level: " + opt)
    }
}

fn check_cpp_std_flag() {
    match env::CPP_STD {
    | "cpp14"
    | "cpp17"
    | "cpp20":
        break
    |:
        throw("--cppstd: invalid optimization level: " + env::CPP_STD)
    }
}

fn check_flags(&args: []str): []str {
    let mut opt: str = "L0"
    let mut target: str = "native-native"

    let mut fs = FlagSet.new()

    fs.add_var[str](unsafe { (&str)(&opt) }, "opt", 0, "Optimization level")
    fs.add_var[str](unsafe { (&str)(&target) }, "target", 0, "Target system")
    fs.add_var[str](unsafe { (&str)(&OUT) }, "out", 'o', "Output identifier")
    fs.add_var[bool](unsafe { (&bool)(&env::SHADOWING) }, "shadowing", 0, "Allow shadowing")
    fs.add_var[bool](unsafe { (&bool)(&env::TRANSPILATION) }, "transpile", 't', "Transpile code")
    fs.add_var[str](unsafe { (&str)(&env::COMPILER) }, "compiler", 0, "Backend compiler")
    fs.add_var[str](unsafe { (&str)(&env::COMPILER_PATH) }, "compiler-path", 0, "Path of backend compiler")
    fs.add_var[bool](unsafe { (&bool)(&env::PRODUCTION) }, "production", 'p', "Compile for production")
    fs.add_var[bool](unsafe { (&bool)(&env::RC) }, "disable-rc", 0, "Disable reference counting")
    fs.add_var[bool](unsafe { (&bool)(&env::SAFETY) }, "disable-safety", 0, "Disable safety")
    fs.add_var[str](unsafe { (&str)(&env::CPP_STD) }, "cppstd", 0, "C++ standard")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_COPY) }, "opt-copy", 0, "Copy optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_DEADCODE) }, "opt-deadcode", 0, "Deadcode optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_APPEND) }, "opt-append", 0, "Append optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_MATH) }, "opt-math", 0, "Math optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_ACCESS) }, "opt-access", 0, "Access optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_INLINE) }, "opt-inline", 0, "Inline optimization")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_PTR) }, "opt-ptr", 0, "Pointer optimizations")
    fs.add_var[bool](unsafe { (&bool)(&env::OPT_COND) }, "opt-cond", 0, "Conditional optimizations")

    let mut content = fs.parse(args) else {
        throw(str(error))
        use nil // Avoid error.
    }

    check_compiler_flag()
    check_cpp_std_flag()
    check_target_flag(target)
    check_opt_flag(opt)

    ret content
}

fn setup_sema_flags(mut &flags: SemaFlag) {
    if env::SHADOWING {
        flags |= SemaFlag.Shadowing
    }
}

fn build_ir(&args: []str): &IR {
    let content = check_flags(args)

    let mut sema_flags = SemaFlag.Default
    setup_sema_flags(sema_flags)

    if content.len == 0 {
        throw(logf(LogMsg.MissingCompilePath))
    } else if content.len > 1 {
        throw("undefined content: " + content[1])
    }
    let (mut path, ok) = path::abs(content[0])
    if !ok {
        throw("compile path could not processed because of a problem")
    }

    // Check standard library.
    let inf = Status.of(PATH_STDLIB) else {
        throw(logf(LogMsg.StdlibNotExist))
        ret nil // Avoid error.
    }
    if !inf.is_dir() {
        throw(logf(LogMsg.StdlibNotExist))
    }

    let (mut ir, logs) = IR.build(path, sema_flags)

    if ir == nil && logs == nil {
        throw(logf(LogMsg.NoFileInEntryPackage, path))
    }

    if logs != nil {
        Logger.print_logs(logs)
        throw("")
    }

    ret ir
}

// Process compile command by "ARGS" global.
fn compile_command(mut &args: []str) {
    args = args[1:] // Remove program path.
    if args[0] == "test" {
        env::TEST = true
        args = args[1:]
    }
    let mut ir = build_ir(args)

    const CPP_LINKED = false

    if !env::TEST {
        let mut main = ir.main.find_fn(ENTRY_POINT, CPP_LINKED)
        if main == nil {
            throw(logf(LogMsg.NoEntryPoint))
        }
        main.statically = true // Mark used for deadcode elimination.
    }
    let mut init = ir.main.find_fn(INIT_FN, CPP_LINKED)
    if init != nil {
        init.statically = true // Mark used for deadcode elimination.
    }

    apply_target_independent_optimizations(ir)

    // See compiler reference (1)
    ir.order()

    let (compiler, compiler_cmd) = gen_compile_cmd(get_compile_path(), ir)

    let path = get_compile_path()
    let mut file = open_output(path)

    let mut oc = cxx::ObjectCoder.new(ir, file, cxx::SerializationInfo{
        compiler: compiler,
        compiler_command: compiler_cmd,
    })
    oc.serialize()
}