// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use build for std::jule::build

pub static mut VARS: []str = nil

// Set operating system variables by native operating system.
fn set_os_vars() {
    VARS = append(VARS, build::OS)
    if build::is_unix(build::OS) {
        VARS = append(VARS, "unix")
    }
}

// Set architecture variables by native architecture.
fn set_arch_vars() {
    VARS = append(VARS, build::ARCH)
    if build::is_64bit(build::ARCH) {
        VARS = append(VARS, "x64")
    }
    if build::is_32bit(build::ARCH) {
        VARS = append(VARS, "x32")
    }
}

// Initialize directive eval variables.
pub fn init_vars() {
    set_os_vars()
    set_arch_vars()

    if env::PRODUCTION {
        VARS = append(VARS, "production")
    }

    if env::TEST {
        VARS = append(VARS, "test")
    }

    match env::COMPILER {
    | "clang":
        VARS = append(VARS, "clang")
    | "gcc":
        VARS = append(VARS, "gcc")
    }

    match env::CPP_STD {
    | "cpp14":
        VARS = append(VARS, "cpp14")
    | "cpp17":
        VARS = append(VARS, "cpp17")
    | "cpp20":
        VARS = append(VARS, "cpp20")
    }
}
