// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use std::jule::build::{Os, Arch, is_unix, is_32bit, is_64bit}

pub static mut VARS: []str = nil

// Set operating system variables by native operating system.
fn set_os_vars() {
    match env::OS {
    | Os.Windows: VARS = append(VARS, "windows")
    | Os.Linux:   VARS = append(VARS, "linux")
    | Os.Darwin:  VARS = append(VARS, "darwin")
    }

    if is_unix(env::OS) {
        VARS = append(VARS, "unix")
    }
}

// Set architecture variables by native architecture.
fn set_arch_vars() {
    match env::ARCH {
    | Arch.I386:  VARS = append(VARS, "i386")
    | Arch.Amd64: VARS = append(VARS, "amd64")
    | Arch.Arm64: VARS = append(VARS, "arm64")
    }

    if is_64bit(env::ARCH) {
        VARS = append(VARS, "x64")
    }
    if is_32bit(env::ARCH) {
        VARS = append(VARS, "x32")
    }
}

// Initialize directive eval variables.
pub fn init_vars() {
    set_os_vars()
    set_arch_vars()

    if env::PRODUCTION {
        VARS = append(VARS, "production")
    }

    if env::TEST {
        VARS = append(VARS, "test")
    }

    match env::COMPILER {
    | "clang": VARS = append(VARS, "clang")
    | "gcc":   VARS = append(VARS, "gcc")
    }
}
