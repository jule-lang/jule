// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use mod
use handle::{throw}

use std::fs::{OFlag, FsError, DirEntry, File, Directory}
use std::fs::path::{join}
use std::jule::ast::{Ast}
use build for std::jule::build::{
    Directive,
    LogKind,
    Log,
    EXT,
}
use std::jule::lex::{Token, new_file_set, lex}
use std::jule::parser::{parse_file}
use std::jule::sema::{
    Importer,
    ImportInfo,
}
use std::process::{exit}
use strings for std::strings

// Read buffer by file path.
fn read_buff(path: str): []byte {
    ret File.read(path) else {
        throw("error: file cannot read")
        ret nil // Avoid error
    }
}

// Make compiler error, just text.
// Not includes row, column, and etc. informations.
fn flat_compiler_err(text: str): Log {
    ret Log{
        kind: LogKind.Error,
        text: text,
    }
}

// Reports whether file passes build directives.
fn is_pass_build_directives(mut &file: &Ast): (bool, []Log) {
    for (_, mut td) in file.top_directives {
        if td.tag.kind != Directive.Build {
            continue
        }

        let mut de = DirectiveEval{
            d: td,
        }
        let result = de.eval()
        if de.logs.len > 0 {
            ret false, de.logs
        }
        if !result {
            ret false, nil
        }
    }
    ret true, nil
}

// Common importer of JuleC.
pub struct PlainImporter {
    mods:             []str
    pub mod:          str
    pub all_packages: []&ImportInfo
}

impl PlainImporter {
    const STD_MOD = int(-1)

    pub static fn new(): &PlainImporter {
        ret &PlainImporter{
            mods: [build::PATH_STDLIB],
        }
    }
}

impl Importer for PlainImporter {
    pub fn set_mod_path(mut self, path: str) {
        self.mod = path
    }

    pub fn get_mod_path(self): str {
        ret self.mod
    }

    pub fn mod_by_id(self, id: int): str {
        ret self.mods[id]
    }

    pub fn get_import(mut self, path: str): &ImportInfo {
        for (_, mut p) in self.all_packages {
            if p.path == path {
                ret p
            }
        }

        ret nil
    }

    pub fn import_package(mut self, path: str, update_mod: bool): ([]&Ast, []Log) {
        let mut dirents = Directory.read(path) else {
            ret nil, [flat_compiler_err("connot read package directory: " + path)]
        }

        if update_mod {
            let new_mod = mod::find_module_file_deep(path)
            if new_mod != self.mod {
                self.mod = new_mod
                let mut errs = mod::check_module_file(self.mod)
                if errs.len != 0 {
                    ret nil, errs
                }
            }
        }

        let mut asts = make([]&Ast, 0, dirents.len)
        for _, dirent in dirents {
            // Skip directories, and non-jule files.
            if dirent.stat.is_dir() || !strings::has_suffix(dirent.name, EXT) {
                continue
            }

            let _path = join(path, dirent.name)
            let mut file = new_file_set(_path)
            file.fill(read_buff(file.path()))
            let mut errors = lex(file)
            if errors.len > 0 {
                ret nil, errors
            }

            let mut finfo = parse_file(file)
            if finfo.errors.len > 0 {
                ret nil, finfo.errors
            }

            // Skip this source file if file annotation is failed.
            if !is_pass_file_annotation(dirent.name) {
                continue
            }

            let (r, mut logs) = is_pass_build_directives(finfo.ast)
            if logs.len > 0 {
                ret nil, logs
            }

            // Skip file if can't pass build directives.
            if !r {
                continue
            }

            asts = append(asts, finfo.ast)
        }

        ret asts, nil
    }

    pub fn imported(mut self, mut imp: &ImportInfo) {
        // Already imported?
        for _, p in self.all_packages {
            if p.cpp_linked == imp.cpp_linked && p.link_path == imp.link_path {
                ret
            }
        }

        if self.mod.len != 0 {
            for i, mod in self.mods {
                if self.mod == mod {
                    imp.mod_id = i
                    goto setted
                }
            }
            imp.mod_id = self.mods.len
            self.mods = append(self.mods, self.mod)
        setted:
        }

        self.all_packages = append(self.all_packages, imp)
    }
}
