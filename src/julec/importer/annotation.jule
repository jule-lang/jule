// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use build for std::jule::build
use strings for std::strings

fn check_os(arg: str): (ok: bool, exist: bool) {
    ok = false
    exist = true

    match arg {
    | build::Os.Windows:
        ok = build::is_windows(build::OS)
    | build::Os.Darwin:
        ok = build::is_darwin(build::OS)
    | build::Os.Linux:
        ok = build::is_linux(build::OS)
    | build::Os.Unix:
        ok = build::is_unix(build::OS)
    |:
        ok = true
        exist = false
    }

    ret
}

fn check_arch(arg: str): (ok: bool, exist: bool) {
    ok = false
    exist = true

    match arg {
    | build::Arch.I386:
        ok = build::is_i386(build::ARCH)
    | build::Arch.Amd64:
        ok = build::is_amd64(build::ARCH)
    | build::Arch.Arm64:
        ok = build::is_arm64(build::ARCH)
    | build::Arch.X64:
        ok = build::is_64bit(build::ARCH)
    | build::Arch.X32:
        ok = build::is_32bit(build::ARCH)
    |:
        ok = true
        exist = false
    }

    ret
}

// Reports whether file path passes file annotation by current system.
fn is_pass_file_annotation(mut p: str): bool {
    p = path::base(p)
    let n = p.len
    p = p[:n-path::ext(p).len]

    // a1 is the second annotation.
    // Should be architecture annotation if exist annotation 2 (aka a2),
    // can operating system or architecture annotation if not.
    let mut a1 = ""
    // a2 is first filter.
    // Should be operating system filter if exist and valid annotation.
    let mut a2 = ""

    // Annotation 1
    let mut i = strings::find_last_byte(p, '_')
    if i == -1 {
        // Check file name directly if not exist any _ character.
        let (mut ok, mut exist) = check_os(p)
        if exist {
            ret ok
        }
        ok, exist = check_arch(p)
        ret !exist || ok
    }
    if i+1 >= n {
        ret true
    }
    a1 = p[i+1:]

    p = p[:i]

    // Annotation 2
    i = strings::find_last_byte(p, '_')
    if i != -1 {
        a2 = p[i+1:]
    }

    if a2 == "" {
        let (mut ok, mut exist) = check_os(a1)
        if exist {
            ret ok
        }
        ok, exist = check_arch(a1)
        ret !exist || ok
    }

    let (mut ok, mut exist) = check_arch(a1)
    if exist {
        if !ok {
            ret false
        }
        ok, exist = check_os(a2)
        ret !exist || ok
    }

    // a1 is not architecture, for this reason bad couple pattern.
    // Accept as one pattern, so a1 can be platform.
    ok, exist = check_os(a1)
    ret !exist || ok
}
