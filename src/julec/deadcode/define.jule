// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use obj::{IR}

use std::jule::sema::{
    Package,
    Fn,
    FnIns,
    StructIns,
    Var,
    ReferenceStack,
    Trait,
    TypeKind,
}

// Stores all dead definitions.
static mut deads: []any = nil

// Stores currently checking definitions.
static mut checking: []any = nil

// Currently checking reference.
static mut current: any = nil

static mut main_current: any = nil

// Reports whether the reference tpye of t exist in arr.
fn is_exist(arr: []any, t: any): bool {
    for _, ref in arr {
        if ref == t {
            ret true
        }
    }
    ret false
}

// Reports whether reference in dead.
fn is_dead(mut ref: any): (dead: bool) {
    if is_exist(deads, ref) {
        // Cycle, also already checked and marked as dead.
        ret true
    }
    match type ref {
    | &FnIns:
        if (&FnIns)(ref).decl.is_init() {
            break
        }
        fall
    |:
        if ref == current || ref == main_current {
            ret true
        }
        if is_exist(checking, ref) {
            // Cycle, also already checking and should be marked dead.
            ret true
        }
    }

    let mut old = current
    current = ref
    let len = checking.len
    checking = append(checking, ref)
    defer {
        current = old
        drop_ref(checking, len)
        /*if dead {
            deads = append(deads, ref)
        }*/
    }

    match type ref {
    | &FnIns:
        ret is_fn_dead((&FnIns)(ref))

    | &Var:
        ret is_var_dead((&Var)(ref))

    | &StructIns:
        ret is_struct_dead((&StructIns)(ref))

    | &Trait:
        ret is_trait_dead((&Trait)(ref))

    |:
        ret false
    }
}

// Remove reference from refs by pos.
fn drop_ref(mut &refs: []any, pos: int) {
    // Remove position, and following references.
    // This is safe.
    // References dropped after processed, so following
    // references should be already processed.
    refs = refs[:pos]
}

fn is_all_references_are_dead(mut references: &ReferenceStack): bool {
    let mut i = 0
    for i < references.len(); i++ {
        let mut ref = references.at(i)
        if current == ref {
            continue
        }
        if main_current == ref {
            continue
        }
        if !is_dead(ref) {
            ret false
        }
    }
    ret true
}

fn is_fn_dead(mut f: &FnIns): bool {
    if f.decl.cpp_linked || f.anon {
        ret false
    }

    if f.decl.is_entry_point() || f.decl.is_init() {
        ret !f.decl.statically
    }

    if f.owner != nil {
        if is_exist(checking, f.owner) {
            // Cycle, also already checking and should be marked dead.
            ret true
        }
        ret is_dead(f.owner)
    }

    /*if f.generics.len > 0 {
        if is_any_generic_is_dead(f.generics) {
            ret true
        }
    }*/

    ret is_all_references_are_dead(f.references)
}

fn is_var_dead(mut v: &Var): bool {
    if v.constant {
        ret true
    }

    if v.cpp_linked {
        ret false
    }

    ret is_all_references_are_dead(v.references)
}

fn kind_is_dead(mut k: &TypeKind): bool {
    match {
    | k.sptr() != nil:
        ret kind_is_dead(k.sptr().elem)

    | k.ptr() != nil:
        ret kind_is_dead(k.ptr().elem)

    | k.slc() != nil:
        ret kind_is_dead(k.slc().elem)

    | k.arr() != nil:
        ret kind_is_dead(k.arr().elem)

    | k.trt() != nil:
        let mut t = k.trt()
        if is_dead(t) {
            ret true
        }

    | k.strct() != nil:
        let mut s = k.strct()
        if is_dead(s) {
            ret true
        }
    }
    ret false
}

fn is_any_generic_is_dead(mut &generics: []&TypeKind): bool {
    for (_, mut g) in generics {
        if kind_is_dead(g) {
            ret true
        }
    }
    ret false
}

fn is_struct_dead(mut s: &StructIns): bool {
    // Do not eliminate structure.
    ret false

    if s.decl.cpp_linked {
        ret false
    }

    /*if s.generics.len > 0 {
        if is_any_generic_is_dead(s.generics) {
            ret true
        }
    }*/

    ret is_all_references_are_dead(s.references)
}

fn is_trait_dead(mut t: &Trait): bool {
    // Do not eliminate trait.
    ret false

    for (_, mut imp) in t.implemented {
        let mut i = 0
        for i < imp.instances.len; i++ {
            let mut ins = imp.instances[i]
            if !is_struct_dead(ins) {
                ret false
            }
        }
    }
    ret true
}

// Eliminates dead functions.
fn eliminate_dead_functions(mut &funcs: []&Fn) {
    let mut i = 0
    for i < funcs.len {
        let mut f = funcs[i]
        let mut j = 0
        for j < f.instances.len {
            let mut ins = f.instances[j]
            main_current = ins
            if is_fn_dead(ins) {
                deads = append(deads, ins)
                f.instances = append(f.instances[:j], f.instances[j+1:]...)
            } else {
                j++
            }
        }

        // Remove function, no instances.
        if f.instances.len == 0 {
            funcs = append(funcs[:i], funcs[i+1:]...)
            continue
        }
        i++
    }
}

fn eliminate_dead_globals(mut &pkg: &Package) {
    for (_, mut f) in pkg.files {
        let mut i = 0
        for i < f.vars.len {
            let mut v = f.vars[i]
            main_current = v
            if is_var_dead(v) {
                deads = append(deads, v)
                f.vars = append(f.vars[:i], f.vars[i+1:]...)
            } else {
                i++
            }
        }
    }
}

fn eliminate_dead_functions_package(mut &pkg: &Package) {
    for (_, mut f) in pkg.files {
        eliminate_dead_functions(f.funcs)
    }
}

fn eliminate_dead_structs(mut &pkg: &Package) {
    for (_, mut f) in pkg.files {
        let mut i = 0
        for i < f.structs.len {
            let mut s = f.structs[i]
            let mut j = 0
            for j < s.instances.len {
                let mut ins = s.instances[j]
                main_current = ins
                if is_struct_dead(ins) {
                    deads = append(deads, ins)
                    s.instances = append(s.instances[:j], s.instances[j+1:]...)
                    continue
                }
                j++
            }

            if s.instances.len == 0 {
                f.structs = append(f.structs[:i], f.structs[i+1:]...)
                continue
            }
            i++
        }
    }
}

fn eliminate_dead_traits(mut &pkg: &Package) {
    for (_, mut f) in pkg.files {
        let mut i = 0
        for i < f.traits.len {
            let mut t = f.traits[i]
            main_current = t
            if is_trait_dead(t) {
                deads = append(deads, t)
                f.traits = append(f.traits[:i], f.traits[i+1:]...)
            } else {
                i++
            }
        }
    }
}

fn catch_alive_init(mut &pkg: &Package) {
    const CPP_LINKED = false
    const INIT_FN = "init"
    let mut f = pkg.find_fn(INIT_FN, CPP_LINKED)
    if f == nil {
        ret
    }

    let n = deads.len
    defer {
        // Clear memory.
        deads = deads[:n]
        checking = nil
        current = nil
    }

    let mut ins = f.instances[0]
    let mut i = 0
    for i < ins.refers.len(); i++ {
        if !is_dead(ins.refers.at(i)) {
            f.statically = true
            ret
        }
    }
}

fn eliminate_package(mut &pkg: &Package) {
    deads = make([]any, 0, 2000)

    catch_alive_init(pkg)

    //eliminate_dead_structs(pkg)
    //eliminate_dead_traits(pkg)
    eliminate_dead_globals(pkg)
    eliminate_dead_functions_package(pkg)
}

// Eliminate dead defines.
pub fn eliminate_defines(mut &ir: &IR) {
    let mut i = ir.used.len -1 
    for i >= 0 ; i-- {
        let mut u = ir.used[i]
        if !u.cpp_linked {
            eliminate_package(u.package)
        }
    }
    eliminate_package(ir.main)

    // Clear memory.
    deads = nil
    checking = nil
    current = nil
}
