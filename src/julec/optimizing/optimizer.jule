// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use obj::{IR}
use env

use std::jule::sema::{
    Package,
    Var,
    Fn,
    Struct,
}

// Target-independent optimizer for IR.
pub struct Optimizer {
    ir: &IR
}

impl Optimizer {
    // Returns new optimizer for IR.
    pub static fn new(mut &ir: &IR): &Optimizer {
        ret &Optimizer{
            ir: ir,
        }
    }

    fn optimize_global(mut self, mut &v: &Var) {
        if !v.cpp_linked {
            ExprOptimizer.optimize(v.value.data.model)
        }
    }

    fn optimize_function(mut self, mut &func: &Fn) {
        if func.cpp_linked {
            ret
        }
        for (_, mut ins) in func.instances {
            let mut so = ScopeOptimizer.new(ins.scope)
            so.optimize()
        }
    }

    fn optimize_struct(mut self, mut &s: &Struct) {
        if s.cpp_linked {
            ret
        }
        for (_, mut ins) in s.instances {
            for (_, mut f) in ins.fields {
                if f.default != nil {
                    ExprOptimizer.optimize(f.default.model)
                }
            }
            for (_, mut m) in ins.methods {
                self.optimize_function(m)
            }
        }
    }

    fn optimize_globals(mut self, mut &p: &Package) {
        for (_, mut f) in p.files {
            for (_, mut v) in f.vars {
                self.optimize_global(v)
            }
        }
    }

    fn optimize_functions(mut self, mut &p: &Package) {
        for (_, mut f) in p.files {
            for (_, mut func) in f.funcs {
                self.optimize_function(func)
            }
        }
    }

    fn optimize_structs(mut self, mut &p: &Package) {
        for (_, mut f) in p.files {
            for (_, mut s) in f.structs {
                self.optimize_struct(s)
            }
        }
    }

    fn optimize_package(mut self, mut &p: &Package) {
        self.optimize_globals(p)
        self.optimize_functions(p)
        self.optimize_structs(p)
    }

    // Optimizes IR by enabled optimizations.
    pub fn optimize(mut self) {
        // Do optimizatitons if any enabled.
        match {
        | env::OPT_COND
        | env::OPT_APPEND:
            break
        |:
            ret
        }
        for (_, mut u) in self.ir.used {
            if !u.cpp_linked {
                self.optimize_package(u.package)
            }
        }
        self.optimize_package(self.ir.main)
    }
}
