// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use path for std::fs::path
use std::jule::build::{PATH_STDLIB}
use std::jule::constant::{Const}
use std::jule::lex::{TokenKind}
use std::jule::sema::{
    Var,
    Data,
    Scope,
    St,
    ExprModel,
    FnCallExprModel,
    Conditional,
    If,
    Else,
    Case,
    Match,
    RangeIter,
    WhileIter,
    InfIter,
    Assign,
    MultiAssign,
    RetSt,
    BinopExprModel,
    OperandExprModel,
    BuiltinAppendCallExprModel,
    SliceExprModel,
    StructSubIdentExprModel,
    SlicingExprModel,
}
use strings for std::strings

// Scope optimizer that applies target-independent optimizations.
struct ScopeOptimizer {
    i:     int
    scope: &Scope
}

impl ScopeOptimizer {
    pub static fn new(mut scope: &Scope): &ScopeOptimizer {
        ret &ScopeOptimizer{
            scope: scope,
        }
    }

    fn set_current_stmt(mut self, mut stmt: any) {
        self.scope.stmts[self.i] = stmt
    }

    fn optimize_data(mut self, mut d: &Data) {
        match type d.model {
        | &FnCallExprModel:
            let mut m = (&FnCallExprModel)(d.model)
            if env::PRODUCTION {
                if !m.func.is_builtin() &&
                    is_std_package(m.func.decl.token.file.path(), "debug") {
                    self.set_current_stmt(nil)
                    ret
                }
            }
        }
        ExprOptimizer.optimize(d.model)
    }

    fn optimize_var(mut self, mut v: &Var) {
        if v.value != nil {
            ExprOptimizer.optimize(v.value.data.model)
        }
    }

    fn optimize_conditional(mut self, mut c: &Conditional) {
        for (_, mut elif) in c.elifs {
            ExprOptimizer.optimize(elif.expr)
            self.optimize_child(elif.scope)
        }
        if c.default != nil {
            self.optimize_child(c.default.scope)
        }

        if !env::OPT_COND {
            ret
        }

        let mut const_case = false // Has cosntant true case.

        // Remove unnecessary trailing cases that comes after constant true case.
        for (i, mut elif) in c.elifs {
            if !is_constant_valid_conditional_case(elif) {
                continue
            }
            const_case = true
            c.elifs = c.elifs[:i]
            c.default = &Else{
                scope: elif.scope,
            }
            break
        }

        if c.elifs.len == 0 {
            ret
        }

        // Remove unreachable cases.
        let mut i = &c.elifs[0]
        let end = &c.elifs[c.elifs.len-1]
        for i <= end; i++ {
            unsafe {
                if is_unreachable_conditional_case(*i) {
                    *i = nil
                }
            }
        }

        if c.elifs.len == 0 {
            ret
        }

        // Skip one-case checking if const-case is not exist.
        if !const_case {
            ret
        }

        let mut only = -1
        for j, elif in c.elifs {
            if elif != nil {
                if only != -1 {
                    // Break checking, there is more than one case.
                    ret
                }
                only = j
            }
        }

        // Here is one case.
        if only != -1 {
            self.set_current_stmt(c.elifs[only].scope)
        }
    }

    fn optimize_match(mut self, mut m: &Match) {
        for (_, mut case) in m.cases {
            for (_, mut expr) in case.exprs {
                ExprOptimizer.optimize(expr.model)
            }
            self.optimize_child(case.scope)
        }
        if m.default != nil {
            self.optimize_child(m.default.scope)
        }

        if !env::OPT_COND {
            ret
        }

        let mut const_case = false // Has cosntant true case.

        // Remove unnecessary trailing cases that comes after constant true case.
        for (i, mut case) in m.cases {
            if !is_constant_valid_match_case(case) {
                continue
            }
            const_case = true
            m.cases = m.cases[:i]
            case.exprs = nil // Remove expressions to remove eval overhead.
            m.default = case
            break
        }

        if m.cases.len == 0 {
            ret
        }

        // Remove unreachable cases.
        let mut i = &m.cases[0]
        let end = &m.cases[m.cases.len-1]
        for i <= end; i++ {
            unsafe {
                if is_unreachable_match_case(*i) {
                    *i = nil
                }
            }
        }

        // Skip one-case checking if const-case is not exist.
        if !const_case {
            ret
        }

        let mut only = -1
        for j, case in m.cases {
            if case != nil {
                if only != -1 {
                    // Break checking, there is more than one case.
                    ret
                }
                only = j
            }
        }

        // Here is one case.
        if only != -1 {
            self.set_current_stmt(m.cases[only].scope)
        }
    }

    fn optimize_range_iter(mut self, mut it: &RangeIter) {
        ExprOptimizer.optimize(it.expr.model)
        self.optimize_child(it.scope)
    }

    fn optimize_while_iter(mut self, mut it: &WhileIter) {
        ExprOptimizer.optimize(it.expr)
        self.optimize_stmt(it.next)
        self.optimize_child(it.scope)
    }

    fn substr(mut self, mut a: &Assign): bool {
        let lp = a.l.kind.prim()
        if lp == nil || !lp.is_str() {
            ret false
        }
        match type a.r.model {
        | &SlicingExprModel:
            let mut sem = (&SlicingExprModel)(a.r.model)
            if a.l.model == sem.expr {
                self.set_current_stmt(&MutSlicingExprModel{
                    token: sem.token,
                    expr:  sem.expr,
                    left:  sem.left,
                    right: sem.right,
                })
                ret true
            }
        }
        ret false
    }

    fn optimize_assign(mut self, mut assign: &Assign) {
        if env::OPT_COPY && self.substr(assign) {
            ret
        }

        ExprOptimizer.optimize(assign.l.model)
        ExprOptimizer.optimize(assign.r.model)

        match assign.op.kind {
        | TokenKind.SolidusEq | TokenKind.PercentEq:
            // Do not check division of structures safety.
            if env::OPT_MATH && assign.l.kind.strct() == nil {
                assign.op.kind = assign.op.kind[:assign.op.kind.len - 1]
                let mut model = any(&BinopExprModel{
                    op:    assign.op,
                    left:  assign.l,
                    right: assign.r,
                })
                ExprOptimizer.optimize(model)
                match type model {
                | &BinopExprModel:
                    assign.r = new(OperandExprModel, *assign.r)
                    assign.op.kind = TokenKind.Eq
                    assign.r.model = model
                    ret
                }
                assign.op.kind += "="
                ret
            }
        }

        if env::OPT_APPEND {
            match type assign.r.model {
            | &BuiltinAppendCallExprModel:
                let mut m = (&BuiltinAppendCallExprModel)(assign.r.model)
                match type m.elements {
                | &SliceExprModel:
                    match type m.dest {
                    | &Var
                    | &StructSubIdentExprModel:
                        self.set_current_stmt(&PushToSliceExprModel{
                            dest:  m.dest,
                            elems: (&SliceExprModel)(m.elements),
                        })
                    }
                }
            }
        }
    }

    fn optimize_multi_assign(mut self, mut assign: &MultiAssign) {
        for (i, mut l) in assign.l {
            ExprOptimizer.optimize(l)
            assign.l[i] = l
        }
        ExprOptimizer.optimize(assign.r)
    }

    fn optimize_ret(mut self, mut r: &RetSt) {
        ExprOptimizer.optimize(r.expr)
    }

    fn optimize_stmt(mut self, mut stmt: St) {
        match type stmt {
        | &Scope:
            self.optimize_child((&Scope)(stmt))
        | &Data:
            self.optimize_data((&Data)(stmt))
        | &Var:
            self.optimize_var((&Var)(stmt))
        | &Conditional:
            self.optimize_conditional((&Conditional)(stmt))
        | &RangeIter:
            self.optimize_range_iter((&RangeIter)(stmt))
        | &WhileIter:
            self.optimize_while_iter((&WhileIter)(stmt))
        | &InfIter:
            self.optimize_child((&InfIter)(stmt).scope)
        | &Assign:
            self.optimize_assign((&Assign)(stmt))
        | &MultiAssign:
            self.optimize_multi_assign((&MultiAssign)(stmt))
        | &Match:
            self.optimize_match((&Match)(stmt))
        | &RetSt:
            self.optimize_ret((&RetSt)(stmt))
        }
    }

    fn optimize_child(mut self, mut child: &Scope) {
        let mut so = ScopeOptimizer.new(child)
        so.optimize()
    }

    // Optimizes scope by enabled optimizations.
    pub fn optimize(mut self) {
        for (i, mut stmt) in self.scope.stmts {
            self.i = i
            self.optimize_stmt(stmt)
        }
    }
}

fn is_std_package(f: str, p: str): bool {
    ret strings::has_prefix(f, path::join(PATH_STDLIB, p))
}

fn is_constant_valid_conditional_case(&i: &If): bool {
    match type i.expr {
    | &Const:
        let c = (&Const)(i.expr)
        ret c.is_bool() && c.read_bool()
    }
    ret false
}

fn is_unreachable_expr(&expr: ExprModel): bool {
    match type expr {
    | &Const:
        let c = (&Const)(expr)
        ret c.is_bool() && !c.read_bool()
    | &BinopExprModel:
        let m = (&BinopExprModel)(expr)
        if m.op.kind == TokenKind.DblAmper {
            ret is_unreachable_expr(m.left.model) || is_unreachable_expr(m.right.model)
        }
    }
    ret false
}

fn is_constant_valid_match_case(&case: &Case): bool {
    for _, expr in case.exprs {
        if expr.is_const() && expr.constant.is_bool() && expr.constant.read_bool() {
            ret true
        }
    }
    ret false
}

fn is_unreachable_conditional_case(&i: &If): bool {
    ret is_unreachable_expr(i.expr)
}

fn is_unreachable_match_case(&case: &Case): bool {
    for _, expr in case.exprs {
        if !is_unreachable_expr(expr.model) {
            ret false
        }
    }
    ret true
}
