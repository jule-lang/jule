// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated

cpp use "<signal.h>"
cpp use "<sys/wait.h>"
cpp use "<unistd.h>"

cpp let SIGTERM: int
cpp let WUNTRACED: int

cpp fn WIFSIGNALED(status: int): bool
cpp fn getpid(): int
cpp fn fork(): int
cpp unsafe fn waitpid(pid: int, mut status: *integ::Int, options: int): int
cpp fn WEXITSTATUS(status: int): int
cpp fn kill(pid: int, sig: int): int

fn str_slice_to_cstr_slice(s: []str): []*integ::Char {
    let mut cs = make([]*integ::Char, 0, s.len + 1)
    for i in s {
        cs = append(cs, unsafe { (*integ::Char)(&s[i][0]) })
    }
    cs = append(cs, nil)
    ret cs
}

fn execvp(file: str, argv: []str): int {
    let cargv = str_slice_to_cstr_slice(argv)
    unsafe {
        ret integ::emit[int]("execvp({}, (char*const*){})", (*integ::Char)(&file[0]), &cargv[0])
    }
}

fn execve(file: str, argv: []str, env: []str): int {
    let cargv = str_slice_to_cstr_slice(argv)
    let cenv = str_slice_to_cstr_slice(env)
    unsafe {
        ret integ::emit[int]("execve({}, (char*const*){}, (char*const*)({}))", (*integ::Char)(&file[0]), &cargv[0], &cenv[0])
    }
}

impl Cmd {
    fn __spawn(self)!: int {
        if self.path == "" {
            error(ProcessError.NotExist)
        }
        let pid = cpp.fork()
        match pid {
        | -1:
            error(ProcessError.Fork)
        | 0:
            let mut status = 0
            if self.env == nil {
                status = execvp(self.path, self.args)
            } else {
                status = execve(self.path, self.args, self.env)
            }
            if status == -1 {
                cpp.kill(cpp.getpid(), cpp.SIGTERM)
            } 
            exit(255)
        }
        let status = 0
        if unsafe { cpp.waitpid(pid, (*integ::Int)(&status), cpp.WUNTRACED) == -1 } {
            error(get_last_process_error())
        }
        if cpp.WIFSIGNALED(status) {
            error(ProcessError.Fork)
        }
        ret cpp.WEXITSTATUS(status)
    }
}
