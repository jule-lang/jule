// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated

cpp use "<fcntl.h>"
cpp use "cmd.hpp"

cpp type HANDLE: *unsafe

cpp fn __jule_execvp(file: str, argv: []str): int
cpp fn __jule_execve(file: str, argv: []str, env: []str): int
cpp unsafe fn TerminateProcess(pid: cpp.HANDLE, code: int): bool
cpp unsafe fn _cwait(mut status: *integ::Int, pid: int, action: int): int

impl Cmd {
    // Spawns process.
    pub fn spawn(mut self)! {
        if self._pid != Cmd.NPID {
            error("command already spawned")
        }

        self._pid = if self.env == nil {
            cpp.__jule_execvp(self._fle, self.args)
        } else {
            cpp.__jule_execve(self._fle, self.args, self.env)
        }
        if self._pid == -1 {
            error(get_last_process_error())
        }
    }

    // Kills process.
    // Fails if process is not alive.
    pub fn kill(mut self)! {
        if unsafe { cpp.TerminateProcess(cpp.HANDLE(self._pid), 0) } {
            self._pid = Cmd.NPID
            ret
        }
        error("kill failed")
    }

    // Waits complete for running of process.
    // Returns exit code of process.
    pub fn wait(mut self)!: int {
        if self._pid == Cmd.NPID {
            error("command is not spawned")
        }

        let mut status = 0
        if unsafe { cpp._cwait((*integ::Int)(&status), self._pid, 0) } == -1 {
            error(get_last_process_error())
        }
        self._pid = Cmd.NPID
        ret status
    }
}
