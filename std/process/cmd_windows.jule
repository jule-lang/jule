// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated
cpp use "<fcntl.h>"
cpp use "<unistd.h>"

cpp type HANDLE: *unsafe

cpp let P_NOWAIT: int

cpp fn _wspawnvp(mode: int, file: *integ::Wchar, args: **integ::Wchar): int
cpp fn _wspawnvpe(mode: int, file: *integ::Wchar, args: **integ::Wchar, env: **integ::Wchar): int
cpp unsafe fn _cwait(mut status: *integ::Int, pid: int, action: int): int

fn ustrSliceToWcstrSlice(us: [][]u16): []*integ::Wchar {
    let mut wcs = make([]*integ::Wchar, 0, us.len + 1)
    for i in us {
        wcs = append(wcs, unsafe { (*integ::Wchar)(&us[i][0]) })
    }
    wcs = append(wcs, nil)
    ret wcs
}

fn strSliceToUstrSlice(s: []str): [][]u16 {
    let mut us = make([][]u16, 0, s.len)
    for _, p in s {
        us = append(us, integ::Utf16FromStr(p))
    }
    ret us
}

fn execvp(file: str, argv: []str): int {
    let utf16File = integ::Utf16FromStr(file)
    let ucargv = strSliceToUstrSlice(argv)
    let cargv = ustrSliceToWcstrSlice(ucargv)
    ret cpp._wspawnvp(cpp.P_NOWAIT, unsafe { (*integ::Wchar)(&utf16File[0]) }, &cargv[0])
}

fn execve(file: str, argv: []str, env: []str): int {
    let ucargv = strSliceToUstrSlice(argv)
    let cargv = ustrSliceToWcstrSlice(ucargv)
    let ucenv = strSliceToUstrSlice(env)
    let cenv = ustrSliceToWcstrSlice(ucenv)
    let utf16File = integ::Utf16FromStr(file)
    ret cpp._wspawnvpe(cpp.P_NOWAIT, unsafe { (*integ::Wchar)(&utf16File[0]) }, &cargv[0], &cenv[0])
}

impl Cmd {
    fn spawn(self)!: int {
        let mut pid = 0
        if self.Env == nil {
            pid = execvp(self.path, self.Args)
        } else {
            pid = execve(self.path, self.Args, self.Env)
        }
        if pid == -1 {
            error(getLastProcessError())
        }
        let status = 0
        if unsafe { cpp._cwait((*integ::Int)(&status), pid, 0) } == -1 {
            error(getLastProcessError())
        }
        ret status
    }
}