// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package std::bytes implements functions for the manipulation of byte slices.
// It is analogous to the facilities of the std::strings package.
// But optimized for byte slices, may provide more efficient functions.
// If you have byte slice form of strings, this package is the best option for most cases.

use unicode for std::unicode
use utf8 for std::unicode::utf8

// Returns bytes that equals to concatenation of n-count s.
// Returns nil slice is n <= 0.
pub fn Repeat(s: []byte, mut n: int): []byte {
    if n <= 0 {
        ret nil
    }
    if s.len > int.MAX/n {
        panic("std::bytes: repeat: integer buffer size overflow")
    }

    let mut buff = make([]byte, s.len * n)
    let mut i = 0
    for n > 0; n-- {
        i += copy(buff[i:], s)
    }
    ret buff
}

fn hasPrefix(&s: []byte, &sub: []byte, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }
    for _, sb in sub {
        if s[start] != sb {
            ret false
        }
        start++
    }
    ret true
}

// Reports byte slice has prefix as specified sub-slice or not.
pub fn HasPrefix(s: []byte, sub: []byte): bool {
    ret hasPrefix(s, sub, 0)
}

fn hasSuffix(&s: []byte, &sub: []byte, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    start = s.len - start
    for i in sub {
        if s[start-i-1] != sub[sub.len-i-1] {
            ret false
        }
    }
    ret true
}

// Reports byte slice has suffix as specified sub-slice or not.
pub fn HasSuffix(s: []byte, sub: []byte): bool {
    ret hasSuffix(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn FindAt(s: []byte, sub: []byte, mut i: int): int {
    if i < 0 || s.len < sub.len || sub.len == 0 {
        ret -1
    }
    for i < s.len; i++ {
        if hasPrefix(s, sub, i) {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn Find(s: []byte, sub: []byte): int {
    ret FindAt(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn FindLastAt(s: []byte, sub: []byte, i: int): int {
    let mut j = i - sub.len + 1
    if sub.len == 0 || i < 0 || i >= s.len || j < 0 {
        ret -1
    }
loop:
    for j >= 0; j-- {
        let mut k = j
        let mut z = 0
        for z < sub.len; k, z = k + 1, z + 1 {
            if s[k] != sub[z] {
                continue loop
            }
        }
        ret j
    }
    ret -1
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn FindLast(s: []byte, sub: []byte): int {
    ret FindLastAt(s, sub, s.len - 1)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn FindByte(s: []byte, b: byte): int {
    for i, se in s {
        if se == b {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn FindLastByte(s: []byte, b: byte): int {
    let mut i = s.len - 1
    for i >= 0; i-- {
        if s[i] == b {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn FindRune(s: []byte, r: rune): int {
    let mut i = 0
    for i < s.len {
        let (br, n) = utf8::DecodeRune(s[i:])
        if r == br {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn FindLastRune(s: []byte, r: rune): int {
    let mut i = s.len
    for i > 0 {
        let (br, n) = utf8::DecodeLastRune(s[:i])
        if r == br {
            ret i - 1
        }
        i -= n
    }
    ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of slice to right. Starts searching s at given index.
// Returns -1, if i < 0.
pub fn FindFnAt(s: []byte, mut i: int, f: fn(mut rune): bool): int {
    if i < 0 {
        ret -1
    }
    for i < s.len {
        let (r, n) = utf8::DecodeRune(s[i:])
        if f(r) {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn FindFn(s: []byte, f: fn(mut rune): bool): int {
    ret FindFnAt(s, 0, f)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of slice to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn FindFnLastAt(s: []byte, mut i: int, f: fn(mut rune): bool): int {
    if i < 0 || i >= s.len {
        ret -1
    }
    for i > 0 {
        let (r, n) = utf8::DecodeRune(s[i:])
        if f(r) {
            ret i
        }
        i -= n
    }
    ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn FindFnLast(s: []byte, f: fn(mut rune): bool): int {
    ret FindFnLastAt(s, s.len - 1, f)
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn FindAny(s: []byte, runes: []byte): int {
    let mut i = 0
    for i < s.len {
        let (r, n) = utf8::DecodeRune(s[i:])
        if FindRune(runes, r) != -1 {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn FindLastAny(s: []byte, runes: []byte): int {
    let mut i = s.len
    for i > 0 {
        let (r, n) = utf8::DecodeLastRune(s[:i])
        if FindRune(runes, r) != -1 {
            ret i - 1
        }
        i -= n
    }
    ret -1
}

// Splits the slice into the specified number of parts to the specified sub-slice.
// Appends parts as immutable slice.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
pub fn Split(mut s: []byte, sub: []byte, mut n: int): [][]byte {
    let mut cap = n
    if n < 0 {
        cap = 1 << 3
    }
    let mut parts = make([][]byte, 0, cap)
    if n == 0 {
        ret parts
    }
    if n < 0 {
        n = s.len
    }
    let mut i = 0
    for n > 0; n-- {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        parts = append(parts, s[i:j])
        i = j + sub.len
    }
    if n > 0 && i < s.len {
        parts = append(parts, s[i:])
    }
    ret parts
}

// Reports whether slice includes sub-slice.
pub fn Contains(s: []byte, sub: []byte): bool {
    ret FindAt(s, sub, 0) != -1
}

// Reports whether slice includes byte.
pub fn ContainsByte(s: []byte, b: byte): bool {
    ret FindByte(s, b) != -1
}

// Reports whether slice includes rune.
pub fn ContainsRune(s: []byte, r: rune): bool {
    ret FindRune(s, r) != -1
}

// Reports whether slice includes any of runes.
pub fn ContainsAny(s: []byte, runes: []byte): bool {
    ret FindAny(s, runes) != -1
}

// Counts the number of non-overlapping instances of sub-slice in s.
// Returns zero if sub-slice is empty.
pub fn Count(s: []byte, sub: []byte): int {
    if sub.len == 0 {
        ret 0
    }
    let mut n = 0
    let mut i = 0
    for {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        n++
        i = j + sub.len
    }
    ret n
}

// Replaces all sub-slices matching sub in the slice with new.
// Returns same slice if n is equals to zero.
// Replaces all matches if n less than zero.
// This function may return mutable copy of s, of new slice allocation.
pub fn Replace(mut s: []byte, sub: []byte, new: []byte, mut n: int): []byte {
    if n == 0 || sub == new {
        ret s
    }

    let m = Count(s, sub)
    if m == 0 {
        ret s
    }
    if n < 0 || m < n {
        n = m
    }

    let mut ss = make([]byte, 0, s.len + n * (new.len - sub.len))
    let mut i = 0
    for n > 0; n-- {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        ss = append(ss, s[i:j]...)
        ss = append(ss, new...)
        i = j + sub.len
    }
    ss = append(ss, s[i:]...)
    ret ss
}

// Returns a immutable copy of the slice s with all its characters modified
// according to the mapping function. If mapping returns a negative value,
// the character is dropped from the slice with no replacement.
pub fn Map(s: []byte, mapping: fn(mut rune): rune): []byte {
    let mut ss = make([]byte, 0, s.len)
    let mut i = 0
    for i < s.len {
        let (mut r, n) = utf8::DecodeRune(s[i:])
        i += n
        r = mapping(r)
        if r >= 0 {
            ss = utf8::AppendRune(ss, r)
        }
    }
    ret ss
}

// Returns s with all Unicode letters mapped to their lower case.
// Returns immutable new slice allocation.
pub fn ToLower(s: []byte): []byte {
    ret Map(s, unicode::ToLower)
}

// Returns s with all Unicode letters mapped to their upper case.
// Returns immutable new slice allocation.
pub fn ToUpper(s: []byte): []byte {
    ret Map(s, unicode::ToUpper)
}

// Trims slice by specified runes at left.
// Cutset should include runes to trim.
// Returns mutable copy of s.
pub fn TrimLeft(mut s: []byte, cutset: []byte): []byte {
    let mut i = 0
    for i < s.len {
        let (r, n) = utf8::DecodeRune(s[i:])
        if FindRune(cutset, r) == -1 {
            s = s[i:]
            break
        }
        i += n
    }
    ret s
}

// Trims slice by specified runes at right.
// Cutset should include runes to trim.
// Returns mutable copy of s.
pub fn TrimRight(mut s: []byte, cutset: []byte): []byte {
    let mut i = s.len
    for i > 0 {
        let (r, n) = utf8::DecodeLastRune(s[:i])
        if FindRune(cutset, r) == -1 {
            s = s[:i]
            break
        }
        i -= n
    }
    ret s
}

// Trims slice by specified runes at left and right.
// Cutset should include runes to trim.
// Returns mutable copy of s.
pub fn Trim(mut s: []byte, cutset: []byte): []byte {
    ret TrimRight(TrimLeft(s, cutset), cutset)
}

// Concatenates the parts of its first argument to create a single slice.
// The separator sep is placed between parts in the resulting slice.
pub fn Join(parts: [][]byte, sep: []byte): []byte {
    if parts.len == 0 {
        ret make([]byte, 0)
    }
    let mut s = make([]byte, parts[0].len)
    copy(s, parts[0])
    for _, part in parts[1:] {
        s = append(s, sep...)
        s = append(s, part...)
    }
    ret s
}

// Returns runes from UTF-8 encoded bytes.
pub fn Runes(s: []byte): []rune {
    let mut runes = make([]rune, 0, utf8::RuneCount(s))
    let mut i = 0
    for i < s.len {
        let (r, n) = utf8::DecodeRune(s[i:])
        i += n
        runes = append(runes, r)
    }
    ret runes
}