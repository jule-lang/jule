// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package bytes implements functions for the manipulation of byte slices.
// It is analogous to the facilities of the strings package.
// But optimized for byte slices, may provide more efficient functions.
// If you have byte slice form of strings, this package is the best option for most cases.

use "std/internal/fastbytes"
use "std/unicode"
use "std/unicode/utf8"

// Returns bytes that equals to concatenation of n-count s.
// Returns nil slice is n <= 0.
fn Repeat(s: []byte, mut n: int): []byte {
	if n <= 0 {
		ret nil
	}
	if len(s) > int.Max/n {
		panic("bytes: repeat: integer buffer size overflow")
	}

	mut buff := make([]byte, len(s)*n)
	mut i := 0
	for n > 0; n-- {
		i += copy(buff[i:], s)
	}
	ret buff
}

fn hasPrefix(&s: []byte, &sub: []byte, mut start: int): bool {
	if len(sub) == 0 || len(s)-start < len(sub) {
		ret false
	}
	for _, sb in sub {
		if s[start] != sb {
			ret false
		}
		start++
	}
	ret true
}

// Reports byte slice has prefix as specified sub-slice or not.
fn HasPrefix(s: []byte, sub: []byte): bool {
	ret hasPrefix(s, sub, 0)
}

fn hasSuffix(&s: []byte, &sub: []byte, mut start: int): bool {
	if len(sub) == 0 || len(s)-start < len(sub) {
		ret false
	}

	start = len(s) - start
	for i in sub {
		if s[start-i-1] != sub[len(sub)-i-1] {
			ret false
		}
	}
	ret true
}

// Reports byte slice has suffix as specified sub-slice or not.
fn HasSuffix(s: []byte, sub: []byte): bool {
	ret hasSuffix(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindAt(s: []byte, sub: []byte, mut i: int): int {
	if i < 0 || len(s) < len(sub) || len(sub) == 0 {
		ret -1
	}
	for i < len(s); i++ {
		if hasPrefix(s, sub, i) {
			ret i
		}
	}
	ret -1
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn Find(s: []byte, sub: []byte): int {
	ret FindAt(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindLastAt(s: []byte, sub: []byte, i: int): int {
	mut j := i - len(sub) + 1
	if len(sub) == 0 || i < 0 || i >= len(s) || j < 0 {
		ret -1
	}
loop:
	for j >= 0; j-- {
		mut k := j
		mut z := 0
		for z < len(sub); k, z = k + 1, z + 1 {
			if s[k] != sub[z] {
				continue loop
			}
		}
		ret j
	}
	ret -1
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLast(s: []byte, sub: []byte): int {
	ret FindLastAt(s, sub, len(s)-1)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn FindByte(s: []byte, b: byte): int {
	ret fastbytes::FindByte(s, b)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLastByte(s: []byte, b: byte): int {
	ret fastbytes::FindLastByte(s, b)
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn FindRune(s: []byte, r: rune): int {
	mut i := 0
	for i < len(s) {
		br, n := utf8::DecodeRune(s[i:])
		if r == br {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLastRune(s: []byte, r: rune): int {
	mut i := len(s)
	for i > 0 {
		br, n := utf8::DecodeLastRune(s[:i])
		if r == br {
			ret i - 1
		}
		i -= n
	}
	ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of slice to right. Starts searching s at given index.
// Returns -1, if i < 0.
fn FindFnAt(s: []byte, mut i: int, f: fn(mut rune): bool): int {
	if i < 0 {
		ret -1
	}
	for i < len(s) {
		r, n := utf8::DecodeRune(s[i:])
		if f(r) {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn FindFn(s: []byte, f: fn(mut rune): bool): int {
	ret FindFnAt(s, 0, f)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of slice to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindFnLastAt(s: []byte, mut i: int, f: fn(mut rune): bool): int {
	if i < 0 || i >= len(s) {
		ret -1
	}
	for i > 0 {
		r, n := utf8::DecodeRune(s[i:])
		if f(r) {
			ret i
		}
		i -= n
	}
	ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindFnLast(s: []byte, f: fn(mut rune): bool): int {
	ret FindFnLastAt(s, len(s)-1, f)
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn FindAny(s: []byte, runes: []byte): int {
	mut i := 0
	for i < len(s) {
		r, n := utf8::DecodeRune(s[i:])
		if FindRune(runes, r) != -1 {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLastAny(s: []byte, runes: []byte): int {
	mut i := len(s)
	for i > 0 {
		r, n := utf8::DecodeLastRune(s[:i])
		if FindRune(runes, r) != -1 {
			ret i - 1
		}
		i -= n
	}
	ret -1
}

// Splits the slice into the specified number of parts to the specified sub-slice.
// Appends parts as immutable slice.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
fn Split(mut s: []byte, sub: []byte, mut n: int): [][]byte {
	mut cap := n
	if n < 0 {
		cap = 1 << 3
	}
	mut parts := make([][]byte, 0, cap)
	if n == 0 {
		ret parts
	}
	if n < 0 {
		n = len(s)
	}
	mut i := 0
	for n > 0; n-- {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		parts = append(parts, s[i:j])
		i = j + len(sub)
	}
	if n > 0 && i < len(s) {
		parts = append(parts, s[i:])
	}
	ret parts
}

// Same as the Split function. But splits all parts.
// Basically equals to Split(s, sub, -1) call.
fn SplitAll(mut s: []byte, sub: []byte): [][]byte {
	ret Split(s, sub, -1)
}

// Reports whether slice includes sub-slice.
fn Contains(s: []byte, sub: []byte): bool {
	ret FindAt(s, sub, 0) != -1
}

// Reports whether slice includes byte.
fn ContainsByte(s: []byte, b: byte): bool {
	ret FindByte(s, b) != -1
}

// Reports whether slice includes rune.
fn ContainsRune(s: []byte, r: rune): bool {
	ret FindRune(s, r) != -1
}

// Reports whether slice includes any of runes.
fn ContainsAny(s: []byte, runes: []byte): bool {
	ret FindAny(s, runes) != -1
}

// Counts the number of non-overlapping instances of sub-slice in s.
// Returns zero if sub-slice is empty.
fn Count(s: []byte, sub: []byte): int {
	if len(sub) == 0 {
		ret 0
	}
	mut n := 0
	mut i := 0
	for {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		n++
		i = j + len(sub)
	}
	ret n
}

// Reports whether two byte slices are the same length and contains same bytes.
// The nil slice considered as zero-length empty slice.
fn Equal(s1: []byte, s2: []byte): bool {
	ret fastbytes::Equal(s1, s2)
}

// Replaces all sub-slices matching sub in the slice with new.
// Returns same slice if n is equals to zero.
// Replaces all matches if n less than zero.
// This function may return mutable copy of s, of new slice allocation.
fn Replace(mut s: []byte, sub: []byte, new: []byte, mut n: int): []byte {
	if n == 0 || Equal(sub, new) {
		ret s
	}

	m := Count(s, sub)
	if m == 0 {
		ret s
	}
	if n < 0 || m < n {
		n = m
	}

	mut ss := make([]byte, 0, len(s)+n*(len(new)-len(sub)))
	mut i := 0
	for n > 0; n-- {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		ss = append(ss, s[i:j]...)
		ss = append(ss, new...)
		i = j + len(sub)
	}
	ss = append(ss, s[i:]...)
	ret ss
}

// Same as the Replace function. But replaces all matched subs.
// Basically equals to Replace(s, sub, new, -1) call.
fn ReplaceAll(mut s: []byte, sub: []byte, new: []byte): []byte {
	ret Replace(s, sub, new, -1)
}

// Returns a immutable copy of the slice s with all its characters modified
// according to the mapping function. If mapping returns a negative value,
// the character is dropped from the slice with no replacement.
fn Map(s: []byte, mapping: fn(mut rune): rune): []byte {
	mut ss := make([]byte, 0, len(s))
	mut i := 0
	for i < len(s) {
		mut r, n := utf8::DecodeRune(s[i:])
		i += n
		r = mapping(r)
		if r >= 0 {
			ss = utf8::AppendRune(ss, r)
		}
	}
	ret ss
}

// Returns s with all Unicode letters mapped to their lower case.
// Returns immutable new slice allocation.
fn ToLower(s: []byte): []byte {
	ret Map(s, unicode::ToLower)
}

// Returns s with all Unicode letters mapped to their upper case.
// Returns immutable new slice allocation.
fn ToUpper(s: []byte): []byte {
	ret Map(s, unicode::ToUpper)
}

// Trims slice by specified runes at left.
// Cutset should include runes to trim.
// Returns mutable copy of s.
fn TrimLeft(mut s: []byte, cutset: []byte): []byte {
	mut i := 0
	for i < len(s) {
		r, n := utf8::DecodeRune(s[i:])
		if FindRune(cutset, r) == -1 {
			s = s[i:]
			break
		}
		i += n
	}
	ret s
}

// Trims slice by specified runes at right.
// Cutset should include runes to trim.
// Returns mutable copy of s.
fn TrimRight(mut s: []byte, cutset: []byte): []byte {
	mut i := len(s)
	for i > 0 {
		r, n := utf8::DecodeLastRune(s[:i])
		if FindRune(cutset, r) == -1 {
			s = s[:i]
			break
		}
		i -= n
	}
	ret s
}

// Trims slice by specified runes at left and right.
// Cutset should include runes to trim.
// Returns mutable copy of s.
fn Trim(mut s: []byte, cutset: []byte): []byte {
	ret TrimRight(TrimLeft(s, cutset), cutset)
}

// Concatenates the parts of its first argument to create a single slice.
// The separator sep is placed between parts in the resulting slice.
fn Join(parts: [][]byte, sep: []byte): []byte {
	if len(parts) == 0 {
		ret make([]byte, 0)
	}
	mut s := make([]byte, len(parts[0]))
	copy(s, parts[0])
	for _, part in parts[1:] {
		s = append(s, sep...)
		s = append(s, part...)
	}
	ret s
}

// Returns runes from UTF-8 encoded bytes.
fn Runes(s: []byte): []rune {
	mut runes := make([]rune, 0, utf8::RuneCount(s))
	mut i := 0
	for i < len(s) {
		r, n := utf8::DecodeRune(s[i:])
		i += n
		runes = append(runes, r)
	}
	ret runes
}

// Cut slices s around the first instance of sep,
// returning the text before and after sep.
// The found result reports whether sep appears in s.
// If sep does not appear in s, cut returns s, nil, false.
//
// Cut returns slices of the original slice s, not copies.
fn Cut(mut s: []byte, sep: []byte): (before: []byte, after: []byte, found: bool) {
	i := Find(s, sep)
	if i >= 0 {
		ret s[:i], s[i+len(sep):], true
	}
	ret s, nil, false
}