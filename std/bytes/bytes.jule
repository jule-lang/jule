// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package std::bytes implements functions for the manipulation of byte slices.
// It is analogous to the facilities of the std::strings package.
// But optimized for byte slices, may provide more efficient functions.
// If you have byte slice form of strings, this package is the best option for most cases.

use utf8 for std::unicode::utf8

// Negative situation index such as not found, not exist, or etc.
const N_INDEX = -1

// Returns bytes that equals to concatenation of n-count s.
// Returns nil slice is n <= 0.
pub fn repeat(s: []byte, mut n: int): []byte {
    if n <= 0 {
        ret nil
    }
    if s.len > int.MAX/n {
        panic("std::bytes: repeat: integer buffer size overflow")
    }

    let mut buff = make([]byte, s.len * n)
    let mut i = 0
    for n > 0; n-- {
        i += copy(buff[i:], s)
    }
    ret buff
}

fn _has_prefix(&s: []byte, &sub: []byte, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }
    for _, sb in sub {
        if s[start] != sb {
            ret false
        }
        start++
    }
    ret true
}

// Reports byte slice has prefix as specified sub-slice or not.
pub fn has_prefix(s: []byte, sub: []byte): bool {
    ret _has_prefix(s, sub, 0)
}

fn _has_suffix(&s: []byte, &sub: []byte, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    start = s.len - start
    for i in sub {
        if s[start-i-1] != sub[sub.len-i-1] {
            ret false
        }
    }
    ret true
}

// Reports byte slice has suffix as specified sub-slice or not.
pub fn has_suffix(s: []byte, sub: []byte): bool {
    ret _has_suffix(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn find_at(s: []byte, sub: []byte, mut i: int): int {
    if i < 0 || s.len < sub.len || sub.len == 0 {
        ret N_INDEX
    }
    for i < s.len; i++ {
        if _has_prefix(s, sub, i) {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn find(s: []byte, sub: []byte): int {
    ret find_at(s, sub, 0)
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn find_last_at(s: []byte, sub: []byte, i: int): int {
    let mut j = i - sub.len + 1
    if sub.len == 0 || i < 0 || i >= s.len || j < 0 {
        ret N_INDEX
    }
loop:
    for j >= 0; j-- {
        let mut k = j
        let mut z = 0
        for z < sub.len; k, z = k+1, z+1 {
            if s[k] != sub[z] {
                continue loop
            }
        }
        ret j
    }
    ret N_INDEX
}

// Returns index of first matched item with specified sub-slice,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn find_last(s: []byte, sub: []byte): int {
    ret find_last_at(s, sub, s.len-1)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn find_byte(s: []byte, b: byte): int {
    for i, se in s {
        if se == b {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn find_last_byte(s: []byte, b: byte): int {
    let mut i = s.len - 1
    for i >= 0; i-- {
        if s[i] == b {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
pub fn find_rune(s: []byte, r: rune): int {
    let mut i = 0
    for i < s.len {
        let (br, n) = utf8::decode_rune(s[i:])
        if r == br {
            ret i
        }
        i += n
    }
    ret N_INDEX
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
pub fn find_last_rune(s: []byte, r: rune): int {
    let mut i = s.len
    for i > 0 {
        let (br, n) = utf8::decode_last_rune(s[:i])
        if r == br {
            ret i - 1
        }
        i -= n
    }
    ret N_INDEX
}

// Splits the slice into the specified number of parts to the specified sub-slice.
// Appends parts as immutable slice.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
pub fn split(mut s: []byte, sub: []byte, mut n: int): [][]byte {
    let mut parts = make([][]byte, 0, if n < 0 { 10 } else { n })
    if n == 0 {
        ret parts
    }
    if n < 0 {
        n = s.len
    }
    let mut i = 0
    for n > 0; n-- {
        let j = find_at(s, sub, i)
        if j == N_INDEX {
            break
        }
        parts = append(parts, s[i:j])
        i = j + sub.len
    }
    if n > 0 && i < s.len {
        parts = append(parts, s[i:])
    }
    ret parts
}

// Reports whether slice includes sub-slice.
pub fn contains(s: []byte, sub: []byte): bool {
    ret find_at(s, sub, 0) != N_INDEX
}

// Reports whether slice includes byte.
pub fn contains_byte(s: []byte, b: byte): bool {
    ret find_byte(s, b) != N_INDEX
}

// Reports whether slice includes rune.
pub fn contains_rune(s: []byte, r: rune): bool {
    ret find_rune(s, r) != N_INDEX
}
