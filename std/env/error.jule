// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{
    get_last_errno,
    EACCES,
    EIO,
    ELOOP,
    ENAMETOOLONG,
    ENOENT,
    ENOTDIR,
    ENOMEM,
}

// Env error codes.
pub enum EnvError {
    Denied,             // Search permission is denied for a component of the path prefix
    IO,                 // Input/Output error, an error occurred while reading from the file system
    Loop,               // A loop exists in symbolic links encountered during resolution of the path argument
    LongPath,           // The length of the path argument exceeds maxium path length or a pathname component is longer than maximum name length
    NotExist,           // A component of path does not name an existing file or path is an empty string
    NotDir,             // A component of the path prefix is not a directory
    InsufficientMemory, // Insufficient memory to complete the operation
    Device,             // Device did not respond
}

// Returns last os error by errno.
fn get_last_os_error(): EnvError {
    let err = get_last_errno()
    match err {
    | EACCES:       ret EnvError.Denied
    | EIO:          ret EnvError.IO
    | ELOOP:        ret EnvError.Loop
    | ENAMETOOLONG: ret EnvError.LongPath
    | ENOENT:       ret EnvError.NotExist
    | ENOTDIR:      ret EnvError.NotDir
    | ENOMEM:       ret EnvError.InsufficientMemory
    |:              ret EnvError.IO
    }
}
