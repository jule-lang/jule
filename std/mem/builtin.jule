// Copyright 2022-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns the size of the type in bytes.
// If given expression, uses type of expression.
// Void and function types are not supported.
// The expression is evaluated to determine type in compile-time and
// will not executed at runtime.
// fn SizeOf(TYPE || EXPRESSION): uint

// Returns the alignment, in bytes, required for any instance of the type
// indicated by type-id, which is either complete object type.
// If given expression, uses type of expression.
// Void and function types are not supported.
// The expression is evaluated to determine type in compile-time and
// will not executed at runtime.
// fn AlignOf(TYPE || EXPRESSION): uint

// Frees memory.
// If reference counting is enabled, just countdowns reference and sets to nil.
// If reference counting is disabled, frees memory allocation immediately.
// This is might be unsafe, because your another shared pointers will have
// invalid memory address after freed.
//
// If you call Free function for string, be sure about this string is heap-allocated.
// Otherwise, this is undefined behavior and probably it will cause segfault.
//
// You can use this function for only rc-performed types.
// fn Free(h: T)