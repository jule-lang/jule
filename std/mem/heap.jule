// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integrated for std::jule::integrated

// Wrapper for heap allocation.
// Should be freed, occurs memory leak if did not.
pub struct Heap[T] {
    _addr: uintptr
}

impl Heap {
    // Allocates new T on heap, and returns &Heap[T] instance
    // that points relevant allocation.
    // Returns nil reference if allocation failed.
    pub static fn new(): &Heap[T] {
        let addr = integrated::new_u[T]()
        if addr == 0 {
            ret nil
        }
        ret &Heap[T]{
            _addr: addr,
        }
    }
}

impl Heap {
    // Returns address of allocation.
    // Returns 0 if internal pointer is nil.
    pub fn addr(self): uintptr { ret self._addr }

    // Frees allocation and sets address as 0 (aka nil).
    pub fn free(mut self) {
        unsafe { integrated::delete_u[T](self._addr) }
        self._addr = 0
    }

    // Dereferences and returns value of internal pointer.
    // Panics if internal pointer is nil.
    pub fn get(mut self): T {
        if self._addr == 0 {
            panic("std::mem: Heap.get: nil pointer dereference")
        }
        ret unsafe { integrated::deref[T](self._addr) }
    }

    // Sets value of internal pointer.
    // Panics if internal pointer is nil.
    pub fn set(mut self, mut val: T) {
        if self._addr == 0 {
            panic("std::mem: Heap.set: nil pointer dereference")
        }
        unsafe { integrated::assign[T](self._addr, val) }
    }
}
