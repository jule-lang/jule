// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated

// Wrapper for heap allocation.
// Should be freed, occurs memory leak if did not.
struct Heap[T] {
	heap: *T
}

impl Heap {
	// Allocates new T on heap, and returns &Heap[T] instance
	// that points relevant allocation.
	// Returns nil reference if allocation failed.
	static fn New(): &Heap[T] {
		mut heap := integ::New[T]()
		if heap == nil {
			ret nil
		}
		ret &Heap[T]{
			heap: heap,
		}
	}
}

impl Heap {
	// Returns address of allocation.
	// Returns 0 if internal pointer is nil.
	fn Addr(self): uintptr { ret uintptr(self.heap) }

	// Frees allocation and sets address as 0 (aka nil).
	fn Free(mut self) {
		unsafe { integ::Delete[T](self.heap) }
		self.heap = nil
	}

	// Dereferences and returns value of internal pointer.
	// Panics if internal pointer is nil.
	fn Get(mut self): T {
		if self.heap == nil {
			panic("std::mem: Heap.get: nil pointer dereference")
		}
		ret unsafe { *self.heap }
	}

	// Sets value of internal pointer.
	// Panics if internal pointer is nil.
	fn Set(mut self, mut val: T) {
		if self.heap == nil {
			panic("std::mem: Heap.set: nil pointer dereference")
		}
		unsafe { *self.heap = val }
	}
}