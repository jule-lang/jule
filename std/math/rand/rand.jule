// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Integer type of random seeds.
pub type Seed: uint

// This structure implements a type of pseudo random number generator (PRNG).
// The seed must be given manually for each instance.
//
// Seeds:
//  Seed is a number of seeds used to simulate randomness.
//  The order and numbers produced vary depending on the seed.
//  Since PRNGs are inherently deterministic, using a fixed seed
//  means your program will generate the same numbers every time.
//
// If you want to achieve randomness somehow, use a variable seed.
// A simple solution for seeds that will create the illusion of randomness
// is to use time. Unix-time seconds could be a simple seed solution.
//
// Ranges:
//  This structure by default provides a function to simulate
// randomness between two numbers. But a way to do this can be suggested.
//  Here is basic range formula:
//    Æ’(x) -> rand.nextn(max - min) + min
//
//  With this formula, randomness can be made in the [min, max) range.
pub struct Rand {
    seed: Seed
}

impl Rand {
    const SeedMask = 1 << 63 - 1

    // Returns new PRNG for seed.
    pub static fn new(seed: Seed): &Rand {
        let mut rand = &Rand{}
        rand.set_seed(seed)
        ret rand
    }
}

impl Rand {
    // Sets seed.
    fn set_seed(mut self, seed: Seed) {
        self.seed = seed & Rand.SeedMask
        self.seed += self.seed * (seed >> (1 << 3))
    }

    // Processes, sets, and returns new seed.
    fn snext(mut self): Seed {
        const NEXT_MASK = 0x41C64E6D
        self.set_seed((self.seed * NEXT_MASK + 0x3039) & Rand.SeedMask)
        ret self.seed
    }

    // Returns a non-genative pseudo-random
    // 63-bit signed integer as an 64-bit signed integer.
    pub fn next63(mut self): i64 {
        const RNG_MAX = 1 << 63
        const RNG_MASK = RNG_MAX - 1
        ret i64(self.snext() & RNG_MASK)
    }

    // Returns a non-genative pseudo-random
    // 31-bit signed integer as an 31-bit signed integer.
    pub fn next31(mut self): i32 {
        ret i32(self.next63() >> 32)
    }

    // Returns a non-genative pseudo-random in [0, n) range
    // 63-bit signed integer as an 64-bit signed integer.
    // If n <= 0, it panics.
    pub fn nextn63(mut self, n: i64): i64 {
        if n <= 0 {
            panic("Rand.nextn63: invalid argument")
        }
        if n&(n - 1) == 0 {
            ret self.next63() & (n - 1)
        }
        let max = i64(1 << 63 - 1 - (1 << 63) % u64(n))
        let mut v = self.next63()
        for v > max {
            v = self.next63()
        }
        ret v % n
    }

    // Returns a non-genative pseudo-random in [0, n) range
    // 31-bit signed integer as an 31-bit signed integer.
    // If n <= 0, it panics.
    pub fn nextn31(mut self, n: i32): i32 {
        if n <= 0 {
            panic("Rand.nextn31: invalid argument")
        }
        if n&(n - 1) == 0 {
            ret self.next31() & (n - 1)
        }
        let max = i32(1 << 31 - 1 - (1 << 31) % u32(n))
        let mut v = self.next31()
        for v > max {
            v = self.next31()
        }
        ret v % n
    }

    // Returns a non-genative pseudo-random in [0.0, 1.0) range
    // as f64 floating-point.
    pub fn fnext64(mut self): f64 {
    sample:
        let f = f64(self.next63()) / (1 << 63)
        if f == 1 {
            goto sample
        }
        ret f
    }

    // Returns a non-genative pseudo-random in [0.0, 1.0) range
    // as f32 floating-point.
    pub fn fnext32(mut self): f32 {
    sample:
        let f = f32(self.fnext64())
        if f == 1 {
            goto sample
        }
        ret f
    }
}