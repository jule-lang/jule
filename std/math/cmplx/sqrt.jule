// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use math for std::math

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/sqrt.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

// Complex square root
//
// DESCRIPTION:
//
// If z = x + iy,  r = |z|, then
//
//                       1/2
// Re w  =  [ (r + x)/2 ]   ,
//
//                       1/2
// Im w  =  [ (r - x)/2 ]   .
//
// Cancellation error in r-x or r+x is avoided by using the
// identity  2 Re w Im w  =  y.
//
// Note that -w is also a square root of z. The root chosen
// is always in the right half plane and Im w has the same sign as y.
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10     25000       3.2e-17     9.6e-18
//    IEEE      -10,+10   1,000,000     2.9e-16     6.1e-17

impl Cmplx {
    // Returns the square root of complex number.
    // The result r is chosen so that r.real() â‰¥ 0 and r.imag() has the same sign as self.imag().
    pub fn sqrt(self): Cmplx {
        if self.imag() == 0 {
            // Ensure that imag(r) has the same sign as imag(x) for imag(x) == signed zero.
            if self.real() == 0 {
                ret Cmplx.new(0, self.imag())
            }
            if self.real() < 0 {
                ret Cmplx.new(0, math::copysign(math::sqrt(-self.real()), self.imag()))
            }
            ret Cmplx.new(math::sqrt(self.real()), self.imag())
        } else if math::is_inf(self.imag(), 0) {
            ret Cmplx.new(math::inf(1.0), self.imag())
        }
        if self.real() == 0 {
            if self.imag() < 0 {
                let r = math::sqrt(-0.5 * self.imag())
                ret Cmplx.new(r, -r)
            }
            let r = math::sqrt(0.5 * self.imag())
            ret Cmplx.new(r, r)
        }
        let mut a = self.real()
        let mut b = self.imag()
        let mut scale: f64
        // Rescale to avoid internal overflow or underflow.
        if math::abs(a) > 4 || math::abs(b) > 4 {
            a *= 0.25
            b *= 0.25
            scale = 2
        } else {
            a *= 1.8014398509481984e16 // 2**54
            b *= 1.8014398509481984e16
            scale = 7.450580596923828125e-9 // 2**-27
        }
        let mut r = math::hypot(a, b)
        let mut t: f64
        if a > 0 {
            t = math::sqrt(0.5 * r + 0.5 * a)
            r = scale * math::abs((0.5 * b) / t)
            t *= scale
        } else {
            r = math::sqrt(0.5 * r - 0.5 * a)
            t = scale * math::abs((0.5 * b) / r)
            r *= scale
        }
        if b < 0 {
            ret Cmplx.new(t, -r)
        }
        ret Cmplx.new(t, r)
    }
}