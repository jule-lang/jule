// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// Complex number.
struct Cmplx {
	real: f64
	imag: f64
}

impl Cmplx {
	// Returns new complex number.
	static fn New(real: f64, imag: f64): Cmplx {
		ret Cmplx{
			real: real,
			imag: imag,
		}
	}

	// Returns NaN complex number.
	static fn NaN(): Cmplx {
		ret Cmplx{
			real: math::NaN(),
			imag: math::NaN(),
		}
	}

	// Returns Inf complex number.
	// Uses positive infinity if sign >= 0, negative infinity if !sign < 0.
	static fn Inf(sign: int): Cmplx {
		ret Cmplx{
			real: math::Inf(sign),
			imag: math::Inf(sign),
		}
	}

	// Returns zero complex number.
	static fn Zero(): Cmplx {
		ret Cmplx.New(0, 0)
	}

	// Returns real part of complex number.
	fn Real(self): f64 {
		ret self.real
	}

	// Returns imaginary part of complex number.
	fn Imag(self): f64 {
		ret self.imag
	}

	// Returns conjugate of complex number.
	fn Conj(self): Cmplx {
		ret Cmplx.New(self.Real(), -self.Imag())
	}

	// Returns addition of complex numbers.
	fn Add(self, c: Cmplx): Cmplx {
		mut r := self
		r.add(c)
		ret r
	}

	// Adds complex numbers and sets result to self.
	fn add(mut self, c: Cmplx) {
		self.real += c.Real()
		self.imag += c.Imag()
	}

	// Returns subtraction of complex numbers.
	fn Sub(self, c: Cmplx): Cmplx {
		mut r := self
		r.sub(c)
		ret r
	}

	// Subtracts complex numbers and sets result to self.
	fn sub(mut self, c: Cmplx) {
		self.real -= c.Real()
		self.imag -= c.Imag()
	}

	// Returns multiplication of complex numbers.
	fn Mul(self, c: Cmplx): Cmplx {
		mut r := self
		r.mul(c)
		ret r
	}

	// Multiplies complex numbers and sets result to self.
	fn mul(mut self, c: Cmplx) {
		real := self.Real()*c.Real() + self.Imag()*c.Imag()*-1
		imag := self.Real()*c.Imag() + self.Imag()*c.Real()
		self.real = real
		self.imag = imag
	}

	// Returns division of complex numbers.
	// Returns NaN complex number if denominator is zero.
	fn Div(self, c: Cmplx): Cmplx {
		mut r := self
		r.div(c)
		ret r
	}

	// Divides complex numbers and sets result to self.
	// Result will be NaN if denominator is zero.
	fn div(mut self, c: Cmplx) {
		denominator := c.Real()*c.Real() + c.Imag()*c.Imag()
		if denominator == 0 {
			self.imag = math::NaN()
			self.real = math::NaN()
			ret
		}
		numerator := self.Real()*c.Real() + self.Imag()*c.Imag()
		self.imag = (self.Imag()*c.Real() - self.Real()*c.Imag()) / denominator
		self.real = numerator / denominator
	}

	// Unary minus operator.
	fn Neg(self): Cmplx {
		ret Cmplx.New(-self.Real(), -self.Imag())
	}

	// Reports whether either real or imag is an infinity.
	fn IsInf(self): bool {
		ret math::IsInf(self.Real(), 0) || math::IsInf(self.Imag(), 0)
	}

	// Reports whether either real or imag is NaN and neither is an infinity.
	fn IsNaN(self): bool {
		match {
		| math::IsInf(self.Real(), 0) | math::IsInf(self.Imag(), 0):
			ret false
		| math::IsNaN(self.Real()) | math::IsNaN(self.Imag()):
			ret true
		|:
			ret false
		}
	}

	// Reports whether real and imag is zero.
	fn IsZero(self): bool {
		ret self.Real() == 0 && self.Imag() == 0
	}
}