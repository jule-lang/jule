// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use math for std::math

// Complex number.
#derive Clone
pub struct Cmplx {
    _real: f64
    _imag: f64
}

impl Cmplx {
    // Returns new complex number.
    pub static fn new(real: f64, imag: f64,): Cmplx {
        ret Cmplx{
            _real: real,
            _imag: imag,
        }
    }

    // Returns NaN complex number.
    pub static fn nan(): Cmplx {
        ret Cmplx{
            _real: math::nan(),
            _imag: math::nan(),
        }
    }

    // Returns Inf complex number.
    // Uses positive infinity if sign >= 0, negative infinity if !sign < 0.
    pub static fn inf(sign: int): Cmplx {
        ret Cmplx{
            _real: math::inf(sign),
            _imag: math::inf(sign),
        }
    }

    // Returns zero complex number.
    pub static fn zero(): Cmplx {
        ret Cmplx.new(0, 0)
    }

    // Returns real part of complex number.
    pub fn real(self): f64 {
        ret self._real
    }

    // Returns imaginary part of complex number.
    pub fn imag(self): f64 {
        ret self._imag
    }

    // Returns conjugate of complex number.
    pub fn conj(self): Cmplx {
        ret Cmplx.new(self.real(), -self.imag())
    }

    // Returns addition of complex numbers.
    pub fn add(self, c: Cmplx): Cmplx {
        ret Cmplx.new(self.real() + c.real(), self.imag() + c.imag())
    }

    // Add to complex number.
    pub fn add_assign(mut self, c: Cmplx) {
        self._real += c.real()
        self._imag += c.imag()
    }

    // Returns subtraction of complex numbers.
    pub fn sub(self, c: Cmplx): Cmplx {
        ret Cmplx.new(self.real() - c.real(), self.imag() - c.imag())
    }

    // Subtract from complex number.
    pub fn sub_assign(mut self, c: Cmplx) {
        self._real -= c.real()
        self._imag -= c.imag()
    }

    // Returns multiplication of complex numbers.
    pub fn mul(self, c: Cmplx): Cmplx {
        let real = self.real()*c.real() + self.imag()*c.imag() * -1
        let imag = self.real()*c.imag() + self.imag()*c.real()
        ret Cmplx.new(real, imag)
    }

    // Returns division of complex numbers.
    // Returns NaN complex number if denominator is zero.
    pub fn div(self, c: Cmplx): Cmplx {
        let denominator = c.real()*c.real() + c.imag()*c.imag()
        if denominator == 0 {
            ret Cmplx.nan()
        }

        let numerator = self.real()*c.real() + self.imag()*c.imag()
        let real = numerator / denominator
        let imag = (self.imag()*c.real() - self.real()*c.imag()) / denominator
        ret Cmplx.new(real, imag)
    }

    // Reports whether either real or imag is an infinity.
    pub fn is_inf(self): bool {
        ret math::is_inf(self.real(), 0) || math::is_inf(self.imag(), 0)
    }

    // Reports whether either real or imag is NaN and neither is an infinity.
    pub fn is_nan(self): bool {
        match {
        | math::is_inf(self.real(), 0) | math::is_inf(self.imag(), 0):
            ret false
        | math::is_nan(self.real()) | math::is_nan(self.imag()):
            ret true
        |:
            ret false
        }
    }

    // Reports whether real and imag is zero.
    pub fn is_zero(self): bool {
        ret self.real() == 0 && self.imag() == 0
    }
}
