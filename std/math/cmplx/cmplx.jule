// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use math for std::math

// Complex number.
pub struct Cmplx {
    _real: f64
    _imag: f64
}

impl Cmplx {
    // Returns new complex number.
    pub static fn new(real: f64, imag: f64,): Cmplx {
        ret Cmplx{
            _real: real,
            _imag: imag,
        }
    }

    // Returns complex number that assigned to NaN.
    pub static fn nan(): Cmplx {
        ret Cmplx{
            _real: math::nan(),
            _imag: math::nan(),
        }
    }

    // Returns real part of complex number.
    pub fn real(self): f64 {
        ret self._real
    }

    // Returns imaginary part of complex number.
    pub fn imag(self): f64 {
        ret self._imag
    }

    // Returns conjugate of complex number.
    pub fn conjugate(self): Cmplx {
        ret Cmplx.new(self.real(), -self.imag())
    }

    // Returns addition of complex numbers.
    pub fn add(self, c: Cmplx): Cmplx {
        ret Cmplx.new(self.real() + c.real(), self.imag() + c.imag())
    }

    // Returns subtraction of complex numbers.
    pub fn sub(self, c: Cmplx): Cmplx {
        ret Cmplx.new(self.real() - c.real(), self.imag() - c.imag())
    }

    // Returns multiplication of complex numbers.
    pub fn mul(self, c: Cmplx): Cmplx {
        let real = self.real()*c.real() + self.imag()*c.imag() * -1
        let imag = self.real()*c.imag() + self.imag()*c.real()
        ret Cmplx.new(real, imag)
    }

    // Returns division of complex numbers.
    // Returns NaN complex number if denominator is zero.
    pub fn div(self, c: Cmplx): Cmplx {
        let denominator = c.real()*c.real() + c.imag()*c.imag()
        if denominator == 0 {
            ret Cmplx.nan()
        }

        let numerator = self.real()*c.real() + self.imag()*c.imag()
        let real = numerator / denominator
        let imag = (self.imag()*c.real() - self.real()*c.imag()) / denominator
        ret Cmplx.new(real, imag)
    }
}
