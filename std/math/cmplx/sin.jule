// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/sin.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

impl Cmplx {
	// Complex circular sine
	//
	// DESCRIPTION:
	//
	// If
	//     z = x + iy,
	//
	// then
	//
	//     w = sin x  cosh y  +  i cos x sinh y.
	//
	// csin(z) = -i csinh(iz).
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    DEC       -10,+10      8400       5.3e-17     1.3e-17
	//    IEEE      -10,+10     30000       3.8e-16     1.0e-16
	// Also tested by csin(casin(z)) = z.

	// Returns the sine of complex number.
	fn Sin(self): Cmplx {
		match {
		| self.Imag() == 0 && (math::IsInf(self.Real(), 0) || math::IsNaN(self.Real())):
			ret Cmplx.New(math::NaN(), self.Imag())
		| math::IsInf(self.Imag(), 0):
			match {
			| self.Real() == 0:
				ret self
			| math::IsInf(self.Real(), 0) | math::IsNaN(self.Real()):
				ret Cmplx.New(math::NaN(), self.Imag())
			}
		| self.Real() == 0 && math::IsNaN(self.Imag()):
			ret self
		}
		s, c := math::Sincos(self.Real())
		sh, ch := sinhcosh(self.Imag())
		ret Cmplx.New(s*ch, c*sh)
	}

	// Complex hyperbolic sine
	//
	// DESCRIPTION:
	//
	// csinh z = (cexp(z) - cexp(-z))/2
	//         = sinh x * cos y  +  i cosh x * sin y .
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    IEEE      -10,+10     30000       3.1e-16     8.2e-17

	// Returns the hyperbolic sine of complex number.
	fn Sinh(self): Cmplx {
		match {
		| self.Real() == 0 && (math::IsInf(self.Imag(), 0) || math::IsNaN(self.Imag())):
			ret Cmplx.New(self.Real(), math::NaN())
		| math::IsInf(self.Real(), 0):
			match {
			| self.Imag() == 0:
				ret Cmplx.New(self.Real(), self.Imag())
			| math::IsInf(self.Imag(), 0) | math::IsNaN(self.Imag()):
				ret Cmplx.New(self.Real(), math::NaN())
			}
		| self.Imag() == 0 && math::IsNaN(self.Real()):
			ret Cmplx.New(math::NaN(), self.Imag())
		}
		s, c := math::Sincos(self.Imag())
		sh, ch := sinhcosh(self.Real())
		ret Cmplx.New(c*sh, s*ch)
	}

	// Complex circular cosine
	//
	// DESCRIPTION:
	//
	// If
	//     z = x + iy,
	//
	// then
	//
	//     w = cos x  cosh y  -  i sin x sinh y.
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    DEC       -10,+10      8400       4.5e-17     1.3e-17
	//    IEEE      -10,+10     30000       3.8e-16     1.0e-16

	// Returns the cosine of complex number.
	fn Cos(self): Cmplx {
		match {
		| self.Imag() == 0 && (math::IsInf(self.Real(), 0) || math::IsNaN(self.Real())):
			ret Cmplx.New(math::NaN(), -self.Imag()*math::Copysign(0, self.Real()))
		| math::IsInf(self.Imag(), 0):
			match {
			| self.Real() == 0:
				ret Cmplx.New(math::Inf(1), -self.Real()*math::Copysign(0, self.Imag()))
			| math::IsInf(self.Real(), 0) | math::IsNaN(self.Real()):
				ret Cmplx.New(math::Inf(1), math::NaN())
			}
		| self.Real() == 0 && math::IsNaN(self.Imag()):
			ret Cmplx.New(math::NaN(), 0)
		}
		s, c := math::Sincos(self.Real())
		sh, ch := sinhcosh(self.Imag())
		ret Cmplx.New(c*ch, -s*sh)
	}

	// Complex hyperbolic cosine
	//
	// DESCRIPTION:
	//
	// ccosh(z) = cosh x  cos y + i sinh x sin y .
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    IEEE      -10,+10     30000       2.9e-16     8.1e-17

	// Returns the hyperbolic cosine of complex number.
	fn Cosh(self): Cmplx {
		match {
		| self.Real() == 0 && (math::IsInf(self.Imag(), 0) || math::IsNaN(self.Imag())):
			ret Cmplx.New(math::NaN(), self.Real()*math::Copysign(0, self.Imag()))
		| math::IsInf(self.Real(), 0):
			match {
			| self.Imag() == 0:
				ret Cmplx.New(math::Inf(1), self.Imag()*math::Copysign(0, self.Real()))
			| math::IsInf(self.Imag(), 0) || math::IsNaN(self.Imag()):
				ret Cmplx.New(math::Inf(1), math::NaN())
			}
		| self.Imag() == 0 && math::IsNaN(self.Real()):
			ret Cmplx.New(math::NaN(), self.Imag())
		}
		s, c := math::Sincos(self.Imag())
		sh, ch := sinhcosh(self.Real())
		ret Cmplx.New(c*ch, s*sh)
	}
}

// calculate sinh and cosh.
fn sinhcosh(x: f64): (sh: f64, ch: f64) {
	if math::Abs(x) <= 0.5 {
		ret math::Sinh(x), math::Cosh(x)
	}
	mut e := math::Exp(x)
	ei := 0.5 / e
	e *= 0.5
	ret e - ei, e + ei
}