// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use math for std::math

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/sin.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

impl Cmplx {
    // Complex circular sine
    //
    // DESCRIPTION:
    //
    // If
    //     z = x + iy,
    //
    // then
    //
    //     w = sin x  cosh y  +  i cos x sinh y.
    //
    // csin(z) = -i csinh(iz).
    //
    // ACCURACY:
    //
    //                      Relative error:
    // arithmetic   domain     # trials      peak         rms
    //    DEC       -10,+10      8400       5.3e-17     1.3e-17
    //    IEEE      -10,+10     30000       3.8e-16     1.0e-16
    // Also tested by csin(casin(z)) = z.

    // Returns the sine of complex number.
    pub fn sin(self): Cmplx {
        match {
        | self.imag() == 0 && (math::is_inf(self.real(), 0) || math::is_nan(self.real())):
            ret Cmplx.new(math::nan(), self.imag())
        | math::is_inf(self.imag(), 0):
            match {
            | self.real() == 0:
                ret self
            | math::is_inf(self.real(), 0) | math::is_nan(self.real()):
                ret Cmplx.new(math::nan(), self.imag())
            }
        | self.real() == 0 && math::is_nan(self.imag()):
            ret self
        }
        let (s, c) = math::sincos(self.real())
        let (sh, ch) = sinhcosh(self.imag())
        ret Cmplx.new(s*ch, c*sh)
    }

    // Complex hyperbolic sine
    //
    // DESCRIPTION:
    //
    // csinh z = (cexp(z) - cexp(-z))/2
    //         = sinh x * cos y  +  i cosh x * sin y .
    //
    // ACCURACY:
    //
    //                      Relative error:
    // arithmetic   domain     # trials      peak         rms
    //    IEEE      -10,+10     30000       3.1e-16     8.2e-17

    // Sinh returns the hyperbolic sine of x.
    pub fn sinh(self): Cmplx {
        match {
        | self.real() == 0 && (math::is_inf(self.imag(), 0) || math::is_nan(self.imag())):
            ret Cmplx.new(self.real(), math::nan())
        | math::is_inf(self.real(), 0):
            match {
            | self.imag() == 0:
                ret Cmplx.new(self.real(), self.imag())
            | math::is_inf(self.imag(), 0) | math::is_nan(self.imag()):
                ret Cmplx.new(self.real(), math::nan())
            }
        | self.imag() == 0 && math::is_nan(self.real()):
            ret Cmplx.new(math::nan(), self.imag())
        }
        let (s, c) = math::sincos(self.imag())
        let (sh, ch) = sinhcosh(self.real())
        ret Cmplx.new(c*sh, s*ch)
    }
}

// calculate sinh and cosh.
fn sinhcosh(x: f64): (sh: f64, ch: f64) {
    if math::abs(x) <= 0.5 {
        ret math::sinh(x), math::cosh(x)
    }
    let mut e = math::exp(x)
    let ei = 0.5 / e
    e *= 0.5
    ret e - ei, e + ei
}
