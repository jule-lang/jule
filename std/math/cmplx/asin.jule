// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/asin.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

impl Cmplx {
	// Complex circular arc sine
	//
	// DESCRIPTION:
	//
	// Inverse complex sine:
	//                               2
	// w = -i clog( iz + csqrt( 1 - z ) ).
	//
	// casin(z) = -i casinh(iz)
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    DEC       -10,+10     10100       2.1e-15     3.4e-16
	//    IEEE      -10,+10     30000       2.2e-14     2.7e-15
	// Larger relative error can be observed for z near zero.
	// Also tested by csin(casin(z)) = z.

	// Returns the inverse sine of complex number.
	fn Asin(self): Cmplx {
		match {
		| self.Imag() == 0 && math::Abs(self.Real()) <= 1:
			ret Cmplx.New(math::Asin(self.Real()), self.Imag())
		| self.Real() == 0 && math::Abs(self.Imag()) <= 1:
			ret Cmplx.New(self.Real(), math::Asinh(self.Imag()))
		| math::IsNaN(self.Imag()):
			match {
			| self.Real() == 0:
				ret Cmplx.New(self.Real(), math::NaN())
			| math::IsInf(self.Real(), 0):
				ret Cmplx.New(math::NaN(), self.Real())
			|:
				ret Cmplx.NaN()
			}
		| math::IsInf(self.Imag(), 0):
			match {
			| math::IsNaN(self.Real()):
				ret self
			| math::IsInf(self.Real(), 0):
				ret Cmplx.New(math::Copysign(math::Pi/4, self.Real()), self.Imag())
			|:
				ret Cmplx.New(math::Copysign(0, self.Real()), self.Imag())
			}
		| math::IsInf(self.Real(), 0):
			ret Cmplx.New(math::Copysign(math::Pi/2, self.Real()), math::Copysign(self.Real(), self.Imag()))
		}
		ct := Cmplx.New(-self.Imag(), self.Real()) // i * x
		xx := self.Mul(self)
		x1 := Cmplx.New(1-xx.Real(), -xx.Imag()) // 1 - x*x
		x2 := x1.Sqrt()                          // x2 = sqrt(1 - x*x)
		w := ct.Add(x2).Log()
		ret Cmplx.New(w.Imag(), -w.Real()) // -i * w
	}

	// Returns the inverse hyperbolic sine of complex number.
	fn Asinh(self): Cmplx {
		match {
		| self.Imag() == 0 && math::Abs(self.Real()) <= 1:
			ret Cmplx.New(math::Asinh(self.Real()), self.Imag())
		| self.Real() == 0 && math::Abs(self.Imag()) <= 1:
			ret Cmplx.New(self.Real(), math::Asin(self.Imag()))
		| math::IsInf(self.Real(), 0):
			match {
			| math::IsInf(self.Imag(), 0):
				ret Cmplx.New(self.Real(), math::Copysign(math::Pi/4, self.Imag()))
			| math::IsNaN(self.Imag()):
				ret self
			|:
				ret Cmplx.New(self.Real(), math::Copysign(0.0, self.Imag()))
			}
		| math::IsNaN(self.Real()):
			match {
			| self.Imag() == 0:
				ret self
			| math::IsInf(self.Imag(), 0):
				ret Cmplx.New(self.Imag(), self.Real())
			|:
				ret Cmplx.NaN()
			}
		| math::IsInf(self.Imag(), 0):
			ret Cmplx.New(math::Copysign(self.Imag(), self.Real()), math::Copysign(math::Pi/2, self.Imag()))
		}
		xx := self.Mul(self)
		x1 := Cmplx.New(1+xx.Real(), xx.Imag()) // 1 + x*x
		ret self.Add(x1.Sqrt()).Log() // log(x + sqrt(1 + x*x))
	}

	// Complex circular arc cosine
	//
	// DESCRIPTION:
	//
	// w = arccos z  =  PI/2 - arcsin z.
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    DEC       -10,+10      5200      1.6e-15      2.8e-16
	//    IEEE      -10,+10     30000      1.8e-14      2.2e-15

	// Returns the inverse cosine of complex number.
	fn Acos(self): Cmplx {
		w := self.Asin()
		ret Cmplx.New(math::Pi/2-w.Real(), -w.Imag())
	}

	// Returns the inverse hyperbolic cosine of complex number.
	fn Acosh(self): Cmplx {
		if self.IsZero() {
			ret Cmplx.New(0, math::Copysign(math::Pi/2, self.Imag()))
		}
		w := self.Acos()
		if w.Imag() <= 0 {
			ret Cmplx.New(-w.Imag(), w.Real()) // i * w
		}
		ret Cmplx.New(w.Imag(), -w.Real()) // -i * w
	}

	// Complex circular arc tangent
	//
	// DESCRIPTION:
	//
	// If
	//     z = x + iy,
	//
	// then
	//          1       (    2x     )
	// Re w  =  - arctan(-----------)  +  k PI
	//          2       (     2    2)
	//                  (1 - x  - y )
	//
	//               ( 2         2)
	//          1    (x  +  (y+1) )
	// Im w  =  - log(------------)
	//          4    ( 2         2)
	//               (x  +  (y-1) )
	//
	// Where k is an arbitrary integer.
	//
	// catan(z) = -i catanh(iz).
	//
	// ACCURACY:
	//
	//                      Relative error:
	// arithmetic   domain     # trials      peak         rms
	//    DEC       -10,+10      5900       1.3e-16     7.8e-18
	//    IEEE      -10,+10     30000       2.3e-15     8.5e-17
	// The check catan( ctan(z) )  =  z, with |x| and |y| < PI/2,
	// had peak relative error 1.5e-16, rms relative error
	// 2.9e-17.  See also clog().

	// Returns the inverse tangent of complex number.
	fn Atan(self): Cmplx {
		match {
		| self.Imag() == 0:
			ret Cmplx.New(math::Atan(self.Real()), self.Imag())
		| self.Real() == 0 && math::Abs(self.Imag()) <= 1:
			ret Cmplx.New(self.Real(), math::Atanh(self.Imag()))
		| math::IsInf(self.Imag(), 0) | math::IsInf(self.Real(), 0):
			if math::IsNaN(self.Real()) {
				ret Cmplx.New(math::NaN(), math::Copysign(0, self.Imag()))
			}
			ret Cmplx.New(math::Copysign(math::Pi/2, self.Real()), math::Copysign(0, self.Imag()))
		| math::IsNaN(self.Real()) | math::IsNaN(self.Imag()):
			ret Cmplx.NaN()
		}
		x2 := self.Real() * self.Real()
		a := 1 - x2 - self.Imag()*self.Imag()
		if a == 0 {
			ret Cmplx.NaN()
		}
		mut t := 0.5 * math::Atan2(2*self.Real(), a)
		w := reducePi(t)

		t = self.Imag() - 1
		b := x2 + t*t
		if b == 0 {
			ret Cmplx.NaN()
		}
		t = self.Imag() + 1
		c := (x2 + t*t) / b
		ret Cmplx.New(w, 0.25*math::Log(c))
	}

	// Returns the inverse hyperbolic tangent of complex number.
	fn Atanh(self): Cmplx {
		z := Cmplx.New(-self.Imag(), self.Real()).Atan() // z = atan(i * x)
		ret Cmplx.New(z.Imag(), -z.Real()) // z = -i * z
	}
}