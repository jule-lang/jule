// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use math for std::math

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/math/cmplx/exp.go and came with this notice.
//
// ====================================================
// The original C code, the long comment, and the constants
// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.
// The go code is a simplified version of the original C.
//
// Cephes Math Library Release 2.8:  June, 2000
// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
//
// The readme file at http://netlib.sandia.gov/cephes/ says:
//    Some software in this archive may be from the book _Methods and
// Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster
// International, 1989) or from the Cephes Mathematical Library, a
// commercial product. In either event, it is copyrighted by the author.
// What you see here may be used freely but it comes with no support or
// guarantee.
//
//   The two known misprints in the book are repaired here in the
// source listings for the gamma function and the incomplete beta
// integral.
//
//   Stephen L. Moshier
//   moshier@na-net.ornl.gov

// Complex exponential function
//
// DESCRIPTION:
//
// Returns the complex exponential of the complex argument z.
//
// If
//     z = x + iy,
//     r = exp(x),
// then
//     w = r cos y + i r sin y.
//
// ACCURACY:
//
//                      Relative error:
// arithmetic   domain     # trials      peak         rms
//    DEC       -10,+10      8700       3.7e-17     1.1e-17
//    IEEE      -10,+10     30000       3.0e-16     8.7e-17

impl Cmplx {
    // Returns e**x, the base-e exponential of x.
    pub fn Exp(self): Cmplx {
        match {
        | math::IsInf(self.Real(), 0):
            match {
            | self.Real() > 0 && self.Imag() == 0:
                ret self
            | math::IsInf(self.Imag(), 0) | math::IsNaN(self.Imag()):
                if self.Real() < 0 {
                    ret Cmplx.New(0, math::Copysign(0, self.Imag()))
                }
                ret Cmplx.New(math::Inf(1.0), math::NaN())
            }
        | math::IsNaN(self.Real()):
            if self.Imag() == 0 {
                ret Cmplx.New(math::NaN(), self.Imag())
            }
        }
        let r = math::Exp(self.Real())
        let (s, c) = math::Sincos(self.Imag())
        ret Cmplx.New(r * c, r * s)
    }
}