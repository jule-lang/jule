// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

static cases_int_add = [
    ["+10000100100001", "+10011001101010", "+100011110001011"],
    ["+10000100100001", "-10011001101010", "-10101001001"],
    ["+10011001101010", "-10000100100001", "+10101001001"],
    ["-10011001101010", "+10000100100001", "-10101001001"],
    ["-10000100100001", "+10011001101010", "+10101001001"],
    ["-100011", "-1110100110", "-1111001001"],
    ["+11000", "+101011", "+1000011"],
]

static cases_int_sub = [
    ["+1010", "+10100", "-1010"],
    ["+10000100100001", "+10011001101010", "-10101001001"],
    ["+10000100100001", "-10011001101010", "+100011110001011"],
    ["+10011001101010", "-10000100100001", "+100011110001011"],
    ["-10011001101010", "+10000100100001", "+100011110001011"],
    ["-10000100100001", "+10011001101010", "+100011110001011"],
    ["-100011", "-1110100110", "+1110000011"],
    ["+11000", "+101011", "-10011"],
]

static cases_int_mul = [
    ["+1011010", "-1011010", "-1111110100100"],
    ["+1011010", "-1", "-1011010"],
    ["+1100010", "+100", "+110001000"],
    ["+100", "+1100010", "+110001000"],
    ["+10001101101110101011110110000110111111101101", "+10001101101110101011110110000110111111101101", "+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001"],
    ["-100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "-11000000011001110000010110100111100100110000001110100100100001110010010011011011110100000111000000011100100101001011101010001010001100010011110010101111111101011110100010001"],
]

static cases_int_div = [
    ["+1010", "-1", "-1010"],
    ["+1010", "+10", "+101"],
    ["-1000000", "-110", "+1010"],
    ["+1001100", "+11", "+11001"],
    ["+1000000", "+100", "+10000"],
    ["-11111011", "+1101", "-10011"],
    ["+10011011001110001", "+111", "+10110001011001"],
    ["-10011001101010", "-10", "+1001100110101"],
    ["+1010101010101010101010101010101010101010101010", "-10", "-101010101010101010101010101010101010101010101"],
    ["+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "+10", "+10011100111011100111100111111101010100100101100000000011010111011011111011000010110100"],
]

static cases_int_mod = [
    ["-1010", "+11", "+10"],
    ["-1011110110110101010101010101010011001111010101101011100", "+1101101", "+111011"],
    ["+1010", "-11", "-10"],
    ["+1010", "+11", "+1"],
    ["+1011110110110101010101010101010011001111010101101011100", "-1101101", "-111011"],
    ["+1010", "+10000000000", "+1010"],
    ["+10111101", "+10111111", "+10111101"],
    ["+10001110000010", "-11000011010100000", "-10110001100011110"],
    ["+1110101011011101", "-1000000000000000000000", "-111110001010100100011"],
    ["-1110101011011101", "-1000000000000000000000", "-1110101011011101"],
    ["-1000000000", "-1101", "-101"],
    ["-1010", "+10000000000", "+1111110110"],
    ["+1010", "-10000000000", "-1111110110"],
]

static cases_int_bit_not: [][]i64 = [
    [-20, 19],
    [-90, 89],
    [20, -21],
    [90, -91],
]

static cases_int_bit_or: [][]i64 = [
    [20, 4, 20],
    [4, 20, 20],
    [345, 2, 347],
    [908474739, 747688553334, 748259113847],
    [97799739579632223, 1234567890, 97799739731806943],
    [-20, 4, -20],
    [-4, 20, -4],
    [-345, 2, -345],
    [-908474739, 747688553334, -570560513],
    [-97799739579632223, 1234567890, -97799738497239053],
]

static cases_int_bit_and: [][]i64 = [
    [902984, 24, 8],
    [24, 902984, 8],
    [902984, 2434, 256],
    [2434, 902984, 256],
    [77786486463864864, 97774749933, 19360907296],
    [123456789, 987654321, 39471121],
    [5, -3, 5],
    [-5, 3, 3],
    [-8884973, 88893, 18705],
    [88893, -8884973, 18705],
    [13452, -12345, 1156],
    [-13452, -12345, -13500],
    [-12345, -13452, -13500],
]

static cases_int_bit_xor: [][]i64 = [
    [10, 11, 1],
    [87793, 5, 87796],
    [5, 87793, 87796],
    [10, 1, 11],
    [1, 10, 11],
    [12345, 54321, 58376],
    [123, 321, 314],
    [1234567890, 9876543210, 8676316216],
    [-10, -1, 9],
    [-1, 10, -11],
    [10, -1, -11],
    [12345, -54321, -58378],
    [123, -321, -316],
    [-1234567890, 9876543210, -8676316220],
    [9876543210, -1234567890, -8676316220],
]

fn test_common_int_op(mut &t: &T, op: str, &cases: [][]str) {
    for _, c in cases {
        let mut n1 = Int.parse(c[0], 2) else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        let n2 = Int.parse(c[1], 2) else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        match op {
        | "+":
            n1 += n2
        | "-":
            n1 -= n2
        | "*":
            n1 *= n2
        | "/":
            n1 /= n2
        | "%":
            n1 %= n2
        }
        let cr = c[2]
        if n1.len() != cr.len - 1 ||
            n1.minus && c[2][0] != '-' ||
            !n1.minus && c[2][0] != '+' {
            t.errorf("{} {} {} != {}", c[0], op, c[1], c[2])
            continue
        }
        for i, b in n1.nat.bits {
            let cb = cr[cr.len - 1 - i]
            if b == 0b1 && cb != '1' ||
                b == 0b0 && cb != '0' {
                t.errorf("{} {} {} != {}", c[0], op, c[1], c[2])
                break
            }
        }
    }
}

#test
fn test_int_add(mut t: &T) {
    test_common_int_op(t, "+", cases_int_add)
}

#test
fn test_int_sub(mut t: &T) {
    test_common_int_op(t, "-", cases_int_sub)
}

#test
fn test_int_mul(mut t: &T) {
    test_common_int_op(t, "*", cases_int_mul)
}

#test
fn test_int_div(mut t: &T) {
    test_common_int_op(t, "/", cases_int_div)
}

#test
fn test_int_mod(mut t: &T) {
    test_common_int_op(t, "%", cases_int_mod)
}

#test
fn test_int_bit_not(mut t: &T) {
    for _, c in cases_int_bit_not {
        let i = Int.new(c[0])
        let r = ^i
        if (r.to_i64()!) != c[1] {
            t.errorf("^{} != {}", c[0], c[1])
        }
    }
}

fn test_int_bit_binary(mut &t: &T, op: str, &cases: [][]i64) {
    for _, c in cases {
        let mut n1 = Int.new(c[0])
        let n2 = Int.new(c[1])
        match op {
        | "|":
            n1 |= n2
        | "&":
            n1 &= n2
        | "^":
            n1 ^= n2
        }
        let i = n1.to_i64()!
        if i != c[2] {
            t.errorf("{} {} {} != {}", c[0], op, c[1], c[2])
        }
    }
}

#test
fn test_int_bit_or(mut t: &T) {
    test_int_bit_binary(t, "|", cases_int_bit_or)
}

#test
fn test_int_bit_and(mut t: &T) {
    test_int_bit_binary(t, "&", cases_int_bit_and)
}

#test
fn test_int_bit_xor(mut t: &T) {
    test_int_bit_binary(t, "^", cases_int_bit_xor)
}

#test
fn test_int_lt(mut t: &T) {
    t.assert(!Int.parse("1011010", 2)!.lt(Int.parse("00001011010", 2)!), "1) 1011010 < 00001011010")
    t.assert(!Int.parse("1111011000", 2)!.lt(Int.parse("000000000001111011000", 2)!), "2) 1111011000 < 000000000001111011000")
    t.assert(!Int.parse("10001100011000", 2)!.lt(Int.parse("100011", 2)!), "3) 10001100011000 < 100011")
    t.assert(!Int.parse("10001101101110101011110110000110111111101111", 2)!.lt(Int.parse("10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101111 < 10001101101110101011110110000110111111101101")

    // - -
    t.assert(!Int.parse("-1011010", 2)!.lt(Int.parse("-00001011010", 2)!), "4) -1011010 <= -00001011010")
    t.assert(!Int.parse("-1111011000", 2)!.lt(Int.parse("-000000000001111011000", 2)!), "5) -1111011000 <= -000000000001111011000")
    t.assert(!Int.parse("-10001100011000", 2)!.lt(Int.parse("-10001100011000", 2)!), "6) -10001100011000 >= -10001100011000")
    t.assert(!Int.parse("-10001101101110101011110110000110111111101101", 2)!.lt(Int.parse("-10001101101110101011110110000110111111101101", 2)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")
    t.assert(Int.parse("-1011010", 2)!.lt(Int.parse("-00001", 2)!), "4) -1011010 <= -00001")

    // - +
    t.assert(Int.parse("-1011010", 2)!.lt(Int.parse("00001011010", 2)!), "8) -1011010 >= 00001011010")
    t.assert(Int.parse("-1111011000", 2)!.lt(Int.parse("000000000001111011000", 2)!), "9) -1111011000 >= 000000000001111011000")
    t.assert(Int.parse("-10001100011000", 2)!.lt(Int.parse("10001100011000", 2)!), "10) -10001100011000 >= 10001100011000")
    t.assert(Int.parse("-10001101101110101011110110000110111111101101", 2)!.lt(Int.parse("10001101101110101011110110000110111111101101", 2)!), "11) -10001101101110101011110110000110111111101101 >= 10001101101110101011110110000110111111101101")
}


#test
fn test_int_gt(mut t: &T) {
    // + +
    t.assert(!Int.parse("+1011010", 2)!.gt(Int.parse("+00001011010", 2)!), "1) 1011010 > 00001011010")
    t.assert(!Int.parse("+1111011000", 2)!.gt(Int.parse("+000000000001111011000", 2)!), "2) 1111011000 > 000000000001111011000")
    t.assert(Int.parse("+10001100011000", 2)!.gt(Int.parse("+100011", 2)!), "3) 10001100011000 <= 100011")
    t.assert(Int.parse("+10001101101110101011110110000110111111101111", 2)!.gt(Int.parse("+10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101111 <= 10001101101110101011110110000110111111101101")

    // - -
    t.assert(!Int.parse("-1011010", 2)!.gt(Int.parse("-00001011010", 2)!), "4) -1011010 <= -00001011010")
    t.assert(!Int.parse("-1111011000", 2)!.gt(Int.parse("-000000000001111011000", 2)!), "5) -1111011000 <= -000000000001111011000")
    t.assert(!Int.parse("-10001100011000", 2)!.gt(Int.parse("-10001100011000", 2)!), "6) -10001100011000 >= -10001100011000")
    t.assert(!Int.parse("-10001101101110101011110110000110111111101101", 2)!.gt(Int.parse("-10001101101110101011110110000110111111101101", 2)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")

    // + -
    t.assert(Int.parse("+1011010", 2)!.gt(Int.parse("-00001011010", 2)!), "8) 1011010 <= -00001011010")
    t.assert(Int.parse("+1111011000", 2)!.gt(Int.parse("-000000000001111011000", 2)!), "9) 1111011000 <= -000000000001111011000")
    t.assert(Int.parse("+10001100011000", 2)!.gt(Int.parse("-10001100011000", 2)!), "10) 10001100011000 <= -10001100011000")
    t.assert(Int.parse("+10001101101110101011110110000110111111101101", 2)!.gt(Int.parse("-10001101101110101011110110000110111111101101", 2)!), "11) 10001101101110101011110110000110111111101101 <= -10001101101110101011110110000110111111101101")
}

#test
fn test_int_eq(mut t: &T) {
    // + +
    t.assert(Int.parse("+1011010", 2)!.eq(Int.parse("+00001011010", 2)!), "1) 1011010 != 00001011010")
    t.assert(Int.parse("+1111011000", 2)!.eq(Int.parse("+000000000001111011000", 2)!), "2) 1111011000 != 000000000001111011000")
    t.assert(Int.parse("+10001100011000", 2)!.eq(Int.parse("+10001100011000", 2)!), "3) 10001100011000 != 10001100011000")
    t.assert(Int.parse("+10001101101110101011110110000110111111101101", 2)!.eq(Int.parse("+10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101101 != 10001101101110101011110110000110111111101101")

    // - -
    t.assert(Int.parse("-1011010", 2)!.eq(Int.parse("-00001011010", 2)!), "5) -1011010 != -00001011010")
    t.assert(Int.parse("-1111011000", 2)!.eq(Int.parse("-000000000001111011000", 2)!), "6) -1111011000 != -000000000001111011000")
    t.assert(Int.parse("-10001100011000", 2)!.eq(Int.parse("-10001100011000", 2)!), "7) -10001100011000 != -10001100011000")
    t.assert(Int.parse("-10001101101110101011110110000110111111101101", 2)!.eq(Int.parse("-10001101101110101011110110000110111111101101", 2)!), "8) -10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")

    // + -
    t.assert(!Int.parse("+1011010", 2)!.eq(Int.parse("-00001011010", 2)!), "9) 1011010 != -00001011010")
    t.assert(!Int.parse("+1111011000", 2)!.eq(Int.parse("-000000000001111011000", 2)!), "10) 1111011000 != -000000000001111011000")
    t.assert(!Int.parse("+10001100011000", 2)!.eq(Int.parse("-10001100011000", 2)!), "11) 10001100011000 != -10001100011000")
    t.assert(!Int.parse("+10001101101110101011110110000110111111101101", 2)!.eq(Int.parse("-10001101101110101011110110000110111111101101", 2)!), "12) 10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")
}

#test
fn test_int_format(mut t: &T) {
    // Binary
    t.assert((Int.parse("11101110101", 2)!.format(2)!) == "11101110101", "1) 11101110101 != 11101110101")
    t.assert((Int.parse("-000000", 2)!.format(2)!) == "0", "2) -000000 != 0")
    t.assert((Int.parse("000000", 2)!.format(2)!) == "0", "3) 000000 != 0")
    t.assert((Int.parse("-00111", 2)!.format(2)!) == "-111", "4) 00111 != -111")
    t.assert((Int.parse("1010", 2)!.format(2)!) == "1010", "5) 1010 != 1010")

    // Octal
    t.assert((Int.parse("1010", 2)!.format(8)!) == "12", "6) 1010 != 12")
    t.assert((Int.parse("101", 2)!.format(8)!) == "5", "7) 101 != 5")
    t.assert((Int.parse("-1010", 2)!.format(8)!) == "-12", "8) -1010 != -12")
    t.assert((Int.parse("-101", 2)!.format(8)!) == "-5", "9) -101 != -5")
    t.assert((Int.parse("1111010101", 2)!.format(8)!) == "1725", "10) 1111010101 != 1725")
    t.assert((Int.parse("-10001101101110101011110110000110111111101101", 2)!.format(8)!) == "-215565366067755", "11) -10001101101110101011110110000110111111101101 != -215565366067755")
    t.assert((Int.parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.format(8)!) == "47167171772511300065667660551", "12) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 47167171772511300065667660551")

    // Decimal
    t.assert((Int.parse("1010", 2)!.format(10)!) == "10", "13) 1010 != 10")
    t.assert((Int.parse("101", 2)!.format(10)!) == "5", "14) 101 != 5")
    t.assert((Int.parse("-1010", 2)!.format(10)!) == "-10", "15) -1010 != -10")
    t.assert((Int.parse("-101", 2)!.format(10)!) == "-5", "16) -101 != -5")
    t.assert((Int.parse("1111010101", 2)!.format(10)!) == "981", "17) 1111010101 != 981")
    t.assert((Int.parse("-10001101101110101011110110000110111111101101", 2)!.format(10)!) == "-9739573948397", "18) -10001101101110101011110110000110111111101101 != -9739573948397")
    t.assert((Int.parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.format(10)!) == "94859300696293528418869609", "19) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 94859300696293528418869609")

    // Hexadecimal
    t.assert((Int.parse("1010", 2)!.format(16)!) == "A", "20) 1010 != A")
    t.assert((Int.parse("101", 2)!.format(16)!) == "5", "21) 101 != 5")
    t.assert((Int.parse("-1010", 2)!.format(16)!) == "-A", "22) -1010 != -A")
    t.assert((Int.parse("-101", 2)!.format(16)!) == "-5", "23) -101 != -5")
    t.assert((Int.parse("1111010101", 2)!.format(16)!) == "3D5", "24) 1111010101 != 3D5")
    t.assert((Int.parse("-10001101101110101011110110000110111111101101", 2)!.format(16)!) == "-8DBABD86FED", "25) -10001101101110101011110110000110111111101101 != -8DBABD86FED")
    t.assert((Int.parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.format(16)!) == "4E773CFEA92C01AEDF6169", "26) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 4E773CFEA92C01AEDF6169")
}
