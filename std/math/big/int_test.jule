// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

static casesIntAdd = [
	["+10000100100001", "+10011001101010", "+100011110001011"],
	["+10000100100001", "-10011001101010", "-10101001001"],
	["+10011001101010", "-10000100100001", "+10101001001"],
	["-10011001101010", "+10000100100001", "-10101001001"],
	["-10000100100001", "+10011001101010", "+10101001001"],
	["-100011", "-1110100110", "-1111001001"],
	["+11000", "+101011", "+1000011"],
]

static casesIntSub = [
	["+1010", "+10100", "-1010"],
	["+10000100100001", "+10011001101010", "-10101001001"],
	["+10000100100001", "-10011001101010", "+100011110001011"],
	["+10011001101010", "-10000100100001", "+100011110001011"],
	["-10011001101010", "+10000100100001", "-100011110001011"],
	["-10000100100001", "+10011001101010", "-100011110001011"],
	["-100011", "-1110100110", "+1110000011"],
	["+11000", "+101011", "-10011"],
]

static casesIntMul = [
	["+1011010", "-1011010", "-1111110100100"],
	["+1011010", "-1", "-1011010"],
	["+1100010", "+100", "+110001000"],
	["+100", "+1100010", "+110001000"],
	["-100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "-11000000011001110000010110100111100100110000001110100100100001110010010011011011110100000111000000011100100101001011101010001010001100010011110010101111111101011110100010001"],

	// Square.
	["-1011001", "-1011001", "+1111011110001"],
	["-10011001101010", "-10011001101010", "+101110000111010001111100100"],
	["+10011001101010", "+10011001101010", "+101110000111010001111100100"],
	["+1101010100001110100010110011110010111001111", "+1101010100001110100010110011110010111001111", "+10110001010100010011010010000110100100111010111000010100110000001110011111110101100001"],
	["+10001101101110101011110110000110111111101101", "+10001101101110101011110110000110111111101101", "+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001"],
]

static casesIntDiv = [
	["+1010", "-1", "-1010"],
	["+1010", "+10", "+101"],
	["-1000000", "-110", "+1010"],
	["+1001100", "+11", "+11001"],
	["+1000000", "+100", "+10000"],
	["-11111011", "+1101", "-10011"],
	["+10011011001110001", "+111", "+10110001011001"],
	["-10011001101010", "-10", "+1001100110101"],
	["+1010101010101010101010101010101010101010101010", "-10", "-101010101010101010101010101010101010101010101"],
	["+100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", "+10", "+10011100111011100111100111111101010100100101100000000011010111011011111011000010110100"],
]

static casesIntMod = [
	["-1010", "+11", "+10"],
	["-1011110110110101010101010101010011001111010101101011100", "+1101101", "+111011"],
	["+1010", "-11", "-10"],
	["+1010", "+11", "+1"],
	["+1011110110110101010101010101010011001111010101101011100", "-1101101", "-111011"],
	["+1010", "+10000000000", "+1010"],
	["+10111101", "+10111111", "+10111101"],
	["+10001110000010", "-11000011010100000", "-10110001100011110"],
	["+1110101011011101", "-1000000000000000000000", "-111110001010100100011"],
	["-1110101011011101", "-1000000000000000000000", "-1110101011011101"],
	["-1000000000", "-1101", "-101"],
	["-1010", "+10000000000", "+1111110110"],
	["+1010", "-10000000000", "-1111110110"],
]

static casesIntBitNot: [][]i64 = [
	[-20, 19],
	[-90, 89],
	[20, -21],
	[90, -91],
]

static casesIntBitOr: [][]i64 = [
	[20, 4, 20],
	[4, 20, 20],
	[345, 2, 347],
	[908474739, 747688553334, 748259113847],
	[97799739579632223, 1234567890, 97799739731806943],
	[-20, 4, -20],
	[-4, 20, -4],
	[-345, 2, -345],
	[-908474739, 747688553334, -570560513],
	[-97799739579632223, 1234567890, -97799738497239053],
]

static casesIntBitAnd: [][]i64 = [
	[902984, 24, 8],
	[24, 902984, 8],
	[902984, 2434, 256],
	[2434, 902984, 256],
	[77786486463864864, 97774749933, 19360907296],
	[123456789, 987654321, 39471121],
	[5, -3, 5],
	[-5, 3, 3],
	[-8884973, 88893, 18705],
	[88893, -8884973, 18705],
	[13452, -12345, 1156],
	[-13452, -12345, -13500],
	[-12345, -13452, -13500],
]

static casesIntBitXor: [][]i64 = [
	[10, 11, 1],
	[87793, 5, 87796],
	[5, 87793, 87796],
	[10, 1, 11],
	[1, 10, 11],
	[12345, 54321, 58376],
	[123, 321, 314],
	[1234567890, 9876543210, 8676316216],
	[-10, -1, 9],
	[-1, 10, -11],
	[10, -1, -11],
	[12345, -54321, -58378],
	[123, -321, -316],
	[-1234567890, 9876543210, -8676316220],
	[9876543210, -1234567890, -8676316220],
]

fn testCommonIntOp(&t: &testing::T, op: str, &cases: [][]str) {
	for _, c in cases {
		mut n1 := Int.Parse(c[0], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		n2 := Int.Parse(c[1], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		match op {
		| "+":
			n1 += n2
		| "-":
			n1 -= n2
		| "*":
			n1 *= n2
		| "/":
			n1 /= n2
		| "%":
			n1 %= n2
		}
		cr := c[2]
		if n1.Len() != len(cr)-1 ||
			n1.minus && c[2][0] != '-' ||
			!n1.minus && c[2][0] != '+' {
			t.Errorf("{} {} {} != {}", c[0], op, c[1], c[2])
			continue
		}
		for i, b in n1.nat.bits {
			cb := cr[len(cr)-1-i]
			if b == 0b1 && cb != '1' ||
				b == 0b0 && cb != '0' {
				t.Errorf("{} {} {} != {}", c[0], op, c[1], c[2])
				break
			}
		}
	}
}

#test
fn testIntAdd(t: &testing::T) {
	testCommonIntOp(t, "+", casesIntAdd)
}

#test
fn testIntSub(t: &testing::T) {
	testCommonIntOp(t, "-", casesIntSub)
}

#test
fn testIntMul(t: &testing::T) {
	testCommonIntOp(t, "*", casesIntMul)
}

#test
fn testIntDiv(t: &testing::T) {
	testCommonIntOp(t, "/", casesIntDiv)
}

#test
fn testIntMod(t: &testing::T) {
	testCommonIntOp(t, "%", casesIntMod)
}

#test
fn testIntDivMod_Div(t: &testing::T) {
	for _, c in casesIntDiv {
		mut n1 := Int.Parse(c[0], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		n2 := Int.Parse(c[1], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		_ = n1.DivMod(n2)
		cr := c[2]
		if n1.Len() != len(cr)-1 ||
			n1.minus && c[2][0] != '-' ||
			!n1.minus && c[2][0] != '+' {
			t.Errorf("{} / {} != {}", c[0], c[1], c[2])
			continue
		}
		for i, b in n1.nat.bits {
			cb := cr[len(cr)-1-i]
			if b == 0b1 && cb != '1' ||
				b == 0b0 && cb != '0' {
				t.Errorf("{} / {} != {}", c[0], c[1], c[2])
				break
			}
		}
	}
}

#test
fn testIntDivMod_Mod(t: &testing::T) {
	for _, c in casesIntMod {
		mut n1 := Int.Parse(c[0], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		n2 := Int.Parse(c[1], 2) else {
			t.Errorf("exception occurs: {}", error)
			continue
		}
		n1 = n1.DivMod(n2)
		cr := c[2]
		if n1.Len() != len(cr)-1 ||
			n1.minus && c[2][0] != '-' ||
			!n1.minus && c[2][0] != '+' {
			t.Errorf("{} % {} != {}", c[0], c[1], c[2])
			continue
		}
		for i, b in n1.nat.bits {
			cb := cr[len(cr)-1-i]
			if b == 0b1 && cb != '1' ||
				b == 0b0 && cb != '0' {
				t.Errorf("{} % {} != {}", c[0], c[1], c[2])
				break
			}
		}
	}
}

#test
fn testIntBitNot(t: &testing::T) {
	for _, c in casesIntBitNot {
		i := Int.New(c[0])
		r := ^i
		if (r.ToI64()!) != c[1] {
			t.Errorf("^{} != {}", c[0], c[1])
		}
	}
}

fn testIntBitBinary(t: &testing::T, op: str, &cases: [][]i64) {
	for _, c in cases {
		mut n1 := Int.New(c[0])
		n2 := Int.New(c[1])
		match op {
		| "|":
			n1 |= n2
		| "&":
			n1 &= n2
		| "^":
			n1 ^= n2
		}
		i := n1.ToI64()!
		if i != c[2] {
			t.Errorf("{} {} {} != {}", c[0], op, c[1], c[2])
		}
	}
}

#test
fn testIntBitOr(t: &testing::T) {
	testIntBitBinary(t, "|", casesIntBitOr)
}

#test
fn testIntBitAnd(t: &testing::T) {
	testIntBitBinary(t, "&", casesIntBitAnd)
}

#test
fn testIntBitXor(t: &testing::T) {
	testIntBitBinary(t, "^", casesIntBitXor)
}

#test
fn testIntLt(t: &testing::T) {
	t.Assert(!Int.Parse("1011010", 2)!.Lt(Int.Parse("00001011010", 2)!), "1) 1011010 < 00001011010")
	t.Assert(!Int.Parse("1111011000", 2)!.Lt(Int.Parse("000000000001111011000", 2)!), "2) 1111011000 < 000000000001111011000")
	t.Assert(!Int.Parse("10001100011000", 2)!.Lt(Int.Parse("100011", 2)!), "3) 10001100011000 < 100011")
	t.Assert(!Int.Parse("10001101101110101011110110000110111111101111", 2)!.Lt(Int.Parse("10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101111 < 10001101101110101011110110000110111111101101")

	// - -
	t.Assert(!Int.Parse("-1011010", 2)!.Lt(Int.Parse("-00001011010", 2)!), "4) -1011010 <= -00001011010")
	t.Assert(!Int.Parse("-1111011000", 2)!.Lt(Int.Parse("-000000000001111011000", 2)!), "5) -1111011000 <= -000000000001111011000")
	t.Assert(!Int.Parse("-10001100011000", 2)!.Lt(Int.Parse("-10001100011000", 2)!), "6) -10001100011000 >= -10001100011000")
	t.Assert(!Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Lt(Int.Parse("-10001101101110101011110110000110111111101101", 2)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")
	t.Assert(Int.Parse("-1011010", 2)!.Lt(Int.Parse("-00001", 2)!), "4) -1011010 <= -00001")

	// - +
	t.Assert(Int.Parse("-1011010", 2)!.Lt(Int.Parse("00001011010", 2)!), "8) -1011010 >= 00001011010")
	t.Assert(Int.Parse("-1111011000", 2)!.Lt(Int.Parse("000000000001111011000", 2)!), "9) -1111011000 >= 000000000001111011000")
	t.Assert(Int.Parse("-10001100011000", 2)!.Lt(Int.Parse("10001100011000", 2)!), "10) -10001100011000 >= 10001100011000")
	t.Assert(Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Lt(Int.Parse("10001101101110101011110110000110111111101101", 2)!), "11) -10001101101110101011110110000110111111101101 >= 10001101101110101011110110000110111111101101")
}

#test
fn testIntGt(t: &testing::T) {
	// + +
	t.Assert(!Int.Parse("+1011010", 2)!.Gt(Int.Parse("+00001011010", 2)!), "1) 1011010 > 00001011010")
	t.Assert(!Int.Parse("+1111011000", 2)!.Gt(Int.Parse("+000000000001111011000", 2)!), "2) 1111011000 > 000000000001111011000")
	t.Assert(Int.Parse("+10001100011000", 2)!.Gt(Int.Parse("+100011", 2)!), "3) 10001100011000 <= 100011")
	t.Assert(Int.Parse("+10001101101110101011110110000110111111101111", 2)!.Gt(Int.Parse("+10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101111 <= 10001101101110101011110110000110111111101101")

	// - -
	t.Assert(!Int.Parse("-1011010", 2)!.Gt(Int.Parse("-00001011010", 2)!), "4) -1011010 <= -00001011010")
	t.Assert(!Int.Parse("-1111011000", 2)!.Gt(Int.Parse("-000000000001111011000", 2)!), "5) -1111011000 <= -000000000001111011000")
	t.Assert(!Int.Parse("-10001100011000", 2)!.Gt(Int.Parse("-10001100011000", 2)!), "6) -10001100011000 >= -10001100011000")
	t.Assert(!Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Gt(Int.Parse("-10001101101110101011110110000110111111101101", 2)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")

	// + -
	t.Assert(Int.Parse("+1011010", 2)!.Gt(Int.Parse("-00001011010", 2)!), "8) 1011010 <= -00001011010")
	t.Assert(Int.Parse("+1111011000", 2)!.Gt(Int.Parse("-000000000001111011000", 2)!), "9) 1111011000 <= -000000000001111011000")
	t.Assert(Int.Parse("+10001100011000", 2)!.Gt(Int.Parse("-10001100011000", 2)!), "10) 10001100011000 <= -10001100011000")
	t.Assert(Int.Parse("+10001101101110101011110110000110111111101101", 2)!.Gt(Int.Parse("-10001101101110101011110110000110111111101101", 2)!), "11) 10001101101110101011110110000110111111101101 <= -10001101101110101011110110000110111111101101")
}

#test
fn testIntEq(t: &testing::T) {
	// + +
	t.Assert(Int.Parse("+1011010", 2)!.Eq(Int.Parse("+00001011010", 2)!), "1) 1011010 != 00001011010")
	t.Assert(Int.Parse("+1111011000", 2)!.Eq(Int.Parse("+000000000001111011000", 2)!), "2) 1111011000 != 000000000001111011000")
	t.Assert(Int.Parse("+10001100011000", 2)!.Eq(Int.Parse("+10001100011000", 2)!), "3) 10001100011000 != 10001100011000")
	t.Assert(Int.Parse("+10001101101110101011110110000110111111101101", 2)!.Eq(Int.Parse("+10001101101110101011110110000110111111101101", 2)!), "4) 10001101101110101011110110000110111111101101 != 10001101101110101011110110000110111111101101")

	// - -
	t.Assert(Int.Parse("-1011010", 2)!.Eq(Int.Parse("-00001011010", 2)!), "5) -1011010 != -00001011010")
	t.Assert(Int.Parse("-1111011000", 2)!.Eq(Int.Parse("-000000000001111011000", 2)!), "6) -1111011000 != -000000000001111011000")
	t.Assert(Int.Parse("-10001100011000", 2)!.Eq(Int.Parse("-10001100011000", 2)!), "7) -10001100011000 != -10001100011000")
	t.Assert(Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Eq(Int.Parse("-10001101101110101011110110000110111111101101", 2)!), "8) -10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")

	// + -
	t.Assert(!Int.Parse("+1011010", 2)!.Eq(Int.Parse("-00001011010", 2)!), "9) 1011010 != -00001011010")
	t.Assert(!Int.Parse("+1111011000", 2)!.Eq(Int.Parse("-000000000001111011000", 2)!), "10) 1111011000 != -000000000001111011000")
	t.Assert(!Int.Parse("+10001100011000", 2)!.Eq(Int.Parse("-10001100011000", 2)!), "11) 10001100011000 != -10001100011000")
	t.Assert(!Int.Parse("+10001101101110101011110110000110111111101101", 2)!.Eq(Int.Parse("-10001101101110101011110110000110111111101101", 2)!), "12) 10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")
}

#test
fn testIntFormat(t: &testing::T) {
	// Binary
	t.Assert((Int.Parse("11101110101", 2)!.Format(2)!) == "11101110101", "1) 11101110101 != 11101110101")
	t.Assert((Int.Parse("-000000", 2)!.Format(2)!) == "0", "2) -000000 != 0")
	t.Assert((Int.Parse("000000", 2)!.Format(2)!) == "0", "3) 000000 != 0")
	t.Assert((Int.Parse("-00111", 2)!.Format(2)!) == "-111", "4) 00111 != -111")
	t.Assert((Int.Parse("1010", 2)!.Format(2)!) == "1010", "5) 1010 != 1010")

	// Octal
	t.Assert((Int.Parse("1010", 2)!.Format(8)!) == "12", "6) 1010 != 12")
	t.Assert((Int.Parse("101", 2)!.Format(8)!) == "5", "7) 101 != 5")
	t.Assert((Int.Parse("-1010", 2)!.Format(8)!) == "-12", "8) -1010 != -12")
	t.Assert((Int.Parse("-101", 2)!.Format(8)!) == "-5", "9) -101 != -5")
	t.Assert((Int.Parse("1111010101", 2)!.Format(8)!) == "1725", "10) 1111010101 != 1725")
	t.Assert((Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Format(8)!) == "-215565366067755", "11) -10001101101110101011110110000110111111101101 != -215565366067755")
	t.Assert((Int.Parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.Format(8)!) == "47167171772511300065667660551", "12) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 47167171772511300065667660551")

	// Decimal
	t.Assert((Int.Parse("1010", 2)!.Format(10)!) == "10", "13) 1010 != 10")
	t.Assert((Int.Parse("101", 2)!.Format(10)!) == "5", "14) 101 != 5")
	t.Assert((Int.Parse("-1010", 2)!.Format(10)!) == "-10", "15) -1010 != -10")
	t.Assert((Int.Parse("-101", 2)!.Format(10)!) == "-5", "16) -101 != -5")
	t.Assert((Int.Parse("1111010101", 2)!.Format(10)!) == "981", "17) 1111010101 != 981")
	t.Assert((Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Format(10)!) == "-9739573948397", "18) -10001101101110101011110110000110111111101101 != -9739573948397")
	t.Assert((Int.Parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.Format(10)!) == "94859300696293528418869609", "19) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 94859300696293528418869609")

	// Hexadecimal
	t.Assert((Int.Parse("1010", 2)!.Format(16)!) == "A", "20) 1010 != A")
	t.Assert((Int.Parse("101", 2)!.Format(16)!) == "5", "21) 101 != 5")
	t.Assert((Int.Parse("-1010", 2)!.Format(16)!) == "-A", "22) -1010 != -A")
	t.Assert((Int.Parse("-101", 2)!.Format(16)!) == "-5", "23) -101 != -5")
	t.Assert((Int.Parse("1111010101", 2)!.Format(16)!) == "3D5", "24) 1111010101 != 3D5")
	t.Assert((Int.Parse("-10001101101110101011110110000110111111101101", 2)!.Format(16)!) == "-8DBABD86FED", "25) -10001101101110101011110110000110111111101101 != -8DBABD86FED")
	t.Assert((Int.Parse("100111001110111001111001111111010101001001011000000000110101110110111110110000101101001", 2)!.Format(16)!) == "4E773CFEA92C01AEDF6169", "26) 100111001110111001111001111111010101001001011000000000110101110110111110110000101101001 != 4E773CFEA92C01AEDF6169")
}