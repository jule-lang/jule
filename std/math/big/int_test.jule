// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::testing::{T}

static cases_int_add = [
    ["10000100100001", "+", "10011001101010", "+", "100011110001011", "+"],
    ["10000100100001", "+", "10011001101010", "-", "10101001001", "-"],
    ["10011001101010", "+", "10000100100001", "-", "10101001001", "+"],
    ["10011001101010", "-", "10000100100001", "+", "10101001001", "-"],
    ["10000100100001", "-", "10011001101010", "+", "10101001001", "+"],
    ["100011", "-", "1110100110", "-", "1111001001", "-"],
    ["11000", "+", "101011", "+", "1000011", "+"],
]

static cases_int_sub: [][]str = [
    ["1010", "+", "10100", "+", "1010", "-"],
    ["10000100100001", "+", "10011001101010", "+", "10101001001", "-"],
    ["10000100100001", "+", "10011001101010", "-", "100011110001011", "+"],
    ["10011001101010", "+", "10000100100001", "-", "100011110001011", "+"],
    ["10011001101010", "-", "10000100100001", "+", "100011110001011", "+"],
    ["10000100100001", "-", "10011001101010", "+", "100011110001011", "+"],
    ["100011", "-", "1110100110", "-", "1110000011", "+"],
    ["11000", "+", "101011", "+", "10011", "-"],
]

#test
fn test_int_add(mut t: &T) {
    for _, c in cases_int_add {
        let n1 = Int.from_bits(c[0], c[1] == "-") else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        let n2 = Int.from_bits(c[2], c[3] == "-") else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        let mut r = n1.add(n2)
        let cr = c[4]
        if r.len() != cr.len ||
            r.neg && c[5] != "-" ||
            !r.neg && c[5] != "+" {
            t.errorf("{}{} + {}{} != {}{}", c[1], c[0], c[3], c[2], c[5], c[4])
            continue
        }
        for i, b in r.nat.bits {
            let cb = cr[cr.len - 1 - i]
            if b == 0b1 && cb != '1' ||
                b == 0b0 && cb != '0' {
                t.errorf("{}{} + {}{} != {}{}", c[1], c[0], c[3], c[2], c[5], c[4])
                break
            }
        }
    }
}

#test
fn test_int_sub(mut t: &T) {
    for _, c in cases_int_sub {
        let n1 = Int.from_bits(c[0], c[1] == "-") else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        let n2 = Int.from_bits(c[2], c[3] == "-") else {
            t.errorf("exception occurs: {}", error)
            continue
        }
        let mut r = n1.sub(n2)
        let cr = c[4]
        if r.len() != cr.len ||
            r.neg && c[5] != "-" ||
            !r.neg && c[5] != "+" {
            t.errorf("{}{} - {}{} != {}{}", c[1], c[0], c[3], c[2], c[5], c[4])
            continue
        }
        for i, b in r.nat.bits {
            let cb = cr[cr.len - 1 - i]
            if b == 0b1 && cb != '1' ||
                b == 0b0 && cb != '0' {
                t.errorf("{}{} - {}{} != {}{}", c[1], c[0], c[3], c[2], c[5], c[4])
                break
            }
        }
    }
}

#test
fn test_int_lt(mut t: &T) {
    t.assert(!Int.from_bits("1011010", false)!.lt(Int.from_bits("00001011010", false)!), "1) 1011010 < 00001011010")
    t.assert(!Int.from_bits("1111011000", false)!.lt(Int.from_bits("000000000001111011000", false)!), "2) 1111011000 < 000000000001111011000")
    t.assert(!Int.from_bits("10001100011000", false)!.lt(Int.from_bits("100011", false)!), "3) 10001100011000 < 100011")
    t.assert(!Int.from_bits("10001101101110101011110110000110111111101111", false)!.lt(Int.from_bits("10001101101110101011110110000110111111101101", false)!), "4) 10001101101110101011110110000110111111101111 < 10001101101110101011110110000110111111101101")

    // - -
    t.assert(!Int.from_bits("1011010", true)!.lt(Int.from_bits("00001011010", true)!), "4) -1011010 <= -00001011010")
    t.assert(!Int.from_bits("1111011000", true)!.lt(Int.from_bits("000000000001111011000", true)!), "5) -1111011000 <= -000000000001111011000")
    t.assert(!Int.from_bits("10001100011000", true)!.lt(Int.from_bits("10001100011000", true)!), "6) -10001100011000 >= -10001100011000")
    t.assert(!Int.from_bits("10001101101110101011110110000110111111101101", true)!.lt(Int.from_bits("10001101101110101011110110000110111111101101", true)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")
    t.assert(Int.from_bits("1011010", true)!.lt(Int.from_bits("00001", true)!), "4) -1011010 <= -00001")

    // - +
    t.assert(Int.from_bits("1011010", true)!.lt(Int.from_bits("00001011010", false)!), "8) -1011010 >= 00001011010")
    t.assert(Int.from_bits("1111011000", true)!.lt(Int.from_bits("000000000001111011000", false)!), "9) -1111011000 >= 000000000001111011000")
    t.assert(Int.from_bits("10001100011000", true)!.lt(Int.from_bits("10001100011000", false)!), "10) -10001100011000 >= 10001100011000")
    t.assert(Int.from_bits("10001101101110101011110110000110111111101101", true)!.lt(Int.from_bits("10001101101110101011110110000110111111101101", false)!), "11) -10001101101110101011110110000110111111101101 >= 10001101101110101011110110000110111111101101")
}

#test
fn test_int_gt(mut t: &T) {
    // + +
    t.assert(!Int.from_bits("1011010", false)!.gt(Int.from_bits("00001011010", false)!), "1) 1011010 > 00001011010")
    t.assert(!Int.from_bits("1111011000", false)!.gt(Int.from_bits("000000000001111011000", false)!), "2) 1111011000 > 000000000001111011000")
    t.assert(Int.from_bits("10001100011000", false)!.gt(Int.from_bits("100011", false)!), "3) 10001100011000 <= 100011")
    t.assert(Int.from_bits("10001101101110101011110110000110111111101111", false)!.gt(Int.from_bits("10001101101110101011110110000110111111101101", false)!), "4) 10001101101110101011110110000110111111101111 <= 10001101101110101011110110000110111111101101")

    // - -
    t.assert(!Int.from_bits("1011010", true)!.gt(Int.from_bits("00001011010", true)!), "4) -1011010 <= -00001011010")
    t.assert(!Int.from_bits("1111011000", true)!.gt(Int.from_bits("000000000001111011000", true)!), "5) -1111011000 <= -000000000001111011000")
    t.assert(!Int.from_bits("10001100011000", true)!.gt(Int.from_bits("10001100011000", true)!), "6) -10001100011000 >= -10001100011000")
    t.assert(!Int.from_bits("10001101101110101011110110000110111111101101", true)!.gt(Int.from_bits("10001101101110101011110110000110111111101101", true)!), "7) -10001101101110101011110110000110111111101101 >= -10001101101110101011110110000110111111101101")

    // + -
    t.assert(Int.from_bits("1011010", false)!.gt(Int.from_bits("00001011010", true)!), "8) 1011010 <= -00001011010")
    t.assert(Int.from_bits("1111011000", false)!.gt(Int.from_bits("000000000001111011000", true)!), "9) 1111011000 <= -000000000001111011000")
    t.assert(Int.from_bits("10001100011000", false)!.gt(Int.from_bits("10001100011000", true)!), "10) 10001100011000 <= -10001100011000")
    t.assert(Int.from_bits("10001101101110101011110110000110111111101101", false)!.gt(Int.from_bits("10001101101110101011110110000110111111101101", true)!), "11) 10001101101110101011110110000110111111101101 <= -10001101101110101011110110000110111111101101")
}

#test
fn test_int_eq(mut t: &T) {
    // + +
    t.assert(Int.from_bits("1011010", false)!.eq(Int.from_bits("00001011010", false)!), "1) 1011010 != 00001011010")
    t.assert(Int.from_bits("1111011000", false)!.eq(Int.from_bits("000000000001111011000", false)!), "2) 1111011000 != 000000000001111011000")
    t.assert(Int.from_bits("10001100011000", false)!.eq(Int.from_bits("10001100011000", false)!), "3) 10001100011000 != 10001100011000")
    t.assert(Int.from_bits("10001101101110101011110110000110111111101101", false)!.eq(Int.from_bits("10001101101110101011110110000110111111101101", false)!), "4) 10001101101110101011110110000110111111101101 != 10001101101110101011110110000110111111101101")

    // - -
    t.assert(Int.from_bits("1011010", true)!.eq(Int.from_bits("00001011010", true)!), "5) -1011010 != -00001011010")
    t.assert(Int.from_bits("1111011000", true)!.eq(Int.from_bits("000000000001111011000", true)!), "6) -1111011000 != -000000000001111011000")
    t.assert(Int.from_bits("10001100011000", true)!.eq(Int.from_bits("10001100011000", true)!), "7) -10001100011000 != -10001100011000")
    t.assert(Int.from_bits("10001101101110101011110110000110111111101101", true)!.eq(Int.from_bits("10001101101110101011110110000110111111101101", true)!), "8) -10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")

    // + -
    t.assert(!Int.from_bits("1011010", false)!.eq(Int.from_bits("00001011010", true)!), "9) 1011010 != -00001011010")
    t.assert(!Int.from_bits("1111011000", false)!.eq(Int.from_bits("000000000001111011000", true)!), "10) 1111011000 != -000000000001111011000")
    t.assert(!Int.from_bits("10001100011000", false)!.eq(Int.from_bits("10001100011000", true)!), "11) 10001100011000 != -10001100011000")
    t.assert(!Int.from_bits("10001101101110101011110110000110111111101101", false)!.eq(Int.from_bits("10001101101110101011110110000110111111101101", true)!), "12) 10001101101110101011110110000110111111101101 != -10001101101110101011110110000110111111101101")
}
