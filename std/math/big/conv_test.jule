// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use "std/testing"

static casesParseHex = [
	[[]byte("0"), []],
	[[]byte("A"), [0, 1, 0, 1]],
	[[]byte("4A89BCE902F"), [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]],
	[[]byte("564FF"), [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1]],
	[[]byte("564FFFFFAD89"), [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1]],
]

static casesParseOctal = [
	[[]byte("0"), []],
	[[]byte("000"), []],
	[[]byte("001"), [1]],
	[[]byte("563"), [1, 1, 0, 0, 1, 1, 1, 0, 1]],
	[[]byte("01234567"), [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1]],
	[[]byte("76543210"), [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1]],
	[[]byte("56323242425551121325623237"), [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1]],
]

static casesParseDecimal = [
	[[]byte("0"), []],
	[[]byte("00000"), []],
	[[]byte("010"), [0, 1, 0, 1]],
	[[]byte("011"), [1, 1, 0, 1]],
	[[]byte("11101293"), [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1]],
	[[]byte("77738310"), [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1]],
	[[]byte("52386786278527310725769899"), [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1]],
]

#test
fn testParseHex(t: &testing::T) {
	for _, c in casesParseHex {
		c0 := str(c[0])
		bits := parseHex(c0)!
		c1 := c[1]
		if cmp(bits, c1) != 0 {
			t.Errorf("0x{} != 0b{}", c0, c1)
		}
	}
}

#test
fn testParseOctal(t: &testing::T) {
	for _, c in casesParseOctal {
		c0 := str(c[0])
		bits := parseOctal(c0)!
		c1 := c[1]
		if cmp(bits, c1) != 0 {
			t.Errorf("0{} != 0b{}", c0, c1)
		}
	}
}

#test
fn testParseDecimal(t: &testing::T) {
	for _, c in casesParseDecimal {
		c0 := str(c[0])
		bits := parseDecimal(c0)!
		c1 := c[1]
		if cmp(bits, c1) != 0 {
			t.Errorf("{} != {}", str(c[0]), c1)
		}
	}
}