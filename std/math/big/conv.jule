// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::unsafe

// Parse bits from binary string.
fn parseBinary(&s: str)!: bits {
    // Eliminate initial-zeros to normalize and fit minimum mandatory bit-size.
    mut j := 0
    for j < len(s); j++ {
        if s[j] != '0' {
            break
        }
    }
    if len(s) == j {
        // All bits are zero.
        ret nil
    }
    mut r := make(bits, 0, len(s) - j)
    mut k := len(s) - 1
    for k >= j; k-- {
        match s[k] {
        | '1':
            r = append(r, 0b1)
        | '0':
            r = append(r, 0b0)
        |:
            error(BigError.Format)
        }
    }
    ret r
}

// Parse bits from hexadecimal string.
// Returns normalized bits.
fn parseHex(&s: str)!: bits {
    mut buf := make(bits, 0, len(s) * 4)
    mut i := len(s) - 1
    for i >= 0; i-- {
        h := s[i]
        match h {
        | '0':
            buf = append(buf, 0b0, 0b0, 0b0, 0b0)
        | '1':
            buf = append(buf, 0b1, 0b0, 0b0, 0b0)
        | '2':
            buf = append(buf, 0b0, 0b1, 0b0, 0b0)
        | '3':
            buf = append(buf, 0b1, 0b1, 0b0, 0b0)
        | '4':
            buf = append(buf, 0b0, 0b0, 0b1, 0b0)
        | '5':
            buf = append(buf, 0b1, 0b0, 0b1, 0b0)
        | '6':
            buf = append(buf, 0b0, 0b1, 0b1, 0b0)
        | '7':
            buf = append(buf, 0b1, 0b1, 0b1, 0b0)
        | '8':
            buf = append(buf, 0b0, 0b0, 0b0, 0b1)
        | '9':
            buf = append(buf, 0b1, 0b0, 0b0, 0b1)
        | 'A':
            buf = append(buf, 0b0, 0b1, 0b0, 0b1)
        | 'B':
            buf = append(buf, 0b1, 0b1, 0b0, 0b1)
        | 'C':
            buf = append(buf, 0b0, 0b0, 0b1, 0b1)
        | 'D':
            buf = append(buf, 0b1, 0b0, 0b1, 0b1)
        | 'E':
            buf = append(buf, 0b0, 0b1, 0b1, 0b1)
        | 'F':
            buf = append(buf, 0b1, 0b1, 0b1, 0b1)
        |:
            error(BigError.Format)
        }
    }
    fit(buf)
    ret buf
}

// Parse bits from octal string.
// Returns normalized bits.
fn parseOctal(&s: str)!: bits {
    mut buf := make(bits, 0, len(s) * 3)
    mut i := len(s) - 1
    for i >= 0; i-- {
        match s[i] {
        | '0':
            buf = append(buf, 0b0, 0b0, 0b0)
        | '1':
            buf = append(buf, 0b1, 0b0, 0b0)
        | '2':
            buf = append(buf, 0b0, 0b1, 0b0)
        | '3':
            buf = append(buf, 0b1, 0b1, 0b0)
        | '4':
            buf = append(buf, 0b0, 0b0, 0b1)
        | '5':
            buf = append(buf, 0b1, 0b0, 0b1)
        | '6':
            buf = append(buf, 0b0, 0b1, 0b1)
        | '7':
            buf = append(buf, 0b1, 0b1, 0b1)
        |:
            error(BigError.Format)
        }
    }
    fit(buf)
    ret buf
}

fn parseDecimal(&s: str)!: []byte {
    mut sb := []byte(s)
    for _, b in sb {
        if b < '0' || '9' < b {
            error(BigError.Format)
        }
    }
    mut buf := make([]byte, 0, len(s) * 4)
loop:
    for {
        d := sb[len(sb)-1] - '0'
        buf = append(buf, d % 2)
        mut carry := byte(0)
        for i in sb {
            t := carry * 10 + (sb[i] - '0')
            sb[i] = '0' + (t >> 1)
            carry = t & 0b1
        }
        for i in sb {
            if sb[i] != '0' {
                sb = sb[i:]
                continue loop
            }
        }
        break
    }
    fit(buf)
    ret buf
}

fn formatBinary(&b: bits): str {
    if len(b) == 0 {
        ret "0"
    }
    mut buf := make([]byte, len(b) + 1)
    for i in b {
        buf[i] = '0' + b[len(b)-i-1]
    }
    ret unsafe::StrFromBytes(buf[:len(buf)-1])
}

fn appendNullTermination(mut &buf: []byte) {
    if buf[len(buf)-1] != 0 {
        buf = append(buf, 0)
    }
}

fn formatDecimalPart(mut &buf: []byte, m: byte) {
    mut carry := ^m & 0b1
    n := len(buf)
    for in buf {
        digit := buf[n-1] - '0'
        value := (digit << m) + carry
        buf = append(buf[:1], buf...)
        buf[0] = '0' + (value % 10)
        carry = value / 10
    }
    buf = buf[:n]
    if carry > 0 {
        buf = append(buf[:1], buf...)
        buf[0] = '0' + carry
    }
}

fn formatDecimal(&b: bits): str {
    mut buf := make([]byte, 1, len(b) >> 1 + 1)
    buf[0] = '0'
    for _, bit in formatBinary(b) {
        formatDecimalPart(buf, 1)
        if bit == '1' {
            formatDecimalPart(buf, 0)
        }
    }
    appendNullTermination(buf)
    ret unsafe::StrFromBytes(buf[:len(buf)-1])
}

fn formatOctal(&b: bits): str {
    n := len(b) - len(b) % 3
    mut buf := make([]byte, 1, len(b) / 3 + 1)
    mut i := 0
    for i < n; i += 3 {
        buf = append(buf[:1], buf...)
        c := b[i:i+3]
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0:
            buf[0] = '0'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0:
            buf[0] = '3'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '7'
        }
    }
    c := b[n:]
    match len(c) {
    | 1:
        buf = append(buf[:1], buf...)
        buf[0] = '1'
    | 2:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b1 && c[1] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1:
            buf[0] = '3'
        }
    }
    buf[len(buf)-1] = 0
    ret unsafe::StrFromBytes(buf[:len(buf)-1])
}

fn formatHex(&b: bits): str {
    n := len(b) - len(b) % 4
    mut buf := make([]byte, 1, len(b) >> 2 + 1)
    mut i := 0
    for i < n; i += 4 {
        buf = append(buf[:1], buf...)
        c := b[i:i+4]
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '0'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '3'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '7'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = '8'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = '9'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = 'A'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = 'B'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'C'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'D'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'E'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'F'
        }
    }
    c := b[n:]
    match len(c) {
    | 1:
        buf = append(buf[:1], buf...)
        buf[0] = '1'
    | 2:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b0 && c[1] == 0b1:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1:
            buf[0] = '3'
        }
    | 3:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '7'
        }
    }
    buf[len(buf)-1] = 0
    ret unsafe::StrFromBytes(buf[:len(buf)-1])
}