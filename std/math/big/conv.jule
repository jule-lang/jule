// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Parse bits from binary string.
fn parse_binary(&s: str)!: bits {
    // Eliminate initial-zeros to normalize and fit minimum mandatory bit-size.
    let mut j = 0
    for j < s.len; j++ {
        if s[j] != '0' {
            break
        }
    }
    if s.len == j {
        // All bits are zero.
        ret nil
    }
    let mut r = make(bits, 0, s.len - j)
    let mut k = s.len - 1
    for k >= j; k-- {
        match s[k] {
        | '1':
            r = append(r, 0b1)
        | '0':
            r = append(r, 0b0)
        |:
            error(BigError.Format)
        }
    }
    ret r
}

// Parse bits from hexadecimal string.
// Returns normalized bits.
fn parse_hex(&s: str)!: bits {
    let mut buf = make(bits, 0, s.len * 4)
    let mut i = s.len - 1
    for i >= 0; i-- {
        let h = s[i]
        match h {
        | '0':
            buf = append(buf, 0b0, 0b0, 0b0, 0b0)
        | '1':
            buf = append(buf, 0b1, 0b0, 0b0, 0b0)
        | '2':
            buf = append(buf, 0b0, 0b1, 0b0, 0b0)
        | '3':
            buf = append(buf, 0b1, 0b1, 0b0, 0b0)
        | '4':
            buf = append(buf, 0b0, 0b0, 0b1, 0b0)
        | '5':
            buf = append(buf, 0b1, 0b0, 0b1, 0b0)
        | '6':
            buf = append(buf, 0b0, 0b1, 0b1, 0b0)
        | '7':
            buf = append(buf, 0b1, 0b1, 0b1, 0b0)
        | '8':
            buf = append(buf, 0b0, 0b0, 0b0, 0b1)
        | '9':
            buf = append(buf, 0b1, 0b0, 0b0, 0b1)
        | 'A':
            buf = append(buf, 0b0, 0b1, 0b0, 0b1)
        | 'B':
            buf = append(buf, 0b1, 0b1, 0b0, 0b1)
        | 'C':
            buf = append(buf, 0b0, 0b0, 0b1, 0b1)
        | 'D':
            buf = append(buf, 0b1, 0b0, 0b1, 0b1)
        | 'E':
            buf = append(buf, 0b0, 0b1, 0b1, 0b1)
        | 'F':
            buf = append(buf, 0b1, 0b1, 0b1, 0b1)
        |:
            error(BigError.Format)
        }
    }
    fit(buf)
    ret buf
}

// Parse bits from octal string.
// Returns normalized bits.
fn parse_octal(&s: str)!: bits {
    let mut buf = make(bits, 0, s.len * 3)
    let mut i = s.len - 1
    for i >= 0; i-- {
        match s[i] {
        | '0':
            buf = append(buf, 0b0, 0b0, 0b0)
        | '1':
            buf = append(buf, 0b1, 0b0, 0b0)
        | '2':
            buf = append(buf, 0b0, 0b1, 0b0)
        | '3':
            buf = append(buf, 0b1, 0b1, 0b0)
        | '4':
            buf = append(buf, 0b0, 0b0, 0b1)
        | '5':
            buf = append(buf, 0b1, 0b0, 0b1)
        | '6':
            buf = append(buf, 0b0, 0b1, 0b1)
        | '7':
            buf = append(buf, 0b1, 0b1, 0b1)
        |:
            error(BigError.Format)
        }
    }
    fit(buf)
    ret buf
}

fn parse_decimal(&s: str)!: []byte {
    let mut sb = stobs(s)
    let mut buf = make([]byte, 0, s.len * 4)
loop:
    for {
        let d = sb[sb.len-1] - '0'
        buf = append(buf, d%2)
        let mut carry = byte(0)
        for i, b in sb {
            let t = carry*10 + (b - '0')
            sb[i] = '0' + (t >> 1)
            carry = t % 2
        }
        for i in sb {
            if sb[i] != '0' {
                sb = sb[i:]
                continue loop
            }
        }
        break
    }
    fit(buf)
    ret buf
}

fn format_binary(&b: bits): []byte {
    if b.len == 0 {
        ret ['0']
    }
    let mut buf = make([]byte, b.len)
    for i in buf {
        buf[i] = '0' + b[b.len - i - 1]
    }
    ret buf
}

fn format_decimal_part(mut &buf: []byte, m: byte) {
    let mut carry = ^m & 0b1
    let n = buf.len
    for in buf {
        let digit = buf[n - 1] - '0'
        let value = (digit << m) + carry
        buf = append(buf[:1], buf...)
        buf[0] = '0' + (value % 10)
        carry = value / 10
    }
    buf = buf[:n]
    if carry > 0 {
        buf = append(buf[:1], buf...)
        buf[0] = '0' + carry
    }
}

fn format_decimal(&b: bits): []byte {
    let mut buf = make([]byte, 1, b.len >> 1)
    buf[0] = '0'
    for _, bit in format_binary(b) {
        format_decimal_part(buf, 1)
        if bit == '1' {
            format_decimal_part(buf, 0)
        }
    }
    ret buf
}

fn format_octal(&b: bits): []byte {
    let n = b.len - b.len%3
    let mut buf = make([]byte, 1, b.len / 3 + 1)
    let mut i = 0
    for i < n; i += 3 {
        buf = append(buf[:1], buf...)
        let c = b[i:i + 3]
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0:
            buf[0] = '0'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0:
            buf[0] = '3'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '7'
        }
    }
    let c = b[n:]
    match c.len {
    | 1:
        buf = append(buf[:1], buf...)
        buf[0] = '1'
    | 2:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b1 && c[1] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1:
            buf[0] = '3'
        }
    }
    ret buf[:buf.len - 1]
}

fn format_hex(&b: bits): []byte {
    let n = b.len - b.len%4
    let mut buf = make([]byte, 1, b.len / 4 + 1)
    let mut i = 0
    for i < n; i += 4 {
        buf = append(buf[:1], buf...)
        let c = b[i:i + 4]
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '0'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '1'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b0:
            buf[0] = '3'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b0:
            buf[0] = '7'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = '8'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = '9'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = 'A'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b0 && c[3] == 0b1:
            buf[0] = 'B'
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'C'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'D'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'E'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1 && c[3] == 0b1:
            buf[0] = 'F'
        }
    }
    let c = b[n:]
    match c.len {
    | 1:
        buf = append(buf[:1], buf...)
        buf[0] = '1'
    | 2:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b0 && c[1] == 0b1:
            buf[0] = '2'
        | c[0] == 0b1 && c[1] == 0b1:
            buf[0] = '3'
        }
    | 3:
        buf = append(buf[:1], buf...)
        match {
        | c[0] == 0b0 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '4'
        | c[0] == 0b1 && c[1] == 0b0 && c[2] == 0b1:
            buf[0] = '5'
        | c[0] == 0b0 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '6'
        | c[0] == 0b1 && c[1] == 0b1 && c[2] == 0b1:
            buf[0] = '7'
        }
    }
    ret buf[:buf.len - 1]
}
