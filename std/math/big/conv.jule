// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Parse bits from binary string.
fn parse_binary(s: str)!: bits {
    if s == "" {
        error(BigError.Format)
    }
    // Eliminate initial-zeros to normalize and fit minimum mandatory bit-size.
    let mut j = 0
    for j < s.len; j++ {
        if s[j] != '0' {
            break
        }
    }
    if s.len == j {
        // All bits are zero.
        ret nil
    }
    let mut r = make(bits, 0, s.len - j)
    let mut k = s.len - 1
    for k >= j; k-- {
        match s[k] {
        | '1':
            r = append(r, 0b1)
        | '0':
            r = append(r, 0b0)
        |:
            error(BigError.Format)
        }
    }
    ret r
}
