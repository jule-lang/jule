// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Single bit.
type bit: byte

// In internal order, bits are stored in reversed order for performance purposes.
type bits: []bit

const INT_SIZE = 32 << (^uint(0) >> 63)

fn u64_from_bits(b: bits): u64 {
    let mut u = u64(0)
    for i, bit in b {
        u |= u64(bit) << i
    }
    ret u
}

// Add one to bits.
// Equals to x++ operator.
fn add_one(mut &b: bits): (carry: bit) {
    for i, x in b {
        if x == 0 {
            b[i] = 1
            ret 0b0
        }
        b[i] = 0
    }
    ret 0b1
}

// Subrract one from bits.
// Equals to x-- operator.
fn sub_one(mut &b: bits) {
    let mut j = 0
    for i, x in b {
        if x == 0b1 {
            b[i] = 0b0
            j = i
            break
        }
        b[i] = 0
    }
    for i in b[:j] {
        b[i] = 0b1
    }
}

fn reverse(mut &b: bits) {
    let mut i = 0
    for i < b.len >> 1; i++ {
        b.swap(i, b.len - 1 - i)
    }
}

// Add bits with size responsive.
fn add_res(mut &x: bits, &y: bits) {
    let mut carry = bit(0)
    match {
    | y.len == 1:
        carry = add_one(x)
    | x.len == y.len:
        carry = add_fast(x, y)
    | x.len > y.len:
        carry = add_rfast(x, y)
    |:
        x, carry = add(y, x)
    }
    if carry == 0b1 {
        x = append(x, 0b1)
    }
}

// Subtract bits with size responsive.
fn sub_res(mut &x: bits, y: bits) {
    let mut carry = bit(0)
    match {
    | y.len == 1:
        twos_complement(x)
        carry = add_one(x)
    | x.len == y.len:
        twos_complement(x)
        carry = add_fast(x, y)
    | x.len > y.len:
        twos_complement(x)
        carry = add_rfast(x, y)
    |:
        let mut xn = make(bits, y.len)
        _ = copy(xn, x)
        x = xn
        twos_complement(x)
        carry = add_fast(x, y)
    }
    if carry == 0b0 {
        twos_complement(x)
    }
}

// Bitwise or.
// a's bitsize should be have same or greather than b's bitsize.
fn or(mut &a: bits, &b: bits) {
    for i in b {
        a[i] |= b[i]
    }
}

// Bitwise xor.
// a's bitsize should be have same or greather than b's bitsize.
fn xor(mut &a: bits, &b: bits) {
    for i in b {
        a[i] ^= b[i]
    }
}

// Bitwise and.
// a's bitsize should be have same or greather than b's bitsize.
fn and(mut &a: bits, &b: bits) {
    for i in b {
        a[i] &= b[i]
    }
    // Clean trailing bits.
    if a.len > b.len {
        let mut trail = a[b.len:]
        for i in trail {
            trail[i] = 0b0
        }
    }
}

// Update bits by 1's complement.
fn ones_complement(mut &b: bits) {
    for i, x in b {
        b[i] = ^x & 0b1
    }
}

// Update bits by 2's complement.
fn twos_complement(mut &b: bits) {
    ones_complement(b)
    _ = add_one(b)
}

// Addition operation on operand bits.
// Returns bits and carry.
// Carry is guaranteed to be 0b0 or 0b1.
// Does not allocates new bits for result, updates elements of x.
// x and y should be have same bitsize.
fn add_fast(mut &x: bits, &y: bits): (carry: bit) {
    for i, xbit in x {
        let ybit = y[i]
        x[i] = xbit ^ ybit ^ carry
        carry = (xbit & ybit) | (xbit & carry) | (ybit & carry)
    }
    ret
}

// Addition operation on operand bits.
// Returns bits and carry.
// Carry is guaranteed to be 0b0 or 0b1.
// Does not allocates new bits for result, updates elements of x.
// y implies imaginary zero-bits for missing part if y.bit-size < x.bit-size.
fn add_rfast(mut &x: bits, &y: bits): (carry: bit) {
    for i, xbit in x {
        let mut ybit = bit(0b0)
        if i < y.len {
            ybit = y[i]
        }
        x[i] = xbit ^ ybit ^ carry
        carry = (xbit & ybit) | (xbit & carry) | (ybit & carry)
    }
    ret
}

// Addition operation on operand bits.
// Returns bits and carry.
// Carry is guaranteed to be 0b0 or 0b1.
// y implies imaginary zero-bits for missing part if y.bit-size < x.bit-size.
fn add(&x: bits, &y: bits): (r: bits, carry: bit) {
    r = make(bits, 0, x.len)
    for i, xbit in x {
        let mut ybit = bit(0b0)
        if i < y.len {
            ybit = y[i]
        }
        r = append(r, xbit ^ ybit ^ carry)
        carry = (xbit & ybit) | (xbit & carry) | (ybit & carry)
    }
    ret
}

// Eliminates initial-zeros, normalizes bits.
fn fit(mut &b: bits) {
    let mut i = b.len - 1
    for i >= 0; i-- {
        if b[i] != 0b0 {
            break
        }
    }
    b = b[:i + 1]
}

// Same as fit, but designed for normal order bits.
fn fit_rev(mut &b: bits) {
    for i, bit in b {
        if bit != 0b0 {
            b = b[i:]
            break
        }
    }
}

// Compares bits. Bits should be normalized.
// Returns +1 if x > y.
// Returns 0 if x == y.
// Returns -1 if x < y.
fn cmp(x: bits, &y: bits): int {
    match {
    | x.len < y.len:
        ret -1
    | x.len > y.len:
        ret +1
    }
    let mut i = x.len - 1
    for i >= 0; i-- {
        let xbit = x[i]
        let ybit = y[i]
        match {
        | xbit > ybit:
            ret +1
        | xbit < ybit:
            ret -1
        }
    }
    ret 0
}

// Same as cmp, but designed for normal order bits.
fn cmp_rev(mut &x: bits, mut &y: bits): int {
    match {
    | x.len < y.len:
        ret -1
    | x.len > y.len:
        ret +1
    }
    for i in x {
        let xbit = x[i]
        let ybit = y[i]
        match {
        | xbit > ybit:
            ret +1
        | xbit < ybit:
            ret -1
        }
    }
    ret 0
}

// Reports whether number is odd that represented by bits.
fn is_odd(&b: bits): bool {
    ret b.len > 0 && b[0] == 0b1
}

// Reports whether number is even that represented by bits.
fn is_even(&b: bits): bool {
    ret b.len > 0 && b[0] == 0b0
}

// Basic multiplication algorithm for bits.
fn basic_mul(mut &x: bits, mut y: bits): bits {
    if y.len == 1 {
        ret x
    }
    let mut r: bits = nil
    let mut m = make(bits, x.len, x.len << 1)
    _ = copy(m, x)
    for y.len > 0 {
        if is_odd(y) {
            add_res(r, m)
        }
        m = append(m[:1], m...)
        m[0] = 0b0
        y = y[1:]
    }
    ret r
}

fn karatsuba_add(mut x: bits, mut y: bits): bits {
    reverse(x)
    reverse(y)
    defer {
        reverse(x)
        reverse(y)
    }

    let mut carry = bit(0)
    let mut r: bits = nil
    match {
    | x.len == y.len:
        r, carry = add(x, y)
    | x.len > y.len:
        r, carry = add(x, y)
    |:
        r, carry = add(y, x)
    }
    if carry == 0b1 {
        r = append(r, 0b1)
    }
    reverse(r)
    ret r
}

fn karatsuba_sub(mut x: bits, mut y: bits): bits {
    x = clone(x)
    reverse(x)
    reverse(y)

    sub_res(x, y)
    reverse(x)
    reverse(y)
    ret x
}

fn karatsuba_shl(mut s: bits, n: int): bits {
    ret append(s, make(bits, n)...)
}

// This threshold is represents number of bits small numbers for karatsuba algorithm.
// If the y operand's bitlength <= threshold, use basic multiplication algorithm.
const KARATSUBA_THRESHOLD = 1 << 5 + 8

fn karatsuba(mut x: bits, mut y: bits): bits {
    let n = max(x.len, y.len)
    if n == 1 {
        if x.len == 0 || y.len == 0 || x[0] == 0b0 || y[0] == 0b0 {
            ret nil
        }
        ret [1]
    }

    if y.len < KARATSUBA_THRESHOLD {
        reverse(x)
        reverse(y)
        let mut r = basic_mul(x, y)
        reverse(x)
        reverse(y)
        reverse(r)
        ret r
    }

    let m = n >> 1
    let mut xl = x[:m]
    let mut xr = x[m:]
    let mut yl = y[:m]
    let mut yr = y[m:]

    let mut p1 = karatsuba(xl, yl)
    let mut p2 = karatsuba(xr, yr)
    let mut p3 = karatsuba(karatsuba_add(xl, xr), karatsuba_add(yl, yr))

    let mut c2 = karatsuba_shl(karatsuba_sub(p3, karatsuba_add(p1, p2)), n - m)
    let mut c1 = karatsuba_shl(p1, (n - m) << 1)
    ret karatsuba_add(karatsuba_add(c1, c2), p2)
}

// Recursion division algorithm. It will update left operand if necessary.
// Uses bit shifting strategy.
// Returns quotient.
//
// The Theory and How it Fast?
//
//     In the worst case, the algorithm performs three allocations. One of them is for x.
//     Because x is used directly and its value is changed. The other one is q, that is,
//     quotient allocation. This is also used directly and its value changes. The algorithm
//     only has these potential allocations before it is used, it will  not result in any
//     additional allocations. The third allocation is s which is stores sum of
//     quetient parts.
//
//     s will be used to collect all quotient parts. It must be allocated beforehand
//     and must be the same as the bit length of x and initialized with zero.
//     Thus, the carry check can be skipped because there will never be an overflow
//     and the total quotient cannot be greater than the dividend. When the algorithm
//     is completed, s will store the quotient to be calculated.
//
//     q will be used to find the y<<n which is closest to x at each step.
//     Therefore it will always be equal or greater than x. q is evaluated to be
//     equal to x in the worst case. Therefore, before q is used in the algorithm,
//     it must be allocated the length of x. Its value must be initialized with y.
//     y will always be less than x. Therefore, there will be a difference in the
//     number of bits between them. The q << n operation must be applied as much as
//     the difference in the remaining number of bits. This will produce y<<n which
//     is greater than or equal to the calculation closest to x.
//
//         For example:
//           x = 1101100110000100101001001111101111000110101
//           y = 1011001
//           q = 1011001000000000000000000000000000000000000
//
//         For example:
//           x = 1101100110000100101001001111101111000110101
//           y = 111
//           q = 1110000000000000000000000000000000000000000
//
//     To calculate s correctly, the quotient must be summed to the result at
//     each step. So s += quotient. q is not exactly a quotient. Let's say a y<<36.
//     q refers to the closest number that can be reached by shifting x from y.
//     So a q with y<<36 means 36 shifts have been made. But this is not the count of
//     additions of y with itself 36 times, so it cannot be used as a quotient.
//     To calculate quotient correctly, 1<<n must be calculated using the number
//     of shifts of q. This is exactly y<<n equals to how many y's are added together.
//     So 1<<36 is equals to actual quotient of q which is should add to s.
//
//  Proof and Example
//
//     Out case: 7473866464821 % 89;
//     Which is:
//         x = 7473866464821         | 1101100110000100101001001111101111000110101
//         y = 89                    | 1011001
//         q = 6116033429504 (y<<36) | 1011001000000000000000000000000000000000000
//         s = 0                     | 0000000000000000000000000000000000000000000
//
//     q was calculated as described and resulted in exactly y<<36.
//     This supports the claim that for this case this calculation will always
//     produce y<<n greater than or exactly closest to x.
//
//     The theory then claims that q can be reduced in the same way after each step,
//     which will be faster because there will often be right shifts are more close
//     to next closest y<<n to x than starting to compute from y<<1 again.
//
//       Execution:
//
//           1.       1<<36
//           2.       1<<33
//           3.       1<<32
//           4.       1<<31
//           5.       1<<27
//           6.       1<<26
//           7.       1<<24
//           8.       1<<22
//           9.       1<<20
//           10.      1<<19
//           11.      1<<18
//           12.      1<<14
//           13.      1<<13
//           14.      1<<12
//           15.      1<<11
//           16.      1<<10
//           17.      1<<9
//           18.      1<<5
//           19.      1<<3
//           20.      1<<2
//           21.      1<<1
//                 +
//                 -----------
//                 83976027694
//
fn recursive_div(mut &x: bits, mut &y: bits, mut &s: bits, mut &q: bits) {
    match cmp(x, y) {
    | -1:
        ret
    | 0:
        add_one(s)
        ret
    }
    for cmp(q, x) == +1 {
        q = q[1:]
    }
    if q.len == y.len {
        add_one(s)
        ret
    }
    sub_res(x, q)
    fit(x)
    let mut sq = q[:q.len - y.len + 1]
    let mut &last = unsafe { *(&sq[sq.len - 1]) }
    let old = last
    last = 0b1
    add_rfast(s, sq)
    last = old
    recursive_div(x, y, s, q)
}

// Recursion modulo algorithm. It will update left operand if necessary.
// Uses bit shifting strategy.
// Returns remainder.
//
// The Theory and How it Fast?
//
//     In the worst case, the algorithm performs two allocations. One of them is for x.
//     Because x is used directly and its value is changed. The other one is q, that is,
//     quotient allocation. This is also used directly and its value changes. The algorithm
//     only has these potential allocations before it is used, it will  not result in any
//     additional allocations.
//
//     q will be used to find the y<<n which is closest to x at each step.
//     Therefore it will always be equal or greater than x. q is evaluated to be
//     equal to x in the worst case. Therefore, before q is used in the algorithm,
//     it must be allocated the length of x. Its value must be initialized with y.
//     y will always be less than x. Therefore, there will be a difference in the
//     number of bits between them. The q << n operation must be applied as much as
//     the difference in the remaining number of bits. This will produce y<<n which
//     is greater than or equal to the calculation closest to x.
//
//         For example:
//           x = 1101100110000100101001001111101111000110101
//           y = 1011001
//           q = 1011001000000000000000000000000000000000000
//
//         For example:
//           x = 1101100110000100101001001111101111000110101
//           y = 111
//           q = 1110000000000000000000000000000000000000000
//
//     At each step, the algorithm first makes a comparison for x and y.
//     If they are equal, it returns zero since there will be no remainder.
//     In case x < y, it returns x since the remainder will be x.
//
//     Then q is calculated for the nearest y<<n that is less than or equal to x.
//     Since q will always be greater than or equal to x, only the shifted bits should be
//     shifted to the right until this condition is met. This is faster than starting from y<<1
//     and going all the way to y<<n at each step. Usually, the peak is at a number close to
//     the bits of the divisor (x). Therefore, it is wiser to drop back from the total number of bits.
//
//     Then q will be subtracted from x, thus reducing the value of x by often more than x/2.
//     Then the process is repeated. q is left untouched because it satisfies the condition
//     that it will always be greater than or equal to x. So q can always be shifted to the
//     right to reach a nearby number.
//
//  Proof and Example
//
//     Out case: 7473866464821 % 89;
//     Which is:
//         x = 7473866464821         | 1101100110000100101001001111101111000110101
//         y = 89                    | 1011001
//         q = 6116033429504 (y<<36) | 1011001000000000000000000000000000000000000
//
//     q was calculated as described and resulted in exactly y<<36.
//     This supports the claim that for this case this calculation will always
//     produce y<<n greater than or exactly closest to x.
//
//     The theory then claims that q can be reduced in the same way after each step,
//     which will be faster because there will often be right shifts are more close
//     to next closest y<<n to x than starting to compute from y<<1 again.
//
//       Execution:
//
//                    x          q
//           1. 7473866464821 - y<<36
//           2. 1357833035317 - y<<33
//           3.  593328856629 - y<<32
//           4.  211076767285 - y<<31
//           5.   19950722613 - y<<27
//           6.    8005344821 - y<<26
//           7.    2032655925 - y<<24
//           8.     539483701 - y<<22
//           9.     166190645 - y<<20
//           10.     72867381 - y<<19
//           11.     26205749 - y<<18
//           12.      2874933 - y<<14
//           13.      1416757 - y<<13
//           14.       687669 - y<<12
//           15.       323125 - y<<11
//           16.       140853 - y<<10
//           17.        49717 - y<<9
//           18.         4149 - y<<5
//           19.         1301 - y<<3
//           20.          589 - y<<2
//           21.          233 - y<<1
//                         55 = remainder, x < y
//
fn recursive_mod(mut &x: bits, &y: bits, mut &q: bits): bits {
    match cmp(x, y) {
    | 0:
        ret nil
    | -1:
        ret x
    }
    for cmp(q, x) == +1 {
        q = q[1:]
    }
    sub_res(x, q)
    fit(x)
    ret recursive_mod(x, y, q)
}
