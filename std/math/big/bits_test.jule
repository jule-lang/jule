// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

static cases_twos_complement: [][]bits = [
    [[0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0]],
    [[1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1]],
    [[1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1]],
    [[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]],
    [[1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1]],
    [[0, 1, 0, 1, 0], [0, 1, 1, 0, 1]],
    [[0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1]],
]

#test
fn test_u64_from_bits(mut t: &T) {
    t.assert(u64_from_bits([0, 1, 0, 1, 1, 0, 1]) == 90, "1) 1011010 != 90")
    t.assert(u64_from_bits([0, 0, 0, 1, 1, 0, 1, 1, 1, 1]) == 984, "2) 1111011000 != 984")
    t.assert(u64_from_bits([1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1]) == 9739573948397, "3) 10001101101110101011110110000110111111101101 != 9739573948397")
    t.assert(u64_from_bits([0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1]) == 8984, "4) 10001100011000 != 8984")
}

#test
fn test_twos_complement(mut t: &T) {
    for _, case in cases_twos_complement {
        let mut x = clone(case[0])
        let y = case[1]
        twos_complement(x)
        if cmp(x, y) != 0 {
            t.errorf("{} != {}", case[0], y)
        }
    }
}
