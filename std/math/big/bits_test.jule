// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use "std/testing"

static casesTwosComplement: [][]bits = [
	[[0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0]],
	[[1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1]],
	[[1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1]],
	[[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]],
	[[1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1]],
	[[0, 1, 0, 1, 0], [0, 1, 1, 0, 1]],
	[[0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1]],
]

#test
fn testU64FromBits(t: &testing::T) {
	t.Assert(u64FromBits([0, 1, 0, 1, 1, 0, 1]) == 90, "1) 1011010 != 90")
	t.Assert(u64FromBits([0, 0, 0, 1, 1, 0, 1, 1, 1, 1]) == 984, "2) 1111011000 != 984")
	t.Assert(u64FromBits([1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1]) == 9739573948397, "3) 10001101101110101011110110000110111111101101 != 9739573948397")
	t.Assert(u64FromBits([0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1]) == 8984, "4) 10001100011000 != 8984")
}

#test
fn testTwosComplement(t: &testing::T) {
	for _, case in casesTwosComplement {
		mut x := cloneBits(case[0])
		y := case[1]
		twosComplement(x)
		if cmp(x, y) != 0 {
			t.Errorf("{} != {}", case[0], y)
		}
	}
}