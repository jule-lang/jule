// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp use "<chrono>"
cpp use "thread.hpp"

#namespace "std"
#typedef
cpp struct thread {
    detach:   fn()
    join:     fn()
    joinable: fn(): bool
}

#typedef
cpp struct __jule_thread_handle {
    thread:    fn(): *cpp.thread
    ref_count: fn(): uint
    drop:      fn()
}

// Safe mask for std::chrono::nanoseconds type.
// Used for avoid implicit casting for numeric types.
cpp type chrono_ns: u64

// Safe mask for std::chrono::nanoseconds type.
// Used for casting.
#namespace "std::chrono"
cpp fn nanoseconds(x: u64): cpp.chrono_ns

#namespace "std::this_thread"
cpp fn sleep_for(x: cpp.chrono_ns)

cpp fn __jule_spawn_thread(routine: fn()): cpp.__jule_thread_handle

// Thread is a wrapper structure for native threads.
// It uses C++ threads in itself. It automatically detaches when destroyed.
// It supports the use of common interface. For this, it allocates
// the related thread object on the heap and provides memory safety
// with reference counting. It is destroyed when the internal thread
// reference count reaches to zero. In assignment operations, all
// thread instances point to the same allocation.
//
// It is experimental.
pub struct Thread {
    handle: cpp.__jule_thread_handle
}

impl Thread {
    // Spawns new thread by routine.
    // Panics if routine is nil.
    // Thread starts execution of routine when spawned.
    pub static fn spawn(routine: fn()): &Thread {
        if routine == nil {
            panic("std::thread Thread.spawn: routine is nil")
        }
        ret &Thread{
            handle: cpp.__jule_spawn_thread(routine),
        }
    }

    // Stop execution of caller thread by nanoseconds.
    // This functions only affects execution of caller thread, not process.
    pub static fn sleep(ns: u64) {
        cpp.sleep_for(cpp.nanoseconds(ns))
    }
}

impl Thread {
    // Wait for complete execution of thread if active.
    // Returns when the thread execution has completed.
    // So program stops execution until thread's execution has completed.
    //
    // Panics if thread is not active.
    pub fn wait(self) {
        if !self.active() {
            panic("std::thread Thread.wait: thread is not active")
        }
        unsafe { self.handle.thread().join() }
        self.handle.drop()
    }

    // Detach thread and make it independent.
    // After this, this thread object can no longer identify thread.
    pub fn detach(self) {
        if !self.active() {
            panic("std::thread Thread.detach: thread is not active")
        }
        unsafe { self.handle.thread().detach() }
        self.handle.drop()
    }

    // Reports whether thread object identifies an active
    // thread of execution.
    pub fn active(self): bool {
        if self.handle.thread() == nil {
            ret false
        }
        ret unsafe { self.handle.thread().joinable() }
    }

    // Detaches thread if thread is still executing.
    pub fn dispose(mut self) {
        if self.active() && self.handle.ref_count() == 1 {
            unsafe { self.handle.thread().detach() }
        }
        self.handle.drop()
    }
}
