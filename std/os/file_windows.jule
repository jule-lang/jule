// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/poll"
use integ "std/jule/integrated"
use "std/runtime"
use "std/sys"
use "std/unicode/utf16"
use "std/unicode/utf8"

impl File {
	// Opens file stream with named file, specified flag
	// (O_RDWR, O_TRUNC etc.) and perm. If named file does
	// not exist and O_CREATE flag is passed, will created with
	// mode (before umask). If successful, returns File reference with handle
	// to file stream and the reference can used for I/O operations.
	static fn Open(path: str, flag: oFlag, mode: int)!: &File {
		utf16Path := integ::UTF16FromStr(path)
		handle := unsafe { sys::Wopen(&utf16Path[0], int(flag), mode) }
		if handle == -1 {
			error(getLastFsError())
		}
		ret &File{fd: poll::FD.New(u64(handle), poll::FDKind.File)}
	}

	// Removes named file.
	static fn Remove(path: str)! {
		utf16Path := integ::UTF16FromStr(path)
		if unsafe { !sys::DeleteFile(&utf16Path[0]) } {
			error(getLastFsErrorWindows())
		}
	}
}

impl File {
	// Writes bytes to handle and returns written byte count.
	// The number of bytes written can never exceed the length of the buf.
	//
	// Implements the io::Writer trait.
	fn Write(mut self, buf: []byte)!: (n: int) {
		n, ok := self.fd.Write(buf)
		if !ok {
			if self.fd.Kind == poll::FDKind.File {
				error(getLastFsError())
			}
			error(getLastFsErrorWindows())
		}
		ret
	}

	// Read bytes to buffer from handle and returns read byte count.
	// The number of bytes read can never exceed the length of the buf.
	// If the buf is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	//
	// Implements the io::Reader trait.
	fn Read(mut self, mut buf: []byte)!: (n: int) {
		n, ok := self.fd.Read(buf)
		if !ok {
			if self.fd.Kind == poll::FDKind.File {
				error(getLastFsError())
			}
			error(getLastFsErrorWindows())
		}
		ret
	}
}