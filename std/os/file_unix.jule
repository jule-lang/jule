// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/runtime"
use "std/sys"

impl File {
	// Opens file stream with named file, specified flag
	// (O_RDRW, O_TRUNC etc.) and perm. If named file does
	// not exist and O_CREATE flag is passed, will created with
	// mode (before umask). If successful, returns File reference with handle
	// to file stream and the reference can used for I/O operations.
	//
	// Possible errors (FSError):
	//  Denied Exist Signal SyncIO IO IsDir Loop PerProcessLimit LongPath
	//  SystemWideLimit NotExist UnableStream NoSpace NotDir Device Overflow
	//  ReadOnly Retry Busy
	static fn Open(path: str, flag: oFlag, mode: int)!: &File {
		s := integ::StrToBytes(path)
		handle := unsafe { sys::Open(&s[0], int(flag), mode) }
		if handle == -1 {
			error(getLastFsError())
		}
		ret unsafe { File.New(uintptr(handle)) }
	}

	// Removes named file.
	//
	// Possible errors (FSError):
	//  Denined Busy LongPath NotExist InsufficientMemory NotDir
	static fn Remove(path: str)! {
		s := integ::StrToBytes(path)
		if unsafe { sys::Unlink(&s[0]) } != 0 {
			error(getLastFsError())
		}
	}
}

impl File {
	// Writes bytes to handle and returns writed byte count.
	// The number of bytes written can never exceed the length of the buf.
	//
	// Possible errors (FSError):
	//  Retry InvalidDescriptor Big Signal IO NoSpace Pipe Range SyncIO
	//  Seek Device Buffer
	//
	// Implements the io::Writer trait.
	fn Write(mut self, buf: []byte)!: (n: int) {
		if len(buf) == 0 {
			ret 0
		}
		runtime::handleRW(buf)
		n = unsafe { sys::Write(int(self.handle), &buf[0], uint(len(buf))) }
		if n == -1 {
			error(getLastFsError())
		}
		ret n
	}

	// Read bytes to buffer from handle and returns readed byte count.
	// The number of bytes readed can never exceed the length of the buf.
	// If the buf is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	//
	// Possible errors (FSError):
	//  Retry InvalidDescriptor Signal SyncIO IO IsDir Overflow Buffer
	//  InsufficientMemory Device Seek
	//
	// Implements the io::Reader trait.
	fn Read(mut self, mut buf: []byte)!: (n: int) {
		if len(buf) == 0 {
			ret 0
		}
		runtime::handleRW(buf)
		n = unsafe { sys::Read(int(self.handle), &buf[0], uint(len(buf))) }
		if n == -1 {
			error(getLastFsError())
		}
		ret n
	}
}