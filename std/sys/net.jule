// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"

#typedef
cpp struct fd_set{}

cpp struct in_addr {
	s_addr: u32
}

cpp struct in6_addr {
	s6_addr: [16]byte
}

cpp struct sockaddr{}

cpp struct sockaddr_in {
	sin_len:    byte
	sin_family: byte
	sin_port:   u16
	sin_addr:   cpp.in_addr
	sin_zero:   [8]integ::Char
}

cpp struct sockaddr_in6 {
	sin6_len:    byte
	sin6_family: byte
	sin6_port:   u16
	sin6_addr:   cpp.in6_addr
}

#cdef
cpp fn htons(int): u16

#cdef
cpp fn ntohs(int): u16

cpp unsafe fn select(int, *cpp.fd_set, *cpp.fd_set, *cpp.fd_set, *cpp.timeval): int

// C's sockaddr structure.
type Sockaddr: cpp.sockaddr

// C's sockaddr_in structure.
type SockaddrIn: cpp.sockaddr_in

// C's sockaddr_in6 structure.
type SockaddrIn6: cpp.sockaddr_in6

// C's fd_set structure.
type Fd: cpp.fd_set

// C's htons macro.
fn Htons(x: int): u16 {
	ret cpp.htons(x)
}

// C's ntohs macro.
fn Ntohs(x: int): u16 {
	ret cpp.ntohs(x)
}

// C's select function.
unsafe fn Select(nfds: int, mut read: *Fd, mut write: *Fd, mut err: *Fd, mut timeout: *Timeval): int {
	ret cpp.select(nfds, read, write, err, timeout)
}