// Copyright 2022-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#pass "-lshell32" // Link shell32.lib

use integ for std::jule::integrated
cpp use "<windows.h>"
cpp use "<fcntl.h>"
cpp use "<io.h>"

cpp type DWORD: u32
cpp type HANDLE: *unsafe

cpp type _mode_t: uint
cpp type _off_t: uint

cpp struct _stat {
	st_mode: cpp._mode_t
	st_size: cpp._off_t
}

#typedef
cpp struct WIN32_FIND_DATAW {
	cFileName: *integ::Wchar
}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn _wstat(path: *integ::Wchar, mut handle: *cpp._stat): int
cpp unsafe fn _wopen(path: *integ::Wchar, flag: int, mode: int): int
cpp fn GetLastError(): u32
cpp unsafe fn GetCurrentDirectoryW(bufflen: u32, buff: *integ::Wchar): u32
cpp unsafe fn SetCurrentDirectoryW(path: *integ::Wchar): bool
cpp unsafe fn GetFullPathNameW(path: *integ::Wchar, bufflen: u32, buff: *integ::Wchar, fname: **integ::Wchar): u32
cpp unsafe fn DeleteFileW(path: *integ::Wchar): bool
cpp unsafe fn CreateDirectoryW(path: *integ::Wchar, passNullHere: *bool): bool
cpp unsafe fn RemoveDirectoryW(path: *integ::Wchar): bool
cpp unsafe fn GetConsoleMode(handle: cpp.HANDLE, mut mode: *cpp.DWORD): bool
cpp unsafe fn SetConsoleMode(handle: cpp.HANDLE, mode: cpp.DWORD): bool
cpp unsafe fn WriteConsoleW(handle: cpp.HANDLE, buffer: *unsafe,
	toWrite: cpp.DWORD, written: *cpp.DWORD, reserved: *unsafe): bool
cpp unsafe fn ReadConsoleW(handle: cpp.HANDLE, mut buffer: *unsafe,
	toRead: cpp.DWORD, readed: *cpp.DWORD, inputControl: *unsafe): bool
cpp fn WSAGetLastError(): int
cpp unsafe fn FindFirstFileW(*integ::Wchar, *cpp.WIN32_FIND_DATAW): cpp.HANDLE
cpp unsafe fn FindNextFileW(cpp.HANDLE, *cpp.WIN32_FIND_DATAW): int
cpp fn FindClose(cpp.HANDLE): int

// C's stat.
type SysStat: cpp._stat

// C's WIN32_FIND_DATAW structure.
type Win32FindData: cpp.WIN32_FIND_DATAW

type Handle: uintptr

const InvalidHandle = ^Handle(0)

static STDIN = GetStdHandle(uintptr(STD_INPUT_HANDLE))
static STDOUT = GetStdHandle(uintptr(STD_OUTPUT_HANDLE))
static STDERR = GetStdHandle(uintptr(STD_ERROR_HANDLE))

fn GetStdHandle(stdh: uintptr): Handle { ret Handle(cpp.GetStdHandle(stdh)) }
unsafe fn CloseHandle(stdh: Handle): bool { ret cpp.CloseHandle(unsafe { (*unsafe)(stdh) }) }

// Calls C's _wstat function.
unsafe fn Wstat(path: *u16, mut stat: *SysStat): int {
	ret cpp._wstat((*integ::Wchar)(path), stat)
}

// Wrapper for C's _wopen function.
unsafe fn Wopen(path: *u16, flag: int, mode: int): int {
	ret cpp._wopen((*integ::Wchar)(&path[0]), flag, mode)
}

// Returns last Windows error.
fn GetLastError(): u32 { ret cpp.GetLastError() }

// Reads working directory into buff and returns readed
// rune count of current process. Returns 0 if fail.
unsafe fn GetCurrentDirectory(bufflen: u32, mut buff: *u16): u32 {
	ret cpp.GetCurrentDirectoryW(bufflen, (*integ::Wchar)(buff))
}

// Sets working directory to path.
// Reports operation is success.
unsafe fn SetCurrentDirectory(path: *u16): bool {
	ret cpp.SetCurrentDirectoryW((*integ::Wchar)(path))
}

// Delete file.
unsafe fn DeleteFile(path: *u16): bool {
	ret cpp.DeleteFileW((*integ::Wchar)(path))
}

// Creates directory.
unsafe fn CreateDirectory(path: *u16): bool {
	ret cpp.CreateDirectoryW((*integ::Wchar)(path), nil)
}

// Removes empty directory.
unsafe fn RemoveDirectory(path: *u16): bool {
	ret cpp.RemoveDirectoryW((*integ::Wchar)(path))
}

// Calls Windows's GetFullPathNameW function.
unsafe fn GetFullPathName(path: *u16, bufflen: u32,
	buff: *u16, fname: **u16): u32 {
	ret cpp.GetFullPathNameW((*integ::Wchar)(path), bufflen, (*integ::Wchar)(buff), (**integ::Wchar)(fname))
}

// Calls Windows's GetConsoleMode function.
fn GetConsoleMode(handle: Handle, mut &mode: int): bool {
	ret unsafe { cpp.GetConsoleMode(cpp.HANDLE(handle), (*cpp.DWORD)(&mode)) }
}

// Calls Windows's SetConsoleMode function.
fn SetConsoleMode(handle: Handle, mode: int): bool {
	ret unsafe { cpp.SetConsoleMode(cpp.HANDLE(handle), cpp.DWORD(mode)) }
}

// Calls Windows's WriteConsoleW function.
unsafe fn WriteConsole(handle: Handle, buffer: *u16, toWrite: u32,
	mut &written: u32, reserved: *unsafe): bool {
	ret cpp.WriteConsoleW(cpp.HANDLE(handle), (*unsafe)(buffer),
		cpp.DWORD(toWrite), (*cpp.DWORD)(written), reserved)
}

// Calls Windows's ReadConsoleW function.
// Passes nil pointer for input control.
unsafe fn ReadConsole(handle: Handle, mut buffer: *u16, toRead: u32,
	mut &readed: u32): bool {
	ret cpp.ReadConsoleW(cpp.HANDLE(handle), (*unsafe)(buffer),
		cpp.DWORD(toRead), (*cpp.DWORD)(&readed), nil)
}

// Calls Windows's WSAGetLastError function.
fn WSAGetLastError(): int {
	ret cpp.WSAGetLastError()
}

// Call's Windows FindFirstFileW function.
unsafe fn FindFirstFile(path: *u16, mut data: *Win32FindData): Handle {
	ret Handle(cpp.FindFirstFileW((*integ::Wchar)(path), data))
}

// Call's Windows FindNextFileW function.
unsafe fn FindNextFile(h: Handle, mut data: *Win32FindData): int {
	ret cpp.FindNextFileW(cpp.HANDLE(h), data)
}

// Call's Windows FindClose function.
fn FindClose(h: Handle): int {
	ret unsafe { cpp.FindClose(cpp.HANDLE(h)) }
}