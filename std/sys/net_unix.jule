// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp use "<sys/socket.h>"
cpp use "<netinet/in.h>"
cpp use "<arpa/inet.h>"

cpp fn socket(int, int, int): int
cpp unsafe fn bind(int, *cpp.sockaddr, uint): int
cpp unsafe fn connect(int, *cpp.sockaddr, uint): int
cpp fn listen(int, int): int
cpp unsafe fn accept(int, *cpp.sockaddr, len: *u32): int
cpp unsafe fn send(int, *unsafe, uint, int): int
cpp unsafe fn recv(int, *unsafe, uint, int): int

const INVALID_SOCKET = -1

// C's socket function.
fn Socket(domain: int, t: int, protocol: int): int {
    ret cpp.socket(domain, t, protocol)
}

// C's bind function.
unsafe fn Bind(handle: int, addr: *Sockaddr, len: uint): int {
    ret cpp.bind(handle, addr, len)
}

// C's connect function.
unsafe fn Connect(handle: int, addr: *Sockaddr, len: uint): int {
    ret cpp.connect(handle, addr, len)
}

// C's listen function.
fn Listen(handle: int, backlog: int): int {
    ret cpp.listen(handle, backlog)
}

// C's accept function.
unsafe fn Accept(handle: int, addr: *Sockaddr, len: *u32): int {
    ret cpp.accept(handle, addr, len)
}

// C's recv function.
unsafe fn Recv(handle: int, mut buf: *unsafe, len: uint, flags: int): int {
    ret cpp.recv(handle, buf, len, flags)
}

// C's send function.
unsafe fn Send(handle: int, mut buf: *unsafe, len: uint, flags: int): int {
    ret cpp.send(handle, buf, len, flags)
}
