// Copyright 2022-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated::{Char}
cpp use "<dirent.h>"
cpp use "<fcntl.h>"
cpp use "<unistd.h>"

#typedef
cpp struct DIR{}

cpp struct dirent {
	d_name: *Char
}

cpp type _mode_t: uint
cpp type _off_t: uint

cpp struct stat {
	st_mode: cpp._mode_t
	st_size: cpp._off_t
}

cpp fn fcntl(int, int, int): int
cpp unsafe fn opendir(path: *Char): *cpp.DIR
cpp unsafe fn closedir(mut dir: *cpp.DIR): int
cpp unsafe fn readdir(mut dir: *cpp.DIR): *cpp.dirent
cpp unsafe fn open(path: *Char, flag: int, mode: int): int
cpp unsafe fn getcwd(buff: *Char, bufflen: uint): *Char
cpp unsafe fn chdir(path: *Char): int
cpp unsafe fn remove(path: *Char): int
cpp unsafe fn mkdir(path: *Char, mode: int): int
cpp unsafe fn rmdir(path: *Char): int
cpp unsafe fn unlink(path: *Char): int

// C's DIR.
type Dir: cpp.DIR

// C's dirent.
type Dirent: cpp.dirent

// C's stat.
type SysStat: cpp.stat

static STDIN: uintptr = 0
static STDOUT: uintptr = 1
static STDERR: uintptr = 2

const F_GETFL = 3
const F_SETFL = 4

// Calls C's fcntl function.
fn Fcntl(handle: int, cmd: int, arg: int): int {
	ret cpp.fcntl(handle, cmd, arg)
}

// Calls C's stat function.
unsafe fn Stat(path: *byte, mut stat: *SysStat): int {
	ret integ::Emit[int]("stat({}, {})", (*Char)(path), stat)
}

// Wrapper for C's open function.
unsafe fn Open(path: *byte, flag: int, mode: int): int {
	ret cpp.open((*Char)(path), flag, mode)
}

// Reads current working directory into buff.
// Returns pointer to buff if success, nil pointer if error occurs.
unsafe fn Getcwd(buff: *byte, bufflen: uint): *byte {
	ret (*byte)(cpp.getcwd((*Char)(buff), bufflen))
}

// Calls C's opendir function.
unsafe fn Opendir(path: *byte): *Dir { ret cpp.opendir((*Char)(path)) }

// Calls C's readdir function.
unsafe fn Readdir(mut dir: *Dir): *Dirent { ret cpp.readdir(dir) }

// Calls C's closedir function.
unsafe fn Closedir(mut dir: *Dir): int { ret cpp.closedir(dir) }

// Calls C's chdir function.
unsafe fn Chdir(path: *byte): int { ret cpp.chdir((*Char)(path)) }

// Wrapper for C's remove function.
unsafe fn Remove(path: *byte): int { ret cpp.remove((*Char)(path)) }

// Wrapper for C's mkdir function.
unsafe fn Mkdir(path: *byte, mode: int): int {
	ret cpp.mkdir((*Char)(path), mode)
}

// Wrapper for C's rmdir function.
unsafe fn Rmdir(path: *byte): int { ret cpp.rmdir((*Char)(path)) }

// Wrapper for C's unlink function.
unsafe fn Unlink(path: *byte): int { ret cpp.unlink((*Char)(path)) }