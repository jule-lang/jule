// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns index of first matched element with specified element,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn Find[S: []E, E: comparable](s: S, e: E): int {
    for i, e2 in s {
        if e == e2 {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched element with specified element,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLast[S: []E, E: comparable](s: S, e: E): int {
    let mut i = len(s) - 1
    for i >= 0; i-- {
        if s[i] == e {
            ret i
        }
    }
    ret -1
}

// Reports whether slice includes e.
fn Contains[S: []E, E: comparable](s: S, e: E): bool {
    ret Find[S, E](s, e) >= 0
}

// Counts the number of matched elements with e in s.
fn Count[S: []E, E: comparable](s: S, e: E): (n: int) {
    for _, e2 in s {
        if e2 == e {
            n++
        }
    }
    ret
}

// Replaces matched slice elements with old to new.
// Returns count of replacements.
fn Replace[S: []E, E: comparable](mut s: S, old: E, mut new: E): (n: int) {
    for i, e in s {
        if e == old {
            s[i] = new
            n++
        }
    }
    ret
}

// Reverses elements of the slice.
fn Reverse[S: []E, E](mut s: S) {
    for i in s[:len(s)>>1] {
        s.swap(i, len(s) - i - 1)
    }
}