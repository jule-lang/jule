// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}
use math for std::math

static caseInts = [74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586, -5467984, 7586]
static caseF64s = [74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3, math::Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8, 74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3]
static caseF64sWithNaNs = [74.3, 59.0, math::Inf(1), 238.2, -784.0, 2.3, math::NaN(), math::NaN(), math::Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8]
static caseStrs = ["", "Hello", "foo", "bar", "foo", "f00", "%*&^*&^&", "***"]

#test
fn testInts(t: &T) {
    let mut case = clone(caseInts)
    Sort(case)
    if !IsSorted(case) {
        t.Errorf("sorted: {}", caseInts)
        t.Errorf("   got: {}", case)
    }
}

#test
fn testF64s(t: &T) {
    let mut case = clone(caseF64s)
    Sort(case)
    if !IsSorted(case) {
        t.Errorf("sorted: {}", caseF64s)
        t.Errorf("   got: {}", case)
    }
}

#test
fn testF64sWithNaNs(t: &T) {
    let mut case = clone(caseF64sWithNaNs)
    Sort(case)
    if !IsSorted(case) {
        t.Errorf("sorted: {}", caseF64sWithNaNs)
        t.Errorf("   got: {}", case)
    }
}

#test
fn testStrs(t: &T) {
    let mut case = clone(caseStrs)
    Sort(case)
    if !IsSorted(case) {
        t.Errorf("sorted: {}", caseStrs)
        t.Errorf("   got: {}", case)
    }
}