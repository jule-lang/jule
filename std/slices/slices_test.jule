// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

#test
fn testFind(mut t: &T) {
    let s = [1, 2, 3, 4, 6, 5, 6]
    t.Assert(Find(s, 20) == -1, "Find(s, 20) != -1")
    t.Assert(Find(s, 1) == 0, "Find(s, 1) != 0")
    t.Assert(Find(s, 2) == 1, "Find(s, 2) != 1")
    t.Assert(Find(s, 3) == 2, "Find(s, 3) != 2")
    t.Assert(Find(s, 4) == 3, "Find(s, 4) != 3")
    t.Assert(Find(s, 5) == 5, "Find(s, 5) != 5")
    t.Assert(Find(s, 6) == 4, "Find(s, 6) != 4")
}

#test
fn testFindLast(mut t: &T) {
    let s = [1, 2, 3, 4, 6, 5, 6]
    t.Assert(FindLast(s, 20) == -1, "FindLast(s, 20) != -1")
    t.Assert(FindLast(s, 1) == 0, "FindLast(s, 1) != 0")
    t.Assert(FindLast(s, 2) == 1, "FindLast(s, 2) != 1")
    t.Assert(FindLast(s, 3) == 2, "FindLast(s, 3) != 2")
    t.Assert(FindLast(s, 4) == 3, "FindLast(s, 4) != 3")
    t.Assert(FindLast(s, 5) == 5, "FindLast(s, 5) != 5")
    t.Assert(FindLast(s, 6) == 6, "FindLast(s, 6) != 6")
}

#test
fn testContains(mut t: &T) {
    let s = [1, 2, 3, 4, 6, 5, 6]
    t.Assert(!Contains(s, 20), "Contains(s, 20)")
    t.Assert(Contains(s, 1), "!Contains(s, 1)")
    t.Assert(Contains(s, 2), "!Contains(s, 2)")
    t.Assert(Contains(s, 3), "!Contains(s, 3)")
    t.Assert(Contains(s, 4), "!Contains(s, 4)")
    t.Assert(Contains(s, 5), "!Contains(s, 5)")
    t.Assert(Contains(s, 6), "!Contains(s, 6)")
}

#test
fn testCount(mut t: &T) {
    let mut s = [1, 2, 3, 4, 6, 5, 6]
    t.Assert(Count(s, 6) == 2, "Count(s, 6) != 2")

    let mut s2 = ["hello", "world", "!", "!", "!"]
    t.Assert(Count(s2, "!") == 3, "Count(s2, \"!\") != 3")

    let mut s3: []int = []
    t.Assert(Count(s3, 2) == 0, "Count(s3, 2) != 0")
}

#test
fn test_replace(mut t: &T) {
    let mut s = [1, 2, 3, 4, 6, 5, 6]
    let rs = [1, 2, 3, 4, 10, 5, 10]
    t.Assert(Replace(s, 6, 10) == 2, "Replace(s, 6, 10) != 2")
    t.Assert(s == rs, "Replace(s, 6, 10) != rs")

    let mut s2 = ["hello", "world", "!"]
    let rs2 = ["hi", "world", "!"]
    t.Assert(Replace(s2, "hello", "hi") == 1, "Replace(s2, \"hello\", \"hi\") != 1")
    t.Assert(s2 == rs2, "Replace(s2, \"hello\", \"hi\") != rs2")

    let mut s3 = [0, 1, 1, 2]
    t.Assert(Replace(s3, 3, 1) == 0, "Replace(s3, 3, 1) != 0")
    t.Assert(s3 == s3, "Replace(s3, 3, 1) != s3")
}

#test
fn testReverse(mut t: &T) {
    let mut s = [1, 2, 3, 4, 6, 5, 6]
    let rs = [6, 5, 6, 4, 3, 2, 1]
    Reverse(s)
    t.Assert(s == rs, "s != rs")

    let mut s2 = ["hello", "world", "!"]
    let rs2 = ["!", "world", "hello"]
    Reverse(s2)
    t.Assert(s2 == rs2, "s2 != rs2")

    let mut s3 = [1, 2]
    let rs3 = [2, 1]
    Reverse(s3)
    t.Assert(s3 == rs3, "s3 != rs3")
}