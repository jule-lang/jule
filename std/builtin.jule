// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Signed 8-bit integer.
type i8: [compiler_implemented]

// Signed 16-bit integer.
type i16: [compiler_implemented]

// Signed 32-bit integer.
type i32: [compiler_implemented]

// Signed 64-bit integer.
type i64: [compiler_implemented]

// Unsigned 8-bit integer.
type u8: [compiler_implemented]

// Unsigned 16-bit integer.
type u16: [compiler_implemented]

// Unsigned 32-bit integer.
type u32: [compiler_implemented]

// Unsigned 16-bit integer.
type u64: [compiler_implemented]

// 32-bit floating-point.
type f32: [compiler_implemented]

// 64-bit floating-point.
type f64: [compiler_implemented]

// It is a platform dependent integer type.
type int: [compiler_implemented]

// It is a platform dependent unsigned integer type.
type uint: [compiler_implemented]

// It is a platform dependent unsigned integer type
// that is big enough to hold a pointer.
// Can used for casting pointers to integers.
type uintptr: [compiler_implemented]

// UTF-8 byte encoded character string.
type str: [compiler_implemented]

// Boolean type for logical expressions.
type bool: [compiler_implemented]

// It can be hold any data type and nil.
// Only supports equals (==) and not equals (!=) operators.
//
// x == nil: true if any is nil, not checks whether data is nil
// x == y: true if x and y is nil
// x == y: true if x and y has same data type and returns true of equals operator of data type for two value
//
// Supports casting to any type.
// You can get type-safe value of any with casting.
// For example:
//   let my_any: any = 10
//   let x = (int)(my_any)
//
// any type protects itself against mutability if necessary.
// For example, you have slice value holds by any-typed variable.
// And your variable is immutable.
// So, if you cast your value to slice for assign to mutable variable, you will get error.
// Because of slice is mutable type, so it's breaking immutability.
//
// This is is very unsafe, also blocks deriving Clone.
// Avoid using any whenever possible.
type any: [compiler_implemented]

// Is an alias for u8.
// It is used, by convention, to distinguish byte values from 8-bit unsigned
// integer values.
type byte: u8

// Is an alias for i32.
// It is used, by convention, to distinguish character values from integer values.
type rune: i32

// Implements destructor method.
pub trait Dispose {
    pub fn dispose(mut self)
}

// Prints value to command line.
// Uses built-in formatter.
fn out(v)

// This function same with the out function.
// One difference, prints new line after print.
fn outln(v)

// Panics program with given error message.
// This panics are not recoverable.
fn panic(message: str)

// Returns new instance of data type for supported types.
//
// Slices:
//  Allocates slices dynamically. In addition
//  to the slice type, it can take two more arguments.
//  The first argument is mandatory. The first argument
//  specifies the length of the slice. The second argument
//  specifies the capacity of the slice and is optional.
//  The slice is returned with its length, and the field within its
//  length is initialized with the default value.
fn make(T, ...V): T

// Copies elements of source to destination slice.
// Returns number of copied elements.
// Source can be any data type that supported by destination type.
//
// Special cases are:
//  copy(dest, src) = length accepts as src.len if dest.len > src.len
//  copy(dest, src) = length accepts as dest.len if src.len > dest.len
fn copy(mut dest: []T, mut src: []T): int

// If there is enough capacity, it adds to the target slice.
// If there is not enough capacity, it creates a copy of the
// target slice with enough capacity and adds the new
// elements and returns the new allocation.
fn append(mut src: []T, mut items: ...T): []T

// Returns new reference-type for T initialized with default.
fn new(T): &T

// Returns new reference-type for T initialized with expression.
fn new(T, expr: T): &T

// Returns mutable deep-clone of expression.
//
// See for more cloning information:
// https://manual.jule.dev/memory/immutability
fn clone(expr: T): T

// Call panic function if expression is evaluated false at runtime.
fn assert(expr: bool)
