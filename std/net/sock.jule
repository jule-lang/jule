// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Listens the address on the named network.
// It will forward any exceptional from network connectors.
//
// See the [Connect] function for a description of the network and addr parameters.
fn Listen(network: Network, addr: str)!: Listener {
    match network {
    | Network.Tcp | Network.Tcp4 | Network.Tcp6:
        ret TcpListener.Bind(addr) else { error(error) }
    |:
        error(AddrParseError.UnknownNetwork)
    }
}

// Connects to the address on the named network.
// Network should be one of the fields of the Network enum.
// The addr parameter is should represent valid address according to network.
//
// For TCP:
//  The address has the form "host:port".
//  The host must be a literal IP address, or a host name that can be
//  resolved to IP addresses such as "localhost".
//  The port must be a literal port number or a service name.
//  If the host is a literal IPv6 address it must be enclosed in brackets,
//  as in "[2001:db8::1]:80" or "[fe80::1%zone]:80".
//  The zone specifies the scope of the literal IPv6 address as defined
//  in RFC 4007. The functions [JoinHostPort] and [SplitHostPort] manipulate
//  a pair of host and port in this form.
//
// It will forward any exceptional from network connectors.
fn Connect(network: Network, addr: str)!: Conn {
    match network {
    | Network.Tcp | Network.Tcp4 | Network.Tcp6:
        ret TcpListener.Connect(addr) else { error(error) }
    |:
        error(AddrParseError.UnknownNetwork)
    }
}