// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/mem"
use "std/sys"
use "std/time"

// TCP listener.
// In most cases, represents TCP server.
struct TcpListener {
	addr:       &TcpAddr
	mut v6:     bool
	mut handle: netHandle = sys::INVALID_SOCKET
}

impl Listener for TcpListener {}

impl TcpListener {
	// Binds new TCP listener and starts listening given address.
	// Returns relevant created &TcpListener if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Connect] function for a description of the addr parameter.
	static fn Bind(addr: str)!: &TcpListener {
		ret tcpBind(Network.Tcp, addr) else { error(error) }
	}

	// Connects to TCP listener by given address.
	// Returns relevant created &TcpConn if success.
	// If addr is not a valid address, it will forward relevant parse exceptionals.
	// In addition, any bind and listening error will be return as exceptional.
	//
	// See the [Connect] function for a description of the addr parameter.
	static fn Connect(addr: str)!: &TcpConn {
		ret tcpConnect(Network.Tcp, addr, 0) else { error(error) }
	}

	// Same as TcpListener.Connect, but uses timeout.
	static fn ConnectTimeout(addr: str, timeout: time::DurInt)!: &TcpConn {
		ret tcpConnect(Network.Tcp, addr, timeout) else { error(error) }
	}

	// Accepts incoming connection, returns &TcpConn.
	// All exceptionals are error code of implementation.
	// Panics if connection is closed.
	fn Accept(self)!: Conn {
		if self.handle == sys::INVALID_SOCKET {
			panic("std::net: TcpListener.Accept: connection is not open")
		}
		if self.v6 { // IPv6
			mut clientAddr := sys::SockaddrIn6{}
			clientAddrLen := addrLen(mem::SizeOf(clientAddr))
			handle := unsafe { sys::Accept(self.handle, (*sys::Sockaddr)(&clientAddr), &clientAddrLen) }
			if handle < 0 {
				error(lastErrorCode())
			}
			mut ip := Ip{
				Addr: make([]byte, Ipv6.Len),
			}
			unsafe {
				getSocketAddr(handle, (*sys::Sockaddr)(&clientAddr), clientAddrLen) else { error(error) }
			}
			for i in ip.Addr {
				ip.Addr[i] = clientAddr.sin6_addr.s6_addr[i]
			}
			ret &TcpConn{
				Addr: &TcpAddr{
					Ip: ip,
					Port: int(sys::Ntohs(int(clientAddr.sin6_port))),
				},
				handle: handle,
				v6: true,
			}
		} else { // IPv4
			mut clientAddr := sys::SockaddrIn{}
			clientAddrLen := addrLen(mem::SizeOf(clientAddr))
			handle := unsafe { sys::Accept(self.handle, (*sys::Sockaddr)(&clientAddr), &clientAddrLen) }
			if handle < 0 {
				error(lastErrorCode())
			}
			mut ip := Ip{
				Addr: make([]byte, Ipv4.Len),
			}
			unsafe {
				getSocketAddr(handle, (*sys::Sockaddr)(&clientAddr), clientAddrLen) else { error(error) }
			}
			bePutU64v4(ip.Addr, u64(clientAddr.sin_addr.s_addr))
			ret &TcpConn{
				Addr: &TcpAddr{
					Ip: ip,
					Port: int(sys::Ntohs(int(clientAddr.sin_port))),
				},
				handle: handle,
			}
		}
	}

	// Returns network name which is listening.
	// If connection closed, returns Network.Tcp as a general network.
	fn Network(self): Network {
		match {
		| self.handle == sys::INVALID_SOCKET:
			ret Network.Tcp
		| self.v6:
			ret Network.Tcp6
		|:
			ret Network.Tcp4
		}
	}

	// Closes connection.
	// All exceptionals are error code of implementation.
	fn Close(self)! {
		if self.handle == sys::INVALID_SOCKET {
			ret
		}
		if !closeSocket(self.handle) {
			error(lastErrorCode())
		}
		self.handle = sys::INVALID_SOCKET
		self.v6 = false
	}
}

fn tcpBind(network: Network, &addr: str)!: &TcpListener {
	mut tcpAddr := TcpAddr.Resolve(network, addr) else { error(error) }
	mut handle := netHandle(sys::INVALID_SOCKET)
	mut v6 := false
	if tcpAddr.Ip.Empty() {
		handle = sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
		if handle < 0 {
			error(lastErrorCode())
		}
		match network {
		| Network.Tcp | Network.Tcp4:
			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = sys::Htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = sys::INADDR_ANY
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					closeSocket(handle)
					error(lastErrorCode())
				}
			}
		| Network.Tcp6:
			v6 = true
			handle = sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			sockAddr.sin6_port = sys::Htons(tcpAddr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					closeSocket(handle)
					error(lastErrorCode())
				}
			}
		|:
			error(AddrError.UnknownNetwork)
		}
	} else {
		mut ipv4 := tcpAddr.Ip.To4()
		if ipv4.Empty() {
			if network == Network.Tcp4 {
				error(AddrError.NoSuitable)
			}
			v6 = true
			handle = sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			for i, b in tcpAddr.Ip.Addr {
				sockAddr.sin6_addr.s6_addr[i] = b
			}
			sockAddr.sin6_port = sys::Htons(tcpAddr.Port)
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					closeSocket(handle)
					error(lastErrorCode())
				}
			}
		} else {
			if network == Network.Tcp6 {
				error(AddrError.NoSuitable)
			}
			tcpAddr.Ip = ipv4
			handle = sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = sys::Htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = u32(beU64v4(tcpAddr.Ip.Addr))
			unsafe {
				if sys::Bind(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr)) != 0 {
					closeSocket(handle)
					error(lastErrorCode())
				}
			}
		}
	}
	const MaxQueueLength = 10 // Length of maximum connection waiters.
	if sys::Listen(handle, MaxQueueLength) < 0 {
		closeSocket(handle)
		error(lastErrorCode())
	}
	ret &TcpListener{
		v6: v6,
		addr: tcpAddr,
		handle: handle,
	}
}

fn tcpConnect(network: Network, &addr: str, timeout: time::DurInt)!: &TcpConn {
	mut tcpAddr := TcpAddr.Resolve(network, addr) else { error(error) }
	mut handle := netHandle(sys::INVALID_SOCKET)
	mut v6 := false
	if tcpAddr.Ip.Empty() {
		handle = sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
		if handle < 0 {
			error(lastErrorCode())
		}
		match network {
		| Network.Tcp | Network.Tcp4:
			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = sys::Htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = sys::INADDR_ANY
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					closeSocket(handle)
					error(error)
				}
			}
		| Network.Tcp6:
			handle = sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			sockAddr.sin6_port = sys::Htons(tcpAddr.Port)
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					closeSocket(handle)
					error(error)
				}
			}
		|:
			error(AddrError.UnknownNetwork)
		}
	} else {
		mut ipv4 := tcpAddr.Ip.To4()
		if ipv4.Empty() {
			if network == Network.Tcp4 {
				error(AddrError.NoSuitable)
			}
			v6 = true
			handle = sys::Socket(sys::AF_INET6, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn6{}
			sockAddr.sin6_family = sys::AF_INET6
			for i, b in tcpAddr.Ip.Addr {
				sockAddr.sin6_addr.s6_addr[i] = b
			}
			sockAddr.sin6_port = sys::Htons(tcpAddr.Port)
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					closeSocket(handle)
					error(error)
				}
			}
		} else {
			if network == Network.Tcp6 {
				error(AddrError.NoSuitable)
			}
			tcpAddr.Ip = ipv4
			handle = sys::Socket(sys::AF_INET, sys::SOCK_STREAM, sys::IPPROTO_TCP)
			if handle < 0 {
				error(lastErrorCode())
			}
			mut sockAddr := sys::SockaddrIn{}
			sockAddr.sin_family = sys::AF_INET
			sockAddr.sin_port = sys::Htons(tcpAddr.Port)
			sockAddr.sin_addr.s_addr = u32(beU64v4(tcpAddr.Ip.Addr))
			unsafe {
				connectSocket(handle, (*sys::Sockaddr)(&sockAddr), mem::SizeOf(sockAddr), timeout) else {
					closeSocket(handle)
					error(error)
				}
			}
		}
	}
	ret &TcpConn{
		Addr: tcpAddr,
		handle: handle,
		v6: v6,
	}
}