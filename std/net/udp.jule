// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use conv for std::internal::conv

// Represents the address of a UDP end point.
struct UdpAddr {
    Ip:   Ip
    Port: int
    Zone: str // IPv6 scoped addressing zone.
}

impl Addr for UdpAddr {
    // Returns the address's network name.
    fn Network(self): str {
        ret "udp"
    }

    // Returns string form of address.
    fn Str(self): str {
        let ip = self.Ip.ipEmptyStr()
        if self.Zone != "" {
            ret JoinHostPort(ip + "%" + self.Zone, conv::Itoa(self.Port))
        }
        ret JoinHostPort(ip, conv::Itoa(self.Port))
    }
}

impl UdpAddr {
    // Returns an address of UDP end point.
    // The network must be a UDP network name.
    //
    // See the [Connect] function for a description of the network and addr parameters.
    //
    // Exceptionals are always will be AddrError.
    static fn Resolve(mut network: Network, addr: str)!: &UdpAddr {
        match network {
        | Network.Udp | Network.Udp4 | Network.Udp6:
            break
        |:
            error(AddrError.UnknownNetwork)
        }
        let mut intAddr = resolveInternetAddr(network, addr) else { error(error) }
        if intAddr == nil {
            error(AddrError.NoSuitable)
        }
        ret (&UdpAddr)(intAddr)
    }
}