// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

struct equalCase {
    s1: []byte
    s2: []byte
    ok: bool
}

struct findByteCase {
    bytes: []byte
    b:     byte
    i:     int
}

static casesEqual: []equalCase = [
    {[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], true},
    {[]byte("abcd üöpşç"), []byte("abcd üöpşç"), true},
    {[], [], true},
    {nil, nil, true},
    {[], nil, true},
    {[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], false},
    {[1, 2, 3, 4, 5], [1, 2, 3, 4], false},
    {[1, 2, 3, 4], [1, 2, 3, 4, 5], false},
    {[1, 2, 3, 4], [], false},
    {[1, 2, 3, 4], nil, false},
]

static casesFindByte: []findByteCase = [
    {[1, 2, 3, 4, 5, 6, 5, 4], 89, -1},
    {[1, 2, 3, 4, 5, 6, 5, 4], 1, 0},
    {[1, 2, 3, 4, 5, 6, 5, 4], 4, 3},
    {[1, 2, 3, 4, 5, 6, 5, 4], 5, 4},
]

static casesFindLastByte: []findByteCase = [
    {[1, 2, 3, 4, 5, 6, 5, 4], 89, -1},
    {[1, 2, 3, 4, 5, 6, 5, 4], 1, 0},
    {[1, 2, 3, 4, 5, 6, 5, 4], 4, 7},
    {[1, 2, 3, 4, 5, 6, 5, 4], 5, 6},
]

#test
fn testEqual(t: &T) {
    for _, case in casesEqual {
        ok := Equal(case.s1, case.s2)
        if ok != case.ok {
            t.Errorf("expected {} for Equal({}, {}), found {}", case.ok, case.s1, case.s2, ok)
        }
    }
}

#test
fn testFindByte(t: &T) {
    for _, case in casesFindByte {
        i := FindByte(case.bytes, case.b)
        if i != case.i {
            t.Errorf("expected {} for FindByte({}, {}), found {}", case.i, case.bytes, case.b, i)
        }
    }
}

#test
fn testFindLastByte(t: &T) {
    for _, case in casesFindLastByte {
        i := FindLastByte(case.bytes, case.b)
        if i != case.i {
            t.Errorf("expected {} for FindByte({}, {}), found {}", case.i, case.bytes, case.b, i)
        }
    }
}