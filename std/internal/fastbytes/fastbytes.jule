// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package fastbytes implements fast algorithms for byte stacks with
// a minor dependencies, what a cheap algorithm package for byte stack functionalities.

// Reports whether two byte slices are the same length and contains same bytes.
// The nil slice considered as zero-length empty slice.
fn Equal(s1: []byte, s2: []byte): bool {
    match {
    | len(s1) != len(s2):
        ret false
    | len(s1) == 0:
        ret true
    }
    end := &s1[len(s1)-1]
    mut it1 := &s1[0]
    mut it2 := &s2[0]
    for it1 <= end {
        unsafe {
            if *it1 != *it2 {
                ret false
            }
        }
        it1++
        it2++
    }
    ret true
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of slice to right.
fn FindByte(s: []byte, b: byte): int {
    // Trust optimizations of compiler.
    for i, se in s {
        if se == b {
            ret i
        }
    }
    ret -1
}

fn findLastByte(begin: *byte, mut end: *byte, b: byte): int {
    mut it := end
    for it >= begin; it-- {
        unsafe {
            if (*it == b) {
                ret int(it - begin)
            }
        }
    }
    ret -1
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of slice to left.
fn FindLastByte(s: []byte, b: byte): int {
    if len(s) == 0 {
        ret -1
    }
    ret findLastByte(&s[0], &s[len(s)-1], b)
}

// Same as FindByte, but takes string as byte stack.
fn FindByteStr(s: str, b: byte): int {
    // Trust optimizations of compiler.
    for i, se in s {
        if se == b {
            ret i
        }
    }
    ret -1
}

// Same as FindLastByte, but takes string as byte stack.
fn FindLastByteStr(s: str, b: byte): int {
    if len(s) == 0 {
        ret -1
    }
    ret findLastByte(&s[0], &s[len(s)-1], b)
}