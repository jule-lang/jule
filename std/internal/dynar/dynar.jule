// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated
cpp use "dynar.hpp"

#typedef
#namespace "jule_std"
cpp struct DynarBuffer[T] {
    pub heap: *T
    pub len:  int
    pub cap:  int
}

#namespace "std"
cpp unsafe fn copy(mut start: *unsafe, mut end: *unsafe, mut dest: *unsafe)

unsafe fn copy[T](mut dest: *T, mut buff: *T, len: int) {
    cpp.copy(buff, buff + len, dest)
}

// Dynamic allocation on heap, suitable for dynamic array scenarios.
// Independent from slice type of Jule, pure pointer implementation.
// Implements dispose method that deallocates buffer.
// Implements internal copy algorithm that copies all elements to
// destination Dynar[T] instead of using shared memory.
//
// This structure can accept as fully unsafe.
// But all functions can use in safe Jule without Unsaf Jule.
// However, this functions have not any safet checks for performance purposes.
// Use this structure carefully.
pub struct Dynar[T] {
    pub Buff: cpp.DynarBuffer[T]
}

impl Dynar {
    pub static fn New(): Dynar[T] {
        ret Dynar[T]{}
    }

    // Deallocate heap.
    pub fn Dispose(mut self) {
        self.Buff.len = 0
        self.Buff.cap = 0
        unsafe {
            integ::DeleteArray[T](self.Buff.heap)
        }
        self.Buff.heap = nil
    }

    // Resizes heap. It will allocate new allocation by size and
    // copies old elements into new heap after allocation, then
    // deallocates old heap allocation.
    // Reports whether process completed successfuly.
    pub fn Resize(mut self, n: int): bool {
        let mut newHeap = integ::NewArray[T](n)
        if newHeap == nil {
            ret false
        }
        if self.Buff.heap == nil {
            self.Buff.heap = newHeap
            self.Buff.cap = n
            ret true
        }
        unsafe {
            let mut size = n
            if self.Buff.len <= n {
                size = self.Buff.len
            }
            if self.Buff.len > 0 {
                copy[T](newHeap, self.Buff.heap, size)
            }
            unsafe {
                integ::DeleteArray[T](self.Buff.heap)
            }
            self.Buff.heap = newHeap
        }
        self.Buff.cap = n
        ret true
    }

    // Returns pointer that points to first element of buffer.
    pub fn Begin(mut self): *T {
        ret self.Buff.heap
    }

    // Returns pointer that points to end of the last element of buffer.
    pub fn End(mut self): *T {
        ret self.Buff.heap + self.Buff.len
    }

    // Shift elements to right by n until reach i (including i).
    // Starts at end of buffer, goes to left step by step.
    pub fn ShiftRight(mut self, i: int, n: int) {
        let mut j = self.End() - 1
        let k = self.Begin() + i
        for j >= k; j-- {
            unsafe {
                *(j + n) = *j
            }
        }
    }

    // Shift elements to left by n until reach j (excluding j), start at i.
    pub fn ShiftLeft(mut self, i: int, j: int, n: int) {
        let mut k = self.Begin() + i
        let l = self.Begin() + j
        for k < l; k++ {
            unsafe {
                *(k - n) = *k
            }
        }
    }

    // Set buffer elements, starts at i.
    // Uses p for read data, reads n elements and assigns to buffer.
    pub fn Set(mut self, i: int, mut p: *T, n: int) {
        unsafe {
            copy[T](self.Begin() + i, p, n)
        }
    }
}