// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated

// Returns byte slice that uses string's allocation.
// Does not performs deallocation.
pub fn Stobs(&s: str): []byte {
    ret unsafe { integ::Emit[[]byte]("{}.fake_slice()", s) }
}

// Returns byte slice that uses array as allocation pointer.
// Does not performans deallocation.
pub fn Atobs[Array, Elem](mut &arr: Array): []Elem {
    unsafe {
        integ::Emit("{} slice", []Elem)
        integ::Emit("slice.data.alloc = {}", &arr[0])
        integ::Emit("slice.data.ref = nullptr")
        integ::Emit("slice._slice = slice.data.alloc")
        integ::Emit("slice._len = {}", arr.len)
        integ::Emit("slice._cap = {}", arr.len)
        ret integ::Emit[[]Elem]("slice")
    }
}

pub fn PushToStrBuffer(mut &s: str, b: []byte) {
    unsafe {
        integ::Emit("({}).buffer.append(({}).begin(), ({}).end())", s, b, b)
    }
}