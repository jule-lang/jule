// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

struct atoiCase {
    s: str
    n: int
    ok: bool
}

static casesAtoi: []atoiCase = [
    {"000983", 983, true},
    {"-873", -873, true},
    {"98837792362", 98837792362, true},
    {"-0000333444", -333444, true},
    {"-", 0, false},
    {"-3837avc", 0, false},
    {"44_2", 0, false},
]

struct xbtoiCase {
    s: []byte
    n: int
    i: int
    ok: bool
}

static casesXbtoi: []xbtoiCase = [
    {[]byte("FFA43"), 0xFFA43, 5, true},
    {[]byte("3344F"), 0x3344F, 5, true},
    {[]byte("0"), 0x0, 1, true},
    {[]byte("000009922A"), 0x9922A, 10, true},
    {[]byte("3837FGH"), 0x3837F, 5, true},
    {[]byte("44F2P"), 0x44F2, 4, true},
    {[]byte("F"), 0xF, 1, true},
    {[]byte("HHKLRF44AA4"), 0x0, 0, false},
]

#test
fn testAtoi(mut t: &T) {
    for _, case in casesAtoi {
        let (n, ok) = Atoi(case.s)
        if ok != case.ok {
            t.Errorf("expected {} success result for {}, found {}", case.ok, case.s, ok)
        } else if ok && n != case.n {
            t.Errorf("expected {} for {}, found {}", case.n, case.s, n)
        }
    }
}

#test
fn testXbtoi(mut t: &T) {
    for _, case in casesXbtoi {
        let (n, i, ok) = Xbtoi(case.s)
        if ok != case.ok {
            t.Errorf("expected {} success result for {}, found {}", case.ok, str(case.s), ok)
        } else if i != case.i {
            t.Errorf("expected i {} for {}, found {}", case.i, str(case.s), i)
        } else if ok && n != case.n {
            t.Errorf("expected {} for {}, found {}", case.n, str(case.s), n)
        }
    }
}