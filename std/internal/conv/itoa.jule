// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::unsafe

// Returns x in decimal string format.
fn Itoa(x: int): str {
    if x < 0 {
        ret "-" + Utoa(uint(-x))
    }
    ret Utoa(uint(x))
}

// Returns x in decimal string format.
fn Utoa(mut x: uint): str {
    if x == 0 {
        ret "0"
    }
    mut buf := make([]byte, 20 + 1) // big enough for 64bit value base 10 + null termination.
    mut i := 0
    for x >= 10 {
        q := x / 10
        buf[i] = byte('0' + x - q * 10)
        i++
        x = q
    }
    // x < 10
    buf[i] = byte('0' + x)
    i++
    buf = append(buf, 0) // Null termination.
    buf = buf[:i]
    rev(buf)
    ret unsafe::StrFromBytes(buf)
}

fn rev(mut &b: []byte) {
    mut i := 0
    for i < len(b)>>1; i++ {
        b[i], b[len(b)-1-i] = b[len(b)-1-i], b[i]
    }
}