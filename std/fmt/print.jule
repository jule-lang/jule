// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{File}
use io for std::io

// Prints arguments to file by default formatting.
// See documentation of format function for formatting.
fn Fprint(mut f: &File, args: ...any) {
    for _, arg in args {
        f.Write(fmtByDefault(arg)) else {
            panic("std::fmt: Fprint: error occurs when printing")
        }
    }
}

// Prints arguments to file by default formatting.
// Prints new-line after arguments.
// See documentation of format function for formatting.
fn Fprintln(mut f: &File, args: ...any) {
    Fprint(f, args...)
    Fprintf(f, "\n")
}

// Prints result of formatting to file.
// See documentation of format function for formatting.
fn Fprintf(mut f: &File, fmt: str, args: ...any) {
    f.Write(formatBytes(fmt, args...)) else {
        panic("std::fmt: Fprintf: error occurs when printing")
    }
}

// Prints result of formatting to stdout.
// See documentation of format function for formatting.
fn Printf(fmt: str, args: ...any) {
    Fprintf(io::Stdout().File(), fmt, args...)
}

// Prints arguments by default formatting to stdout.
fn Print(args: ...any) {
    Fprint(io::Stdout().File(), args...)
}

// Prints arguments by default formatting to stdout.
// Prints new-line after arguments.
fn Println(args: ...any) {
    Fprintln(io::Stdout().File(), args...)
}

// Returns string result of arguments by default formatting.
fn Sprint(args: ...any): str {
    let mut bytes: []byte = nil
    for _, arg in args {
        bytes = append(bytes, fmtByDefault(arg)...)
    }
    ret str(bytes)
}