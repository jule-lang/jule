// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/internal/fmt"
use "std/internal/stringslite"
use "std/io"
use "std/os"
use "std/unsafe"

// Prints arguments to w by default formatting.
// See documentation of format function for formatting.
fn Fprint(mut w: io::Writer, args: ...any) {
	mut sb := stringslite::Builder{}
	sb.Grow(20)
	for _, arg in args {
		fmt::FmtByDefault(sb, arg)
		w.Write(unsafe { sb.Buf() }) else {
			panic("fmt: Fprint: error occurs when printing")
		}
		// Do not use the [Clear] method to avoid making new allocations.
		// The buffer used temporarily, so just clear the length, not capacity.
		unsafe { sb.SetBuf(sb.Buf()[:0]) }
	}
}

// Prints arguments to w by default formatting.
// Prints new-line after arguments.
// See documentation of format function for formatting.
fn Fprintln(mut w: io::Writer, args: ...any) {
	Fprint(w, args...)
	Fprintf(w, "\n")
}

// Prints result of formatting to w.
// See documentation of format function for formatting.
fn Fprintf(mut w: io::Writer, fmt: str, args: ...any) {
	format := fmt::Format(fmt, args...)
	w.Write(format) else {
		panic("fmt: Fprintf: error occurs when printing")
	}
}

// Prints result of formatting to stdout.
// See documentation of format function for formatting.
fn Printf(fmt: str, args: ...any) {
	Fprintf(os::Stdout(), fmt, args...)
}

// Prints arguments by default formatting to stdout.
fn Print(args: ...any) {
	Fprint(os::Stdout(), args...)
}

// Prints arguments by default formatting to stdout.
// Prints new-line after arguments.
fn Println(args: ...any) {
	Fprintln(os::Stdout(), args...)
}

// Returns string result of arguments by default formatting.
fn Sprint(args: ...any): str {
	mut buf := stringslite::Builder{}
	buf.Grow(100)
	for _, arg in args {
		fmt::FmtByDefault(buf, arg)
	}
	ret buf.Str()
}