// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"

cpp use "<pthread.h>"
cpp use "<sched.h>"

cpp unsafe fn pthread_create(*cpp.pthread_t, *unsafe, *unsafe, *unsafe): int
cpp fn pthread_detach(cpp.pthread_t): int
cpp fn sched_yield(): int

#typedef
cpp struct pthread_t{}

// A low level API function for threads.
// It doesn't provide much abstraction.
// It just creates and detaches a thread using API.
// Reports whether the thread created successfully.
// The created thread is a native-thread.
// The |func| parameter should point to the valid function for operating system thread API.
// The |args| parameter may be nil and should point to the argument data.
#export "__jule_coSpawn"
unsafe fn coSpawn(func: *unsafe, args: *unsafe): bool {
	let t: cpp.pthread_t
	if cpp.pthread_create(&t, nil, integ::Emit[*unsafe]("(void*(*)(void*))({})", func), args) != 0 {
		ret false
	}
	cpp.pthread_detach(t)
	ret true
}

fn osyield() {
	cpp.sched_yield()
}