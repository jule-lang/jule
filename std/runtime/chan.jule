// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Provides a node of type T for chanQueue.
// Automatically instantiated by chanQueue.
struct chanQueueNode[T] {
	data: T
	next: &chanQueueNode[T]
}

// Queue implementation using type T for channels that use type T.
// Provides read and write in FIFO order. Automatically instantiated by pchan.
// Designed for channels and should be used with caution. Not thread-safe by itself.
// Works with a capacity of N for buffered channels, and allocated spaces are reused,
// with each addition not resulting in a new allocation.
struct chanQueue[T] {
	// Pointer to the first node waiting to be read according to FIFO order.
	// In unbuffered channels, the node is always a single node and is used to store
	// and read a single value, never nil. In buffered channels,
	// it can be nil if there is no data waiting to be read.
	head: &chanQueueNode[T]

	// In unbuffered channels, it is always nil. In buffered channels, it stores
	// the node at the end of the queue, which is the most recently used and waiting to be read.
	tail: &chanQueueNode[T]

	// In unbuffered channels, it is always nil. For buffered channels, it stores
	// previously allocated and available nodes.
	free: &chanQueueNode[T]
}

impl chanQueue {
	// Creates a chanQueue and allocates nodes according to cap.
	// If cap >= 1, it also sets the last node. If cap >= 1,
	// the channel is created as buffered, and if cap == 0,
	// it is created as unbuffered channel.
	static fn new(mut cap: int): &chanQueue[T] {
		mut q := new(chanQueue[T])
		if cap >= 1 {
			q.free = new(chanQueueNode[T])
			mut node := q.free
			for cap > 1; cap-- {
				node.next = new(chanQueueNode[T])
				node = node.next
			}
		} else {
			q.head = new(chanQueueNode[T])
		}
		ret q
	}

	// Removes the first node from the queue and returns the data.
	// Assumes that there is always data in the queue.
	fn dequeue(mut self): T {
		// Copy the data before resetting to default.
		mut data := self.head.data
		{
			// Remove the data from the node. Since this is a data type that performs GC,
			// it will continue to exist until it is removed from the node.
			// Remove its reference from the queue to allow it to be freed if possible.
			let mut def: T
			self.head.data = def
		}
		if self.tail != nil || self.free != nil { // buffered channel
			// Advance the read order.
			// The first node is now dequeued, so add it directly to the head of the free list.
			mut node := self.head
			self.head = node.next
			if self.head == nil {
				// Head has reached the end. Set tail to nil.
				// The next enqueue call will select a node from the free list and
				// set the head accordingly.
				self.tail = nil
			}
			node.next = self.free
			self.free = node
		}
		ret data
	}

	// Adds the data to the end of the queue.
	// If the channel is unbuffered, it always assumes the current data has been read.
	// If the channel is buffered, it always assumes there is free node to enqueue.
	fn enqueue(mut self, mut &data: T) {
		if self.free != nil { // buffered channel
			// Take the first node from the free list and use it to store the data.
			mut node := self.free
			self.free = node.next
			node.data = data
			node.next = nil
			// If tail is nil, initialize a new head.
			// If there is already a tail, add the new node to the end of queue.
			// In both cases, set tail to the last node.
			if self.tail == nil {
				self.head = node
			} else {
				self.tail.next = node
			}
			self.tail = node
		} else {
			// Unbuffered channel.
			// Just update the head node.
			self.head.data = data
		}
	}
}

// Channel state flags.
const chanClosed = 0b01
const chanBuffered = 0b10

// Shared section of channel implementation.
// Regardless of the generic types, each channel initially contains these fields.
// To abstract away from the generic types and access the internal data in a
// shared, type-independent manner, may used with Unsafe Jule.
// It should not be copied.
struct hchan {
	lock:  fmutex
	cap:   int
	len:   int
	state: u32
}

// The channel implementation of the language. The fields are
// structured according to hchan. The generic type represents the
// data type of the channel. Instances required at compile-time are
// automatically instantiated by the compiler. Any channel algorithms that
// require generic types should be defined under this structure.
// Type-independent shared algorithms, like hchan, should be defined
// outside of this structure. A pchan should not be copied after being used.
// The compiler creates channels in the background using the [pchan[T].new]
// static method. Behind the scenes, each channel is treated as a smart pointer.
struct pchan[T] {
	lock:  fmutex
	cap:   int
	len:   int
	state: u32
	queue: &chanQueue[T]
}

impl pchan {
	// Creates a new channel.
	// If cap >= 1, it is initialized as a buffered channel,
	// otherwise, it is initialized as an unbuffered channel.
	// A negative value for cap will cause a panic.
	static fn new(cap: int): &pchan[T] {
		mut ch := new(pchan[T])
		if cap < 0 {
			panic("runtime: invalid channel buffer size, it was <0")
		}
		ch.cap = cap
		ch.queue = chanQueue[T].new(ch.cap)
		if ch.cap > 0 {
			ch.state |= chanBuffered
		}
		ret ch
	}

	// Returns the channel as a &hchan for general sharing of pchan[T].
	// The returned &hchan does not exhibit GC behavior and can be used until
	// the self pointer is freed, after which it should not be used.
	fn hchan(mut self): &hchan {
		ret unsafe { (&hchan)((*hchan)(&self)) }
	}

	// Closes the channel.
	fn close(mut self) {
		self.lock.lock()
		if self.state&chanClosed != chanClosed {
			self.state |= chanClosed
			self.queue.free = nil
		}
		self.lock.unlock()
	}

	// Sends the data to the channel.
	// If owned is true, assumes lock is already owned by the current caller.
	fn send(mut self, mut data: T, owned: bool) {
		if !owned {
			self.lock.lock()
		}
		if self.state&chanBuffered == chanBuffered {
			// If the capacity is completely consumed, wait until space becomes available.
			// When some data is received, there will be space in the queue to write.
			chanpark(self.hchan(), self.len, self.cap, reasonSend)
			if self.state&chanClosed == chanClosed {
				panic("runtime: send on closed channel")
			}
			self.queue.enqueue(data)
			self.len++
		} else {
			one := 1
			// If there is data waiting to be received, wait until it is received.
			chanpark(self.hchan(), self.len, one, reasonSend)
			if self.state&chanClosed == chanClosed {
				panic("runtime: send on closed channel")
			}
			self.queue.enqueue(data)
			self.len++
			// Wait until the length becomes zero.
			// This means the data has been received.
			chanpark(self.hchan(), self.len, one, reasonSend)
		}
		self.lock.unlock()
	}

	// Receives the data from the channel.
	// The |ok| is the reference that points to boolean and
	// it reports whether data dequeued and received successfuly.
	// If owned is true, assumes lock is already owned by the current caller.
	fn recv(mut self, mut &ok: bool, owned: bool): T {
		// References are safe, but this method may used by the compiler unsafely.
		// And we have to support nil references for such a low-level use.
		// So, If the |ok| reference not implemented as is nil raw pointer
		// by the compiler, set it. Otherwise, do not touch it. Be safe.
		//
		// To determine whether |ok| is nil raw pointer behind the scene,
		// take raw pointer and compare it with nil. Since taking raw pointer of
		// the references will result as actual pointer of them, we can determine
		// whether the reference's raw pointer is nil.
		if !owned {
			self.lock.lock()
		}
		zero := 0
		// If there is no data waiting to be received in the queue, wait until there is.
		chanpark(self.hchan(), zero, self.len, reasonRecv)
		// chanpark returns when the condition met or channel has been closed.
		// An unbuffered channel cannot have a queue, so its length always varies
		// between 0 and 1. If there is no data to receive, the only possibility is
		// that the channel has been closed. If there is data in the queue,
		// a buffered channel should be able to receive this data, whether
		// the channel is closed or open. In this case, we can determine whether
		// the channel is closed and whether there is any data by simply checking
		// its length. If the length has reached zero, it means the channel is
		// closed and there is no data left in the queue.
		if self.len == 0 {
			// Since the channel is no longer fully functional, set the head and
			// tail nodes to nil. This drops references to the relevant allocations
			// without waiting for the channel to go out of scope,
			// making it easier to gain used memory back.
			self.queue.head = nil
			self.queue.tail = nil
			self.lock.unlock()
			if &ok != nil {
				ok = false
			}
			let mut def: T
			ret def
		}
		mut data := self.queue.dequeue()
		self.len--
		self.lock.unlock()
		if &ok != nil {
			ok = true
		}
		ret data
	}
}

// The channel halts execution until the required condition is met.
// ch represents the channel, n is the field data used for comparison,
// and c indicates the value that n should be smaller than.
// This function must be called with the channel lock held by this thread.
// Even if the condition is not met, it will return if the channel is in a closed state.
fn chanpark(ch: &hchan, &n: int, &c: int, reason: u32) {
	for {
		if ch.state&chanClosed == chanClosed || n < c {
			break
		}
		// The lock is acquired. This means no changes can occur in the channel.
		// We must release the lock and immediately switch to a different thread.
		yield(uintptr(&ch.lock), reason)
		// After the thread wakes up, we must acquire the lock
		// before reaching the critical section again.
		ch.lock.lock()
	}
}

// Reports whether channel can receive data.
// Will locks the mutex, but will not release.
fn chanCanRecv(&ch: hchan): (r: bool) {
	ch.lock.lock()
	r = ch.len > 0
	ret
}

// Reports whether channel can send data.
// Will locks the mutex, but will not release.
fn chanCanSend(&ch: hchan): (r: bool) {
	ch.lock.lock()
	if ch.state&chanBuffered == chanBuffered {
		r = ch.len < ch.cap
	} else {
		r = ch.len == 0
	}
	ret
}

// Select statement implementation for blocking and non-blocking select.
// If the block is true, behavior is blocking select, otherwise unblocking select.
// The chans should point to an array with a size equal to totalChans.
// All receive cases should came first, then send cases. The recvChans should be
// equal to length of the leading receive cases in the chans.
// If any case selected, returns the index of selected candidate case by chans.
// Otherwise returns -1 which means no selected case. It only appears for non-blocking selects.
// The channel's mutex will be locked already for the selected case.
unsafe fn chanSelect(chans: *&hchan, totalChans: int, recvChans: int, block: bool): int {
	mut candidates := make([]&hchan, 0, totalChans)
Select:
	mut ch := *(&chans)
	mut tch := totalChans
	mut rch := recvChans
	// Determine receive candidates.
	tch -= rch
	for rch > 0; rch, ch = rch-1, ch+1 {
		if *ch != nil {
			if chanCanRecv(**ch) {
				candidates = append(candidates, *ch)
			} else {
				// Release the mutex, this channel is not a candidate.
				(*ch).lock.unlock()
			}
		}
	}
	// Determine send candidates.
	for tch > 0; tch, ch = tch-1, ch+1 {
		if *ch != nil {
			if chanCanSend(**ch) {
				candidates = append(candidates, *ch)
			} else {
				// Release the mutex, this channel is not a candidate.
				(*ch).lock.unlock()
			}
		}
	}

	// No candidate fonud.
	if len(candidates) == 0 {
		if block {
			// This is a blocking-select but we have not any candidate.
			// So select until we have at least 1 eligible channel.
			goto Select
		}
		// Non-blocking select, return as -1.
		ret -1
	}
	// Select a candidate.
	mut i := 0
	if len(candidates) > 1 {
		// There is more than one candidate channels.
		// Select candidate randomly.
		i = randInt(nanotime(), len(candidates))
	}
	candidateChan := candidates[i]

	// Find selected candidate in chans.
	// Because selected candidate index may not be equal to chanmap offset of candidate.
	// So map the selected candidate index to chanmap index for correct selection.
	// Respond candidate offset by chanmap, not candidatemap.
	ch = *(&chans)
	i = 0
	for *ch != candidateChan {
		i++
		ch++
	}

	// Release all mutexes of candidates except selected one.
	// Other candidates can be free now.
	for _, c in candidates {
		if c != nil && c != candidateChan {
			(*c).lock.unlock()
		}
	}

	ret i
}