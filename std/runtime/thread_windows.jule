// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/sys"

cpp unsafe fn CreateThread(*unsafe, int, *unsafe, *unsafe, int, *unsafe): *unsafe
cpp fn SwitchToThread(): bool

unsafe fn _coSpawn(func: *unsafe, args: *unsafe): bool {
	handle := cpp.CreateThread(nil, 0, integ::Emit[*unsafe]("(unsigned long(*)(void*))({})", func), args, 0, nil)
	if handle == nil {
		ret false
	}
	sys::CloseHandle(sys::Handle(handle))
	ret true
}

fn osyield() {
	// Maximum attemp count to switch thread.
	// This is the total number of attempts.
	const AttempCount = 4
	if cpp.SwitchToThread() {
		ret
	}
	mut n := 1
	for n < AttempCount; n++ {
		if cpp.SwitchToThread() {
			ret
		}
	}
	panic("runtime: thread scheduling error")
}