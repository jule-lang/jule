// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ "std/jule/integrated"
use "std/sys"

cpp unsafe fn CreateThread(*unsafe, int, *unsafe, *unsafe, int, *unsafe): *unsafe
cpp fn GetCurrentThreadId(): _DWORD
cpp fn SwitchToThread(): bool

// Wrapper for operating system thread.
struct osthread {
	id:     _DWORD
	handle: *unsafe
}

impl osthread {
	// Reports whether the threads are equal.
	fn equal(self, other: _DWORD): bool {
		ret self.id == other
	}
}

// Common head fields for a thread data.
struct threadData {
	handle: **unsafe
}

// A low level API function for threads.
// It doesn't provide much abstraction.
// It just creates and detaches a thread using API.
// Reports whether the thread created successfully.
// The created thread is a native-thread.
// The |func| parameter should point to the valid function for operating system thread API.
// The |args| parameter may be nil and should point to the thread data.
// The thread data, should be fit into the threadData struct.
// So, the head fields of the thread data should be matched fields of the threadData.
#export "__jule_coSpawn"
unsafe fn coSpawn(func: *unsafe, mut args: *unsafe): bool {
	mut thread := pushNewThread()
	(*threadData)(args).handle = &thread.os.handle
	thread.os.handle = cpp.CreateThread(
		nil,
		0,
		integ::Emit[*unsafe]("(unsigned long(*)(void*))({})", func),
		args,
		0,
		integ::Emit[*unsafe]("(LPDWORD)({})", &thread.os.id))
	if thread.os.handle == nil {
		ret false
	}
	threadMutex.unlock()
	sys::CloseHandle(sys::Handle(thread.os.handle))
	ret true
}

fn currentThreadID(): _DWORD {
	ret cpp.GetCurrentThreadId()
}

fn osyield() {
	cpp.SwitchToThread()
}

fn init() {
	// Push the main thread to threads.
	// See the documentation of the pushNewThread function.
	threadMutex.lock()
	mut t := newThread()
	t.os.id = currentThreadID()
	threads = t
	threadMutex.unlock()
}