// Copyright 2024-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This file constains the source code of the built-in map type's hasher.
// This is basically 128-bit CityHash hash algorithm, converted to 64-bit after.
// The implementation adopted from the original Go code: https://github.com/zentures/cityhash/blob/master/cityhash.go, commit [cdd6a94].
// Comes with this license text:
//   The MIT License (MIT)
//
//   Copyright (c) 2013 zhenjl
//
//   Permission is hereby granted, free of charge, to any person obtaining a copy of
//   this software and associated documentation files (the "Software"), to deal in
//   the Software without restriction, including without limitation the rights to
//   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//   the Software, and to permit persons to whom the Software is furnished to do so,
//   subject to the following conditions:
//
//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.
//
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use "std/encoding/binary"

const k0 = 0xc3a5c85c97cb3127
const k1 = 0xb492b66fbe98f273
const k2 = 0x9ae16a3b2f90404f
const c1 = 0xcc9e2d51
const c2 = 0x1b873593

struct u128 {
	hi: u64
	lo: u64
}

fn hash128to64(sum: u128): u64 {
	const kMul = 0x9ddfea08eb382d69
	mut a := (sum.lo ^ sum.hi) * kMul
	a ^= (a >> 47)
	mut b := (sum.hi ^ a) * kMul
	b ^= (b >> 47)
	b *= kMul
	ret b
}

fn fetch64(bytes: []byte): u64 { ret binary::LittleEndian.DecodeU64(bytes) }
fn fetch32(bytes: []byte): u32 { ret binary::LittleEndian.DecodeU32(bytes) }
fn shiftMix(z: u64): u64 { ret z ^ (z >> 47) }
fn hashLen16(u: u64, v: u64): u64 { ret hash128to64(u128{u, v}) }

fn rotate64(val: u64, shift: u32): u64 {
	// Avoid shifting by 64: doing so yields an undefined result.
	if shift != 0 {
		ret ((val >> shift) | (val << (64 - shift)))
	}
	ret val
}

fn hashLen16_3(u: u64, v: u64, mul: u64): u64 {
	mut a := (u ^ v) * mul
	a ^= (a >> 47)
	mut b := (v ^ a) * mul
	b ^= (b >> 47)
	b *= mul
	ret b
}

fn hashLen0to16(bytes: []byte, n: int): u64 {
	if n >= 8 {
		mul := k2 + u64(n)<<1
		a := fetch64(bytes) + k2
		b := fetch64(bytes[n-8:])
		c := rotate64(b, 37)*mul + a
		d := (rotate64(a, 25) + b) * mul
		ret hashLen16_3(c, d, mul)
	}

	if n >= 4 {
		mul := k2 + u64(n)<<1
		a := u64(fetch32(bytes))
		ret hashLen16_3(u64(n)+(a<<3), u64(fetch32(bytes[n-4:])), mul)
	}

	if n > 0 {
		a := u8(bytes[0])
		b := u8(bytes[n>>1])
		c := u8(bytes[n-1])
		y := u32(a) + (u32(b) << 8)
		z := n + (int(c) << 2)
		ret shiftMix(u64(y)*k2^u64(z)*k0) * k2
	}

	ret k2
}

fn hashMurmur(mut bytes: []byte, n: int, seed: u128): u128 {
	mut a := seed.lo
	mut b := seed.hi
	mut c := u64(0)
	mut d := u64(0)
	mut l := n - 16

	if l <= 0 { // len <= 16
		a = shiftMix(a*k1) * k1
		c = b*k1 + hashLen0to16(bytes, n)

		if n >= 8 {
			d = shiftMix(a + fetch64(bytes))
		} else {
			d = shiftMix(a + c)
		}
	} else { // len > 16
		c = hashLen16(fetch64(bytes[n-8:])+k1, a)
		d = hashLen16(b+u64(n), c+fetch64(bytes[n-16:]))
		a += d

		for {
			a ^= shiftMix(fetch64(bytes)*k1) * k1
			a *= k1
			b ^= a
			c ^= shiftMix(fetch64(bytes[8:])*k1) * k1
			c *= k1
			d ^= c
			bytes = bytes[16:]
			l -= 16

			if l <= 0 {
				break
			}
		}
	}

	a = hashLen16(a, c)
	b = hashLen16(d, b)
	ret u128{a ^ b, hashLen16(b, a)}
}

fn weakHashLen32WithSeeds(w: u64, x: u64, y: u64, z: u64, mut a: u64, mut b: u64): u128 {
	a += w
	b = rotate64(b+a+z, 21)
	c := a
	a += x
	a += y
	b += rotate64(a, 44)
	ret u128{a + z, b + c}
}

fn weakHashLen32WithSeeds_3(bytes: []byte, a: u64, b: u64): u128 {
	ret weakHashLen32WithSeeds(fetch64(bytes), fetch64(bytes[8:]),
		fetch64(bytes[16:]), fetch64(bytes[24:]), a, b)
}

fn hashWithSeed(mut bytes: []byte, mut n: int, seed: u128): u128 {
	if n < 128 {
		ret hashMurmur(bytes, n, seed)
	}
	rn := n
	t := bytes

	// We expect length >= 128 to be the common case.  Keep 56 bytes of state:
	// v, w, x, y, and z.
	let mut v: u128
	let mut w: u128
	mut x := seed.lo
	mut y := seed.hi
	mut z := u64(n) * k1

	v.lo = rotate64(y^k1, 49)*k1 + fetch64(bytes)
	v.hi = rotate64(v.lo, 42)*k1 + fetch64(bytes[8:])
	w.lo = rotate64(y+z, 35)*k1 + x
	w.hi = rotate64(x+fetch64(bytes[88:]), 53) * k1

	// This is the same inner loop as CityHash64(), manually unrolled.
	for {
		x = rotate64(x+y+v.lo+fetch64(bytes[8:]), 37) * k1
		y = rotate64(y+v.hi+fetch64(bytes[48:]), 42) * k1
		x ^= w.hi
		y += v.lo + fetch64(bytes[40:])
		z = rotate64(z+w.lo, 33) * k1
		v = weakHashLen32WithSeeds_3(bytes, v.hi*k1, x+w.lo)
		w = weakHashLen32WithSeeds_3(bytes[32:], z+w.hi, y+fetch64(bytes[16:]))
		z, x = x, z
		bytes = bytes[64:]
		x = rotate64(x+y+v.lo+fetch64(bytes[8:]), 37) * k1
		y = rotate64(y+v.hi+fetch64(bytes[48:]), 42) * k1
		x ^= w.hi
		y += v.lo + fetch64(bytes[40:])
		z = rotate64(z+w.lo, 33) * k1
		v = weakHashLen32WithSeeds_3(bytes, v.hi*k1, x+w.lo)
		w = weakHashLen32WithSeeds_3(bytes[32:], z+w.hi, y+fetch64(bytes[16:]))
		z, x = x, z
		bytes = bytes[64:]
		n -= 128
		if n < 128 {
			break
		}
	}

	x += rotate64(v.lo+z, 49) * k0
	y = y*k0 + rotate64(w.hi, 37)
	z = z*k0 + rotate64(w.lo, 27)
	w.lo *= 9
	v.lo *= k0

	// If 0 < length < 128, hash up to 4 chunks of 32 bytes each from the end of s.
	let mut tailDone = 0
	for tailDone < n {
		tailDone += 32
		y = rotate64(x+y, 42)*k0 + v.hi
		w.lo += fetch64(t[rn-tailDone+16:])
		x = x*k0 + w.lo
		z += w.hi + fetch64(t[rn-tailDone:])
		w.hi += v.lo
		v = weakHashLen32WithSeeds_3(t[rn-tailDone:], v.lo+z, v.hi)
		v.lo *= k0
	}

	// At this point our 56 bytes of state should contain more than
	// enough information for a strong 128-bit hash.  We use two
	// different 56-byte-to-8-byte hashes to get a 16-byte final result.
	x = hashLen16(x, v.lo)
	y = hashLen16(y+z, w.lo)

	ret u128{hashLen16(x+v.hi, w.hi) + y, hashLen16(x+w.hi, y+v.hi)}
}

fn hash(mut bytes: []byte): u64 {
	mut sum := u128{}
	if len(bytes) > 16 {
		sum = hashWithSeed(bytes[16:], len(bytes)-16,
			u128{fetch64(bytes), fetch64(bytes[8:])+k0})
	} else {
		sum = hashWithSeed(bytes, len(bytes), u128{k0, k1})
	}
	ret hash128to64(sum)
}