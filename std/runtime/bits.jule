// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use comptime for std::comptime
use integ for std::jule::integrated

// Designed for integer left shiftings.
// Implements basic `<<` operator but discards high bits upon overflow.
fn shiftLeft[L, R](value: L, shift: R): L {
	if shift >= comptime::TypeOf(L).Bits() {
		ret 0
	}
	// Compiler uses this function for left shifts.
	// So implement shifting with emit to avoid recursion calls.
	ret unsafe { integ::Emit[L]("({})({} << {})", L, value, shift) }
}

// Designed for integer right shiftings.
// Implements basic `>>` operator but discards low bits upon overflow.
fn shiftRight[L, R](value: L, shift: R): L {
	if shift >= comptime::TypeOf(L).Bits() {
		ret 0
	}
	// Compiler uses this function for rifght shifts.
	// So implement shifting with emit to avoid recursion calls.
	ret unsafe { integ::Emit[L]("({})({} >> {})", L, value, shift) }
}