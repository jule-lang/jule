// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{FsError, Status}
use std::fs::path::{SEPARATOR, abs, ext, join}
use std::jule::ast::{
    self,
    Ast,
    CommentGroup,
    TypeDecl,
    TypeAliasDecl,
    FieldDecl,
    EnumDecl,
    EnumItemDecl,
    VarDecl,
    TraitDecl,
    StructDecl,
    ParamDecl,
    FnDecl,
    RetTypeDecl,
    Node,
    Expr,
    UseDecl,
}
use std::jule::build::{
    PATH_STDLIB,
    LogMsg,
    Log,
    LogKind,
    Directive,
    logf,
    is_std_header_path,
    is_valid_header_ext,
    is_valid_cpp_ext,
}
use std::jule::lex::{Token, TokenId, TokenKind}
use strings for std::strings

// Stack for symbol references.
pub struct ReferenceStack {
    buffer: []any
}

impl ReferenceStack {
    // Returns new reference stack instance.
    static fn new(): &ReferenceStack {
        ret &ReferenceStack{}
    }
}

impl ReferenceStack {
    // Returns count of references.
    pub fn len(self): int {
        ret self.buffer.len
    }

    // Returns reference by index.
    pub fn at(mut self, i: int): any {
        ret self.buffer[i]
    }

    // Push new reference to stack.
    pub fn push(mut self, mut ref: any) {
        self.buffer = append(self.buffer, ref)
    }

    // Reports whether reference is exist.
    pub fn exist[T](self, t: &T): bool {
        for _, ref in self.buffer {
            if ref == t {
                ret true
            }
        }
        ret false
    }
}

// Directive pass.
pub struct Pass {
    pub token: Token
    pub text:  str
}

fn build_doc(mut cg: &CommentGroup): str {
    if cg == nil {
        ret ""
    }

    let mut doc = ""
    for _, c in cg.comments {
        doc += c.text
        doc += " " // Write space for each newline.
    }
    ret doc
}

fn build_type(mut t: &TypeDecl): &TypeSymbol {
    if t == nil {
        ret nil
    }
    ret &TypeSymbol{
        decl: t,
    }
}

fn build_expr(mut expr: &Expr): &Value {
    if expr == nil {
        ret nil
    }

    ret &Value{
        expr: expr,
    }
}

fn build_type_alias(mut decl: &TypeAliasDecl): &TypeAlias {
    ret &TypeAlias{
        scope:      decl.scope,
        public:     decl.public,
        cpp_linked: decl.cpp_linked,
        token:      decl.token,
        ident:      decl.ident,
        kind:       build_type(decl.kind),
        doc:        build_doc(decl.doc_comments),
    }
}

fn build_field(mut decl: &FieldDecl): &Field {
    ret &Field{
        token:   decl.token,
        public:  decl.public,
        mutable: decl.mutable,
        ident:   decl.ident,
        kind:    build_type(decl.kind),
        default: decl.default,
    }
}

fn build_fields(mut &decls: []&FieldDecl): []&Field {
    let mut fields = make([]&Field, 0, decls.len)
    for (_, mut decl) in decls {
        fields = append(fields, build_field(decl))
    }
    ret fields
}

fn build_struct(mut decl: &StructDecl): &Struct {
    ret &Struct{
        token:      decl.token,
        ident:      decl.ident,
        fields:     build_fields(decl.fields),
        public:     decl.public,
        cpp_linked: decl.cpp_linked,
        directives: decl.directives,
        doc:        build_doc(decl.doc_comments),
        generics:   decl.generics,
    }
}

fn build_param(mut decl: &ParamDecl): &Param {
    ret &Param{
        token:     decl.token,
        mutable:   decl.mutable,
        variadic:  decl.variadic,
        reference: decl.reference,
        kind:      build_type(decl.kind),
        ident:     decl.ident,
    }
}

fn build_params(mut &decls: []&ParamDecl): []&Param {
    let mut params = make([]&Param, 0, decls.len)
    for (_, mut decl) in decls {
        params = append(params, build_param(decl))
    }
    ret params
}

fn build_ret_type(mut decl: &RetTypeDecl): &RetType {
    if decl.idents == nil && decl.kind == nil {
        ret nil // Void type.
    }
    ret &RetType{
        kind:   build_type(decl.kind),
        idents: decl.idents,
    }
}

fn build_fn(mut decl: &FnDecl): &Fn {
    ret &Fn{
        token:       decl.token,
        global:      decl.global,
        unsafety:    decl.unsafety,
        public:      decl.public,
        cpp_linked:  decl.cpp_linked,
        statically:  decl.statically,
        exceptional: decl.exceptional,
        ident:       decl.ident,
        directives:  decl.directives,
        doc:         build_doc(decl.doc_comments),
        scope:       decl.scope,
        generics:    decl.generics,
        result:      build_ret_type(decl.result),
        params:      build_params(decl.params),
    }
}

fn build_methods(mut &decls: []&FnDecl): []&Fn {
    let mut methods = make([]&Fn, 0, decls.len)
    for (_, mut decl) in decls {
        methods = append(methods, build_fn(decl))
    }
    ret methods
}

fn build_trait(mut decl: &TraitDecl): &Trait {
    ret &Trait{
        token:   decl.token,
        ident:   decl.ident,
        public:  decl.public,
        doc:     build_doc(decl.doc_comments),
        methods: build_methods(decl.methods),
    }
}

fn build_enum_item(mut decl: &EnumItemDecl): &EnumItem {
    ret &EnumItem{
        token: decl.token,
        ident: decl.ident,
        value: build_expr(decl.expr),
    }
}

fn build_enum_items(mut &decls: []&EnumItemDecl): []&EnumItem {
    let mut items = make([]&EnumItem, 0, decls.len)
    for (_, mut decl) in decls {
        items = append(items, build_enum_item(decl))
    }
    ret items
}

fn build_enum(mut decl: &EnumDecl): &Enum {
    ret &Enum{
        token:  decl.token,
        public: decl.public,
        ident:  decl.ident,
        kind:   build_type(decl.kind),
        items:  build_enum_items(decl.items),
        doc:    build_doc(decl.doc_comments),
    }
}

fn build_var(mut decl: &VarDecl): &Var {
    ret &Var{
        token:      decl.token,
        ident:      decl.ident,
        cpp_linked: decl.cpp_linked,
        constant:   decl.constant,
        mutable:    decl.mutable,
        public:     decl.public,
        statically: decl.statically,
        reference:  decl.reference,
        directives: decl.directives,
        references: ReferenceStack.new(),
        doc:        build_doc(decl.doc_comments),
        kind:       build_type(decl.kind),
        value:      build_expr(decl.expr),
    }
}

fn build_vars(mut decls: []&VarDecl): []&Var {
    let mut vars = make([]&Var, 0, decls.len)
    for (_, mut decl) in decls {
        vars = append(vars, build_var(decl))
    }
    ret vars
}

fn build_impl(mut decl: &std::jule::ast::Impl): &Impl {
    ret &Impl{
        base:    decl.base,
        dest:    decl.dest,
        methods: build_methods(decl.methods),
        statics: build_vars(decl.statics),
    }
}

// Symbol table builder.
// Just builds symbols, not analyze metadatas
// like struct's implemented traits.
struct SymbolBuilder {
    owner:    &SymbolBuilder
    importer: Importer
    errors:   []Log
    ast:      &Ast
    table:    &SymbolTable
}

impl SymbolBuilder {
    fn get_root(mut &self): &SymbolBuilder {
        let mut root = self
        for root.owner != nil {
            root = root.owner
        }
        ret root
    }

    fn push_err(mut self, &token: Token, fmt: LogMsg, args: ...any) {
        self.errors = append(self.errors, compiler_err(token, true, fmt, args...))
    }

    fn push_err_text(mut self, &token: Token, fmt: LogMsg, args: ...any) {
        self.errors = append(self.errors, compiler_err(token, false, fmt, args...))
    }

    // Push suggestion to last log.
    fn push_suggestion(mut self, fmt: LogMsg, args: ...any) {
        unsafe { push_suggestion(&self.errors[self.errors.len-1], fmt, args...) }
    }

    fn check_cpp_use_decl_path(mut self, &decl: &UseDecl): (ok: bool) {
        if is_std_header_path(decl.link_path) {
            ret true
        }

        let ext = ext(decl.link_path)
        if !is_valid_header_ext(ext) && !is_valid_cpp_ext(ext) {
            self.push_err(decl.token, LogMsg.InvalidCppExt, ext)
            ret false
        }

        // Exist?
        let info = Status.of(decl.link_path) else {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret false
        }
        if info.is_dir() {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret false
        }

        ret true
    }

    fn build_cpp_header_import(mut self, mut &decl: &UseDecl): &ImportInfo {
        let mut path = decl.link_path

        if !is_std_header_path(decl.link_path) {
            let mut ok = self.check_cpp_use_decl_path(decl)
            if !ok {
                ret nil
            }

            // Set to absolute path for correct include path.
            path, ok = abs(decl.link_path)
            if !ok {
                self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            }
        }

        ret &ImportInfo{
            token:      decl.token,
            path:       path,
            link_path:  decl.link_path,
            ident:      "", // Cpp headers haven't identifiers.
            cpp_linked: true,
            std:        false,
            package:    nil, // Cpp headers haven't symbol table.
        }
    }

    fn build_std_import(mut self, mut &decl: &UseDecl): &ImportInfo {
        let mut path = decl.link_path["std::".len:] // Skip "std::" prefix.
        path = strings::replace(path, TokenKind.DblColon, str(SEPARATOR), -1)
        path = join(PATH_STDLIB, path)
        let (path, ok) = abs(path)
        if !ok {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }

        // Exist?
        let info = Status.of(path) else {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }
        if !info.is_dir() {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }

        // Select last identifier of namespace chain.
        let i = strings::find_last(decl.link_path, TokenKind.DblColon)+1
        let ident = decl.link_path[i:]

        ret &ImportInfo{
            import_all: decl.full,
            token:      decl.token,
            path:       path,
            link_path:  decl.link_path,
            ident:      ident,
            alias:      decl.alias,
            cpp_linked: false,
            std:        true,
            package: &Package{
                files: nil, // Appends by import algorithm.
            },
        }
    }

    fn build_ident_import(mut &self, mut &decl: &UseDecl): &ImportInfo {
        let mod_path = self.importer.get_mod_path()
        if mod_path.len == 0 {
            self.push_err(decl.token, LogMsg.ModuleNotFound)
            self.push_suggestion(LogMsg.UseModInit)
            ret nil
        }

        let mut path = decl.link_path
        path = strings::replace(path, TokenKind.DblColon, str(SEPARATOR), -1)
        path = join(mod_path, path)

        let (path, ok) = abs(path)
        if !ok {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }

        // Exist?
        let info = Status.of(path) else {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }
        if !info.is_dir() {
            self.push_err(decl.token, LogMsg.UseNotFound, decl.link_path)
            ret nil
        }

        // Select last identifier of namespace chain.
        let i = strings::find_last(decl.link_path, TokenKind.DblColon) + 1
        let ident = decl.link_path[i:]

        ret &ImportInfo{
            import_all: decl.full,
            token:      decl.token,
            path:       path,
            link_path:  decl.link_path,
            ident:      ident,
            alias:      decl.alias,
            cpp_linked: false,
            std:        false,
            package: &Package{
                files: nil, // Appends by import algorithm.
            },
        }
    }

    fn build_import(mut &self, mut &decl: &UseDecl): &ImportInfo {
        match {
        | decl.cpp_linked: ret self.build_cpp_header_import(decl)
        | decl.std:        ret self.build_std_import(decl)
        |:                 ret self.build_ident_import(decl)
        }
    }

    fn check_duplicate_use_decl(mut self, &pkg: &ImportInfo): (ok: bool) {
        // Find package by path to detect cpp header imports.
        let lpkg = self.table.select_package(fn(spkg: &ImportInfo): bool {
            ret unsafe { pkg.path == spkg.path }
        })
        if lpkg == nil {
            ret true
        }

        self.push_err(pkg.token, LogMsg.DuplicateUseDecl, pkg.link_path)
        self.push_suggestion(LogMsg.RemoveUseDeclAvoidDuplication)
        ret false
    }

    fn impl_import_selections(mut self, mut &imp: &ImportInfo, mut &decl: &UseDecl) {
        for (_, mut ident) in decl.selected {
            if imp.exist_ident(ident.kind) {
                self.push_err(ident, LogMsg.DuplicatedUseSelection, ident.kind)
                self.push_suggestion(LogMsg.RemoveUseSelectionAvoidDupliation)
                continue
            }

            imp.selected = append(imp.selected, ident)
        }
    }

    fn get_as_link_path(mut &self, mut path: str): str {
        if strings::has_prefix(path, PATH_STDLIB) {
            path = path[PATH_STDLIB.len:]
            ret "std" + strings::replace(path, str(SEPARATOR), TokenKind.DblColon, -1)
        }

        let (root, _) = abs(self.importer.get_mod_path())
        path = path[root.len:]
        if path[0] == SEPARATOR {
            path = path[1:]
        }
        ret strings::replace(path, str(SEPARATOR), TokenKind.DblColon, -1)
    }

    fn push_cycle_error(mut &self, &sb: &SymbolBuilder, path: str, mut &message: str) {
        const PADDING = 4

        let refers_to = logf(
            LogMsg.RefersTo,
            self.get_as_link_path(sb.table.file.dir()),
            self.get_as_link_path(path))
        message = strings::repeat(" ", PADDING) + refers_to + "\n" + message
    }

    fn push_cross_cycle_error(mut &self, &target: &SymbolBuilder, &imp: &ImportInfo, &error_token: Token) {
        let mut message = ""

        self.push_cycle_error(self, imp.path, message)

        let mut owner = self.owner
        let mut old = self

        for owner.owner != nil {
            self.push_cycle_error(old.owner, old.table.file.dir(), message)

            if owner.owner == target {
                self.push_cycle_error(target, owner.table.file.dir(), message)
                break
            }

            old = owner
            owner = owner.owner
        }

        self.push_err(error_token, LogMsg.PkgIllegalCrossCycle, message)
    }

    fn check_import_cycles(mut &self, imp: &ImportInfo, &decl: &UseDecl): bool {
        if imp.path == self.table.file.dir() {
            self.push_err(decl.token, LogMsg.PkgIllegalCycleRefersItself, self.get_as_link_path(imp.path))
            ret false
        }

        if self.owner == nil {
            ret true
        }

        if self.owner.table.file.dir() == imp.path {
            self.push_cross_cycle_error(self.owner, imp, decl.token)
            ret false
        }

        let mut owner = self.owner
    iter:
        if owner.table.file.dir() == imp.path {
            self.push_cross_cycle_error(owner, imp, decl.token)
            ret false
        }

        if owner.owner != nil {
            owner = owner.owner
            goto iter
        }

        ret true
    }

    // Checks internal packages or etc. for accessibility.
    //
    // Parameters:
    //  - decl: relevant use declaration.
    //  - mod: module that imports relevant package.
    //  - path: path of package that importing.
    fn check_package_accessibility(mut self, &decl: &UseDecl, &mod: str, &path: str) {
        if self.importer.get_mod_path() != mod && strings::contains(path, "internal") {
            self.push_err(decl.token, LogMsg.UseDeclForInternal)
        }
    }

    fn import_package(mut &self, mut &imp: &ImportInfo, mut &decl: &UseDecl): (ok: bool) {
        if imp.cpp_linked {
            ret true
        }

        let mut port = self.importer.get_import(imp.path)
        if port != nil {
            imp.package = port.package
            imp.duplicate = true

            let old_mod = self.importer.get_mod_path()
            self.importer.set_mod_path(self.importer.mod_by_id(imp.mod_id))
            self.check_package_accessibility(decl, old_mod, port.path)
            self.importer.set_mod_path(old_mod)
        } else {
            if !self.check_import_cycles(imp, decl) {
                ret false
            }

            let old_mod = self.importer.get_mod_path()
            defer { self.importer.set_mod_path(old_mod) }
            if imp.std {
                self.importer.set_mod_path(PATH_STDLIB)
            }
            let (mut asts, errors) = self.importer.import_package(imp.path, !imp.std)
            if errors.len > 0 {
                self.errors = append(self.errors, errors...)
                ret false
            }

            self.check_package_accessibility(decl, old_mod, imp.path)

            for (_, mut ast) in asts {
                let (mut table, errors) = build_symbols(ast, self.importer, self)

                // Break import if file has error(s).
                if errors.len > 0 {
                    self.errors = append(self.errors, errors...)
                    self.push_err_text(imp.token, LogMsg.UsedPackageHasErrors, imp.link_path)
                    ret false
                }

                imp.package.files = append(imp.package.files, table)
            }
        }

        self.impl_import_selections(imp, decl)

        ret true
    }

    fn import_use_decl(mut &self, mut &decl: &UseDecl): &ImportInfo {
        let mut imp = self.build_import(decl)
        // Break analysis if error occurs.
        if imp == nil {
            ret nil
        }

        let mut ok = self.check_duplicate_use_decl(imp)
        if !ok {
            ret nil
        }

        ok = self.import_package(imp, decl)
        self.table.imports = append(self.table.imports, imp)
        if ok {
            self.importer.imported(imp)
            ret imp
        }
        ret nil
    }

    fn import_use_decls(mut &self) {
        for (_, mut decl) in self.ast.use_decls {
            self.import_use_decl(decl)

            // Break analysis if error occurs.
            if self.errors.len > 0 {
                break
            }
        }
    }

    fn append_decl(mut self, mut &decl: Node) {
        match type decl.data {
        | &TypeAliasDecl:
            let mut ta = build_type_alias((&TypeAliasDecl)(decl.data))
            self.table.type_aliases = append(self.table.type_aliases, ta)

        | &StructDecl:
            let mut srct = build_struct((&StructDecl)(decl.data))
            self.table.structs = append(self.table.structs, srct)

        | &FnDecl:
            let mut f = build_fn((&FnDecl)(decl.data))
            self.table.funcs = append(self.table.funcs, f)

        | &TraitDecl:
            let mut t = build_trait((&TraitDecl)(decl.data))
            self.table.traits = append(self.table.traits, t)

        | &VarDecl:
            let mut v = build_var((&VarDecl)(decl.data))
            self.table.vars = append(self.table.vars, v)

        | &EnumDecl:
            let mut e = build_enum((&EnumDecl)(decl.data))
            self.table.enums = append(self.table.enums, e)

        |:
            self.push_err(decl.token, LogMsg.InvalidSyntax)
        }
    }

    fn append_decls(mut self) {
        for (_, mut decl) in self.ast.decls {
            self.append_decl(decl)
        }
    }

    fn append_impls(mut self) {
        self.table.impls = make([]&Impl, 0, self.ast.impls.len)
        for (_, mut decl) in self.ast.impls {
            self.table.impls = append(self.table.impls, build_impl(decl))
        }
    }

    fn push_directive_pass(mut self, mut &d: &std::jule::ast::Directive) {
        if d.args.len == 0 {
            self.push_err(d.tag, LogMsg.MissingExpr)
            ret
        } else if d.args.len > 1 {
            let arg = d.args[1]
            self.push_err(arg, LogMsg.ArgumentOverflow)
        }

        let arg = d.args[0]
        if arg.id != TokenId.Lit {
            self.push_err(arg, LogMsg.InvalidSyntax)
            ret
        }

        if arg.kind[0] != '"' {
            self.push_err(arg, LogMsg.InvalidSyntax)
            ret
        }

        self.table.passes = append(self.table.passes, Pass{
            token: d.tag,
            text:  arg.kind[1:arg.kind.len-1],
        })
    }

    fn append_top_directives(mut self) {
        for (_, mut d) in self.ast.top_directives {
            match d.tag.kind {
            | Directive.Pass:
                self.push_directive_pass(d)
            }
        }
    }

    fn build(mut &self) {
        self.table = &SymbolTable{
            file: self.ast.file,
        }

        self.append_top_directives()

        self.import_use_decls()
        // Break analysis if use declarations has error.
        if self.errors.len > 0 {
            ret
        }

        self.append_decls()
        // Break analysis if declarations has error.
        if self.errors.len > 0 {
            ret
        }

        self.append_impls()
    }
}
