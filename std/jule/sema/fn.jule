// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Directive, GenericDecl, ScopeTree}
use std::jule::build::{ENTRY_POINT, INIT_FN}
use std::jule::lex::{Token, TokenKind, is_anon_ident}
use strings for std::strings

// Return type.
pub struct RetType {
    pub kind:   &TypeSymbol
    pub idents: []Token
}

// Parameter.
pub struct Param {
    pub token:     Token
    pub mutable:   bool
    pub variadic:  bool
    pub reference: bool
    pub kind:      &TypeSymbol
    pub ident:     str
}

impl Param {
    fn instance(mut &self): &ParamIns {
        ret &ParamIns{
            decl: self,
        }
    }

    // Reports whether parameter is self (receiver) parameter.
    pub fn is_self(self): bool {
        ret self.ident == "&self" || self.ident == "self"
    }

    // Reports whether self (receiver) parameter is reference.
    pub fn is_ref(self): bool {
        ret self.ident != "" && self.ident[0] == '&'
    }
}

// Function.
pub struct Fn {
    sema: &Sema

    pub token:       Token
    pub global:      bool
    pub unsafety:    bool
    pub public:      bool
    pub cpp_linked:  bool
    pub statically:  bool
    pub exceptional: bool
    pub ident:       str
    pub directives:  []&Directive
    pub scope:       &ScopeTree
    pub generics:    []&GenericDecl
    pub result:      &RetType
    pub params:      []&Param
    pub owner:       &Struct

    // Function instances for each unique type combination of function call.
    // Nil if function is never used.
    pub instances: []&FnIns
}

impl Fn {
    // Reports whether return type is void.
    pub fn is_void(self): bool {
        ret self.result == nil
    }

    // Reports whether function is method.
    pub fn is_method(self): bool {
        ret self.owner != nil
    }

    // Reports whether function is entry point.
    pub fn is_entry_point(self): bool {
        ret self.ident == ENTRY_POINT
    }

    // Reports whether function is initializer function.
    pub fn is_init(self): bool {
        ret self.ident == INIT_FN
    }

    // Reports whether function is anonymous function.
    pub fn is_anon(self): bool {
        ret is_anon_ident(self.ident)
    }

    // Reports whether function has return variable(s).
    pub fn any_var(self): bool {
        ret self.result != nil && self.result.idents.len > 0
    }

    // Reports whether any parameter uses generic types.
    pub fn parameters_uses_generics(self): bool {
        if self.generics.len == 0 {
            ret false
        }

        for _, p in self.params {
            if parameter_uses_generics(p, self.generics) {
                ret true
            }
        }

        ret false
    }

    // Reports whether result type uses generic types.
    pub fn result_uses_generics(self): bool {
        if self.is_void() {
            ret false
        } else if self.result.kind == nil || self.result.kind.kind == nil {
            ret false
        }

        ret kind_uses_generics(self.result.kind.kind, self.generics)
    }

    // Force to new instance.
    fn instance_force(mut &self): &FnIns {
        let mut ins = &FnIns{
            decl:       self,
            scope:      &Scope{},
            references: ReferenceStack.new(),
        }

        ins.params = make([]&ParamIns, 0, self.params.len)
        for (_, mut p) in self.params {
            ins.params = append(ins.params, p.instance())
        }

        if ins.decl.result != nil {
            ins.result = ins.decl.result.kind.kind
        }

        ret ins
    }

    fn instance(mut &self): &FnIns {
        // Returns already created instance for just one unique combination.
        if self.generics.len == 0 && self.instances.len == 1 {
            ret self.instances[0]
        }

        ret self.instance_force()
    }

    fn append_instance(mut self, mut &ins: &FnIns): (bool, int) {
        if self.generics.len == 0 {
            // Skip already created instance for just one unique combination.
            if self.instances.len == 1 {
                ret false, 0
            }

            self.instances = append(self.instances, ins)
            ret true, -1
        }

        if self.instances.len == 0 {
            self.instances = append(self.instances, ins)
            ret true, -1
        }

        for j, ains in self.instances {
            if ains.same(ins) {
                // Instances are same.
                ret false, j
            }
        }

        self.instances = append(self.instances, ins)
        ret true, -1
    }
}

// Parameter instance.
pub struct ParamIns {
    pub decl: &Param
    pub kind: &TypeKind
}

impl ParamIns {
    // Implement: Kind
    // Returns ParamIns's type kind as string.
    fn to_str(self): str {
        let mut s = ""
        if self.decl.mutable {
            s += "mut "
        }

        if self.decl.reference {
            s += "&_:"
        }

        if self.decl.is_self() {
            if self.decl.is_ref() {
                s += "&"
            }
            s += "self"
            ret s
        }

        if self.decl.variadic {
            s += "..."
        }
        if self.kind != nil {
            s += self.kind.to_str()
        }
        ret s
    }
}

// Function instance.
pub struct FnIns {
    pub owner:      &StructIns
    pub decl:       &Fn
    pub generics:   []&TypeKind
    pub params:     []&ParamIns
    pub result:     &TypeKind
    pub scope:      &Scope
    pub references: &ReferenceStack
    pub anon:       bool

    caller:   BuiltinCaller
    reloaded: bool
}

impl Kind for FnIns {
    // Implement: Kind
    // Returns Fn's type kind as string.
    pub fn to_str(self): str {
        const IDENT = false
        ret self.get_kind_str(IDENT)
    }

    // Reports whether types are same.
    pub fn equals(&self, other: &TypeKind): bool {
        let f = unsafe { (*(&other)).fnc() }
        if f == nil {
            ret false
        }

        if self.decl.exceptional != f.decl.exceptional {
            ret false
        }

        if self.decl.unsafety != f.decl.unsafety {
            ret false
        }

        if self.generics.len != f.generics.len {
            ret false
        }

        if self.decl.is_void() != f.decl.is_void() {
            ret false
        }

        let mut i = 0
        for i < self.generics.len; i++ {
            if !self.generics[i].equals(f.generics[i]) {
                ret false
            }
        }

        let check_params = fn(p1: &ParamIns, p2: &ParamIns): bool {
            if p1.decl.mutable != p2.decl.mutable {
                ret false
            }

            if p1.decl.is_self() {
                if !p2.decl.is_self() {
                    ret false
                }

                if p1.decl.is_ref() != p2.decl.is_ref() {
                    ret false
                }

                ret true
            }

            if p1.decl.reference != p2.decl.reference {
                ret false
            }

            if p1.decl.variadic != p2.decl.variadic {
                ret false
            }

            ret p1.kind.equals(p2.kind)
        }

        if f.params.len != self.params.len {
            ret false
        }

        i = 0
        for i < self.params.len; i++ {
            if !check_params(self.params[i], f.params[i]) {
                ret false
            }
        }

        if !self.decl.is_void() {
            if !self.result.equals(f.result) {
                ret false
            }
        }

        ret true
    }
}

impl FnIns {
    // Reports whether instance is built-in.
    pub fn is_builtin(self): bool {
        ret self.caller != nil
    }

    // Reports whether instance is anonymous function.
    pub fn is_anon(self): bool {
        ret self.anon ||
            self.decl != nil && self.decl.is_anon()
    }

    // Reports whether instances are same.
    // Returns true if declarations and generics are same.
    pub fn same(self, f: &FnIns): bool {
        if self.decl != f.decl || f.generics.len != self.generics.len {
            ret false
        }

        for i, g in self.generics {
            if !g.equals(f.generics[i]) {
                ret false
            }
        }
        ret true
    }

    // Returns kind string of function instance.
    // Appends identifier to kind of this instance.
    // Does not appends identifier of this instance to kind if self.decl is nil reference.
    pub fn get_kind_str(self, ident: bool): str {
        let mut s = ""

        if self.decl.unsafety {
            s += "unsafe "
        }

        s += "fn"

        if ident && self.decl != nil {
            s += " " + self.decl.ident
        }

        if self.generics.len > 0 {
            s += "["
            for i, t in self.generics {
                s += t.to_str()
                if i+1 < self.generics.len {
                    s += ","
                }
            }
            s += "]"
        } else if self.decl.generics.len > 0 { // Use Decl's generic if not parsed yet.
            s += "["
            for i, g in self.decl.generics {
                s += g.ident
                if i+1 < self.decl.generics.len {
                    s += ","
                }
            }
            s += "]"
        }

        s += "("
        let n = self.params.len
        if n > 0 {
            for _, p in self.params {
                s += p.to_str()
                s += ","
            }
            s = s[:s.len-1] // Remove comma.
        }
        s += ")"
        if self.decl.exceptional {
            s += "!"
        }
        if !self.decl.is_void() {
            s += ":"
            s += self.result.to_str()
        }
        ret s
    }
}

fn kind_uses_generics(k: &TypeKind, &generics: []&GenericDecl): bool {
    let pk = k.to_str()
    for _, g in generics {
        if strings::contains(pk, g.ident) {
            ret true
        }
    }
    ret false
}

fn parameter_uses_generics(&p: &Param, &generics: []&GenericDecl): bool {
    if p.is_self() {
        ret false
    }
    ret kind_uses_generics(p.kind.kind, generics)
}
