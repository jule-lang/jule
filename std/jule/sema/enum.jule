// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{Token}

// Enum item.
pub struct EnumItem {
    pub token: Token
    pub ident: str
    pub value: &Value
}

impl EnumItem {
    // Reports whether item has auto expression.
    pub fn auto_expr(self): bool { ret self.value == nil }
}

// Enum.
pub struct Enum {
    pub token:  Token
    pub public: bool
    pub ident:  str
    pub kind:   &TypeSymbol
    pub items:  []&EnumItem
    pub doc:    str
}

impl Kind for Enum {
    // Implement: Kind
    // Returns Enum's identifier.
    pub fn to_str(self): str { ret self.ident }

    // Reports whether types are same.
    pub fn equals(&self, other: &TypeKind): bool {
        let enm = unsafe { (*(&other)).enm() }
        ret self == enm
    }
}

impl Enum {
    // Returns item by identifier.
    // Returns nil reference if not exist any item in this identifier.
    pub fn find_item(mut self, ident: str): &EnumItem {
        for (_, mut item) in self.items {
            if item.ident == ident {
                ret item
            }
        }
        ret nil
    }
}
