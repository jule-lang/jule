// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/token"

// Enum item.
struct EnumItem {
	Token: &token::Token
	Ident: str
	Value: &Value
}

impl EnumItem {
	// Reports whether item has auto expression.
	fn AutoExpr(self): bool {
		ret self.Value == nil
	}
}

// Enum.
struct Enum {
	Token:   &token::Token
	Public:  bool
	Ident:   str
	TypeSym: &TypeSym
	Items:   []&EnumItem
}

impl Kind for Enum {
	// Implement: Kind
	// Returns Enum's identifier.
	fn Str(self): str {
		ret self.Ident
	}

	// Reports whether types are same.
	fn Equal(&self, other: &Type): bool {
		enm := unsafe { (*(&other)).Enum() }
		ret self == enm
	}
}

impl Enum {
	// Returns item by identifier.
	// Returns nil reference if not exist any item in this identifier.
	fn FindItem(mut self, ident: str): &EnumItem {
		for (_, mut item) in self.Items {
			if item.Ident == ident {
				ret item
			}
		}
		ret nil
	}
}

// TypeEnum item.
struct TypeEnumItem {
	Token:   &token::Token
	Ident:   str
	TypeSym: &TypeSym
}

// TypeEnum.
struct TypeEnum {
	Token:  &token::Token
	Public: bool
	Ident:  str
	Items:  []&TypeEnumItem
}

impl Kind for TypeEnum {
	// Implement: Kind
	// Returns TypeEnum's identifier.
	fn Str(self): str {
		ret self.Ident
	}

	// Reports whether types are same.
	fn Equal(&self, other: &Type): bool {
		tenm := unsafe { (*(&other)).TypeEnum() }
		ret self == tenm
	}
}

impl TypeEnum {
	// Returns item by identifier.
	// Returns nil reference if not exist any item in this identifier.
	fn FindItem(mut self, ident: str): &TypeEnumItem {
		for (_, mut item) in self.Items {
			if item.Ident == ident {
				ret item
			}
		}
		ret nil
	}
}