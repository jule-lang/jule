// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::unsafe
use std::jule::ast::{Ast}
use std::jule::build::{Log}

// Flags for semantic analysis.
enum SemaFlag {
	Default: 0,        // Default semantic analysis of Jule.
	Shadowing: 1 << 0, // Default + enable shadowing.
}

// Builds symbol table of AST.
fn buildSymbols(mut &ast: &Ast, mut &importer: Importer, mut owner: &symbolBuilder): (&SymbolTable, []Log) {
	mut sb := &symbolBuilder{
		ast: ast,
		importer: importer,
		owner: owner,
	}
	sb.build()

	if len(sb.errors) == 0 {
		ret sb.table, nil
	}
	ret nil, sb.errors
}

// See developer reference (9).
fn collectImplicitImports(mut &s: &sema, mut &file: &SymbolTable) {
	for (_, mut imp) in file.Imports {
		if !isImplicitImport(imp) {
			break
		}
		match imp.LinkPath {
		| "std::runtime":
			s.meta.runtime = imp
		|:
			panic("implementation mistake in implicit import collection, this panic call should be unreachable")
		}
	}
}

fn analyzePackage(mut &files: []&Ast, mut &importer: Importer, &flags: SemaFlag): (&Package, []Log) {
	// Build symbol tables of files.
	mut tables := make([]&SymbolTable, 0, len(files))
	for (_, mut f) in files {
		mut table, mut errors := buildSymbols(f, importer, nil)
		if len(errors) > 0 {
			ret nil, errors
		}
		tables = append(tables, table)
	}

	mut sema := &sema{
		flags: flags,
		meta: new(commonSemaMeta),
	}

	// Use first table (so first file) for this.
	// See developer reference (9).
	collectImplicitImports(sema, tables[0])

	sema.check(tables)
	if len(sema.errors) > 0 {
		ret nil, sema.errors
	}

	mut pkg := &Package{
		Files: sema.files,
	}

	ret pkg, nil
}

// Builds symbol table of package's ASTs.
// Returns nil if files is nil.
// Returns nil if pwd is empty.
// Returns nil if pstd is empty.
// Accepts current working directory is pwd.
//
// Parameters:
//  files:    abstract syntax trees of files
//  importer: importer that used for use declarations
//
// Dependent Parameters:
//  working-directory: uses working directory path provided by build
//  std-path:          uses standard library path provided by build
//
// Risks:
//   - You can pass nil to importer, but panics if importer is nil and
//     semantic analyzer used nil importer.
fn AnalyzePackage(mut files: []&Ast, mut importer: Importer, flags: SemaFlag): (&Package, []Log) {
	if len(files) == 0 {
		ret nil, nil
	}
	ret analyzePackage(files, importer, flags)
}

// Builds symbol table of AST.
// Returns nil if f is nil.
// Returns nil if pwd is empty.
// Returns nil if pstd is empty.
// Accepts current working directory is pwd.
//
// Parameters:
//  f:        file's abstract syntax tree
//  importer: importer that used for use declarations
//
// Dependent Parameters:
//  working-directory: uses working directory path provided by build
//  std-path:          uses standard library path provided by build
//
// Risks:
//   - You can pass nil to importer, but panics if importer is nil and
//     semantic analyzer used nil importer.
fn AnalyzeFile(mut f: &Ast, mut importer: Importer, flags: SemaFlag): (&SymbolTable, []Log) {
	let mut files: [1]&Ast = [f]
	mut pkg, mut errors := AnalyzePackage(unsafe::Slice(&files[0], len(files)), importer, flags)
	if len(errors) > 0 {
		ret nil, errors
	}
	// Select first table, because package has only one file.
	// We give just one file.
	mut table := pkg.Files[0]
	ret table, nil
}