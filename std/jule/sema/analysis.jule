// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Ast}
use std::jule::build::{Log}
use nosafe for std::internal::nosafe

// Flags for semantic analysis.
enum SemaFlag {
    Default: 0,        // Default semantic analysis of Jule.
    Shadowing: 1 << 0, // Default + enable shadowing.
}

// Builds symbol table of AST.
fn buildSymbols(mut &ast: &Ast, mut &importer: Importer, mut owner: &symbolBuilder): (&SymbolTable, []Log) {
    mut sb := &symbolBuilder{
        ast: ast,
        importer: importer,
        owner: owner,
    }
    sb.build()

    if len(sb.errors) == 0 {
        ret sb.table, nil
    }
    ret nil, sb.errors
}

fn analyzePackage(mut &files: []&Ast, mut &importer: Importer, &flags: SemaFlag): (&Package, []Log) {
    // Build symbol tables of files.
    mut tables := make([]&SymbolTable, 0, len(files))
    for (_, mut f) in files {
        mut table, mut errors := buildSymbols(f, importer, nil)
        if len(errors) > 0 {
            ret nil, errors
        }
        tables = append(tables, table)
    }

    mut sema := &Sema{
        flags: flags,
        meta: new(commonSemaMeta),
    }
    sema.check(tables)
    if len(sema.errors) > 0 {
        ret nil, sema.errors
    }

    mut pkg := &Package{
        Files: sema.files,
    }

    ret pkg, nil
}

// Builds symbol table of package's ASTs.
// Returns nil if files is nil.
// Returns nil if pwd is empty.
// Returns nil if pstd is empty.
// Accepts current working directory is pwd.
//
// Parameters:
//  files:    abstract syntax trees of files
//  importer: importer that used for use declarations
//
// Dependent Parameters:
//  working-directory: uses working directory path provided by build
//  std-path:          uses standard library path provided by build
//
// Risks:
//   - You can pass nil to importer, but panics if importer is nil and
//     semantic analyzer used nil importer.
fn AnalyzePackage(mut files: []&Ast, mut importer: Importer, flags: SemaFlag): (&Package, []Log) {
    if len(files) == 0 {
        ret nil, nil
    }
    mut package, mut logs := analyzePackage(files, importer, flags)
    ret package, logs
}

// Builds symbol table of AST.
// Returns nil if f is nil.
// Returns nil if pwd is empty.
// Returns nil if pstd is empty.
// Accepts current working directory is pwd.
//
// Parameters:
//  f:        file's abstract syntax tree
//  importer: importer that used for use declarations
//
// Dependent Parameters:
//  working-directory: uses working directory path provided by build
//  std-path:          uses standard library path provided by build
//
// Risks:
//   - You can pass nil to importer, but panics if importer is nil and
//     semantic analyzer used nil importer.
fn AnalyzeFile(mut f: &Ast, mut importer: Importer, flags: SemaFlag): (&SymbolTable, []Log) {
    let mut files: [1]&Ast = [f]
    mut pkg, mut errors := AnalyzePackage(nosafe::Atobs[[1]&Ast, &Ast](files), importer, flags)
    if len(errors) > 0 {
        ret nil, errors
    }
    // Select first table, because package has only one file.
    // We give just one file.
    mut table := pkg.Files[0]
    ret table, nil
}