// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{File}

// Symbol table.
// Builds by semantic analyzer.
struct SymbolTable {
    File:        &File         // Owner fileset of this symbol table.
    Passes:      []Pass        // All passed flags with jule:pass directive.
    Imports:     []&ImportInfo // Imported packages.
    Vars:        []&Var        // Variables.
    TypeAliases: []&TypeAlias  // Type aliases.
    Structs:     []&Struct     // Structures.
    Funcs:       []&Fn         // Functions.
    Traits:      []&Trait      // Traits.
    Enums:       []&Enum       // Enums.
    TypeEnums:   []&TypeEnum   // Type enums.
    Impls:       []&Impl       // Implementations.
}

impl Lookup for SymbolTable {
    // Returns imported package by identifier.
    // Returns nil reference if not exist any package in this identifier.
    fn FindPackage(mut self, ident: str): &ImportInfo {
        for (_, mut pkg) in self.Imports {
            if pkg.Ident == ident {
                ret pkg
            }
        }
        ret nil
    }

    // Returns imported package by selector.
    // Returns nil reference if selector returns false for all packages.
    // Returns nil reference if selector is nil.
    fn SelectPackage(mut self, selector: fn(&ImportInfo): bool): &ImportInfo {
        if selector == nil {
            ret nil
        }
        for (_, mut pkg) in self.Imports {
            if selector(pkg) {
                ret pkg
            }
        }
        ret nil
    }

    // Returns variable by identifier and cpp linked state.
    // Returns nil if refenrece not exist any variable in this identifier.
    fn FindVar(mut self, ident: str, cppLinked: bool): &Var {
        ret self.findVar(ident, cppLinked, false)
    }

    // Returns type alias by identifier and cpp linked state.
    // Returns nil reference if not exist any type alias in this identifier.
    fn FindTypeAlias(mut self, ident: str, cppLinked: bool): &TypeAlias {
        ret self.findTypeAlias(ident, cppLinked, false)
    }

    // Returns struct by identifier and cpp linked state.
    // Returns nil reference if not exist any struct in this identifier.
    fn FindStruct(mut self, ident: str, cppLinked: bool): &Struct {
        for (_, mut s) in self.Structs {
            if s.Ident == ident && s.CppLinked == cppLinked {
                ret s
            }
        }
        ret nil
    }

    // Returns function by identifier and cpp linked state.
    // Returns nil reference if not exist any function in this identifier.
    fn FindFn(mut self, ident: str, cppLinked: bool): &Fn {
        for (_, mut f) in self.Funcs {
            if f.Ident == ident && f.CppLinked == cppLinked {
                ret f
            }
        }
        ret nil
    }

    // Returns trait by identifier.
    // Returns nil reference if not exist any trait in this identifier.
    fn FindTrait(mut self, ident: str): &Trait {
        for (_, mut t) in self.Traits {
            if t.Ident == ident {
                ret t
            }
        }
        ret nil
    }

    // Returns enum by identifier.
    // Returns nil reference if not exist any enum in this identifier.
    fn FindEnum(mut self, ident: str): &Enum {
        for (_, mut e) in self.Enums {
            if e.Ident == ident {
                ret e
            }
        }
        ret nil
    }

    // Returns type enum by identifier.
    // Returns nil reference if not exist any type enum in this identifier.
    fn FindTypeEnum(mut self, ident: str): &TypeEnum {
        for (_, mut e) in self.TypeEnums {
            if e.Ident == ident {
                ret e
            }
        }
        ret nil
    }
}

impl SymbolTable {
    fn findVar(mut self, ident: str, cppLinked: bool, reverse: bool): &Var {
        if reverse {
            let mut i = len(self.Vars) - 1
            for i >= 0; i-- {
                let mut v = self.Vars[i]
                if v.Ident == ident && v.CppLinked == cppLinked {
                    ret v
                }
            }
        } else {
            for (_, mut v) in self.Vars {
                if v.Ident == ident && v.CppLinked == cppLinked {
                    ret v
                }
            }
        }
        ret nil
    }

    fn findTypeAlias(mut self, ident: str, cppLinked: bool, reverse: bool): &TypeAlias {
        if reverse {
            let mut i = len(self.TypeAliases) - 1
            for i >= 0; i-- {
                let mut ta = self.TypeAliases[i]
                if ta.Ident == ident && ta.CppLinked == cppLinked {
                    ret ta
                }
            }
        } else {
            for (_, mut ta) in self.TypeAliases {
                if ta.Ident == ident && ta.CppLinked == cppLinked {
                    ret ta
                }
            }
        }
        ret nil
    }

    // Returns define by identifier.
    // Returns nil reference if not exist any define in this identifier.
    fn defByIdent(mut self, ident: str, cppLinked: bool): any {
        for (_, mut v) in self.Vars {
            if v.Ident == ident && v.CppLinked == cppLinked {
                ret v
            }
        }

        for (_, mut ta) in self.TypeAliases {
            if ta.Ident == ident && ta.CppLinked == cppLinked {
                ret ta
            }
        }

        for (_, mut s) in self.Structs {
            if s.Ident == ident && s.CppLinked == cppLinked {
                ret s
            }
        }

        for (_, mut f) in self.Funcs {
            if f.Ident == ident && f.CppLinked == cppLinked {
                ret f
            }
        }

        if cppLinked {
            ret nil
        }

        for (_, mut t) in self.Traits {
            if t.Ident == ident {
                ret t
            }
        }

        for (_, mut e) in self.Enums {
            if e.Ident == ident {
                ret e
            }
        }

        for (_, mut te) in self.TypeEnums {
            if te.Ident == ident {
                ret te
            }
        }

        ret nil
    }

    // Reports this identifier duplicated in symbol table.
    // The "self" parameter represents address of exception identifier.
    // If founded identifier address equals to self, will be skipped.
    fn isDuplicatedIdent(self, itself: uintptr, ident: str, cppLinked: bool): bool {
        for _, v in self.Vars {
            if uintptr(v) != itself && v.Ident == ident && v.CppLinked == cppLinked {
                ret true
            }
        }

        for _, ta in self.TypeAliases {
            if uintptr(ta) != itself && ta.Ident == ident && ta.CppLinked == cppLinked {
                ret true
            }
        }

        for _, s in self.Structs {
            if uintptr(s) != itself && s.Ident == ident && s.CppLinked == cppLinked {
                ret true
            }
        }

        for _, f in self.Funcs {
            if uintptr(f) != itself && f.Ident == ident && f.CppLinked == cppLinked {
                ret true
            }
        }

        if cppLinked {
            ret false
        }

        for _, t in self.Traits {
            if uintptr(t) != itself && t.Ident == ident {
                ret true
            }
        }

        for _, e in self.Enums {
            if uintptr(e) != itself && e.Ident == ident {
                ret true
            }
        }

        for _, te in self.TypeEnums {
            if uintptr(te) != itself && te.Ident == ident {
                ret true
            }
        }

        ret false
    }
}