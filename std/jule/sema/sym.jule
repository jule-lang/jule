// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule"
use "std/jule/ast"
use "std/jule/build"
use "std/jule/token"
use "std/os"
use "std/os/filepath"
use "std/strings"
use "std/unicode"
use "std/unicode/utf8"

// Stack for symbol references.
// It used by Sema to store necessary references.
//
// List of necessary references;
//  - &FnIns
//  - &StructIns
//  - &Trait
//  - &Var -> Only global ones.
struct ReferenceStack {
	buffer: []any
}

impl ReferenceStack {
	// Returns new reference stack instance.
	static fn new(): &ReferenceStack {
		ret &ReferenceStack{
			buffer: make([]any, 0, 10),
		}
	}
}

impl ReferenceStack {
	// Returns count of references.
	fn Len(self): int {
		ret len(self.buffer)
	}

	// Returns reference by index.
	fn At(mut self, i: int): any {
		ret self.buffer[i]
	}

	// Push new reference to stack.
	fn Push(mut self, mut ref: any) {
		self.buffer = append(self.buffer, ref)
	}

	// Reports whether reference is exist.
	fn Exist[T](self, t: T): bool {
		for _, ref in self.buffer {
			if ref == t {
				ret true
			}
		}
		ret false
	}
}

// Directive pass.
struct Pass {
	Token: &token::Token
	Text:  str
}

fn buildType(mut t: &ast::TypeDecl): &TypeSym {
	if t == nil {
		ret nil
	}
	ret &TypeSym{
		Decl: t,
	}
}

fn buildExpr(mut expr: &ast::Expr): &Value {
	if expr == nil {
		ret nil
	}
	ret &Value{
		Expr: expr,
	}
}

fn buildTypeAlias(mut decl: &ast::TypeAliasDecl): &TypeAlias {
	ret &TypeAlias{
		Scope: decl.Scope,
		Strict: decl.Strict,
		Public: decl.Public,
		Binded: decl.Binded,
		Token: decl.Token,
		Ident: decl.Ident,
		TypeSym: buildType(decl.Kind),
	}
}

fn buildField(mut decl: &ast::FieldDecl): &Field {
	ret &Field{
		Token: decl.Token,
		Public: decl.Public,
		Mutable: decl.Mutable,
		Ident: decl.Ident,
		TypeSym: buildType(decl.Kind),
		Default: decl.Default,
	}
}

fn buildFields(mut &decls: []&ast::FieldDecl): []&Field {
	mut fields := make([]&Field, 0, len(decls))
	for (_, mut decl) in decls {
		fields = append(fields, buildField(decl))
	}
	ret fields
}

fn buildStruct(mut decl: &ast::StructDecl): &Struct {
	ret &Struct{
		Token: decl.Token,
		Ident: decl.Ident,
		Fields: buildFields(decl.Fields),
		Public: decl.Public,
		Binded: decl.Binded,
		Directives: decl.Directives,
		Generics: decl.Generics,
	}
}

fn buildParam(mut decl: &ast::ParamDecl): &Param {
	ret &Param{
		Token: decl.Token,
		Mutable: decl.Mutable,
		Variadic: decl.Variadic,
		Reference: decl.Reference,
		TypeSym: buildType(decl.Kind),
		Ident: decl.Ident,
	}
}

fn buildParams(mut &decls: []&ast::ParamDecl): []&Param {
	mut params := make([]&Param, 0, len(decls))
	for (_, mut decl) in decls {
		params = append(params, buildParam(decl))
	}
	ret params
}

fn buildRetType(mut decl: &ast::RetTypeDecl): &RetType {
	if decl.Idents == nil && decl.Kind == nil {
		ret nil // Void type.
	}
	ret &RetType{
		TypeSym: buildType(decl.Kind),
		Idents: decl.Idents,
	}
}

fn buildFunc(mut decl: &ast::FnDecl): &Fn {
	ret &Fn{
		Token: decl.Token,
		Global: decl.Global,
		Unsafety: decl.Unsafety,
		Public: decl.Public,
		Binded: decl.Binded,
		Statically: decl.Statically,
		Exceptional: decl.Exceptional,
		Ident: decl.Ident,
		Directives: decl.Directives,
		Scope: decl.Scope,
		Generics: decl.Generics,
		Result: buildRetType(decl.Result),
		Params: buildParams(decl.Params),
	}
}

fn buildMethods(mut &decls: []&ast::FnDecl): []&Fn {
	mut methods := make([]&Fn, 0, len(decls))
	for (_, mut decl) in decls {
		methods = append(methods, buildFunc(decl))
	}
	ret methods
}

fn buildTraitInherits(mut &inherits: []&ast::TypeDecl): []&TypeSym {
	mut symbols := make([]&TypeSym, 0, len(inherits))
	for (_, mut it) in inherits {
		symbols = append(symbols, buildType(it))
	}
	ret symbols
}

fn buildTrait(mut decl: &ast::TraitDecl): &Trait {
	ret &Trait{
		Token: decl.Token,
		Ident: decl.Ident,
		Public: decl.Public,
		Methods: buildMethods(decl.Methods),
		Inherits: buildTraitInherits(decl.Inherits),
	}
}

fn buildEnumItem(mut decl: &ast::EnumItemDecl): &EnumItem {
	ret &EnumItem{
		Token: decl.Token,
		Ident: decl.Ident,
		Value: buildExpr(decl.Expr),
	}
}

fn buildEnumItems(mut &decls: []&ast::EnumItemDecl): []&EnumItem {
	mut items := make([]&EnumItem, 0, len(decls))
	for (_, mut decl) in decls {
		items = append(items, buildEnumItem(decl))
	}
	ret items
}

fn buildEnum(mut decl: &ast::EnumDecl): &Enum {
	ret &Enum{
		Token: decl.Token,
		Public: decl.Public,
		Ident: decl.Ident,
		TypeSym: buildType(decl.Kind),
		Items: buildEnumItems(decl.Items),
	}
}

fn buildTypeEnumItem(mut decl: &ast::TypeEnumItemDecl): &TypeEnumItem {
	ret &TypeEnumItem{
		Token: decl.Token,
		Ident: decl.Ident,
		TypeSym: buildType(decl.Kind),
	}
}

fn buildTypeEnumItems(mut &decls: []&ast::TypeEnumItemDecl): []&TypeEnumItem {
	mut items := make([]&TypeEnumItem, 0, len(decls))
	for (_, mut decl) in decls {
		items = append(items, buildTypeEnumItem(decl))
	}
	ret items
}

fn buildTypeEnum(mut decl: &ast::TypeEnumDecl): &TypeEnum {
	ret &TypeEnum{
		Token: decl.Token,
		Public: decl.Public,
		Ident: decl.Ident,
		Items: buildTypeEnumItems(decl.Items),
	}
}

fn buildVar(mut decl: &ast::Var): &Var {
	ret &Var{
		Token: decl.Token,
		Ident: decl.Ident,
		Binded: decl.Binded,
		Constant: decl.Constant,
		Mutable: decl.Mutable,
		Public: decl.Public,
		Statically: decl.Statically,
		Reference: decl.Reference,
		Directives: decl.Directives,
		Refers: ReferenceStack.new(),
		TypeSym: buildType(decl.Kind),
		Value: buildExpr(decl.Expr),
	}
}

fn buildVars(mut decls: []&ast::Var): []&Var {
	mut vars := make([]&Var, 0, len(decls))
	for (_, mut decl) in decls {
		vars = append(vars, buildVar(decl))
	}
	ret vars
}

fn buildImpl(mut decl: &ast::Impl): &Impl {
	ret &Impl{
		Base: decl.Base,
		Dest: decl.Dest,
		Methods: buildMethods(decl.Methods),
		Statics: buildVars(decl.Statics),
	}
}

// Symbol table builder.
// Just builds symbols, not analyze metadatas
// like struct's implemented traits.
struct symBuilder {
	owner:    &symBuilder
	importer: Importer
	errors:   []build::Log
	ast:      &ast::AST
	table:    &SymTab
}

impl symBuilder {
	fn getRoot(mut &self): &symBuilder {
		mut root := self
		for root.owner != nil {
			root = root.owner
		}
		ret root
	}

	fn pushErr(mut self, &token: &token::Token, fmt: build::LogMsg, args: ...any) {
		self.errors = append(self.errors, compilerErr(token, true, fmt, args...))
	}

	fn pushErrText(mut self, &token: &token::Token, fmt: build::LogMsg, args: ...any) {
		self.errors = append(self.errors, compilerErr(token, false, fmt, args...))
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: build::LogMsg, args: ...any) {
		unsafe { pushSuggestion(&self.errors[len(self.errors)-1], fmt, args...) }
	}

	fn checkCppUseDeclPath(mut self, &decl: &ast::UseDecl, &path: str): (ok: bool) {
		ext := filepath::Ext(path)
		if !build::IsValidHeaderExt(ext) && !build::IsValidCppExt(ext) {
			self.pushErr(decl.Token, build::LogMsg.InvalidCppExt, ext)
			ret false
		}

		// Exist?
		info := os::Stat.Of(path) else {
			self.pushErr(decl.Token, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret false
		}
		if info.IsDir() {
			self.pushErr(decl.Token, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret false
		}

		ret true
	}

	fn buildCppHeaderImport(mut self, mut &decl: &ast::UseDecl): &ImportInfo {
		mut path := decl.Path.Kind[1:len(decl.Path.Kind)-1] // remove quotes

		if !build::IsStdHeaderPath(path) {
			path = filepath::Join(decl.Token.File.Dir(), path)
			mut ok := self.checkCppUseDeclPath(decl, path)
			if !ok {
				ret nil
			}

			// Set to absolute path for correct include path.
			path, ok = filepath::Abs(path)
			if !ok {
				self.pushErr(decl.Token, build::LogMsg.UseNotFound, decl.Path.Kind)
			}
		}

		ret &ImportInfo{
			Decl: decl,
			Path: path,
			LinkPath: decl.Path.Kind,
			Binded: true,
			Std: false,
			Package: nil, // Cpp headers haven't symbol table.
		}
	}

	// Checks and returns absolute path of import filepath.
	// Designed for non-std package paths.
	// Returns empty string if error occurs.
	fn checkAbsPath(mut &self, mut filepath: str, mut &decl: &ast::UseDecl): str {
		modPath := self.importer.GetModPath()
		if len(modPath) == 0 {
			self.pushErr(decl.Path, build::LogMsg.ModuleNotFound)
			self.pushSuggestion(build::LogMsg.UseModInit)
			ret ""
		}

		filepath = filepath::Join(modPath, filepath)
		filepath, ok := filepath::Abs(filepath)
		if !ok {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}

		// Exist?
		info := os::Stat.Of(filepath) else {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}
		if !info.IsDir() {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}

		ret filepath
	}

	// Same as the [checkAbsPath] method but designed for std package paths.
	fn checkStdAbsPath(mut &self, mut filepath: str, mut &decl: &ast::UseDecl): str {
		if filepath == "std" {
			self.pushErr(decl.Path, build::LogMsg.InvalidImportPath, decl.Path.Kind)
			ret ""
		}
		filepath = filepath[len("std")+1:] // cut "std" + pathsep prefix
		filepath = filepath::Join(build::PathStdlib, filepath)
		filepath, ok := filepath::Abs(filepath)
		if !ok {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}

		// Exist?
		info := os::Stat.Of(filepath) else {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}
		if !info.IsDir() {
			self.pushErr(decl.Path, build::LogMsg.UseNotFound, decl.Path.Kind)
			ret ""
		}

		ret filepath
	}

	// Checks import path and returns as filepath if no error exist.
	fn checkImpPath(mut &self, mut &decl: &ast::UseDecl): (std: bool, filepath: str) {
		path := decl.Path.Kind[1:len(decl.Path.Kind)-1] // remove quotes
		if strings::HasSuffix(path, jule::ImportPathSep) {
			self.pushErr(decl.Path, build::LogMsg.InvalidImportPath, decl.Path.Kind)
			ret
		}
		parts := strings::SplitAll(path, jule::ImportPathSep)
		if len(parts) == 0 {
			self.pushErr(decl.Path, build::LogMsg.InvalidImportPath, decl.Path.Kind)
			ret
		}
		std = parts[0] == "std"
		for _, part in parts {
			if part == "" || token::IsIgnoreIdent(part) {
				self.pushErr(decl.Path, build::LogMsg.InvalidImportPath, decl.Path.Kind)
				ret false, ""
			}
			filepath = filepath::Join(filepath, part)
		}

		// build absolute path
		if std {
			filepath = self.checkStdAbsPath(filepath, decl)
		} else {
			filepath = self.checkAbsPath(filepath, decl)
		}
		ret
	}

	// Assigns an alias to import.
	fn assignAlias(mut &self, mut &imp: &ImportInfo) {
		mut i := strings::FindLast(imp.LinkPath, jule::ImportPathSep)
		i++ // skip separator and also if -1 it takes full path
		path := imp.LinkPath[i:]
		imp.Alias = path
	}

	fn buildImport(mut &self, mut &decl: &ast::UseDecl): &ImportInfo {
		if decl.Binded {
			ret self.buildCppHeaderImport(decl)
		}
		std, filepath := self.checkImpPath(decl)
		if filepath == "" { // error occured
			ret nil
		}

		mut imp := &ImportInfo{
			Decl: decl,
			Path: filepath,
			LinkPath: decl.Path.Kind[1:len(decl.Path.Kind)-1],
			Binded: false,
			Std: std,
			Package: &Package{
				Files: nil, // Appends by import algorithm.
			},
		}
		if decl.Alias != nil {
			imp.Alias = decl.Alias.Kind
		} else if !isImplicitImport(imp) {
			self.assignAlias(imp)
		}
		ret imp
	}

	fn findUseDecl(mut self, &pkg: &ImportInfo): &ImportInfo {
		ret self.table.SelectPackage(fn(spkg: &ImportInfo): bool {
			// Find package by path to detect cpp header imports.
			// Ignore implicit imports, see developer reference (8).
			ret !isImplicitImport(spkg) && unsafe { pkg.Path == spkg.Path }
		})
	}

	fn checkDuplicateUseDecl(mut self, mut &pkg: &ImportInfo): (ok: bool) {
		mut lpkg := self.findUseDecl(pkg)
		if lpkg == nil {
			ret true
		}
		self.pushErr(pkg.Decl.Token, build::LogMsg.DuplicateUseDecl, pkg.LinkPath)
		self.pushSuggestion(build::LogMsg.RemoveUseDeclAvoidDuplication)
		ret false
	}

	fn getAsLinkPath(mut &self, mut path: str): str {
		mut sb := strings::Builder.New(len(path))
		if strings::HasPrefix(path, build::PathStdlib) {
			path = path[len(build::PathStdlib):] // cut absolute path prefix
			sb.WriteStr(`"std`)!
			sb.WriteStr(strings::ReplaceAll(path, str(filepath::Separator), jule::ImportPathSep))!
			sb.WriteByte('"')!
			ret sb.Str()
		}

		root, _ := filepath::Abs(self.importer.GetModPath())
		path = path[len(root):]
		if path[0] == filepath::Separator {
			path = path[1:]
		}
		sb.WriteByte('"')!
		sb.WriteStr(strings::ReplaceAll(path, str(filepath::Separator), jule::ImportPathSep))!
		sb.WriteByte('"')!
		ret sb.Str()
	}

	fn pushCycleError(mut &self, &sb: &symBuilder, path: str, mut &message: strings::Builder) {
		const Padding = 7
		refersTo := build::Logf(
			build::LogMsg.RefersTo,
			self.getAsLinkPath(sb.table.File.Dir()),
			self.getAsLinkPath(path))
		m := message.Str()
		message.WriteStr(strings::Repeat(" ", Padding))!
		message.WriteStr(refersTo)!
		message.WriteByte('\n')!
		message.WriteStr(m)!
	}

	fn pushCrossCycleError(mut &self, &target: &symBuilder, &imp: &ImportInfo, &errorToken: &token::Token) {
		mut message := strings::Builder.New(1 << 5)

		self.pushCycleError(self, imp.Path, message)

		mut owner := self.owner
		mut old := self

		for owner.owner != nil {
			self.pushCycleError(old.owner, old.table.File.Dir(), message)

			if owner.owner == target {
				self.pushCycleError(target, owner.table.File.Dir(), message)
				break
			}

			old = owner
			owner = owner.owner
		}

		self.pushErr(errorToken, build::LogMsg.PkgIllegalCrossCycle, message.Str())
	}

	fn checkImportCycles(mut &self, imp: &ImportInfo, &decl: &ast::UseDecl): bool {
		if imp.Path == self.table.File.Dir() {
			self.pushErr(decl.Token, build::LogMsg.PkgIllegalCycleRefersItself, self.getAsLinkPath(imp.Path))
			ret false
		}

		if self.owner == nil {
			ret true
		}

		mut owner := self.owner
	iter:
		if owner.table.File.Dir() == imp.Path {
			self.pushCrossCycleError(owner, imp, decl.Token)
			ret false
		}

		if owner.owner != nil {
			owner = owner.owner
			goto iter
		}

		ret true
	}

	// Checks internal packages or etc. for accessibility.
	//
	// Parameters:
	//  - decl: relevant use declaration.
	//  - mod: module that imports relevant package.
	//  - path: path of package that importing.
	fn checkPackageAccessibility(mut self, &decl: &ast::UseDecl, &mod: str, &path: str) {
		if self.importer.GetModPath() == mod {
			ret
		}
		const InternalName = "internal"
		i := strings::Find(path, InternalName)
		if i == -1 {
			ret
		}
		if i == 0 {
			// "internal" or "internal/" ?
			if len(path)-len(InternalName) == 0 ||
				strings::HasPrefix(path, InternalName+jule::ImportPathSep) {
				self.pushErr(decl.Token, build::LogMsg.UseDeclForInternal)
			}
			ret
		}
		// "/internal" ?
		if path[i-1:] == jule::ImportPathSep+InternalName {
			self.pushErr(decl.Token, build::LogMsg.UseDeclForInternal)
			ret
		}
		// "/internal/" ?
		n := i + len(InternalName) + 1
		if n < len(path) && path[i-1:n] == jule::ImportPathSep+InternalName+jule::ImportPathSep {
			self.pushErr(decl.Token, build::LogMsg.UseDeclForInternal)
			ret
		}
	}

	fn importPackage(mut &self, mut &imp: &ImportInfo, mut &decl: &ast::UseDecl): (ok: bool) {
		if imp.Binded {
			ret true
		}

		mut port := self.importer.GetImport(imp.Path)
		if port != nil {
			imp.Package = port.Package
			imp.Duplicate = true

			oldMod := self.importer.GetModPath()
			self.importer.SetModPath(self.importer.ModById(imp.ModId))
			self.checkPackageAccessibility(decl, oldMod, port.Path)
			self.importer.SetModPath(oldMod)
		} else {
			if !self.checkImportCycles(imp, decl) {
				ret false
			}

			oldMod := self.importer.GetModPath()
			defer { self.importer.SetModPath(oldMod) }
			if imp.Std {
				self.importer.SetModPath(build::PathStdlib)
			}
			mut asts, mut errors := self.importer.ImportPackage(imp.Path, !imp.Std)
			if len(errors) > 0 {
				self.errors = append(self.errors, errors...)
				ret false
			}

			self.checkPackageAccessibility(decl, oldMod, imp.Path)

			for (_, mut ast) in asts {
				mut table := (&SymTab)(nil)
				table, errors = buildSymbols(ast, self.importer, self)
				// Break import if file has error(s).
				if len(errors) > 0 {
					self.errors = append(self.errors, errors...)
					ret false
				}
				imp.Package.Files = append(imp.Package.Files, table)
			}
		}
		ret true
	}

	fn importUseDecl(mut &self, mut &decl: &ast::UseDecl): &ImportInfo {
		mut imp := self.buildImport(decl)
		// Break analysis if error occurs.
		if imp == nil {
			ret nil
		}
		mut ok := self.checkDuplicateUseDecl(imp)
		if !ok {
			ret nil
		}
		ok = self.importPackage(imp, decl)
		self.table.Imports = append(self.table.Imports, imp)
		if ok {
			self.importer.Imported(imp)
			ret imp
		}
		ret nil
	}

	fn importUseDecls(mut &self) {
		for (_, mut decl) in self.ast.UseDecls {
			self.importUseDecl(decl)
			// Break analysis if error occurs.
			if len(self.errors) > 0 {
				break
			}
		}
	}

	fn appendNode(mut self, mut &node: ast::Node) {
		match type node.Data {
		| &ast::Impl:
			self.table.Impls = append(self.table.Impls, buildImpl((&ast::Impl)(node.Data)))
		| &ast::TypeAliasDecl:
			mut ta := buildTypeAlias((&ast::TypeAliasDecl)(node.Data))
			self.table.TypeAliases = append(self.table.TypeAliases, ta)
		| &ast::StructDecl:
			mut srct := buildStruct((&ast::StructDecl)(node.Data))
			self.table.Structs = append(self.table.Structs, srct)
		| &ast::FnDecl:
			mut f := buildFunc((&ast::FnDecl)(node.Data))
			self.table.Funcs = append(self.table.Funcs, f)
		| &ast::TraitDecl:
			mut t := buildTrait((&ast::TraitDecl)(node.Data))
			self.table.Traits = append(self.table.Traits, t)
		| &ast::Var:
			mut v := buildVar((&ast::Var)(node.Data))
			self.table.Vars = append(self.table.Vars, v)
		| &ast::EnumDecl:
			mut e := buildEnum((&ast::EnumDecl)(node.Data))
			self.table.Enums = append(self.table.Enums, e)
		| &ast::TypeEnumDecl:
			mut e := buildTypeEnum((&ast::TypeEnumDecl)(node.Data))
			self.table.TypeEnums = append(self.table.TypeEnums, e)
		|:
			self.pushErr(node.Token, build::LogMsg.InvalidSyntax)
		}
	}

	fn appendNodes(mut self) {
		for (_, mut node) in self.ast.Nodes {
			self.appendNode(node)
		}
	}

	fn pushDirectivePass(mut self, mut &d: &ast::Directive) {
		if len(d.Args) == 0 {
			self.pushErr(d.Tag, build::LogMsg.MissingExpr)
			ret
		} else if len(d.Args) > 1 {
			arg := d.Args[1]
			self.pushErr(arg, build::LogMsg.ArgumentOverflow, d.Tag.Kind)
		}

		arg := d.Args[0]
		if arg.Id != token::Id.Lit {
			self.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}

		if arg.Kind[0] != '"' {
			self.pushErr(arg, build::LogMsg.InvalidSyntax)
			ret
		}

		self.table.Passes = append(self.table.Passes, Pass{
			Token: d.Tag,
			Text: arg.Kind[1:len(arg.Kind)-1],
		})
	}

	fn appendTopDirectives(mut self) {
		for (_, mut d) in self.ast.TopDirectives {
			match d.Tag.Kind {
			| build::Directive.Pass:
				self.pushDirectivePass(d)
			}
		}
	}

	fn build(mut &self) {
		self.table = &SymTab{
			File: self.ast.File,
		}

		self.appendTopDirectives()

		self.importUseDecls()
		// Break analysis if use declarations has error.
		if len(self.errors) > 0 {
			ret
		}

		self.appendNodes()
		// Break analysis if declarations has error.
		if len(self.errors) > 0 {
			ret
		}
	}
}

// Reports whether imp is implicitly imported.
// See developer reference (8).
fn isImplicitImport(imp: &ImportInfo): bool {
	ret imp.Decl.Token == nil
}