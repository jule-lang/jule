// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use std::jule::ast::{Ast}
use std::jule::build::{PathStdlib, Log}
use std::jule::lex::{Token, TokenKind}
use strings for std::strings

// Importer.
// Used by semantic analyzer for import use declarations.
trait Importer {
    // Set current module path.
    // Path should be valid directory.
    // Set to empty string if module is not exist.
    fn SetModPath(mut self, path: str)

    // Returns current module path.
    // Path should be valid directory.
    // Returns empty string if module is not exist.
    fn GetModPath(self): str

    // Returns module path by identity.
    fn ModById(self, id: int): str

    // Returns &ImportInfo by path.
    // This function accepted as returns already imported and checked package.
    // If returns not-nil value, will be used instead of ImportPackage
    // if possible and package content is not checked by Sema.
    fn GetImport(mut self, path: str): &ImportInfo

    // Path is the directory path of package to import.
    // Should return abstract syntax tree of package files.
    // Logs accepts as error.
    // Updated module to package's module if exist when update_mod is true.
    fn ImportPackage(mut self, path: str, update_mod: bool): ([]&Ast, []Log)

    // Invoked after the package is imported.
    // Sets module identitity of imported package to current module.
    fn Imported(mut self, mut &ImportInfo)
}

// Returns variable by identifier and binded state.
// Returns nil if not exist any variable in this identifier.
fn findVarInPackage(mut &files: []&SymbolTable, &ident: str, binded: bool): &Var {
    for (_, mut f) in files {
        let mut v = f.FindVar(ident, binded)
        if v != nil {
            ret v
        }
    }
    ret nil
}

// Returns type alias by identifier and binded state.
// Returns nil if not exist any type alias in this identifier.
fn findTypeAliasInPackage(mut &files: []&SymbolTable, &ident: str, binded: bool): &TypeAlias {
    for (_, mut f) in files {
        let mut ta = f.FindTypeAlias(ident, binded)
        if ta != nil {
            ret ta
        }
    }
    ret nil
}

// Returns struct by identifier and binded state.
// Returns nil if not exist any struct in this identifier.
fn findStructInPackage(mut &files: []&SymbolTable, &ident: str, binded: bool): &Struct {
    for (_, mut f) in files {
        let mut s = f.FindStruct(ident, binded)
        if s != nil {
            ret s
        }
    }
    ret nil
}

// Returns function by identifier and binded state.
// Returns nil if not exist any function in this identifier.
fn findFnInPackage(mut &files: []&SymbolTable, &ident: str, binded: bool): &Fn {
    for (_, mut file) in files {
        let mut f = file.FindFn(ident, binded)
        if f != nil {
            ret f
        }
    }
    ret nil
}

// Returns trait by identifier.
// Returns nil if not exist any trait in this identifier.
fn findTraitInPackage(mut &files: []&SymbolTable, &ident: str): &Trait {
    for (_, mut f) in files {
        let mut t = f.FindTrait(ident)
        if t != nil {
            ret t
        }
    }
    ret nil
}

// Returns enum by identifier.
// Returns nil if not exist any enum in this identifier.
fn findEnumInPackage(mut &files: []&SymbolTable, &ident: str): &Enum {
    for (_, mut f) in files {
        let mut e = f.FindEnum(ident)
        if e != nil {
            ret e
        }
    }
    ret nil
}

// Returns enum by identifier.
// Returns nil if not exist any type enum in this identifier.
fn findTypeEnumInPackage(mut &files: []&SymbolTable, &ident: str): &TypeEnum {
    for (_, mut f) in files {
        let mut e = f.FindTypeEnum(ident)
        if e != nil {
            ret e
        }
    }
    ret nil
}

// Lookups tables with [SymbolTable.defByIdent] method.
fn defByIdentPackage(mut &files: []&SymbolTable, &ident: str, binded: bool): any {
    for (_, mut file) in files {
        let mut def = file.defByIdent(ident, binded)
        if def != nil {
            ret def
        }
    }
    ret nil
}

// Import information.
// Represents imported package by use declaration.
struct ImportInfo {
    // Use declaration token.
    Token: &Token

    // Absolute path.
    Path: str

    // Use declaration path string.
    LinkPath: str

    // Package identifier (aka package name).
    // Empty if package is cpp header.
    Ident: str

    // Package alias identifier.
    Alias: str

    // True if imported with Importer.get_import function.
    Duplicate: bool

    // Is binded use declaration.
    Binded: bool

    // Is standard library package.
    Std: bool

    // Is imported all defines implicitly.
    ImportAll: bool

    // Identifiers of selected definition.
    Selected: []&Token

    // Nil if package is cpp header.
    Package: &Package

    // Module identity.
    ModId: int
}

impl Lookup for ImportInfo {
    // Returns always nil reference.
    fn SelectPackage(mut self, fn(&ImportInfo): bool): &ImportInfo { ret nil }

    // Returns variable by identifier and binded state.
    // Returns nil reference if not exist any variable in this identifier.
    //
    // Lookups by import way such as identifier selection.
    // Just lookups non-binded defines.
    fn FindVar(mut self, ident: str, _: bool): &Var {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findVarInPackage(self.Package.Files, ident, false)
    }

    // Returns type alias by identifier.
    // Returns nil reference if not exist any type alias in this identifier.
    //
    // Lookups by import way such as identifier selection.
    // Just lookups non-binded defines.
    fn FindTypeAlias(mut self, ident: str, _: bool): &TypeAlias {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findTypeAliasInPackage(self.Package.Files, ident, false)
    }

    // Returns struct by identifier and binded state.
    // Returns nil reference if not exist any struct in this identifier.
    //
    // Lookups by import way such as identifier selection.
    // Just lookups non-binded defines.
    fn FindStruct(mut self, ident: str, _: bool): &Struct {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findStructInPackage(self.Package.Files, ident, false)
    }

    // Returns function by identifier and binded state.
    // Returns nil reference if not exist any function in this identifier.
    //
    // Lookups by import way such as identifier selection.
    // Just lookups non-binded defines.
    fn FindFn(mut self, ident: str, _: bool): &Fn {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findFnInPackage(self.Package.Files, ident, false)
    }

    // Returns trait by identifier.
    // Returns nil reference if not exist any trait in this identifier.
    //
    // Lookups by import way such as identifier selection.
    fn FindTrait(mut self, ident: str): &Trait {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findTraitInPackage(self.Package.Files, ident)
    }

    // Returns enum by identifier.
    // Returns nil reference if not exist any enum in this identifier.
    //
    // Lookups by import way such as identifier selection.
    fn FindEnum(mut self, ident: str): &Enum {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findEnumInPackage(self.Package.Files, ident)
    }

    // Returns type enum by identifier.
    // Returns nil reference if not exist any type enum in this identifier.
    //
    // Lookups by import way such as identifier selection.
    fn FindTypeEnum(mut self, ident: str): &TypeEnum {
        if !self.isLookupable(ident) {
            ret nil
        }
        ret findTypeEnumInPackage(self.Package.Files, ident)
    }
}

impl ImportInfo {
    fn isLookupable(self, &ident: str): bool {
        if self.Binded {
            ret false
        }

        if !self.ImportAll {
            if len(self.Alias) != 0 || self.existIdent(TokenKind.Self) {
                ret true
            }

            if len(self.Selected) > 0 {
                if !self.existIdent(ident) {
                    ret false
                }
            }
        }
        ret true
    }

    // Reports whether identifier is selected.
    fn existIdent(self, ident: str): bool {
        for _, sident in self.Selected {
            if sident.Kind == ident {
                ret true
            }
        }

        ret false
    }

    fn isAccessibleViaSelection(self): bool {
        ret self.ImportAll || len(self.Selected) == 0 || self.existIdent(TokenKind.Self)
    }
}

// Package.
struct Package {
    // Symbol table for each package's file.
    Files: []&SymbolTable
}

impl Lookup for Package {
    // Returns always nil reference.
    fn SelectPackage(mut self, fn(&ImportInfo): bool): &ImportInfo { ret nil }

    // Returns variable by identifier and binded state.
    // Returns nil reference if not exist any variable in this identifier.
    fn FindVar(mut self, ident: str, binded: bool): &Var {
        ret findVarInPackage(self.Files, ident, binded)
    }

    // Returns type alias by identifier and binded state.
    // Returns nil reference if not exist any type alias in this identifier.
    fn FindTypeAlias(mut self, ident: str, binded: bool): &TypeAlias {
        ret findTypeAliasInPackage(self.Files, ident, binded)
    }

    // Returns struct by identifier and binded state.
    // Returns nil reference if not exist any struct in this identifier.
    fn FindStruct(mut self, ident: str, binded: bool): &Struct {
        ret findStructInPackage(self.Files, ident, binded)
    }

    // Returns function by identifier and binded state.
    // Returns nil reference if not exist any function in this identifier.
    fn FindFn(mut self, ident: str, binded: bool): &Fn {
        ret findFnInPackage(self.Files, ident, binded)
    }

    // Returns trait by identifier.
    // Returns nil reference if not exist any trait in this identifier.
    fn FindTrait(mut self, ident: str): &Trait {
        ret findTraitInPackage(self.Files, ident)
    }

    // Returns enum by identifier.
    // Returns nil reference if not exist any enum in this identifier.
    fn FindEnum(mut self, ident: str): &Enum {
        ret findEnumInPackage(self.Files, ident)
    }

    // Returns type enum by identifier.
    // Returns nil reference if not exist any type enum in this identifier.
    fn FindTypeEnum(mut self, ident: str): &TypeEnum {
        ret findTypeEnumInPackage(self.Files, ident)
    }
}

fn isStdPackage(&f: str, p: str): bool {
    ret strings::HasPrefix(f, path::Join(PathStdlib, p))
}