// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This file reserved for type compatibility checking.

use std::conv::{fmt_float}
use std::math::{modf}
use std::jule::ast::{
    Expr,
    KeyValPair,
    FieldExprPair,
    RangeKind,
    VarDecl,
    ExprData,
    IdentExpr,
    SliceExpr,
    VariadicExpr,
    TupleExpr,
}
use std::jule::build::{LogMsg}
use lit for std::jule::constant::lit
use std::jule::lex::{Token, Ident, is_ignore_ident}
use types for std::jule::types

fn get_result_types(mut &result: &TypeKind): []&TypeKind {
    match {
    | result == nil:
        ret nil

    | result.tup() == nil:
        ret [result]

    |:
        ret result.tup().types
    }
}

fn trait_has_reference_receiver(&t: &Trait): bool {
    for _, f in t.methods {
        // Skip static functions.
        if f.statically {
            continue
        }

        let p = f.params[0]
        if p.is_ref() && p.is_self() {
            ret true
        }
    }
    ret false
}

fn float_assignable(kind: str, &d: &Data): bool {
    let value = fmt_float(d.constant.as_f64(), 'g', -1, 64)
    ret types::check_bit_float(value, types::bitsize_of(kind))
}

fn sig_assignable(kind: str, &d: &Data): bool {
    let min = types::min(kind)
    let max = types::max(kind)

    match {
    | d.constant.is_f64():
        let x = f64(d.constant.read_f64())
        let (i, frac) = modf(x)
        if frac != 0 {
            ret false
        }
        ret i >= min && i <= max

    | d.constant.is_u64():
        let x = f64(d.constant.read_u64())
        if x <= max {
            ret true
        }

    | d.constant.is_i64():
        let x = f64(d.constant.read_i64())
        ret min <= x && x <= max
    }

    ret false
}

fn unsig_assignable(kind: str, &d: &Data): bool {
    let max = types::max(kind)
    if d.is_rune && kind == types::TypeKind.U8 {
        ret lit::is_ascii(rune(d.constant.read_i64()))
    }

    match {
    | d.constant.is_f64():
        let x = d.constant.read_f64()
        if x < 0 {
            ret false
        }

        let (i, frac) = modf(x)
        if frac != 0 {
            ret false
        }
        ret i <= max

    | d.constant.is_u64():
        let x = f64(d.constant.read_u64())
        if x <= max {
            ret true
        }

    | d.constant.is_i64():
        let x = f64(d.constant.read_i64())
        ret 0 <= x && x <= max
    }

    ret false
}

fn int_assignable(kind: str, &d: &Data): bool {
    match {
    | types::is_sig_int(kind):   ret sig_assignable(kind, d)
    | types::is_unsig_int(kind): ret unsig_assignable(kind, d)
    |:                           ret false
    }
}

struct TypeCompatibilityChecker {
    s:           &Sema // Used for error logging.
    dest:        &TypeKind
    src:         &TypeKind
    error_token: Token
}

impl TypeCompatibilityChecker {
    fn push_err(mut self, fmt: LogMsg, args: ...any) {
        self.s.push_err(self.error_token, fmt, args...)
    }

    fn check_trait(mut self): (ok: bool) {
        if self.src.is_nil() {
            ret true
        }

        let trt = self.dest.trt()
        let mut ref = false
        match {
        | self.src.sptr() != nil:
            ref = true
            self.src = self.src.sptr().elem
            if self.src.strct() == nil {
                ret false
            }
            fall

        | self.src.strct() != nil:
            let s = self.src.strct()
            if !s.decl.is_implements(trt) {
                ret false
            }

            if !ref && trait_has_reference_receiver(trt) {
                self.push_err(LogMsg.TraitHasRefParamFn)
                ret false
            }

            ret true

        | self.src.trt() != nil:
            ret trt == self.src.trt()

        |:
            ret false
        }
    }

    fn check_ptr(mut self): (ok: bool) {
        if self.src.is_nil() {
            ret true
        }

        let mut dest = self.dest.ptr()

        if dest.is_unsafe() {
            ret true
        }

        ret self.dest.equals(self.src)
    }

    fn check_prim(mut self): (ok: bool) {
        if !self.dest.variadic {
            let prim = self.dest.prim()
            if prim != nil && prim.is_any() {
                ret true
            }
        }
        ret self.dest.equals(self.src)
    }

    fn check(mut self): (ok: bool) {
        if self.dest.ptr() != nil {
            ret self.check_ptr()
        }
        if self.dest.nil_compatible() {
            if self.src.is_nil() {
                ret true
            }
        }

        match {
        | self.dest.prim() != nil:
            ret self.check_prim()
        | self.dest.trt() != nil:
            ret self.check_trait()
        |:
            ret self.dest.equals(self.src)
        }
    }
}

// Checks value and type compatibility for assignment.
struct AssignTypeChecker {
    s:           &Sema // Used for error logging and type checking.
    dest:        &TypeKind
    d:           &Data
    error_token: Token
}

impl AssignTypeChecker {
    fn push_err(mut self, fmt: LogMsg, args: ...any) {
        self.s.push_err(self.error_token, fmt, args...)
    }

    fn check_validity(mut self): bool {
        let mut valid = true
        match {
        | self.d.kind.fnc() != nil:
            let f = self.d.kind.fnc()
            match {
            | f.is_builtin():
                self.push_err(LogMsg.BuiltinAsNonFn)
                valid = false
            | f.decl.cpp_linked:
                self.push_err(LogMsg.CppFnAsAnonFn)
                valid = false
            | f.decl.is_method():
                self.push_err(LogMsg.MethodAsAnonFn)
                valid = false
            | f.decl.generics.len > 0:
                self.push_err(LogMsg.GenericedFnAsAnonFn)
                valid = false
            }
        | self.d.kind.tup() != nil:
            self.push_err(LogMsg.TupleAssignToSingle)
            valid = false
        }
        ret valid
    }

    fn check_const(mut self): bool {
        if !self.d.is_const() ||
            self.dest.prim() == nil ||
            self.d.kind.prim() == nil ||
            !types::is_num(self.d.kind.prim().kind) {
            ret false
        }

        let kind = self.dest.prim().kind
        match {
        | types::is_float(kind):
            if !float_assignable(kind, self.d) {
                self.push_err(LogMsg.OverflowLimits)
                ret false
            }
        | types::is_int(kind):
            if !int_assignable(kind, self.d) {
                self.push_err(LogMsg.OverflowLimits)
                ret false
            }
        |:
            ret false
        }
        ret true
    }

    // Reports case is good for primitive types.
    fn is_prim(mut self): bool {
        // Ignore variadics.
        if self.dest.variadic || self.d.kind.variadic {
            ret false
        }
        // Ignore cpp-linked types.
        if self.dest.cpp_linked() || self.d.kind.cpp_linked() {
            ret false
        }
        ret self.dest.prim() != nil && self.d.kind.prim() != nil
    }

    fn check(mut self): bool {
        match {
        | self.d == nil:
            // Skip Data is nil.
            ret false
        | !self.check_validity():
            // Data is invalid and error(s) logged about it.
            ret false
        | self.check_const():
            ret true
        | self.d.kind.enm() != nil:
            let mut dkind = self.dest
            if self.dest.enm() != nil {
                dkind = self.dest.enm().kind.kind
            } else if self.dest.prim() == nil {
                break
            }
            if types::types_are_compatible(self.d.kind.enm().kind.kind.prim().kind, dkind.prim().kind) {
                ret true
            }
        | self.is_prim():
            let dest = self.dest.prim()
            if dest.is_any() {
                ret true
            }
            let mut src = self.d.kind.prim()
            if types::types_are_compatible(dest.kind, src.kind) {
                ret true
            }
        }
        ret self.s.check_type_compatibility(self.dest, self.d.kind, self.error_token)
    }
}

struct DynamicTypeAnnotation {
    e:           &Eval
    f:           &FnIns
    p:           &ParamIns
    a:           &Data
    error_token: Token
    k:           *&TypeKind
}

impl DynamicTypeAnnotation {
    fn push_generic(mut self, mut &k: &TypeKind, i: int) {
        self.f.generics[i] = k
    }

    unsafe fn annotate_prim(mut self, mut &k: &TypeKind): (ok: bool) {
        let kind = (*self.k).to_str()
        for i, g in self.f.decl.generics {
            if kind != g.ident {
                continue
            }

            let t = self.f.generics[i]
            match {
            | t == nil:
                self.push_generic(k, i)

            | !t.equals(k):
                // Generic already pushed but generic type and current kind
                // is different, so incompatible.
                ret false
            }
            (*self.k).kind = k.kind
            ret true
        }

        ret false
    }

    unsafe fn annotate_slc(mut self, mut &k: &TypeKind): (ok: bool) {
        let mut pslc = (*self.k).slc()
        if pslc == nil {
            ret false
        }

        let mut slc = k.slc()
        self.k = &pslc.elem
        ret self.annotate_kind(slc.elem)
    }

    unsafe fn check_map_key(mut self, mut k: *&TypeKind, mut &ck: &TypeKind): (ok: bool) {
        let mut old = self.k
        self.k = k
        ok = self.annotate_kind(ck)
        self.k = old
        ret ok
    }

    unsafe fn annotate_map(mut self, mut &k: &TypeKind): (ok: bool) {
        let mut pmap = (*self.k).map()
        if pmap == nil {
            ret false
        }

        let mut m = k.map()

        ret self.check_map_key(&pmap.key, m.key) &&
            self.check_map_key(&pmap.val, m.val)
    }

    unsafe fn annotate_fn(mut self, mut &k: &TypeKind): (ok: bool) {
        let mut pf = (*self.k).fnc()
        if pf == nil {
            ret false
        }
        let mut f = k.fnc()
        match {
        | pf.params.len != f.params.len:
            ret false

        | pf.decl.is_void() != f.decl.is_void():
            ret false
        }

        ok = true
        let mut old = self.k
        for (i, mut fp) in f.params {
            self.k = &pf.params[i].kind
            ok = self.annotate_kind(fp.kind) && ok
        }

        if !pf.decl.is_void() {
            self.k = &pf.result
            ok = self.annotate_kind(f.result) && ok
        }

        self.k = old
        ret ok
    }

    unsafe fn annotate_ptr(mut self, mut &k: &TypeKind): (ok: bool) {
        let mut pptr = (*self.k).ptr()
        if pptr == nil {
            ret false
        }

        let mut ptr = k.ptr()
        self.k = &pptr.elem
        ret self.annotate_kind(ptr.elem)
    }

    unsafe fn annotate_sptr(mut self, mut &k: &TypeKind): (ok: bool) {
        let mut ssptr = (*self.k).sptr()
        if ssptr == nil {
            ret false
        }

        let mut sptr = k.sptr()
        self.k = &ssptr.elem
        ret self.annotate_kind(sptr.elem)
    }

    unsafe fn annotate_any(mut self, mut &k: &TypeKind): (ok: bool) {
        let kind = (*self.k).to_str()
        for i, g in self.f.decl.generics {
            if kind != g.ident {
                continue
            }

            let t = self.f.generics[i]
            match {
            | t == nil:
                self.push_generic(k, i)

            | !t.equals(k):
                // Generic already pushed but generic type and current kind
                // is different, so incompatible.
                ret false
            }
            (*self.k).kind = k.kind
            ret true
        }

        ret false
    }

    unsafe fn annotate_kind(mut self, mut &k: &TypeKind): (ok: bool) {
        if self.k == nil || *self.k == nil {
            ret
        }

        match {
        | self.annotate_any(k): ret true
        | k.prim() != nil:      ret self.annotate_prim(k)
        | k.slc() != nil:       ret self.annotate_slc(k)
        | k.map() != nil:       ret self.annotate_map(k)
        | k.fnc() != nil:       ret self.annotate_fn(k)
        | k.ptr() != nil:       ret self.annotate_ptr(k)
        | k.sptr() != nil:      ret self.annotate_sptr(k)
        |:                      ret false
        }
    }

    unsafe fn annotate(mut self): (ok: bool) {
        self.k = &self.p.kind
        ret self.annotate_kind(self.a.kind)
    }
}

struct FnCallArgChecker {
    e:                  &Eval
    args:               []&Expr
    error_token:        Token
    f:                  &FnIns
    dynamic_annotation: bool
    arg_models:         []ExprModel
}

impl FnCallArgChecker {
    fn push_err_token(mut self, token: Token, fmt: LogMsg, args: ...any) {
        self.e.s.push_err(token, fmt, args...)
    }

    fn push_err(mut self, fmt: LogMsg, args: ...any) {
        self.push_err_token(self.error_token, fmt, args...)
    }

    fn get_params(mut self): []&ParamIns {
        if self.f.params.len > 0 &&
            self.f.params[0].decl != nil &&
            self.f.params[0].decl.is_self() {
            ret self.f.params[1:] // Remove receiver parameter.
        }
        ret self.f.params
    }

    fn check_counts(mut self, &params: []&ParamIns): (ok: bool) {
        let mut n = params.len
        if n > 0 && params[0].decl.is_self() {
            n--
        }

        let mut diff = n - self.args.len
        match {
        | diff == 0:
            ret true
        | n > 0 && params[n-1].decl.variadic:
            ret true
        | diff < 0 || diff > params.len:
            self.push_err(LogMsg.ArgumentOverflow)
            ret false
        }

        let mut idents = ""
        for diff > 0; diff-- {
            idents += ", " + params[n-diff].decl.ident
        }
        idents = idents[2:] // Remove first separator.
        self.push_err(LogMsg.MissingExprFor, idents)

        ret false
    }

    fn check_arg(mut self, mut &p: &ParamIns, mut &arg: &Data, mut &error_token: Token): (ok: bool) {
        if self.dynamic_annotation && parameter_uses_generics(p.decl, self.f.decl.generics) {
            ok = !p.decl.variadic // Accept as fail if parameter is variadic.
            if ok {
                let mut dta = DynamicTypeAnnotation{
                    e:           self.e,
                    f:           self.f,
                    p:           p,
                    a:           arg,
                    error_token: error_token,
                }
                ok = unsafe { dta.annotate() }
            }
            if !ok {
                self.push_err_token(error_token, LogMsg.DynamicTypeAnnotationFailed)
                ret false
            }
        }

        if self.e.s.check_validity_for_init_expr(p.decl.mutable, p.decl.reference, p.kind, arg, error_token) {
            // Check type if validity is good.
            // Helps to reduce error logs and duplicated logs.
            self.e.s.check_assign_type(p.decl.reference, p.kind, arg, error_token)
        }
        ret true
    }

    fn push(mut self, mut &p: &ParamIns, mut arg: &Expr): (ok: bool) {
        let mut old = self.e.prefix
        let old_immut = self.e.immutable
        let mut d: &Data = nil

        self.e.immutable = !p.decl.mutable
        if !self.dynamic_annotation && !p.decl.variadic {
            self.e.prefix = p.kind
        } else {
            self.e.prefix = nil
        }
        d = self.e.eval_expr_kind(arg.kind)

        self.e.prefix = old
        self.e.immutable = old_immut

        if d == nil {
            ret false
        }

        self.arg_models = append(self.arg_models, d)
        ret self.check_arg(p, d, arg.token)
    }

    fn push_variadic(mut self, mut &p: &ParamIns, mut i: int): (ok: bool) {
        ok = true
        let mut variadiced = false
        let more = i+1 < self.args.len
        let mut model = &SliceExprModel{
            elem_kind: p.kind,
        }

        let mut old = self.e.prefix

        // Save variadic status into separate variable.
        // Because parameter might be variadic, but type might be not variadic.
        // Some built-in functions passes non-variadic types.
        let variadic = p.kind.variadic
        p.kind.variadic = false
        defer {
            p.kind.variadic = variadic
        }

        for i < self.args.len; i++ {
            let mut arg = self.args[i]

            match type arg.kind {
            | &VariadicExpr:
                self.e.prefix = &TypeKind{
                    kind: &Slc{
                        elem: p.kind,
                    }
                }

            |:
                self.e.prefix = p.kind
            }

            let mut d = self.e.eval(arg)
            if d == nil {
                ok = false
                continue
            }

            if d.kind.variadic {
                variadiced = true

                match type d.model {
                | &SliceExprModel:
                    model = (&SliceExprModel)(d.model)
                    model.elem_kind = p.kind

                |:
                    model = nil
                    self.arg_models = append(self.arg_models, d)
                }

                p.kind.variadic = true
                ok = ok && self.check_arg(p, d, arg.token)
                
                // Break iteration early, this argument is variadic, so should be last.
                // If this argument is not last, following algorithm will create error log for that.
                // Increase variable i for point to following argument.
                i++
                break
            }

            model.elems = append(model.elems, d.model)
            ok = ok && self.check_arg(p, d, arg.token)
        }
        self.e.prefix = old

        if variadiced && more {
            // Use variable i because when variadic argument appears iteral will break.
            // And it will increase variable i for point to following argument.
            // Therefore, variable i always points to problematic argument.
            self.push_err_token(self.args[i].token, LogMsg.MoreArgsWithVariadiced)
        }

        if model != nil {
            self.arg_models = append(self.arg_models, model)
        }
        ret ok
    }

    fn check_args(mut self, mut &params: []&ParamIns): (ok: bool) {
        ok = true
        let mut i = 0
    iter:
        for i < params.len {
            let mut p = params[i]
            match {
            | p.decl.is_self():
                // Ignore self.

            | p.decl.variadic:
                ok = self.push_variadic(p, i) && ok
                break iter // Variadiced parameters always last.

            | self.args.len <= i:
                ok = false
                break iter

            |:
                ok = self.push(p, self.args[i]) && ok
            }
            i++
        }

        ret ok
    }

    fn check_dynamic_type_annotation(mut self): (ok: bool) {
        for _, g in self.f.generics {
            if g == nil {
                self.push_err(LogMsg.DynamicTypeAnnotationFailed)
                ret false
            }
        }
        ret true
    }

    fn check(mut self): (ok: bool) {
        let mut params = self.get_params()
        ok = self.check_counts(params)
        if !ok {
            ret false
        }

        ok = self.check_args(params)
        if ok && self.dynamic_annotation {
            ok = self.check_dynamic_type_annotation()
        }

        ret ok
    }
}

struct StructLitChecker {
    e:           &Eval
    error_token: Token
    s:           &StructIns
    args:        []&StructArgExprModel
}

impl StructLitChecker {
    fn push_err(mut self, token: Token, fmt: LogMsg, args: ...any) {
        self.e.push_err(token, fmt, args...)
    }

    // Push suggestion to last log.
    fn push_suggestion(mut self, fmt: LogMsg, args: ...any) {
        self.e.push_suggestion(fmt, args...)
    }

    fn push_match(mut self, mut &f: &FieldIns, mut &d: &Data, mut &error_token: Token) {
        self.args = append(self.args, &StructArgExprModel{
            field: f,
            expr:  d.model,
        })
        const REFERENCE = false
        self.e.s.check_validity_for_init_expr(!self.e.immutable, REFERENCE, f.kind, d, error_token)
        self.e.s.check_assign_type(false, f.kind, d, error_token)
    }

    fn check_pair(mut self, mut &pair: &FieldExprPair, mut &exprs: []ExprData) {
        // Check existing.
        let mut f = self.s.find_field(pair.field.kind)
        if f == nil {
            self.push_err(pair.field, LogMsg.IdentNotExist, pair.field.kind)
            ret
        }
        if !self.e.s.is_accessible_define(f.decl.public, f.decl.token) {
            self.push_err(pair.field, LogMsg.IdentIsNotAccessible, pair.field.kind)
            self.push_suggestion(LogMsg.MakePubToAccess)
        }

        // Check duplications.
    dup_lookup:
        for (_, mut expr) in exprs {
            match type expr {
            | &FieldExprPair:
                let mut dpair = (&FieldExprPair)(expr)
                match {
                | pair == dpair:
                    break dup_lookup
                | pair.field.kind == dpair.field.kind:
                    self.push_err(pair.field, LogMsg.AlreadyHasExpr, pair.field.kind)
                    break dup_lookup
                }
            }
        }

        let mut prefix = self.e.prefix
        defer { self.e.prefix = prefix }
        self.e.prefix = f.kind

        let mut d = self.e.eval_expr_kind(pair.expr)
        if d == nil {
            ret
        }
        self.push_match(f, d, pair.field)
    }

    fn ready_exprs(mut self, mut &exprs: []ExprData): bool {
        let mut ok = true
        for (i, mut expr) in exprs {
            match type expr {
            | &KeyValPair:
                let mut pair = (&KeyValPair)(expr)
                match type pair.key {
                | &IdentExpr:
                    // Ok
                |:
                    self.push_err(pair.colon, LogMsg.InvalidSyntax)
                    ok = false
                    continue
                }
                exprs[i] = &FieldExprPair{
                    field: (&IdentExpr)(pair.key).token,
                    expr:  pair.val,
                }
            }
        }
        ret ok
    }

    fn check(mut self, mut &exprs: []ExprData) {
        if exprs.len == 0 {
            ret
        }

        if !self.ready_exprs(exprs) {
            ret
        }

        let mut paired = false
        for (i, mut expr) in exprs {
            match type expr {
            | &FieldExprPair:
                let mut pair = (&FieldExprPair)(expr)
                if i > 0 && !paired {
                    self.push_err(pair.field, LogMsg.InvalidSyntax)
                }
                paired = true
                self.check_pair(pair, exprs)
            | &Expr:
                let mut e = (&Expr)(expr)
                if paired {
                    self.push_err(e.token, LogMsg.ArgMustTargetToField)
                }
                if i >= self.s.fields.len {
                    self.push_err(e.token, LogMsg.ArgumentOverflow)
                    continue
                }

                let mut field = self.s.fields[i]

                let mut prefix = self.e.prefix
                defer { self.e.prefix = prefix }
                self.e.prefix = field.kind

                let mut d = self.e.eval_expr_kind(e.kind)
                if d == nil {
                    continue
                }

                self.push_match(field, d, e.token)
            }
        }

        // Check missing arguments for fields.
        if !paired {
            let n = self.s.fields.len
            let mut diff = n - exprs.len
            match {
            | diff <= 0:
                ret
            }

            let mut idents = ""
            for diff > 0; diff-- {
                idents += ", " + self.s.fields[n-diff].decl.ident
            }
            idents = idents[2:] // Remove first separator.
            self.push_err(self.error_token, LogMsg.MissingExprFor, idents)
        }
    }
}

// Range checker and setter.
struct RangeChecker {
    sc:   &ScopeChecker
    rang: &RangeKind
    kind: &RangeIter
    d:    &Data
}

impl RangeChecker {
    fn build_var(self, mut &decl: &VarDecl): &Var {
        let mut v = build_var(decl)
        ret v
    }

    fn set_size_key(mut self) {
        if self.rang.key_a == nil || is_ignore_ident(self.rang.key_a.ident) {
            ret
        }

        self.kind.key_a = self.build_var(self.rang.key_a)
        self.kind.key_a.kind = &TypeSymbol{
            kind: &TypeKind{
                kind: build_prim_type(PrimKind.Int),
            },
        }

        match type self.d.model {
        | &Var:
            self.kind.key_a.iter_relation = &IterRelation{
                range: (&Var)(self.d.model),
            }
        }
    }

    // Check range expression validity.
    // It bypass mutability error if necessary.
    //
    //  - d:   data to check.
    //  - key: data passed to this key.
    //  - k:   element kind of expression.
    fn check_range_expr_validity(mut self, mut &d: &Data, &key: &Var, mut &k: &TypeKind) {
        let mut _mut = key.mutable
        if _mut && !k.mutable() {
            // Bypass mutability error.
            // Element kind is immutable.
            // There is no mutation.
            _mut = false
        }

        self.sc.s.check_validity_for_init_expr(
            _mut, key.reference, key.kind.kind, d, self.rang.in_token)
    }

    fn check_slice(mut self) {
        self.set_size_key()
        if self.rang.key_b == nil || is_ignore_ident(self.rang.key_b.ident) {
            ret
        }

        let mut slc = self.d.kind.slc()
        self.kind.key_b = self.build_var(self.rang.key_b)
        self.kind.key_b.kind = &TypeSymbol{kind: slc.elem}

        self.check_range_expr_validity(self.d, self.kind.key_b, slc.elem)
    }

    fn check_array(mut self) {
        self.set_size_key()
        if self.rang.key_b == nil || is_ignore_ident(self.rang.key_b.ident) {
            ret
        }

        let mut arr = self.d.kind.arr()
        self.kind.key_b = self.build_var(self.rang.key_b)
        self.kind.key_b.kind = &TypeSymbol{kind: arr.elem}

        self.check_range_expr_validity(self.d, self.kind.key_b, arr.elem)
    }

    fn check_map_key_a(mut self) {
        if self.rang.key_a == nil || is_ignore_ident(self.rang.key_a.ident) {
            ret
        }

        let mut m = self.d.kind.map()
        self.kind.key_a = self.build_var(self.rang.key_a)
        self.kind.key_a.kind = &TypeSymbol{kind: m.key}

        let mut d = new(Data, *self.d)
        d.kind = m.key

        self.check_range_expr_validity(d, self.kind.key_a, m.key)
    }

    fn check_map_key_b(mut self) {
        if self.rang.key_b == nil || is_ignore_ident(self.rang.key_b.ident) {
            ret
        }

        let mut m = self.d.kind.map()
        self.kind.key_b = self.build_var(self.rang.key_b)
        self.kind.key_b.kind = &TypeSymbol{kind: m.val}

        let mut d = new(Data, *self.d)
        d.kind = m.val

        self.check_range_expr_validity(d, self.kind.key_b, m.val)
    }

    fn check_map(mut self) {
        self.check_map_key_a()
        self.check_map_key_b()
    }

    fn check_str(mut self) {
        self.set_size_key()
        if self.rang.key_b == nil || is_ignore_ident(self.rang.key_b.ident) {
            ret
        }

        self.kind.key_b = self.build_var(self.rang.key_b)
        self.kind.key_b.kind = &TypeSymbol{
            kind: &TypeKind{
                kind: build_prim_type(PrimKind.U8),
            },
        }
    }

    fn check(mut self): bool {
        match {
        | self.d.kind.variadic:
            // Fail.
        | self.d.kind.slc() != nil:
            self.check_slice()
            ret true
        | self.d.kind.arr() != nil:
            self.check_array()
            ret true
        | self.d.kind.map() != nil:
            self.check_map()
            ret true
        |:
            let prim = self.d.kind.prim()
            if prim != nil && prim.is_str() {
                self.check_str()
                ret true
            }
        }
        self.sc.s.push_err(self.rang.in_token, LogMsg.IterRangeRequireEnumerableExpr)
        ret false
    }
}

// Return type checker for return statements.
struct RetTypeChecker {
    sc:          &ScopeChecker
    f:           &FnIns
    types:       []&TypeKind // Return types.
    exprs:       []&Expr  // Return expressions.
    vars:        []&Var      // Return variables.
    error_token: Token
    model:       ExprModel
}

impl RetTypeChecker {
    fn prepare_types(mut self) {
        if self.f != nil {
            self.types = get_result_types(self.f.result)
        }
    }

    fn prepare_exprs(mut self, mut &e: &Expr) {
        if e == nil {
            ret
        }
        match type e.kind {
        | &TupleExpr:
            self.exprs = (&TupleExpr)(e.kind).expr
        |:
            self.exprs = append(self.exprs, e)
        }
    }

    fn ret_vars(mut self) {
        if self.f == nil || self.f.decl.is_void() {
            ret
        }
        self.vars = make([]&Var, 0, self.f.decl.result.idents.len)

        let mut root_scope = self.sc.get_root()

        let mut j = 0
        for i, ident in self.f.decl.result.idents {
            if !is_ignore_ident(ident.kind) {
                self.vars = append(self.vars, root_scope.table.vars[j])
                j++
            } else {
                self.vars = append(self.vars, &Var{
                    ident: Ident.Ignore,
                    kind:  &TypeSymbol{kind: self.types[i]},
                })
            }
        }

        // Not exist any real variable.
        if j == 0 {
            self.vars = nil
        }
    }

    fn check_exprs(mut self) {
        if self.exprs.len == 0 {
            ret
        }

        let mut datas = make([]&Data, 0, self.exprs.len)

        for (i, mut expr) in self.exprs {
            if i >= self.types.len {
                break
            }

            let mut t = self.types[i]

            let mut d = self.sc.s.evalp(self.sc, t).eval_expr(expr)
            if d == nil {
                continue
            }

            datas = append(datas, d)

            if !d.mutable && d.kind.mutable() {
                self.sc.s.push_err(self.error_token, LogMsg.RetWithMutTypedNonMut)
                ret
            }

            let mut ac = AssignTypeChecker{
                s:           self.sc.s,
                dest:        t,
                d:           d,
                error_token: self.error_token,
            }
            ac.check()
        }

        // Set model.
        if datas.len > 1 { // Tuple
            self.model = &TupleExprModel{
                datas: datas,
            }
        } else if datas.len == 1 {
            self.model = datas[0].model
        }
    }

    fn check(mut self, mut &e: &Expr): bool {
        self.prepare_types()
        self.prepare_exprs(e)
        self.ret_vars()

        let n = self.exprs.len
        if n == 0 && self.types.len > 0 {
            if !self.f.decl.any_var() {
                self.sc.s.push_err(self.error_token, LogMsg.RequireRetExpr)
                ret false
            }
            ret true
        }

        if n > 0 && self.f != nil && self.f.decl.is_void() {
            self.sc.s.push_err(self.error_token, LogMsg.VoidFnRetExpr)
            ret false
        }

        if n > self.types.len {
            self.sc.s.push_err(self.error_token, LogMsg.OverflowRet)
        } else if n < self.types.len {
            self.sc.s.push_err(self.error_token, LogMsg.MissingMultiRet)
        }

        self.check_exprs()
        ret true
    }
}
