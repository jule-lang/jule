// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Pattern checker for functions and methods.
pub struct FuncPattern {}

impl FuncPattern {
    // Reports whether function is the reserved Dispose function.
    pub static fn Dispose(f: &Fn): bool {
        ret f != nil &&
            f.Owner != nil &&
            f.Ident == "Dispose" &&
            !f.Statically &&
            !f.Unsafety &&
            f.IsVoid() &&
            f.Generics.len == 0 &&
            f.Params.len == 1 &&
            f.Params[0].Mutable &&
            !f.Params[0].IsRef()
    }

    // Reports whether function is the reserved Str function.
    pub static fn Str(f: &Fn): bool {
        if f == nil ||
            f.Owner == nil ||
            f.Ident != "Str" ||
            f.Statically ||
            f.Unsafety ||
            f.IsVoid() ||
            f.Generics.len != 0 ||
            f.Params.len != 1 ||
            f.Params[0].Mutable ||
            f.Params[0].IsRef() {
            ret false
        }

        let mut ins = unsafe { *(&f.Instances[0]) }
        let prim = ins.Result.Prim()
        if prim == nil {
            ret false
        }
        ret prim.IsStr()
    }

    static fn logical(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.Ident != ident ||
            f.Owner == nil ||
            f.Instances.len == 0 ||
            f.Statically ||
            f.Unsafety ||
            f.IsVoid() ||
            f.Generics.len != 0 ||
            f.Params.len != 2 ||
            f.Params[0].Mutable ||
            f.Params[0].IsRef() ||
            f.Params[1].Mutable ||
            f.Params[1].Reference {
            ret false
        }

        let mut ins = unsafe { *(&f.Instances[0]) }
        let prim = ins.Result.Prim()
        if prim == nil || !prim.IsBool() {
            ret false
        }
        ret ins.Owner == ins.Params[1].Kind.Struct()
    }

    // Reports whether function is the reserved Eq function.
    pub static fn Eq(f: &Fn): bool {
        ret FuncPattern.logical(f, "Eq")
    }

    // Reports whether function is the reserved Gt function.
    pub static fn Gt(f: &Fn): bool {
        ret FuncPattern.logical(f, "Gt")
    }

    // Reports whether function is the reserved GtEq function.
    pub static fn GtEq(f: &Fn): bool {
        ret FuncPattern.logical(f, "GtEq")
    }

    // Reports whether function is the reserved Lt function.
    pub static fn Lt(f: &Fn): bool {
        ret FuncPattern.logical(f, "Lt")
    }

    // Reports whether function is the reserved LtEq function.
    pub static fn LtEq(f: &Fn): bool {
        ret FuncPattern.logical(f, "LtEq")
    }

    static fn result(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.Ident != ident ||
            f.Owner == nil ||
            f.Instances.len == 0 ||
            f.Statically ||
            f.Unsafety ||
            f.IsVoid() ||
            f.Generics.len != 0 ||
            f.Params.len != 2 ||
            f.Params[0].Mutable ||
            f.Params[0].IsRef() ||
            f.Params[1].Mutable ||
            f.Params[1].Reference {
            ret false
        }

        let mut ins = unsafe { *(&f.Instances[0]) }
        ret ins.Result.Struct() == ins.Owner
    }

    // Reports whether function is the reserved Shl function.
    pub static fn Shl(f: &Fn): bool {
        ret FuncPattern.result(f, "Shl")
    }

    // Reports whether function is the reserved Shr function.
    pub static fn Shr(f: &Fn): bool {
        ret FuncPattern.result(f, "Shr")
    }

    // Reports whether function is the reserved Add function.
    pub static fn Add(f: &Fn): bool {
        ret FuncPattern.result(f, "Add")
    }

    // Reports whether function is the reserved Sub function.
    pub static fn Sub(f: &Fn): bool {
        ret FuncPattern.result(f, "Sub")
    }

    // Reports whether function is the reserved Div function.
    pub static fn Div(f: &Fn): bool {
        ret FuncPattern.result(f, "Div")
    }

    // Reports whether function is the reserved Mul function.
    pub static fn Mul(f: &Fn): bool {
        ret FuncPattern.result(f, "Mul")
    }

    // Reports whether function is the reserved Mod function.
    pub static fn Mod(f: &Fn): bool {
        ret FuncPattern.result(f, "Mod")
    }

    // Reports whether function is the reserved BitAnd function.
    pub static fn BitAnd(f: &Fn): bool {
        ret FuncPattern.result(f, "BitAnd")
    }

    // Reports whether function is the reserved BitOr function.
    pub static fn BitOr(f: &Fn): bool {
        ret FuncPattern.result(f, "BitOr")
    }

    // Reports whether function is the reserved BitXor function.
    pub static fn BitXor(f: &Fn): bool {
        ret FuncPattern.result(f, "BitXor")
    }

    static fn unary(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.Ident != ident ||
            f.Owner == nil ||
            f.Instances.len == 0 ||
            f.Statically ||
            f.Unsafety ||
            f.IsVoid() ||
            f.Generics.len != 0 ||
            f.Params.len != 1 ||
            f.Params[0].Mutable ||
            f.Params[0].IsRef() {
            ret false
        }

        let mut ins = unsafe { *(&f.Instances[0]) }
        ret ins.Result.Struct() == ins.Owner
    }

    // Reports whether function is the reserved Neg function.
    pub static fn Neg(f: &Fn): bool {
        ret FuncPattern.unary(f, "Neg")
    }

    // Reports whether function is the reserved Pos function.
    pub static fn Pos(f: &Fn): bool {
        ret FuncPattern.unary(f, "Pos")
    }

    // Reports whether function is the reserved BitNot function.
    pub static fn BitNot(f: &Fn): bool {
        ret FuncPattern.unary(f, "BitNot")
    }

    static fn assign(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.Ident != ident ||
            f.Owner == nil ||
            f.Instances.len == 0 ||
            f.Statically ||
            f.Unsafety ||
            !f.IsVoid() ||
            f.Generics.len != 0 ||
            f.Params.len != 2 ||
            !f.Params[0].Mutable ||
            f.Params[0].IsRef() ||
            f.Params[1].Mutable ||
            f.Params[1].Reference {
            ret false
        }
        ret true
    }

    // Reports whether function is the reserved AddAssign function.
    pub static fn AddAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "AddAssign")
    }

    // Reports whether function is the reserved SubAssign function.
    pub static fn SubAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "SubAssign")
    }

    // Reports whether function is the reserved DivAssign function.
    pub static fn DivAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "DivAssign")
    }

    // Reports whether function is the reserved MulAssign function.
    pub static fn MulAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "MulAssign")
    }

    // Reports whether function is the reserved ModAssign function.
    pub static fn ModAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "ModAssign")
    }

    // Reports whether function is the reserved ShlAssign function.
    pub static fn ShlAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "ShlAssign")
    }

    // Reports whether function is the reserved ShrAssign function.
    pub static fn ShrAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "ShrAssign")
    }

    // Reports whether function is the reserved BitOrAssign function.
    pub static fn BitOrAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "BitOrAssign")
    }

    // Reports whether function is the reserved BitAndAssign function.
    pub static fn BitAndAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "BitAndAssign")
    }

    // Reports whether function is the reserved BitXorAssign function.
    pub static fn BitXorAssign(f: &Fn): bool {
        ret FuncPattern.assign(f, "BitXorAssign")
    }
}