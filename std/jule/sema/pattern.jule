// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Pattern checker for functions and methods.
pub struct FuncPattern {}

impl FuncPattern {
    // Reports whether function is the reserved dispose function.
    pub static fn dispose(f: &Fn): bool {
        ret f != nil &&
            f.owner != nil &&
            f.public &&
            f.is_void() &&
            f.generics.len == 0 &&
            f.params.len == 1 &&
            f.params[0].mutable &&
            !f.params[0].is_ref()
    }

    // Reports whether function is the reserved to_str function.
    pub static fn to_str(f: &Fn): bool {
        if f == nil ||
            f.owner == nil ||
            !f.public ||
            f.is_void() ||
            f.generics.len != 0 ||
            f.params.len != 1 ||
            f.params[0].mutable ||
            f.params[0].is_ref() {
            ret false
        }

        let mut ins = unsafe { *(&f.instances[0]) }
        let prim = ins.result.prim()
        if prim == nil {
            ret false
        }
        ret prim.is_str()
    }

    static fn logical(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.ident != ident ||
            f.owner == nil ||
            f.instances.len == 0 ||
            !f.public ||
            f.is_void() ||
            f.generics.len != 0 ||
            f.params.len != 2 ||
            f.params[0].mutable ||
            f.params[0].is_ref() {
            ret false
        }

        let mut ins = unsafe { *(&f.instances[0]) }
        let prim = ins.result.prim()
        if prim == nil || !prim.is_bool() {
            ret false
        }
        let mut y = ins.params[1]
        if y.decl.mutable || y.decl.reference {
            ret false
        }
        ret ins.owner == y.kind.strct()
    }

    // Reports whether function is the reserved eq function.
    pub static fn eq(f: &Fn): bool {
        ret FuncPattern.logical(f, "eq")
    }

    // Reports whether function is the reserved gt function.
    pub static fn gt(f: &Fn): bool {
        ret FuncPattern.logical(f, "gt")
    }

    // Reports whether function is the reserved gt_eq function.
    pub static fn gt_eq(f: &Fn): bool {
        ret FuncPattern.logical(f, "gt_eq")
    }

    // Reports whether function is the reserved lt function.
    pub static fn lt(f: &Fn): bool {
        ret FuncPattern.logical(f, "lt")
    }

    // Reports whether function is the reserved lt_eq function.
    pub static fn lt_eq(f: &Fn): bool {
        ret FuncPattern.logical(f, "lt_eq")
    }

    static fn result(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.ident != ident ||
            f.owner == nil ||
            f.instances.len == 0 ||
            !f.public ||
            f.is_void() ||
            f.generics.len != 0 ||
            f.params.len != 2 ||
            f.params[0].mutable ||
            f.params[0].is_ref() {
            ret false
        }

        let mut ins = unsafe { *(&f.instances[0]) }
        if ins.result.strct() != ins.owner {
            ret false
        }
        let mut y = ins.params[1]
        if y.decl.mutable || y.decl.reference {
            ret false
        }
        ret ins.owner == y.kind.strct()
    }

    // Reports whether function is the reserved shl function.
    pub static fn shl(f: &Fn): bool {
        ret FuncPattern.result(f, "shl")
    }

    // Reports whether function is the reserved shr function.
    pub static fn shr(f: &Fn): bool {
        ret FuncPattern.result(f, "shr")
    }

    // Reports whether function is the reserved add function.
    pub static fn add(f: &Fn): bool {
        ret FuncPattern.result(f, "add")
    }

    // Reports whether function is the reserved sub function.
    pub static fn sub(f: &Fn): bool {
        ret FuncPattern.result(f, "sub")
    }

    // Reports whether function is the reserved div function.
    pub static fn div(f: &Fn): bool {
        ret FuncPattern.result(f, "div")
    }

    // Reports whether function is the reserved mul function.
    pub static fn mul(f: &Fn): bool {
        ret FuncPattern.result(f, "mul")
    }

    // Reports whether function is the reserved mod function.
    pub static fn mod(f: &Fn): bool {
        ret FuncPattern.result(f, "mod")
    }

    // Reports whether function is the reserved bit_and function.
    pub static fn bit_and(f: &Fn): bool {
        ret FuncPattern.result(f, "bit_and")
    }

    // Reports whether function is the reserved bit_or function.
    pub static fn bit_or(f: &Fn): bool {
        ret FuncPattern.result(f, "bit_or")
    }

    // Reports whether function is the reserved bit_xor function.
    pub static fn bit_xor(f: &Fn): bool {
        ret FuncPattern.result(f, "bit_xor")
    }

    static fn unary(&f: &Fn, ident: str): bool {
        if f == nil ||
            f.ident != ident ||
            f.owner == nil ||
            f.instances.len == 0 ||
            !f.public ||
            f.is_void() ||
            f.generics.len != 0 ||
            f.params.len != 1 ||
            f.params[0].mutable ||
            f.params[0].is_ref() {
            ret false
        }

        let mut ins = unsafe { *(&f.instances[0]) }
        ret ins.result.strct() == ins.owner
    }

    // Reports whether function is the reserved neg function.
    pub static fn neg(f: &Fn): bool {
        ret FuncPattern.unary(f, "neg")
    }

    // Reports whether function is the reserved pos function.
    pub static fn pos(f: &Fn): bool {
        ret FuncPattern.unary(f, "pos")
    }
}
