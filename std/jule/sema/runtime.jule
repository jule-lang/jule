// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

enum runtimeFunc: str {
	arrayCmp: "arrayCmp",
	shiftLeft: "shiftLeft",
	shiftRight: "shiftRight",
	drop: "drop",
}

fn runtimeFindFn(mut &runtime: &ImportInfo, ident: runtimeFunc): &Fn {
	const Binded = false
	mut f := runtime.FindFn(ident, Binded)
	if f == nil {
		panic("runtime function is not exist, this is an implementation mistake, this panic call should be unreachable")
	}
	ret f
}

// Reports whether type have special drop call for [std::runtime::{drop}].
// For example, GC collected types or structures with destructor.
fn typeHaveSpecialDrop(mut k: &TypeKind): bool {
	if k.Binded() {
		ret false
	}
	/*if k.GC() {
		ret k.Prim() == nil && k.TypeEnum() == nil // Skip <any> types
	}*/
	match {
	| k.Slc() != nil:
		ret typeHaveSpecialDrop(k.Slc().Elem)
	| k.Arr() != nil:
		ret typeHaveSpecialDrop(k.Arr().Elem)
	| k.Map() != nil:
		mut m := k.Map()
		ret typeHaveSpecialDrop(m.Key) || typeHaveSpecialDrop(m.Val)
	| k.Struct() != nil:
		mut s := k.Struct()
		for (_, mut f) in s.Fields {
			if typeHaveSpecialDrop(f.Kind) {
				ret true
			}
		}
		const Binded = false
		ret FuncPattern.Dispose(s.FindMethod("Dispose", Binded))
	}
	ret false
}