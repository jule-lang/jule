// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use ast for std::jule::ast
use std::jule::build::{Directive, LogMsg}
use std::jule::lex::{TokenId}

struct directiveChecker {
	s: &Sema
	d: &[]&ast::Directive
	o: any
}

impl directiveChecker {
	fn checkCdef(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Fn:
			if (&Fn)(self.o).Binded {
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], LogMsg.InvalidSyntax)
		}
	}

	fn checkTypedef(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Struct:
			if (&Struct)(self.o).Binded {
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], LogMsg.InvalidSyntax)
		}
	}

	fn checkNamespace(mut self, mut &d: &ast::Directive) {
		match type self.o {
		| &Struct:
			if !(&Struct)(self.o).Binded {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Fn:
			if !(&Fn)(self.o).Binded {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Var:
			if !(&Var)(self.o).Binded {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		|:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) == 0 {
			self.s.pushErr(d.Tag, LogMsg.MissingExpr)
			ret
		} else if len(d.Args) > 1 {
			self.s.pushErr(d.Args[1], LogMsg.ArgumentOverflow, d.Tag.Kind)
		}

		arg := d.Args[0]
		if arg.Id != TokenId.Lit {
			self.s.pushErr(arg, LogMsg.InvalidSyntax)
			ret
		}

		if arg.Kind[0] != '"' {
			self.s.pushErr(arg, LogMsg.InvalidSyntax)
			ret
		}

		d.Args[0].Kind = arg.Kind[1:len(arg.Kind)-1]

		// Push relevant directives.
		match type self.o {
		| &Struct:
			if findDirective(*self.d, Directive.Typedef) == nil {
				mut typedef := &ast::Directive{
					Tag: d.Tag,
				}
				typedef.Tag.Kind = Directive.Typedef
				*self.d = append(*self.d, typedef)
			}
		}
	}

	fn checkDeprecated(mut self, mut &d: &ast::Directive) {
		match type self.o {
		| &Struct:
			if (&Struct)(self.o).Binded {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Fn:
			mut f := (&Fn)(self.o)
			if f.Binded || f.IsEntryPoint() || f.IsInit() {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		| &Var:
			if (&Var)(self.o).Binded {
				self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
			}
		|:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) == 0 {
			ret
		}
		if len(d.Args) > 1 {
			self.s.pushErr(d.Args[1], LogMsg.ArgumentOverflow, d.Tag.Kind)
		}

		arg := d.Args[0]
		if arg.Id != TokenId.Lit {
			self.s.pushErr(arg, LogMsg.InvalidSyntax)
			ret
		}

		if arg.Kind[0] != '"' {
			self.s.pushErr(arg, LogMsg.InvalidSyntax)
			ret
		}

		d.Args[0].Kind = arg.Kind[1:len(arg.Kind)-1]
	}

	fn checkTest(mut self, &d: &ast::Directive) {
		match type self.o {
		| &Fn:
			f := (&Fn)(self.o)
			if !f.Binded && !f.IsInit() && !f.IsEntryPoint() {
				break
			}
			if f.IsMethod() {
				self.s.pushErr(f.Token, LogMsg.TestMethod)
				break
			}
			fall
		|:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		}

		if len(d.Args) > 0 {
			self.s.pushErr(d.Args[0], LogMsg.InvalidSyntax)
		}
	}

	fn checkDirective(mut self, mut &d: &ast::Directive) {
		match d.Tag.Kind {
		| Directive.Cdef:
			self.checkCdef(d)
		| Directive.Typedef:
			self.checkTypedef(d)
		| Directive.Namespace:
			self.checkNamespace(d)
		| Directive.Deprecated:
			self.checkDeprecated(d)
		| Directive.Test:
			self.checkTest(d)
		| Directive.Build
		| Directive.Pass:
			self.s.pushErr(d.Tag, LogMsg.UnsupportedDirective, d.Tag.Kind)
		|:
			self.s.pushErr(d.Tag, LogMsg.InvalidLabel, d.Tag.Kind)
		}
	}

	fn check(mut self) {
		for (_, mut d) in *self.d {
			self.checkDirective(d)
		}
	}
}