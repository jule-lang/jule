// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use fmt for std::fmt
use std::jule::ast::{
    FnCallExpr,
    TypeDecl,
    IdentTypeDecl,
    GenericDecl,
}
use std::jule::build::{Derive, LogMsg}

// Type alias for built-in function callers.
//
// Parameters;
//  e: Caller owner Eval instance.
//  fc: Function call expression.
//  d: Data instance for evaluated expression of function.
type BuiltinCaller: fn(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data

fn find_builtin_fn(ident: str): &FnIns {
    match ident {
    | "out":
        static mut f = &FnIns{caller: builtin_caller_out}
        ret f
    | "outln":
        static mut f = &FnIns{caller: builtin_caller_outln}
        ret f
    | "new":
        static mut f = &FnIns{caller: builtin_caller_new}
        ret f
    | "panic":
        static mut f = &FnIns{caller: builtin_caller_panic}
        ret f
    | "make":
        static mut f = &FnIns{caller: builtin_caller_make}
        ret f
    | "append":
        static mut f = &FnIns{caller: builtin_caller_append}
        ret f
    | "copy":
        static mut f = &FnIns{caller: builtin_caller_copy}
        ret f
    | "clone":
        static mut f = &FnIns{caller: builtin_caller_clone}
        ret f
    | "assert":
        static mut f = &FnIns{caller: builtin_caller_assert}
        ret f
    |:
        ret nil
    }
}

fn find_builtin_type_alias(ident: str): &TypeAlias {
    match ident {
    | "byte":
        static mut t = &TypeAlias{
            public: true,
            kind: &TypeSymbol{
                kind: &TypeKind{
                    kind: build_prim_type(PrimKind.U8),
                },
            },
        }
        ret t
    | "rune":
        static mut t = &TypeAlias{
            public: true,
            kind: &TypeSymbol{
                kind: &TypeKind{
                    kind: build_prim_type(PrimKind.I32),
                },
            },
        }
        ret t
    |:
        ret nil
    }
}

fn find_builtin_trait(ident: str): &Trait {
    ret nil
}

fn find_builtin_def(ident: str): any {
    let mut f = find_builtin_fn(ident)
    if f != nil {
        ret f
    }

    let mut ta = find_builtin_type_alias(ident)
    if ta != nil {
        ret ta
    }

    let mut t = find_builtin_trait(ident)
    if t != nil {
        ret t
    }

    ret nil
}

fn find_builtin_def_std_debug(ident: str): any {
    match ident {
    | "out":
        static mut f = &FnIns{caller: builtin_caller_std_debug_out}
        ret f
    | "outln":
        static mut f = &FnIns{caller: builtin_caller_std_debug_outln}
        ret f
    |:
        ret nil
    }
}

fn find_builtin_def_std_mem(ident: str): any {
    match ident {
    | "size_of":
        static mut f = &FnIns{caller: builtin_caller_std_mem_size_of}
        ret f
    | "align_of":
        static mut f = &FnIns{caller: builtin_caller_std_mem_align_of}
        ret f
    | "free":
        static mut f = &FnIns{caller: builtin_caller_std_mem_free}
        ret f
    |:
        ret nil
    }
}

fn find_builtin_def_std_jule_integrated(ident: str): any {
    match ident {
    | "to_str":
        static mut f = &FnIns{caller: builtin_caller_std_jule_integrated_to_str}
        ret f
    | "emit":
        static mut f = &FnIns{
            decl: &Fn{
                generics: make([]&GenericDecl, 1),
            },
            caller: builtin_caller_std_jule_integrated_emit,
        }
        ret f
    |:
        ret nil
    }
}

fn find_package_builtin_def(link_path: str, ident: str): any {
    match link_path {
    | "std::debug":
        ret find_builtin_def_std_debug(ident)
    | "std::mem":
        ret find_builtin_def_std_mem(ident)
    | "std::jule::integrated":
        ret find_builtin_def_std_jule_integrated(ident)
    |:
        ret nil
    }
}

fn builtin_caller_common_plain(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    let mut f = d.kind.fnc()

    let mut fcac = FnCallArgChecker{
        e: e,
        f: f,
        args: fc.args,
        dynamic_annotation: false,
        error_token: fc.token,
    }
    if !fcac.check() {
        ret nil
    }

    let mut model = &FnCallExprModel{
        func: f,
        expr: d.model,
        args: fcac.arg_models,
        token: fc.token,
    }

    if f.result == nil {
        d = build_void_data()
    } else {
        d = &Data{
            kind: f.result,
        }
    }

    d.model = model
    ret d
}

fn builtin_caller_common(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    ret builtin_caller_common_plain(e, fc, d)
}

fn builtin_caller_common_mut(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !d.mutable {
        e.push_err(fc.token, LogMsg.MutOperationOnImmut)
    }
    ret builtin_caller_common(e, fc, d)
}

fn builtin_caller_error(mut &e: &Eval, mut &fc: &FnCallExpr): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "err")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }
    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.is_nil() {
        e.push_err(fc.args[0].token, LogMsg.NilError)
    }

    let mut d = build_void_data()
    d.model = &BuiltinErrorCallExprModel{
        err: expr.model,
    }

    ret d
}

fn builtin_caller_out(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "v")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if !is_builtin_str_convertable(expr.kind) {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut d = build_void_data()
    d.model = &BuiltinOutCallExprModel{expr: expr.model}
    ret d
}

fn builtin_caller_outln(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtin_caller_out(e, fc, d)
    if d == nil {
        ret nil
    }

    d.model = &BuiltinOutlnCallExprModel{
        expr: (&BuiltinOutCallExprModel)(d.model).expr,
    }
    ret d
}

fn builtin_caller_new(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type")
        ret nil
    }
    if fc.args.len > 2 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut t = e.eval_expr_kind(fc.args[0].kind)
    if t == nil {
        ret nil
    }

    if !t.decl {
        e.push_err(fc.args[0].token, LogMsg.InvalidType)
        ret nil
    }

    if !is_valid_for_sptr_type(t.kind) {
        let mut s = t.kind.strct()
        if s != nil && s.decl != nil && s.decl.cpp_linked {
            e.push_err(fc.args[0].token, LogMsg.CppLinkedStructForRef)
        }
        ret nil
    }

    d.kind = &TypeKind{
        kind: &Sptr{
            elem: t.kind,
        },
    }

    if fc.args.len == 2 { // Initialize expression.
        let mut old = e.prefix
        e.prefix = t.kind

        let mut init = e.eval_expr(fc.args[1])

        e.prefix = old

        if init != nil {
            let mut token = fc.args[1].token
            const REFERENCE = false
            e.s.check_validity_for_init_expr(
                !e.immutable, REFERENCE, t.kind, init, token)
            _ = e.s.check_assign_type(false, t.kind, init, token)

            d.model = &BuiltinNewCallExprModel{
                kind: t.kind,
                init: init.model,
            }
        }
    } else {
        d.model = &BuiltinNewCallExprModel{
            kind: t.kind,
        }
    }

    ret d
}

fn builtin_caller_panic(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "message")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.kind.prim() == nil || !expr.kind.prim().is_str() {
        e.push_err(fc.token, LogMsg.PanicedWithNonStr)
    }

    let mut d = build_void_data()
    d.model = &BuiltinPanicCallExprModel{
        token: fc.token,
        expr: expr.model,
    }
    ret d
}

fn builtin_caller_make(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "size")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "type, size")
        ret nil
    }

    let mut t = e.eval_expr_kind(fc.args[0].kind)
    if t == nil {
        ret nil
    }

    match {
    | !t.decl:
        break
    | t.kind.slc() != nil:
        if fc.args.len > 3 {
            e.push_err(fc.args[3].token, LogMsg.ArgumentOverflow)
        }
        goto cont
    | t.kind.prim() != nil && t.kind.prim().is_str():
        if fc.args.len > 2 {
            e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
        }
        goto cont
    }
    e.push_err(fc.args[0].token, LogMsg.InvalidType)
    ret nil
cont:
    d.kind = t.kind

    let mut len = e.s.evalp(e.lookup, t.kind).eval_expr(fc.args[1])
    if len == nil {
        ret nil
    }

    e.check_integer_indexing_by_data(len, fc.args[1].token)

    let mut model = &BuiltinMakeCallExprModel{
        kind: t.kind,
        len: len.model,
    }
    d.model = model
    if fc.args.len == 3 {
        let mut cap = e.s.evalp(e.lookup, t.kind).eval_expr(fc.args[2])
        if cap == nil {
            ret d
        }
        e.check_integer_indexing_by_data(cap, fc.args[2].token)
        model.cap = cap.model
    }
    ret d
}

fn builtin_caller_append(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }

    let mut t = e.eval_expr(fc.args[0])
    if t == nil {
        ret nil
    }

    if t.kind.slc() == nil {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut f = &FnIns{
        params: [
            &ParamIns{
                decl: &Param{
                    mutable: true,
                },
                kind: t.kind,
            },
            &ParamIns{
                decl: &Param{
                    mutable: true,
                    variadic: true,
                },
                kind: t.kind.slc().elem,
            },
        ],
        result: t.kind,
        caller: builtin_caller_common_plain,
    }
    d.kind = &TypeKind{
        kind: f,
    }
    d.model = &CommonIdentExprModel{
        ident: "append",
    }

    d = builtin_caller_common_plain(e, fc, d)
    if d != nil {
        let mut model = (&FnCallExprModel)(d.model)
        d.model = &BuiltinAppendCallExprModel{
            dest: model.args[0],
            elements: model.args[1],
        }
    }
    ret d
}

fn caller_copy_slice(mut &dest: &Data, mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !dest.mutable {
        e.push_err(fc.args[0].token, LogMsg.MutOperationOnImmut)
    }

    let mut src = e.eval_expr(fc.args[1])
    if src == nil {
        ret nil
    }
    let mut slc = src.kind.slc()

    if slc != nil {
        if !src.mutable && slc.elem.mutable() {
            e.push_err(fc.args[1].token, LogMsg.MutOperationOnImmut)
        }
        if !dest.kind.equals(src.kind) {
            e.push_err(fc.args[1].token, LogMsg.IncompatibleTypes, dest.kind.to_str(), src.kind.to_str())
        }
    } else {
        let dest_prim = dest.kind.slc().elem.prim()
        let prim = src.kind.prim()
        if  dest_prim == nil || prim == nil || !prim.is_str() || !dest_prim.is_u8() {
            e.push_err(fc.args[1].token, LogMsg.IncompatibleTypes, dest.kind.to_str(), src.kind.to_str())
        }
    }

    d.kind = &TypeKind{kind: build_prim_type(PrimKind.Int)}
    d.model = &BuiltinCopyCallExprModel{
        dest: dest,
        src:  src,
    }
    ret d
}

fn caller_copy_str(mut &dest: &Data, mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !dest.mutable {
        e.push_err(fc.args[0].token, LogMsg.MutOperationOnImmut)
    }

    let mut src = e.eval_expr(fc.args[1])
    if src == nil {
        ret nil
    }
    match {
    | src.kind.prim() != nil:
        if src.kind.prim().is_str() {
            goto end
        }
    | src.kind.slc() != nil:
        let mut slc = src.kind.slc()
        if slc.elem.prim() != nil && slc.elem.prim().is_u8() {
            goto end
        }
    }
    e.push_err(fc.args[1].token, LogMsg.IncompatibleTypes, dest.kind.to_str(), src.kind.to_str())
end:
    d.kind = &TypeKind{kind: build_prim_type(PrimKind.Int)}
    d.model = &BuiltinCopyCallExprModel{
        dest: dest,
        src:  src,
    }
    ret d
}

fn builtin_caller_copy(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }
    if fc.args.len > 2 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut dest = e.eval_expr(fc.args[0])
    match {
    | dest == nil:
        ret nil
    | dest.kind.slc() != nil:
        ret caller_copy_slice(dest, e, fc, d)
    | dest.kind.prim() != nil && dest.kind.prim().is_str():
        ret caller_copy_str(dest, e, fc, d)
    |:
        e.push_err(fc.args[0].token, LogMsg.InvalidType)
        ret nil
    }
}

fn builtin_caller_clone(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret nil
    }

    if !d.kind.supports_cloning() {
        match {
        | d.kind.slc() != nil
        | d.kind.map() != nil
        | d.kind.arr() != nil
        | d.kind.sptr() != nil:
            unsafe {
                e.push_err(fc.args[0].token,
                    LogMsg.InternalTypeNotSupportsClone, d.kind.to_str())
            }
        | d.kind.strct() != nil:
            unsafe {
                e.push_err(fc.args[0].token, LogMsg.TypeIsNotDerives,
                    d.kind.to_str(), Derive.Clone)
            }
        |:
            unsafe {
                e.push_err(fc.args[0].token, LogMsg.TypeNotSupportsClone,
                    d.kind.to_str(), Derive.Clone)
            }
        }
    }

    d.mutable = true
    d.model = &BuiltinCloneCallExprModel{expr: d.model}
    ret d
}

fn builtin_caller_assert(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 2 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.kind.prim() == nil || !expr.kind.prim().is_bool() {
        e.push_err(fc.token, LogMsg.AssertNonBool)
    }

    let mut model = &BuiltinAssertCallExprModel{
        token: fc.token,
        expr: expr.model,
        log: "assertion failed", // Default log message.
    }

    // Custom log message is exist.
    if fc.args.len == 2 {
        let mut log = e.eval_expr(fc.args[1])
        if log == nil {
            ret nil
        }

        if !log.is_const() || log.kind.prim() == nil || !log.kind.prim().is_str() {
            e.push_err(fc.args[1].token, LogMsg.IncompatibleTypes, "const str", log.kind.to_str())
            ret nil
        }

        model.log = log.constant.read_str()
    }

    let mut d = build_void_data()
    d.model = model
    ret d
}

fn builtin_caller_std_mem_size_of(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    let mut result = &Data{
        kind: &TypeKind{kind: build_prim_type(PrimKind.Uint)},
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret result
    }

    result.model = &SizeofExprModel{expr: d.model}
    ret result
}

fn builtin_caller_std_mem_align_of(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    let mut result = &Data{
        kind: &TypeKind{kind: build_prim_type(PrimKind.Uint)},
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret result
    }

    result.model = &AlignofExprModel{expr: d.model}
    ret result
}

fn builtin_caller_std_mem_free(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "h")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret nil
    }

    if !d.kind.performs_rc() {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
    }

    let mut result = build_void_data()
    result.model = &FreeExprModel{expr: d.model}
    ret result
}

fn builtin_caller_std_jule_integrated_to_str(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret nil
    }

    if !is_builtin_str_convertable(d.kind) {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    ret &Data{
        kind: &TypeKind{kind: build_prim_type(PrimKind.Str)},
        model: &IntegratedToStrExprModel{
            expr: d.model,
        },
    }
}

fn builtin_caller_std_jule_integrated_emit(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !e.is_unsafe() {
        e.push_err(fc.token, LogMsg.UnsafeBehaviorAtOutOfUnsafeScope)
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "code")
        ret nil
    }

    let mut argd = e.eval_expr(fc.args[0])
    if argd == nil {
        ret nil
    }

    if argd.kind.prim() == nil || !argd.kind.prim().is_str() {
        e.push_err(fc.args[0].token, LogMsg.IncompatibleTypes, PrimKind.Str, argd.kind.to_str())
        ret nil
    }

    if !argd.is_const() || !argd.constant.is_str() {
        e.push_err(fc.args[0].token, LogMsg.ExprNotConst)
        ret nil
    }

    let mut r = build_void_data()

    let mut f = d.kind.fnc()
    if f.generics.len > 0 {
        r.kind = f.generics[0].kind
    }

    let mut model = &BackendEmitExprModel{
        code: argd.constant.read_str(),
    }

    if fc.args.len > 1 {
        model.exprs = make([]ExprModel, 0, fc.args.len - 1)
        for (_, mut arg) in fc.args[1:] {
            argd = e.eval_expr_kind(arg.kind)
            if argd == nil {
                ret nil
            }
            model.exprs = append(model.exprs, argd.model)
        }
    }

    r.model = model
    ret r
}

fn builtin_caller_std_debug_out(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtin_caller_out(e, fc, d)
    if d == nil {
        ret nil
    }

    (&BuiltinOutCallExprModel)(d.model).debug = true
    ret d
}

fn builtin_caller_std_debug_outln(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtin_caller_outln(e, fc, d)
    if d == nil {
        ret nil
    }

    (&BuiltinOutlnCallExprModel)(d.model).debug = true
    ret d
}