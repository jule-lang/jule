// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use fmt for std::fmt
use std::jule::ast::{
	FnCallExpr,
	TypeDecl,
	IdentTypeDecl,
	GenericDecl,
	IdentExpr,
	VariadicExpr,
}
use mod for std::jule::internal::mod
use std::jule::build::{LogMsg}
use std::jule::constant::{Const}

// Type alias for built-in function callers.
//
// Parameters;
//  e: Caller owner Eval instance.
//  fc: Function call expression.
//  d: Data instance for evaluated expression of function.
type builtinCaller: fn(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data

fn findBuiltinFunc(&ident: str): &FnIns {
	match ident {
	| "out":
		static mut f = &FnIns{caller: builtinCallerOut}
		ret f
	| "outln":
		static mut f = &FnIns{caller: builtinCallerOutln}
		ret f
	| "new":
		static mut f = &FnIns{caller: builtinCallerNew}
		ret f
	| "panic":
		static mut f = &FnIns{caller: builtinCallerPanic}
		ret f
	| "make":
		static mut f = &FnIns{caller: builtinCallerMake}
		ret f
	| "append":
		static mut f = &FnIns{caller: builtinCallerAppend}
		ret f
	| "copy":
		static mut f = &FnIns{caller: builtinCallerCopy}
		ret f
	| "len":
		static mut f = &FnIns{caller: builtinCallerLen}
		ret f
	| "cap":
		static mut f = &FnIns{caller: builtinCallerCap}
		ret f
	| "delete":
		static mut f = &FnIns{caller: builtinCallerDelete}
		ret f
	| "assert":
		static mut f = &FnIns{caller: builtinCallerAssert}
		ret f
	|:
		ret nil
	}
}

fn primTypeAlias(mut &k: &TypeKind): &TypeAlias {
	ret &TypeAlias{
		Public: true,
		Kind: &TypeSymbol{
			Kind: k,
		},
	}
}

static mut primNil = &TypeKind{Kind: nil}
static mut primVoid = &TypeKind{Kind: buildPrimType("void")}
static mut primAny = &TypeKind{Kind: buildPrimType(PrimKind.Any)}
static mut primStr = &TypeKind{Kind: buildPrimType(PrimKind.Str)}
static mut primBool = &TypeKind{Kind: buildPrimType(PrimKind.Bool)}
static mut primUintptr = &TypeKind{Kind: buildPrimType(PrimKind.Uintptr)}
static mut primUint = &TypeKind{Kind: buildPrimType(PrimKind.Uint)}
static mut primInt = &TypeKind{Kind: buildPrimType(PrimKind.Int)}
static mut primI8 = &TypeKind{Kind: buildPrimType(PrimKind.I8)}
static mut primI16 = &TypeKind{Kind: buildPrimType(PrimKind.I16)}
static mut primI32 = &TypeKind{Kind: buildPrimType(PrimKind.I32)}
static mut primI64 = &TypeKind{Kind: buildPrimType(PrimKind.I64)}
static mut primU8 = &TypeKind{Kind: buildPrimType(PrimKind.U8)}
static mut primU16 = &TypeKind{Kind: buildPrimType(PrimKind.U16)}
static mut primU32 = &TypeKind{Kind: buildPrimType(PrimKind.U32)}
static mut primU64 = &TypeKind{Kind: buildPrimType(PrimKind.U64)}
static mut primF32 = &TypeKind{Kind: buildPrimType(PrimKind.F32)}
static mut primF64 = &TypeKind{Kind: buildPrimType(PrimKind.F64)}

fn findBuiltinVar(&ident: str): &Var {
	match ident {
	| "nil":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			Kind: &TypeSymbol{
				Kind: primNil,
			},
			Constant: true,
			Value: &Value{
				Data: &Data{
					Constant: Const.NewNil(),
				},
			},
		}
		ret v
	| "true":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			Kind: findBuiltinTypeAlias("bool").Kind,
			Constant: true,
			Value: &Value{
				Data: &Data{
					Constant: Const.NewBool(true),
				},
			},
		}
		ret v
	| "false":
		static mut v = &Var{
			Public: true,
			Mutable: false,
			Kind: findBuiltinTypeAlias("bool").Kind,
			Constant: true,
			Value: &Value{
				Data: &Data{
					Constant: Const.NewBool(false),
				},
			},
		}
		ret v
	|:
		ret nil
	}
}

fn findBuiltinTypeAlias(ident: str): &TypeAlias {
	match ident {
	| "any":
		static mut t = primTypeAlias(primAny)
		ret t
	| "str":
		static mut t = primTypeAlias(primStr)
		ret t
	| "bool":
		static mut t = primTypeAlias(primBool)
		ret t
	| "uintptr":
		static mut t = primTypeAlias(primUintptr)
		ret t
	| "uint":
		static mut t = primTypeAlias(primUint)
		ret t
	| "int":
		static mut t = primTypeAlias(primInt)
		ret t
	| "i8":
		static mut t = primTypeAlias(primI8)
		ret t
	| "i16":
		static mut t = primTypeAlias(primI16)
		ret t
	| "i64":
		static mut t = primTypeAlias(primI64)
		ret t
	| "u16":
		static mut t = primTypeAlias(primU16)
		ret t
	| "u32":
		static mut t = primTypeAlias(primU32)
		ret t
	| "u64":
		static mut t = primTypeAlias(primU64)
		ret t
	| "f32":
		static mut t = primTypeAlias(primF32)
		ret t
	| "f64":
		static mut t = primTypeAlias(primF64)
		ret t
	| "byte" | "u8":
		static mut t = primTypeAlias(primU8)
		ret t
	| "rune" | "i32":
		static mut t = primTypeAlias(primI32)
		ret t
	|:
		ret nil
	}
}

fn findBuiltinDef(&ident: str): any {
	mut v := findBuiltinVar(ident)
	if v != nil {
		ret v
	}
	mut f := findBuiltinFunc(ident)
	if f != nil {
		ret f
	}
	mut ta := findBuiltinTypeAlias(ident)
	if ta != nil {
		ret ta
	}
	ret nil
}

fn findBuiltinDefStdDebug(&ident: str): any {
	match ident {
	| "Out":
		static mut f = &FnIns{caller: builtinCallerStdDebugOut}
		ret f
	| "Outln":
		static mut f = &FnIns{caller: builtinCallerStdDebugOutln}
		ret f
	|:
		ret nil
	}
}

fn findBuiltinDefStdMem(&ident: str): any {
	match ident {
	| "SizeOf":
		static mut f = &FnIns{caller: builtinCallerStdMemSizeOf}
		ret f
	| "AlignOf":
		static mut f = &FnIns{caller: builtinCallerStdMemAlignOf}
		ret f
	| "Free":
		static mut f = &FnIns{caller: builtinCallerStdMemFree}
		ret f
	|:
		ret nil
	}
}

fn findBuiltinDefStdComptime(&ident: str): any {
	match ident {
	| "TypeOf":
		static mut f = &FnIns{caller: builtinCallerStdComptimeTypeOf}
		ret f
	| "ValueOf":
		static mut f = &FnIns{caller: builtinCallerStdComptimeValueOf}
		ret f
	| "Line":
		static mut f = &FnIns{caller: builtinCallerStdComptimeLine}
		ret f
	| "File":
		static mut f = &FnIns{caller: builtinCallerStdComptimeFile}
		ret f
	| "Files":
		static mut f = &FnIns{caller: builtinCallerStdComptimeFiles}
		ret f
	| "TypeAlias":
		static mut f = &FnIns{caller: builtinCallerStdComptimeTypeAlias}
		ret f
	|:
		ret nil
	}
}

fn findBuiltinDefStdJuleIntegrated(&ident: str): any {
	match ident {
	| "ToStr":
		static mut f = &FnIns{caller: builtinCallerStdJuleIntegratedToStr}
		ret f
	| "Emit":
		static mut f = &FnIns{
			Decl: &Fn{
				Generics: make([]&GenericDecl, 1),
			},
			caller: builtinCallerStdJuleIntegratedEmit,
		}
		ret f
	|:
		ret nil
	}
}

fn findPackageBuiltinDef(&linkPath: str, &ident: str): any {
	match linkPath {
	| "std::comptime":
		ret findBuiltinDefStdComptime(ident)
	| "std::debug":
		ret findBuiltinDefStdDebug(ident)
	| "std::mem":
		ret findBuiltinDefStdMem(ident)
	| "std::jule::integrated":
		ret findBuiltinDefStdJuleIntegrated(ident)
	|:
		ret nil
	}
}

fn builtinCallerError(mut &e: &eval, mut &fc: &FnCallExpr): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "err")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "error")
	}
	mut expr := e.evalExpr(fc.Args[0])
	if expr == nil {
		ret nil
	}

	if expr.IsNil() {
		e.pushErr(fc.Args[0].Token, LogMsg.NilError)
	}

	mut d := buildVoidData()
	d.Model = &BuiltinErrorCallExprModel{Err: expr}
	ret d
}

fn builtinCallerOut(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "v")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "out")
	}

	mut expr := e.evalExpr(fc.Args[0])
	if expr == nil {
		ret nil
	}

	if !isBuiltinStrConvertable(expr.Kind) {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	}

	mut d := buildVoidData()
	d.Model = &BuiltinOutCallExprModel{Expr: expr.Model}
	ret d
}

fn builtinCallerOutln(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	d = builtinCallerOut(e, fc, d)
	if d == nil {
		ret nil
	}

	d.Model = &BuiltinOutlnCallExprModel{
		Expr: (&BuiltinOutCallExprModel)(d.Model).Expr,
	}
	ret d
}

fn builtinCallerNew(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "new")
	}

	mut t := e.eval1(fc.Args[0])
	if t == nil {
		ret nil
	}

	if !t.Decl {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
		ret nil
	}

	if !isValidForSptrType(t.Kind) {
		mut s := t.Kind.Struct()
		if s != nil && s.Decl != nil && s.Decl.Binded {
			e.pushErr(fc.Args[0].Token, LogMsg.BindedStructForRef)
		}
		ret nil
	}

	d.Kind = &TypeKind{
		Kind: &Sptr{
			Elem: t.Kind,
		},
	}

	if len(fc.Args) == 2 { // Initialize expression.
		mut old := e.prefix
		e.prefix = t.Kind

		mut init := e.evalExpr(fc.Args[1])

		e.prefix = old

		if init != nil {
			mut token := fc.Args[1].Token
			const Reference = false
			e.s.checkValidityForInitExpr(
				!e.immutable, Reference, t.Kind, init, token)
			_ = e.s.checkAssignType(false, t.Kind, init, token)

			d.Model = &BuiltinNewCallExprModel{
				Kind: t.Kind,
				Init: init.Model,
			}
		}
	} else {
		d.Model = &BuiltinNewCallExprModel{
			Kind: t.Kind,
		}
	}

	ret d
}

fn builtinCallerPanic(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "message")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "panic")
	}

	mut expr := e.evalExpr(fc.Args[0])
	if expr == nil {
		ret nil
	}

	if expr.Kind.Prim() == nil || !expr.Kind.Prim().IsStr() {
		e.pushErr(fc.Token, LogMsg.PanicedWithNonStr)
	}

	mut d := buildVoidData()
	d.Model = &BuiltinPanicCallExprModel{
		Token: fc.Token,
		Expr: expr.Model,
	}
	ret d
}

fn builtinCallerMake(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, LogMsg.MissingExprFor, "size")
			ret nil
		}
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type, size")
		ret nil
	} else if len(fc.Args) > 3 {
		e.pushErr(fc.Args[3].Token, LogMsg.ArgumentOverflow, "make")
		ret nil
	}

	mut t := e.evalExprKind(fc.Args[0].Kind)
	if t == nil {
		ret nil
	}

	if !t.Decl {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
		ret nil
	} else if t.Kind.Slc() == nil {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, t.Kind.Str(), "make")
		ret nil
	}

	d.Kind = t.Kind

	mut lenExpr := e.s.evalp(e.lookup, t.Kind).evalExpr(fc.Args[1])
	if lenExpr == nil {
		ret nil
	}

	e.checkIntegerIndexingByData(lenExpr, fc.Args[1].Token)

	mut model := &BuiltinMakeCallExprModel{
		Kind: t.Kind,
		Len: lenExpr.Model,
	}
	d.Model = model
	if len(fc.Args) == 3 {
		mut capExpr := e.s.evalp(e.lookup, t.Kind).evalExpr(fc.Args[2])
		if capExpr == nil {
			ret d
		}
		e.checkIntegerIndexingByData(capExpr, fc.Args[2].Token)
		model.Cap = capExpr.Model
	}
	ret d
}

fn builtinCallerAppend(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, LogMsg.MissingExprFor, "values")
			ret nil
		}
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "src, values")
		ret nil
	}

	mut firstArg := fc.Args[0]
	mut t := e.evalExpr(firstArg)
	if t == nil {
		ret nil
	}

	mut s := t.Kind.Slc()
	if s == nil {
		e.pushErr(firstArg.Token, LogMsg.InvalidExpr)
		ret nil
	}

	const reference = false // Element parameter is not reference.
	const mutable = true    // Element parameter is mutable.

	if e.s.checkValidityForInitExpr(mutable, reference, t.Kind, t, firstArg.Token) {
		// Check type if validity is good.
		// Helps to reduce error logs and duplicated logs.
		_ = e.s.checkAssignType(reference, t.Kind, t, firstArg.Token)
	}

	mut prefix := e.prefix
	e.prefix = t.Kind
	defer { e.prefix = prefix }

	d = &Data{
		Mutable: true,
		Kind: t.Kind,
	}
	mut secondArg := fc.Args[1]
	match type secondArg.Kind {
	| &VariadicExpr:
		if len(fc.Args) > 2 {
			e.pushErr(fc.Args[2].Token, LogMsg.MoreArgsWithVariadiced)
		}

		mut e1 := e.evalExpr((&VariadicExpr)(secondArg.Kind).Expr)
		if e1 == nil {
			ret nil
		}
		if s.Elem.Prim() != nil && s.Elem.Prim().IsU8() { // []byte
			if e1.Kind.Prim() != nil && e1.Kind.Prim().IsStr() {
				// append([]byte, str...)
				makeVariadic(e1, primU8)
				d.Model = &BuiltinAppendCallExprModel{
					Dest: t.Model,
					Elements: e1.Model,
				}
				ret d
			}
		}

		if !e1.Kind.Variadicable() {
			e.pushErr(secondArg.Token, LogMsg.VariadicWithNonVariadicable, e1.Kind.Str())
			ret nil
		}
		makeVariadic(e1, s.Elem)

		if e.s.checkValidityForInitExpr(mutable, reference, s.Elem, e1, secondArg.Token) {
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, s.Elem, e1, secondArg.Token)
		}
		d.Model = &BuiltinAppendCallExprModel{
			Dest: t.Model,
			Elements: e1.Model,
		}
		ret d
	}

	mut e1 := e.evalExpr(secondArg)
	if e1 == nil {
		ret nil
	}

	mut slice := &SliceExprModel{
		ElemKind: s.Elem,
		Elems: make([]ExprModel, 0, len(fc.Args) - 1),
	}
	for (_, mut arg) in fc.Args[1:] {
		e1 = e.evalExpr(arg)
		if e1 == nil {
			ret nil
		}
		if e1.Kind.Variadic {
			e.pushErr(arg.Token, LogMsg.MoreArgsWithVariadiced)
		}
		if e.s.checkValidityForInitExpr(mutable, reference, s.Elem, e1, arg.Token) {
			// Check type if validity is good.
			// Helps to reduce error logs and duplicated logs.
			_ = e.s.checkAssignType(reference, s.Elem, e1, arg.Token)
		}
		slice.Elems = append(slice.Elems, e1.Model)
	}
	d.Model = &BuiltinAppendCallExprModel{
		Dest: t.Model,
		Elements: slice,
	}
	ret d
}

fn callerCopySlice(mut &dest: &Data, mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if !dest.Mutable {
		e.pushErr(fc.Args[0].Token, LogMsg.MutOperationOnImmut)
	}

	mut src := e.evalExpr(fc.Args[1])
	if src == nil {
		ret nil
	}
	mut slc := src.Kind.Slc()

	if slc != nil {
		if !src.Mutable && slc.Elem.Mutable() {
			e.pushErr(fc.Args[1].Token, LogMsg.MutOperationOnImmut)
		}
		if !dest.Kind.Equal(src.Kind) {
			e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, dest.Kind.Str(), src.Kind.Str())
		}
	} else {
		destPrim := dest.Kind.Slc().Elem.Prim()
		prim := src.Kind.Prim()
		if destPrim == nil || prim == nil || !prim.IsStr() || !destPrim.IsU8() {
			e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, dest.Kind.Str(), src.Kind.Str())
		}
	}

	d.Kind = lenKind()
	d.Model = &BuiltinCopyCallExprModel{
		Dest: dest,
		Src: src,
	}
	ret d
}

fn builtinCallerCopy(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 2 {
		if len(fc.Args) == 1 {
			e.pushErr(fc.Token, LogMsg.MissingExprFor, "src")
			ret nil
		}
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "src, values")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "copy")
	}

	mut dest := e.evalExpr(fc.Args[0])
	match {
	| dest == nil:
		ret nil
	| dest.Kind.Slc() != nil:
		ret callerCopySlice(dest, e, fc, d)
	|:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
		ret nil
	}
}

fn callerLenSlice(mut &expr: &Data, mut &d: &Data): &Data {
	d.Kind = lenKind()
	d.Model = &BuiltinLenCallExprModel{
		Expr: expr,
	}
	ret d
}

fn callerLenMap(mut &expr: &Data, mut &d: &Data): &Data {
	d.Kind = lenKind()
	d.Model = &BuiltinLenCallExprModel{
		Expr: expr,
	}
	ret d
}

fn callerLenArr(mut &expr: &Data, mut &d: &Data): &Data {
	d.Kind = lenKind()
	d.Constant = Const.NewI64(i64(expr.Kind.Arr().N))
	d.Model = d.Constant
	ret d
}

fn callerLenStr(mut &expr: &Data, mut &d: &Data): &Data {
	d.Kind = lenKind()
	if expr.IsConst() {
		d.Constant = Const.NewI64(i64(len(expr.Constant.ReadStr())))
		d.Model = d.Constant
	} else {
		d.Model = &BuiltinLenCallExprModel{
			Expr: expr,
		}
	}
	ret d
}

fn callerLenComptime(mut &d: &Data, n: int): &Data {
	d.Kind = lenKind()
	d.Constant = Const.NewI64(i64(n))
	d.Model = d.Constant
	ret d
}

fn builtinCallerLen(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "obj")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "len")
	}
	mut dest := e.evalExpr1(fc.Args[0])
	match {
	| dest == nil:
		ret nil
	| dest.Kind.Slc() != nil:
		ret callerLenSlice(dest, d)
	| dest.Kind.Arr() != nil:
		ret callerLenArr(dest, d)
	| dest.Kind.Map() != nil:
		ret callerLenMap(dest, d)
	| dest.Kind.Prim() != nil && dest.Kind.Prim().IsStr():
		ret callerLenStr(dest, d)
	| dest.Kind.comptimeStructFields() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeStructFields().fields))
	| dest.Kind.comptimeEnumFields() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeEnumFields().fields))
	| dest.Kind.comptimeTypeInfos() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeTypeInfos().types))
	| dest.Kind.comptimeParams() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeParams().params))
	| dest.Kind.comptimeStatics() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeStatics().fields))
	| dest.Kind.comptimeFiles() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeFiles().files))
	| dest.Kind.comptimeDecls() != nil:
		ret callerLenComptime(d, len(dest.Kind.comptimeDecls().decls))
	|:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	}
}

fn callerCapSlice(mut &expr: &Data, mut &d: &Data): &Data {
	d.Kind = lenKind()
	d.Model = &BuiltinCapCallExprModel{
		Expr: expr,
	}
	ret d
}

fn builtinCallerCap(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "obj")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "cap")
	}
	mut dest := e.evalExpr(fc.Args[0])
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	| dest.Kind.Slc() != nil:
		ret callerCapSlice(dest, d)
	|:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	}
}

fn callerDeleteMap(mut &e: &eval, mut &fc: &FnCallExpr, mut &expr: &Data, mut &d: &Data): &Data {
	if !expr.Mutable {
		e.pushErr(fc.Args[0].Token, LogMsg.MutOperationOnImmut)
	}
	d = buildVoidData()
	mut model := &BuiltinDeleteCallExprModel{
		Dest: expr,
	}
	if len(fc.Args) == 2 {
		mut key := e.evalExpr(fc.Args[1])
		match {
		| key == nil:
			ret nil
		| key.Decl:
			e.pushErr(fc.Args[1].Token, LogMsg.InvalidExpr)
			ret nil
		|:
			const Reference = false
			mut keyType := expr.Kind.Map().Key
			if !e.s.checkAssignType(Reference, keyType, key, fc.Args[1].Token) {
				ret nil
			}
		}
		model.Key = key
	}
	d.Model = model
	ret d
}

fn builtinCallerDelete(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "map")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "delete")
	}
	mut dest := e.evalExpr(fc.Args[0])
	match {
	| dest == nil:
		ret nil
	| dest.Decl:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	| dest.Kind.Map() != nil:
		ret callerDeleteMap(e, fc, dest, d)
	|:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	}
}

fn builtinCallerAssert(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
		ret nil
	}
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "assert")
	}

	mut expr := e.evalExpr(fc.Args[0])
	if expr == nil {
		ret nil
	}

	if expr.Kind.Prim() == nil || !expr.Kind.Prim().IsBool() {
		e.pushErr(fc.Token, LogMsg.AssertNonBool)
	}

	mut model := &BuiltinAssertCallExprModel{
		Token: fc.Token,
		Expr: expr.Model,
		Log: "assertion failed", // Default log message.
	}

	// Custom log message is exist.
	if len(fc.Args) == 2 {
		mut log := e.evalExpr(fc.Args[1])
		if log == nil {
			ret nil
		}

		if !log.IsConst() || log.Kind.Prim() == nil || !log.Kind.Prim().IsStr() {
			e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, "const str", log.Kind.Str())
			ret nil
		}

		model.Log = log.Constant.ReadStr()
	}

	mut d := buildVoidData()
	d.Model = model
	ret d
}

fn builtinCallerStdComptimeTypeOf(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "TypeOf")
	}

	mut d := e.evalExprKind(fc.Args[0].Kind)
	if d == nil {
		ret nil
	}
	f := d.Kind.Fn()
	if f != nil {
		if f.IsBuiltin() {
			e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForTypeOf, "<built-in fn>")
			ret nil
		}
		if len(f.Generics) != len(f.Decl.Generics) {
			e.pushErr(fc.Args[0].Token, LogMsg.HasGenerics)
			ret nil
		}
	}
	s := d.Kind.Struct()
	if s != nil && len(s.Generics) != len(s.Decl.Generics) {
		e.pushErr(fc.Args[0].Token, LogMsg.HasGenerics)
		ret nil
	}
	if d.Kind.comptime() {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForTypeOf, d.Kind.Str())
		ret nil
	}
	ret buildComptimeTypeInfoData(e.s, d.Kind)
}

fn builtinCallerStdComptimeValueOf(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "ValueOf")
	}
	mut d := e.evalExpr(fc.Args[0])
	if d == nil {
		ret nil
	}
	// Do not allow value if has unsupported type for type infer.
	if !isGoodValueToInfer(d) {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "ValueOf")
		ret nil
	}
	ret buildComptimeValue(d)
}

fn builtinCallerStdComptimeLine(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Line")
	}
	mut constant := Const.NewI64(i64(fc.Token.Row))
	ret &Data{
		Kind: primInt,
		Constant: constant,
		Model: constant,
	}
}

fn builtinCallerStdComptimeFile(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "File")
	}
	ret &Data{
		Kind: &TypeKind{
			Kind: &comptimeFile{
				file: e.s.file,
			},
		},
	}
}

fn builtinCallerStdComptimeFiles(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) > 0 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Files")
	}
	ret &Data{
		Kind: &TypeKind{
			Kind: &comptimeFiles{
				files: e.s.files,
			},
		},
	}
}

fn builtinCallerStdComptimeTypeAlias(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) > 2 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "TypeAlias")
		ret nil
	}
	if len(fc.Args) == 0 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "ident, type")
		ret nil
	}
	if len(fc.Args) == 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type")
		ret nil
	}
	match type fc.Args[0].Kind {
	| &IdentExpr:
		break
	|:
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidSyntax)
		e.pushSuggestion(LogMsg.ExpectedIdentifier)
		ret nil
	}
	mut ident := (&IdentExpr)(fc.Args[0].Kind).Token
	match type e.lookup {
	| &scopeChecker:
		break
	|:
		e.pushErr(fc.Token, LogMsg.CalledOutOfScope, "TypeAlias")
		ret nil
	}

	mut sc := (&scopeChecker)(e.lookup)
	mut alias := &TypeAlias{
		Scope: sc.tree,
		Public: mod::IsPub(ident.Kind),
		Binded: false,
		Used: false,
		Generic: false,
		Token: ident,
		Ident: ident.Kind,
		Kind: new(TypeSymbol),
	}
	mut t := e.eval1(fc.Args[1])
	if t == nil {
		ret nil
	}
	if t.Decl {
		alias.Kind.Kind = t.Kind
	} else {
		mut cti := t.Kind.comptimeTypeInfo()
		if cti == nil {
			e.pushErr(fc.Args[1].Token, LogMsg.InvalidSyntax)
			e.pushSuggestion(LogMsg.ExpectedType)
			ret nil
		}
		alias.Kind.Kind = cti.base
	}
	sc.checkTypeAlias(alias)
	ret buildVoidData()
}

fn builtinCallerStdMemSizeOf(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	mut result := &Data{
		Kind: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "SizeOf")
	}

	mut d := e.evalExprKind(fc.Args[0].Kind)
	if d == nil {
		ret result
	}
	if !validTypeForXof(d.Kind) {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "SizeOf")
	}

	result.Model = &SizeofExprModel{Expr: d.Model}
	ret result
}

fn builtinCallerStdMemAlignOf(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	mut result := &Data{
		Kind: primUint,
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
		ret result
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "AlignOf")
	}

	mut d := e.evalExprKind(fc.Args[0].Kind)
	if d == nil {
		ret result
	}
	if !validTypeForXof(d.Kind) {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "AlignOf")
	}

	result.Model = &AlignofExprModel{Expr: d.Model}
	ret result
}

fn builtinCallerStdMemFree(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "h")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Free")
	}

	mut d := e.evalExpr(fc.Args[0])
	if d == nil {
		ret nil
	}

	if !d.Kind.GC() {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
	}

	mut result := buildVoidData()
	result.Model = &FreeExprModel{Expr: d.Model}
	ret result
}

fn builtinCallerStdJuleIntegratedToStr(mut &e: &eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
		ret nil
	}
	if len(fc.Args) > 1 {
		e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "ToStr")
	}

	mut d := e.evalExpr(fc.Args[0])
	if d == nil {
		ret nil
	}

	if !isBuiltinStrConvertable(d.Kind) {
		e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
		ret nil
	}

	ret &Data{
		Kind: primStr,
		Model: &IntegratedToStrExprModel{
			Expr: d.Model,
		},
	}
}

fn builtinCallerStdJuleIntegratedEmit(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	if !e.isUnsafe() {
		e.pushErr(fc.Token, LogMsg.UnsafeBehaviorAtOutOfUnsafeScope)
	}

	if len(fc.Args) < 1 {
		e.pushErr(fc.Token, LogMsg.MissingExprFor, "code")
		ret nil
	}

	mut argd := e.evalExpr(fc.Args[0])
	if argd == nil {
		ret nil
	}

	if argd.Kind.Prim() == nil || !argd.Kind.Prim().IsStr() {
		e.pushErr(fc.Args[0].Token, LogMsg.IncompatibleTypes, PrimKind.Str, argd.Kind.Str())
		ret nil
	}

	if !argd.IsConst() || !argd.Constant.IsStr() {
		e.pushErr(fc.Args[0].Token, LogMsg.ExprNotConst)
		ret nil
	}

	mut r := buildVoidData()

	mut f := d.Kind.Fn()
	if len(f.Generics) > 0 {
		r.Kind = f.Generics[0].Kind
	}

	mut model := &BackendEmitExprModel{
		Code: argd.Constant.ReadStr(),
	}

	if len(fc.Args) > 1 {
		model.Exprs = make([]ExprModel, 0, len(fc.Args) - 1)
		for (_, mut arg) in fc.Args[1:] {
			argd = e.eval1(arg)
			if argd == nil {
				ret nil
			}
			model.Exprs = append(model.Exprs, argd.Model)
		}
	}

	r.Model = model
	ret r
}

fn builtinCallerStdDebugOut(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	d = builtinCallerOut(e, fc, d)
	if d == nil {
		ret nil
	}
	(&BuiltinOutCallExprModel)(d.Model).Debug = true
	ret d
}

fn builtinCallerStdDebugOutln(mut &e: &eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
	d = builtinCallerOutln(e, fc, d)
	if d == nil {
		ret nil
	}
	(&BuiltinOutlnCallExprModel)(d.Model).Debug = true
	ret d
}