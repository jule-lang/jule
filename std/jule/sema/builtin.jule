// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use fmt for std::fmt
use std::jule::ast::{
    FnCallExpr,
    TypeDecl,
    IdentTypeDecl,
    GenericDecl,
}
use std::jule::build::{Derive, LogMsg}
use std::jule::constant::{Const}

// Type alias for built-in function callers.
//
// Parameters;
//  e: Caller owner Eval instance.
//  fc: Function call expression.
//  d: Data instance for evaluated expression of function.
type builtinCaller: fn(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data

fn findBuiltinFn(ident: str): &FnIns {
    match ident {
    | "out":
        static mut f = &FnIns{caller: builtinCallerOut}
        ret f
    | "outln":
        static mut f = &FnIns{caller: builtinCallerOutln}
        ret f
    | "new":
        static mut f = &FnIns{caller: builtinCallerNew}
        ret f
    | "panic":
        static mut f = &FnIns{caller: builtinCallerPanic}
        ret f
    | "make":
        static mut f = &FnIns{caller: builtinCallerMake}
        ret f
    | "append":
        static mut f = &FnIns{caller: builtinCallerAppend}
        ret f
    | "copy":
        static mut f = &FnIns{caller: builtinCallerCopy}
        ret f
    | "len":
        static mut f = &FnIns{caller: builtinCallerLen}
        ret f
    | "cap":
        static mut f = &FnIns{caller: builtinCallerCap}
        ret f
    | "delete":
        static mut f = &FnIns{caller: builtinCallerDelete}
        ret f
    | "clone":
        static mut f = &FnIns{caller: builtinCallerClone}
        ret f
    | "assert":
        static mut f = &FnIns{caller: builtinCallerAssert}
        ret f
    |:
        ret nil
    }
}

fn primTypeAlias(mut &k: &TypeKind): &TypeAlias {
    ret &TypeAlias{
        Public: true,
        Kind: &TypeSymbol{
            Kind: k,
        },
    }
}

static mut primVoid = &TypeKind{Kind: buildPrimType("void")}
static mut primAny = &TypeKind{Kind: buildPrimType(PrimKind.Any)}
static mut primStr = &TypeKind{Kind: buildPrimType(PrimKind.Str)}
static mut primBool = &TypeKind{Kind: buildPrimType(PrimKind.Bool)}
static mut primUintptr = &TypeKind{Kind: buildPrimType(PrimKind.Uintptr)}
static mut primUint = &TypeKind{Kind: buildPrimType(PrimKind.Uint)}
static mut primInt = &TypeKind{Kind: buildPrimType(PrimKind.Int)}
static mut primI8 = &TypeKind{Kind: buildPrimType(PrimKind.I8)}
static mut primI16 = &TypeKind{Kind: buildPrimType(PrimKind.I16)}
static mut primI32 = &TypeKind{Kind: buildPrimType(PrimKind.I32)}
static mut primI64 = &TypeKind{Kind: buildPrimType(PrimKind.I64)}
static mut primU8 = &TypeKind{Kind: buildPrimType(PrimKind.U8)}
static mut primU16 = &TypeKind{Kind: buildPrimType(PrimKind.U16)}
static mut primU32 = &TypeKind{Kind: buildPrimType(PrimKind.U32)}
static mut primU64 = &TypeKind{Kind: buildPrimType(PrimKind.U64)}
static mut primF32 = &TypeKind{Kind: buildPrimType(PrimKind.F32)}
static mut primF64 = &TypeKind{Kind: buildPrimType(PrimKind.F64)}

fn findBuiltinTypeAlias(ident: str): &TypeAlias {
    match ident {
    | "any":
        static mut t = primTypeAlias(primAny)
        ret t
    | "str":
        static mut t = primTypeAlias(primStr)
        ret t
    | "bool":
        static mut t = primTypeAlias(primBool)
        ret t
    | "uintptr":
        static mut t = primTypeAlias(primUintptr)
        ret t
    | "uint":
        static mut t = primTypeAlias(primUint)
        ret t
    | "int":
        static mut t = primTypeAlias(primInt)
        ret t
    | "i8":
        static mut t = primTypeAlias(primI8)
        ret t
    | "i16":
        static mut t = primTypeAlias(primI16)
        ret t
    | "i64":
        static mut t = primTypeAlias(primI64)
        ret t
    | "u16":
        static mut t = primTypeAlias(primU16)
        ret t
    | "u32":
        static mut t = primTypeAlias(primU32)
        ret t
    | "u64":
        static mut t = primTypeAlias(primU64)
        ret t
    | "f32":
        static mut t = primTypeAlias(primF32)
        ret t
    | "f64":
        static mut t = primTypeAlias(primF64)
        ret t
    | "byte" | "u8":
        static mut t = primTypeAlias(primU8)
        ret t
    | "rune" | "i32":
        static mut t = primTypeAlias(primI32)
        ret t
    |:
        ret nil
    }
}

fn findBuiltinDef(&ident: str): any {
    let mut f = findBuiltinFn(ident)
    if f != nil {
        ret f
    }
    let mut ta = findBuiltinTypeAlias(ident)
    if ta != nil {
        ret ta
    }
    ret nil
}

fn findBuiltinDefStdDebug(&ident: str): any {
    match ident {
    | "Out":
        static mut f = &FnIns{caller: builtinCallerStdDebugOut}
        ret f
    | "Outln":
        static mut f = &FnIns{caller: builtinCallerStdDebugOutln}
        ret f
    |:
        ret nil
    }
}

fn findBuiltinDefStdMem(&ident: str): any {
    match ident {
    | "SizeOf":
        static mut f = &FnIns{caller: builtinCallerStdMemSizeOf}
        ret f
    | "AlignOf":
        static mut f = &FnIns{caller: builtinCallerStdMemAlignOf}
        ret f
    | "Free":
        static mut f = &FnIns{caller: builtinCallerStdMemFree}
        ret f
    |:
        ret nil
    }
}

fn findBuiltinDefStdComptime(&ident: str): any {
    match ident {
    | "TypeOf":
        static mut f = &FnIns{caller: builtinCallerStdComptimeTypeOf}
        ret f
    | "ValueOf":
        static mut f = &FnIns{caller: builtinCallerStdComptimeValueOf}
        ret f
    | "Range":
        static mut f = &FnIns{caller: builtinCallerStdComptimeRange}
        ret f
    | "Line":
        static mut f = &FnIns{caller: builtinCallerStdComptimeLine}
        ret f
    | "File":
        static mut f = &FnIns{caller: builtinCallerStdComptimeFile}
        ret f
    | "Files":
        static mut f = &FnIns{caller: builtinCallerStdComptimeFiles}
        ret f
    |:
        ret nil
    }
}

fn findBuiltinDefStdJuleIntegrated(&ident: str): any {
    match ident {
    | "ToStr":
        static mut f = &FnIns{caller: builtinCallerStdJuleIntegratedToStr}
        ret f
    | "Emit":
        static mut f = &FnIns{
            Decl: &Fn{
                Generics: make([]&GenericDecl, 1),
            },
            caller: builtinCallerStdJuleIntegratedEmit,
        }
        ret f
    |:
        ret nil
    }
}

fn findPackageBuiltinDef(&linkPath: str, &ident: str): any {
    match linkPath {
    | "std::comptime":
        ret findBuiltinDefStdComptime(ident)
    | "std::debug":
        ret findBuiltinDefStdDebug(ident)
    | "std::mem":
        ret findBuiltinDefStdMem(ident)
    | "std::jule::integrated":
        ret findBuiltinDefStdJuleIntegrated(ident)
    |:
        ret nil
    }
}

fn builtinCallerCommonPlain(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    let mut f = d.Kind.Fn()

    let mut fcac = fnCallArgChecker{
        e: e,
        f: f,
        args: fc.Args,
        dynamicAnnotation: false,
        errorToken: fc.Token,
    }
    if !fcac.check() {
        ret nil
    }

    let mut model = &FnCallExprModel{
        Func: f,
        Expr: d.Model,
        Args: fcac.argModels,
        Token: fc.Token,
    }

    if f.Result == nil {
        d = buildVoidData()
    } else {
        d = &Data{
            Kind: f.Result,
        }
    }

    d.Model = model
    ret d
}

fn builtinCallerCommon(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    ret builtinCallerCommonPlain(e, fc, d)
}

fn builtinCallerCommonMut(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !d.Mutable {
        e.pushErr(fc.Token, LogMsg.MutOperationOnImmut)
    }
    ret builtinCallerCommon(e, fc, d)
}

fn builtinCallerError(mut &e: &Eval, mut &fc: &FnCallExpr): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "err")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "error")
    }
    let mut expr = e.evalExpr(fc.Args[0])
    if expr == nil {
        ret nil
    }

    if expr.IsNil() {
        e.pushErr(fc.Args[0].Token, LogMsg.NilError)
    }

    let mut d = buildVoidData()
    d.Model = &BuiltinErrorCallExprModel{Err: expr}
    ret d
}

fn builtinCallerOut(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "v")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "out")
    }

    let mut expr = e.evalExpr(fc.Args[0])
    if expr == nil {
        ret nil
    }

    if !isBuiltinStrConvertable(expr.Kind) {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut d = buildVoidData()
    d.Model = &BuiltinOutCallExprModel{Expr: expr.Model}
    ret d
}

fn builtinCallerOutln(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtinCallerOut(e, fc, d)
    if d == nil {
        ret nil
    }

    d.Model = &BuiltinOutlnCallExprModel{
        Expr: (&BuiltinOutCallExprModel)(d.Model).Expr,
    }
    ret d
}

fn builtinCallerNew(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "type")
        ret nil
    }
    if len(fc.Args) > 2 {
        e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "new")
    }

    let mut t = e.evalExprKind(fc.Args[0].Kind)
    if t == nil {
        ret nil
    }

    if !t.Decl {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
        ret nil
    }

    if !isValidForSptrType(t.Kind) {
        let mut s = t.Kind.Struct()
        if s != nil && s.Decl != nil && s.Decl.Binded {
            e.pushErr(fc.Args[0].Token, LogMsg.BindedStructForRef)
        }
        ret nil
    }

    d.Kind = &TypeKind{
        Kind: &Sptr{
            Elem: t.Kind,
        },
    }

    if len(fc.Args) == 2 { // Initialize expression.
        let mut old = e.prefix
        e.prefix = t.Kind

        let mut init = e.evalExpr(fc.Args[1])

        e.prefix = old

        if init != nil {
            let mut token = fc.Args[1].Token
            const Reference = false
            e.s.checkValidityForInitExpr(
                !e.immutable, Reference, t.Kind, init, token)
            _ = e.s.checkAssignType(false, t.Kind, init, token)

            d.Model = &BuiltinNewCallExprModel{
                Kind: t.Kind,
                Init: init.Model,
            }
        }
    } else {
        d.Model = &BuiltinNewCallExprModel{
            Kind: t.Kind,
        }
    }

    ret d
}

fn builtinCallerPanic(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "message")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "panic")
    }

    let mut expr = e.evalExpr(fc.Args[0])
    if expr == nil {
        ret nil
    }

    if expr.Kind.Prim() == nil || !expr.Kind.Prim().IsStr() {
        e.pushErr(fc.Token, LogMsg.PanicedWithNonStr)
    }

    let mut d = buildVoidData()
    d.Model = &BuiltinPanicCallExprModel{
        Token: fc.Token,
        Expr: expr.Model,
    }
    ret d
}

fn builtinCallerMake(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 2 {
        if len(fc.Args) == 1 {
            e.pushErr(fc.Token, LogMsg.MissingExprFor, "size")
            ret nil
        }
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "type, size")
        ret nil
    }

    let mut t = e.evalExprKind(fc.Args[0].Kind)
    if t == nil {
        ret nil
    }

    if !t.Decl {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
        ret nil
    }
    if len(fc.Args) > 3 {
        e.pushErr(fc.Args[3].Token, LogMsg.ArgumentOverflow, "make")
        ret nil
    }

    d.Kind = t.Kind

    let mut lenExpr = e.s.evalp(e.lookup, t.Kind).evalExpr(fc.Args[1])
    if lenExpr == nil {
        ret nil
    }

    e.checkIntegerIndexingByData(lenExpr, fc.Args[1].Token)

    let mut model = &BuiltinMakeCallExprModel{
        Kind: t.Kind,
        Len: lenExpr.Model,
    }
    d.Model = model
    if len(fc.Args) == 3 {
        let mut capExpr = e.s.evalp(e.lookup, t.Kind).evalExpr(fc.Args[2])
        if capExpr == nil {
            ret d
        }
        e.checkIntegerIndexingByData(capExpr, fc.Args[2].Token)
        model.Cap = capExpr.Model
    }
    ret d
}

fn builtinCallerAppend(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 2 {
        if len(fc.Args) == 1 {
            e.pushErr(fc.Token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }

    let mut t = e.evalExpr(fc.Args[0])
    if t == nil {
        ret nil
    }

    if t.Kind.Slc() == nil {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut f = &FnIns{
        Params: [
            &ParamIns{
                Decl: &Param{
                    Mutable: true,
                },
                Kind: t.Kind,
            },
            &ParamIns{
                Decl: &Param{
                    Mutable: true,
                    Variadic: true,
                },
                Kind: t.Kind.Slc().Elem,
            },
        ],
        Result: t.Kind,
        caller: builtinCallerCommonPlain,
    }
    d.Kind = &TypeKind{
        Kind: f,
    }
    d.Model = &CommonIdentExprModel{
        Ident: "append",
    }

    d = builtinCallerCommonPlain(e, fc, d)
    if d != nil {
        let mut model = (&FnCallExprModel)(d.Model)
        d.Model = &BuiltinAppendCallExprModel{
            Dest: model.Args[0],
            Elements: model.Args[1],
        }
    }
    ret d
}

fn callerCopySlice(mut &dest: &Data, mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !dest.Mutable {
        e.pushErr(fc.Args[0].Token, LogMsg.MutOperationOnImmut)
    }

    let mut src = e.evalExpr(fc.Args[1])
    if src == nil {
        ret nil
    }
    let mut slc = src.Kind.Slc()

    if slc != nil {
        if !src.Mutable && slc.Elem.Mutable() {
            e.pushErr(fc.Args[1].Token, LogMsg.MutOperationOnImmut)
        }
        if !dest.Kind.Equal(src.Kind) {
            e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, dest.Kind.Str(), src.Kind.Str())
        }
    } else {
        let destPrim = dest.Kind.Slc().Elem.Prim()
        let prim = src.Kind.Prim()
        if destPrim == nil || prim == nil || !prim.IsStr() || !destPrim.IsU8() {
            e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, dest.Kind.Str(), src.Kind.Str())
        }
    }

    d.Kind = lenKind()
    d.Model = &BuiltinCopyCallExprModel{
        Dest: dest,
        Src: src,
    }
    ret d
}

fn callerCopyStr(mut &dest: &Data, mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !dest.Mutable {
        e.pushErr(fc.Args[0].Token, LogMsg.MutOperationOnImmut)
    }

    let mut src = e.evalExpr(fc.Args[1])
    if src == nil {
        ret nil
    }
    match {
    | src.Kind.Prim() != nil:
        if src.Kind.Prim().IsStr() {
            goto end
        }
    | src.Kind.Slc() != nil:
        let mut slc = src.Kind.Slc()
        if slc.Elem.Prim() != nil && slc.Elem.Prim().IsU8() {
            goto end
        }
    }
    e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, dest.Kind.Str(), src.Kind.Str())
end:
    d.Kind = lenKind()
    d.Model = &BuiltinCopyCallExprModel{
        Dest: dest,
        Src: src,
    }
    ret d
}

fn builtinCallerCopy(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 2 {
        if len(fc.Args) == 1 {
            e.pushErr(fc.Token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }
    if len(fc.Args) > 2 {
        e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "copy")
    }

    let mut dest = e.evalExpr(fc.Args[0])
    match {
    | dest == nil:
        ret nil
    | dest.Kind.Slc() != nil:
        ret callerCopySlice(dest, e, fc, d)
    | dest.Kind.Prim() != nil && dest.Kind.Prim().IsStr():
        ret callerCopyStr(dest, e, fc, d)
    |:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidType)
        ret nil
    }
}

fn callerLenSlice(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    d.Model = &BuiltinLenCallExprModel{
        Expr: expr,
    }
    ret d
}

fn callerLenMap(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    d.Model = &BuiltinLenCallExprModel{
        Expr: expr,
    }
    ret d
}

fn callerLenArr(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    d.Constant = Const.NewI64(i64(expr.Kind.Arr().N))
    d.Model = d.Constant
    ret d
}

fn callerLenStr(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    if expr.IsConst() {
        d.Constant = Const.NewI64(i64(len(expr.Constant.ReadStr())))
        d.Model = d.Constant
    } else {
        d.Model = &BuiltinLenCallExprModel{
            Expr: expr,
        }
    }
    ret d
}

fn callerLenComptime(mut &d: &Data, n: int): &Data {
    d.Kind = lenKind()
    d.Constant = Const.NewI64(i64(n))
    d.Model = d.Constant
    ret d
}

fn builtinCallerLen(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "obj")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "len")
    }
    let mut dest = e.evalExpr1(fc.Args[0])
    match {
    | dest == nil:
        ret nil
    | dest.Kind.Slc() != nil:
        ret callerLenSlice(dest, d)
    | dest.Kind.Arr() != nil:
        ret callerLenArr(dest, d)
    | dest.Kind.Map() != nil:
        ret callerLenMap(dest, d)
    | dest.Kind.Prim() != nil && dest.Kind.Prim().IsStr():
        ret callerLenStr(dest, d)
    | dest.Kind.comptimeStructFields() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeStructFields().fields))
    | dest.Kind.comptimeEnumFields() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeEnumFields().fields))
    | dest.Kind.comptimeTypeInfos() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeTypeInfos().types))
    | dest.Kind.comptimeParams() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeParams().params))
    | dest.Kind.comptimeStatics() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeStatics().fields))
    | dest.Kind.comptimeFiles() != nil:
        ret callerLenComptime(d, len(dest.Kind.comptimeFiles().files))
    |:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }
}

fn callerCapSlice(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    d.Model = &BuiltinCapCallExprModel{
        Expr: expr,
    }
    ret d
}

fn callerCapStr(mut &expr: &Data, mut &d: &Data): &Data {
    d.Kind = lenKind()
    if expr.IsConst() {
        d.Constant = Const.NewI64(i64(cap(expr.Constant.ReadStr())))
        d.Model = d.Constant
    } else {
        d.Model = &BuiltinCapCallExprModel{
            Expr: expr,
        }
    }
    ret d
}

fn builtinCallerCap(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "obj")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "cap")
    }
    let mut dest = e.evalExpr(fc.Args[0])
    match {
    | dest == nil:
        ret nil
    | dest.Decl:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    | dest.Kind.Slc() != nil:
        ret callerCapSlice(dest, d)
    | dest.Kind.Prim() != nil && dest.Kind.Prim().IsStr():
        ret callerCapStr(dest, d)
    |:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }
}

fn callerDeleteMap(mut &e: &Eval, mut &fc: &FnCallExpr, mut &expr: &Data, mut &d: &Data): &Data {
    if !expr.Mutable {
        e.pushErr(fc.Args[0].Token, LogMsg.MutOperationOnImmut)
    }
    d = buildVoidData()
    let mut model = &BuiltinDeleteCallExprModel{
        Dest: expr,
    }
    if len(fc.Args) == 2 {
        let mut key = e.evalExpr(fc.Args[1])
        match {
        | key == nil:
            ret nil
        | key.Decl:
            e.pushErr(fc.Args[1].Token, LogMsg.InvalidExpr)
            ret nil
        |:
            const Reference = false
            let mut keyType = expr.Kind.Map().Key
            if !e.s.checkAssignType(Reference, keyType, key, fc.Args[1].Token) {
                ret nil
            }
        }
        model.Key = key
    }
    d.Model = model
    ret d
}

fn builtinCallerDelete(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "map")
        ret nil
    }
    if len(fc.Args) > 2 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "delete")
    }
    let mut dest = e.evalExpr(fc.Args[0])
    match {
    | dest == nil:
        ret nil
    | dest.Decl:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    | dest.Kind.Map() != nil:
        ret callerDeleteMap(e, fc, dest, d)
    |:
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }
}

fn builtinCallerClone(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "clone")
    }

    let mut d = e.evalExpr(fc.Args[0])
    if d == nil {
        ret nil
    }

    if !d.Kind.SupportsCloning() {
        match {
        | d.Kind.Slc() != nil
        | d.Kind.Map() != nil
        | d.Kind.Arr() != nil
        | d.Kind.Sptr() != nil:
            unsafe {
                e.pushErr(fc.Args[0].Token,
                    LogMsg.InternalTypeNotSupportsClone, d.Kind.Str())
            }
        | d.Kind.Struct() != nil:
            unsafe {
                e.pushErr(fc.Args[0].Token, LogMsg.TypeIsNotDerives,
                    d.Kind.Str(), Derive.Clone)
            }
        |:
            unsafe {
                e.pushErr(fc.Args[0].Token, LogMsg.TypeNotSupportsClone,
                    d.Kind.Str(), Derive.Clone)
            }
        }
    }

    d.Mutable = true
    d.Model = &BuiltinCloneCallExprModel{Expr: d.Model}
    ret d
}

fn builtinCallerAssert(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if len(fc.Args) > 2 {
        e.pushErr(fc.Args[2].Token, LogMsg.ArgumentOverflow, "assert")
    }

    let mut expr = e.evalExpr(fc.Args[0])
    if expr == nil {
        ret nil
    }

    if expr.Kind.Prim() == nil || !expr.Kind.Prim().IsBool() {
        e.pushErr(fc.Token, LogMsg.AssertNonBool)
    }

    let mut model = &BuiltinAssertCallExprModel{
        Token: fc.Token,
        Expr: expr.Model,
        Log: "assertion failed", // Default log message.
    }

    // Custom log message is exist.
    if len(fc.Args) == 2 {
        let mut log = e.evalExpr(fc.Args[1])
        if log == nil {
            ret nil
        }

        if !log.IsConst() || log.Kind.Prim() == nil || !log.Kind.Prim().IsStr() {
            e.pushErr(fc.Args[1].Token, LogMsg.IncompatibleTypes, "const str", log.Kind.Str())
            ret nil
        }

        model.Log = log.Constant.ReadStr()
    }

    let mut d = buildVoidData()
    d.Model = model
    ret d
}

fn builtinCallerStdComptimeTypeOf(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "TypeOf")
    }

    let mut d = e.evalExprKind(fc.Args[0].Kind)
    if d == nil {
        ret nil
    }
    let f = d.Kind.Fn()
    if f != nil {
        if f.IsBuiltin() {
            e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForTypeOf, "<built-in fn>")
            ret nil
        }
        if len(f.Generics) != len(f.Decl.Generics) {
            e.pushErr(fc.Args[0].Token, LogMsg.HasGenerics)
            ret nil
        }
    }
    let s = d.Kind.Struct()
    if s != nil && len(s.Generics) != len(s.Decl.Generics) {
        e.pushErr(fc.Args[0].Token, LogMsg.HasGenerics)
        ret nil
    }
    if d.Kind.comptime() {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForTypeOf, d.Kind.Str())
        ret nil
    }
    ret buildComptimeTypeInfoData(e.s, d.Kind)
}

fn builtinCallerStdComptimeValueOf(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "ValueOf")
    }
    let mut d = e.evalExpr(fc.Args[0])
    if d == nil {
        ret nil
    }
    // Do not allow value if has unsupported type for type infer.
    if !isGoodValueToInfer(d) {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "ValueOf")
        ret nil
    }
    ret buildComptimeValue(d)
}

fn rangeData(mut kind: comptimeRangeKind): &Data {
    ret &Data{
        Kind: &TypeKind{
            Kind: &comptimeRange{
                kind: kind,
            },
        },
    }
}

fn builtinCallerStdComptimeRange(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Range")
    }

    let mut d = e.evalExprKind(fc.Args[0].Kind)
    if d == nil {
        ret nil
    }
    match {
    | d.Kind.comptimeStructFields() != nil:
        ret rangeData(d.Kind.comptimeStructFields())
    | d.Kind.comptimeEnumFields() != nil:
        ret rangeData(d.Kind.comptimeEnumFields())
    | d.Kind.comptimeTypeInfos() != nil:
        ret rangeData(d.Kind.comptimeTypeInfos())
    | d.Kind.comptimeParams() != nil:
        ret rangeData(d.Kind.comptimeParams())
    | d.Kind.comptimeStatics() != nil:
        ret rangeData(d.Kind.comptimeStatics())
    | d.Kind.comptimeFiles() != nil:
        ret rangeData(d.Kind.comptimeFiles())
    |:
        e.pushErr(fc.Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "Range")
        ret nil
    }
}

fn builtinCallerStdComptimeLine(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) > 0 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Line")
    }
    let mut constant = Const.NewI64(i64(fc.Token.Row))
    ret &Data{
        Kind: primInt,
        Constant: constant,
        Model: constant,
    }
}

fn builtinCallerStdComptimeFile(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) > 0 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "File")
    }
    ret &Data{
        Kind: &TypeKind{
            Kind: &comptimeFile{
                file: e.s.file,
            },
        },
    }
}

fn builtinCallerStdComptimeFiles(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) > 0 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Files")
    }
    ret &Data{
        Kind: &TypeKind{
            Kind: &comptimeFiles{
                files: e.s.files,
            },
        },
    }
}

fn builtinCallerStdMemSizeOf(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    let mut result = &Data{
        Kind: primUint,
    }

    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "SizeOf")
    }

    let mut d = e.evalExprKind(fc.Args[0].Kind)
    if d == nil {
        ret result
    }
    if !validTypeForXof(d.Kind) {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "SizeOf")
    }

    result.Model = &SizeofExprModel{Expr: d.Model}
    ret result
}

fn builtinCallerStdMemAlignOf(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    let mut result = &Data{
        Kind: primUint,
    }

    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "AlignOf")
    }

    let mut d = e.evalExprKind(fc.Args[0].Kind)
    if d == nil {
        ret result
    }
    if !validTypeForXof(d.Kind) {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidTypeForFn, d.Kind.Str(), "AlignOf")
    }

    result.Model = &AlignofExprModel{Expr: d.Model}
    ret result
}

fn builtinCallerStdMemFree(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "h")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "Free")
    }

    let mut d = e.evalExpr(fc.Args[0])
    if d == nil {
        ret nil
    }

    if !d.Kind.PerformsRC() {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
    }

    let mut result = buildVoidData()
    result.Model = &FreeExprModel{Expr: d.Model}
    ret result
}

fn builtinCallerStdJuleIntegratedToStr(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if len(fc.Args) > 1 {
        e.pushErr(fc.Args[1].Token, LogMsg.ArgumentOverflow, "ToStr")
    }

    let mut d = e.evalExpr(fc.Args[0])
    if d == nil {
        ret nil
    }

    if !isBuiltinStrConvertable(d.Kind) {
        e.pushErr(fc.Args[0].Token, LogMsg.InvalidExpr)
        ret nil
    }

    ret &Data{
        Kind: primStr,
        Model: &IntegratedToStrExprModel{
            Expr: d.Model,
        },
    }
}

fn builtinCallerStdJuleIntegratedEmit(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !e.isUnsafe() {
        e.pushErr(fc.Token, LogMsg.UnsafeBehaviorAtOutOfUnsafeScope)
    }

    if len(fc.Args) < 1 {
        e.pushErr(fc.Token, LogMsg.MissingExprFor, "code")
        ret nil
    }

    let mut argd = e.evalExpr(fc.Args[0])
    if argd == nil {
        ret nil
    }

    if argd.Kind.Prim() == nil || !argd.Kind.Prim().IsStr() {
        e.pushErr(fc.Args[0].Token, LogMsg.IncompatibleTypes, PrimKind.Str, argd.Kind.Str())
        ret nil
    }

    if !argd.IsConst() || !argd.Constant.IsStr() {
        e.pushErr(fc.Args[0].Token, LogMsg.ExprNotConst)
        ret nil
    }

    let mut r = buildVoidData()

    let mut f = d.Kind.Fn()
    if len(f.Generics) > 0 {
        r.Kind = f.Generics[0].Kind
    }

    let mut model = &BackendEmitExprModel{
        Code: argd.Constant.ReadStr(),
    }

    if len(fc.Args) > 1 {
        model.Exprs = make([]ExprModel, 0, len(fc.Args) - 1)
        for (_, mut arg) in fc.Args[1:] {
            argd = e.eval1(arg)
            if argd == nil {
                ret nil
            }
            model.Exprs = append(model.Exprs, argd.Model)
        }
    }

    r.Model = model
    ret r
}

fn builtinCallerStdDebugOut(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtinCallerOut(e, fc, d)
    if d == nil {
        ret nil
    }
    (&BuiltinOutCallExprModel)(d.Model).Debug = true
    ret d
}

fn builtinCallerStdDebugOutln(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtinCallerOutln(e, fc, d)
    if d == nil {
        ret nil
    }
    (&BuiltinOutlnCallExprModel)(d.Model).Debug = true
    ret d
}