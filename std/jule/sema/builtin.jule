// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{
    FnCallExpr,
    TypeDecl,
    IdentTypeDecl,
}
use std::jule::build::{Derive, LogMsg}

// Type alias for built-in function callers.
//
// Parameters;
//  e: Caller owner Eval instance.
//  fc: Function call expression.
//  d: Data instance for evaluated expression of function.
type BuiltinCaller: fn(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data

static mut BUILTIN_FN_OUT = &FnIns{}
static mut BUILTIN_FN_OUTLN = &FnIns{}
static mut BUILTIN_FN_NEW = &FnIns{}
static mut BUILTIN_FN_PANIC = &FnIns{}
static mut BUILTIN_FN_MAKE = &FnIns{}
static mut BUILTIN_FN_APPEND = &FnIns{}
static mut BUILTIN_FN_CLONE = &FnIns{}
static mut BUILTIN_FN_ASSERT = &FnIns{}
static mut BUILTIN_FN_STD_MEM_SIZE_OF = &FnIns{}
static mut BUILTIN_FN_STD_MEM_ALIGN_OF = &FnIns{}
static mut BUILTIN_FN_STD_JULE_INTEGRATED_TO_STR = &FnIns{}
static mut BUILTIN_FN_STD_JULE_INTEGRATED_INLINE = &FnIns{}

static mut BUILTIN_FN_COPY = &FnIns{
    result: &TypeKind{kind: build_prim_type(PrimKind.Int)},
}

static mut BUILTIN_TYPE_ALIAS_BYTE = &TypeAlias{
    public: true,
    kind: &TypeSymbol{
        kind: &TypeKind{kind: build_prim_type(PrimKind.U8)},
    },
}

static mut BUILTIN_TYPE_ALIAS_RUNE = &TypeAlias{
    public: true,
    kind: &TypeSymbol{
        kind: &TypeKind{kind: build_prim_type(PrimKind.I32)},
    },
}

// Definition of built-in Dispose trait.
pub static mut BUILTIN_TRAIT_DISPOSE = &Trait{
    public: true,
    ident:  "Dispose",
    methods: [
        &Fn{
            public: true,
            ident:  "dispose",
            params: [
                &Param{
                    mutable: true,
                    ident:   "self",
                },
            ],
        },
    ],
}

fn init() {
    BUILTIN_FN_OUT.caller = builtin_caller_out
    BUILTIN_FN_OUTLN.caller = builtin_caller_outln
    BUILTIN_FN_NEW.caller = builtin_caller_new
    BUILTIN_FN_PANIC.caller = builtin_caller_panic
    BUILTIN_FN_MAKE.caller = builtin_caller_make
    BUILTIN_FN_APPEND.caller = builtin_caller_append
    BUILTIN_FN_COPY.caller = builtin_caller_copy
    BUILTIN_FN_CLONE.caller = builtin_caller_clone
    BUILTIN_FN_ASSERT.caller = builtin_caller_assert

    BUILTIN_FN_STD_MEM_SIZE_OF.caller = builtin_caller_std_mem_size_of
    BUILTIN_FN_STD_MEM_ALIGN_OF.caller = builtin_caller_std_mem_align_of

    BUILTIN_FN_STD_JULE_INTEGRATED_TO_STR.caller = builtin_caller_std_jule_integrated_to_str
    BUILTIN_FN_STD_JULE_INTEGRATED_INLINE.caller = builtin_caller_std_jule_integrated_inline

    let mut dispose_method = BUILTIN_TRAIT_DISPOSE.find_method("dispose")
    let mut dispose_method_ins = dispose_method.instance()
    dispose_method_ins.caller = builtin_caller_common
    dispose_method.append_instance(dispose_method_ins)
}

fn find_builtin_fn(ident: str): &FnIns {
    match ident {
    | "out":    ret BUILTIN_FN_OUT
    | "outln":  ret BUILTIN_FN_OUTLN
    | "new":    ret BUILTIN_FN_NEW
    | "panic":  ret BUILTIN_FN_PANIC
    | "make":   ret BUILTIN_FN_MAKE
    | "append": ret BUILTIN_FN_APPEND
    | "copy":   ret BUILTIN_FN_COPY
    | "clone":  ret BUILTIN_FN_CLONE
    | "assert": ret BUILTIN_FN_ASSERT
    |:          ret nil
    }
}

fn find_builtin_type_alias(ident: str): &TypeAlias {
    match ident {
    | "byte": ret BUILTIN_TYPE_ALIAS_BYTE
    | "rune": ret BUILTIN_TYPE_ALIAS_RUNE
    |:        ret nil
    }
}

fn find_builtin_trait(ident: str): &Trait {
    match ident {
    | "Dispose": ret BUILTIN_TRAIT_DISPOSE
    |:           ret nil
    }
}

fn find_builtin_def(ident: str): any {
    let mut f = find_builtin_fn(ident)
    if f != nil {
        ret f
    }

    let mut ta = find_builtin_type_alias(ident)
    if ta != nil {
        ret ta
    }

    let mut t = find_builtin_trait(ident)
    if t != nil {
        ret t
    }

    ret nil
}

fn find_builtin_def_std_mem(ident: str): any {
    match ident {
    | "size_of":  ret BUILTIN_FN_STD_MEM_SIZE_OF
    | "align_of": ret BUILTIN_FN_STD_MEM_ALIGN_OF
    |:            ret nil
    }
}

fn find_builtin_def_std_jule_integrated(ident: str): any {
    match ident {
    | "to_str":  ret BUILTIN_FN_STD_JULE_INTEGRATED_TO_STR
    | "inline":  ret BUILTIN_FN_STD_JULE_INTEGRATED_INLINE
    |:           ret nil
    }
}

fn find_package_builtin_def(link_path: str, ident: str): any {
    match link_path {
    | "std::mem":              ret find_builtin_def_std_mem(ident)
    | "std::jule::integrated": ret find_builtin_def_std_jule_integrated(ident)
    |:                         ret nil
    }
}

fn builtin_caller_common_plain(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    let mut f = d.kind.fnc()

    let mut fcac = FnCallArgChecker{
        e:                  e,
        f:                  f,
        args:               fc.args,
        dynamic_annotation: false,
        error_token:        fc.token,
    }
    _ = fcac.check()

    let mut model = &FnCallExprModel{
        func:  f,
        expr:  d.model,
        args:  fcac.arg_models,
    }

    if f.result == nil {
        d = build_void_data()
    } else {
        d = &Data{
            kind: f.result,
        }
    }

    d.model = model
    ret d
}

fn builtin_caller_common(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }

    ret builtin_caller_common_plain(e, fc, d)
}

fn builtin_caller_common_mut(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if !d.mutable {
        e.push_err(fc.token, LogMsg.MutOperationOnImmut)
    }
    ret builtin_caller_common(e, fc, d)
}

fn builtin_caller_error(mut &e: &Eval, mut &fc: &FnCallExpr): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "err")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }
    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.is_nil() {
        e.push_err(fc.args[0].token, LogMsg.NilError)
    }

    let mut d = build_void_data()
    d.model = &BuiltinErrorCallExprModel{
        err: expr.model,
    }

    ret d
}

fn builtin_caller_out(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "v")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if !is_builtin_str_convertable(expr.kind) {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut d = build_void_data()
    d.model = &BuiltinOutCallExprModel{expr: expr.model}
    ret d
}

fn builtin_caller_outln(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    d = builtin_caller_out(e, fc, d)
    if d == nil {
        ret nil
    }

    d.model = &BuiltinOutlnCallExprModel{
        expr: (&BuiltinOutCallExprModel)(d.model).expr,
    }
    ret d
}

fn builtin_caller_new(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type")
        ret nil
    }
    if fc.args.len > 2 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut t = e.eval_expr_kind(fc.args[0].kind)
    if t == nil {
        ret nil
    }

    if !t.decl {
        e.push_err(fc.args[0].token, LogMsg.InvalidType)
        ret nil
    }

    if !is_valid_for_sptr_type(t.kind) {
        let mut s = t.kind.strct()
        if s != nil && s.decl != nil && s.decl.cpp_linked {
            e.push_err(fc.args[0].token, LogMsg.CppLinkedStructForRef)
        }
        ret nil
    }

    d.kind = &TypeKind{kind: &Sptr{elem: t.kind}}

    if fc.args.len == 2 { // Initialize expression.
        let mut old = e.prefix
        e.prefix = t.kind

        let mut init = e.eval_expr(fc.args[1])

        e.prefix = old

        if init != nil {
            let mut token = fc.args[1].token
            const REFERENCE = false
            e.s.check_validity_for_init_expr(
                !e.immutable, REFERENCE, t.kind, init, token)
            e.s.check_assign_type(false, t.kind, init, token)

            d.model = &BuiltinNewCallExprModel{
                kind: t.kind,
                init: init.model,
            }
        }
    } else {
        d.model = &BuiltinNewCallExprModel{kind: t.kind}
    }

    ret d
}

fn builtin_caller_panic(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "message")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.kind.prim() == nil || !expr.kind.prim().is_str() {
        e.push_err(fc.token, LogMsg.PanicedWithNonStr)
    }

    let mut d = build_void_data()
    d.model = &BuiltinPanicCallExprModel{
        token: fc.token,
        expr:  expr.model,
    }
    ret d
}

fn builtin_caller_make(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "size")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "type, size")
        ret nil
    }
    if fc.args.len > 3 {
        e.push_err(fc.args[3].token, LogMsg.ArgumentOverflow)
    }

    let mut t = e.eval_expr_kind(fc.args[0].kind)
    if t == nil {
        ret nil
    }

    if !t.decl || t.kind.slc() == nil {
        e.push_err(fc.args[0].token, LogMsg.InvalidType)
        ret nil
    }

    d.kind = t.kind

    let mut len = e.s.evalp(e.lookup, t.kind).eval_expr(fc.args[1])
    if len == nil {
        ret d
    }

    e.check_integer_indexing_by_data(len, fc.args[1].token)

    if fc.args.len == 3 {
        let mut cap = e.s.evalp(e.lookup, t.kind).eval_expr(fc.args[2])
        if cap == nil {
            ret d
        }

        e.check_integer_indexing_by_data(cap, fc.args[2].token)
        d.model = &BuiltinMakeCallExprModel{
            kind: t.kind,
            len:  len.model,
            cap:  cap.model,
        }
    } else {
        d.model = &BuiltinMakeCallExprModel{
            kind: t.kind,
            len: len.model,
        }
    }

    ret d
}

fn builtin_caller_append(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }

    let mut t = e.eval_expr(fc.args[0])
    if t == nil {
        ret nil
    }

    if t.kind.slc() == nil {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    let mut f = &FnIns{
        params: [
            &ParamIns{
                decl: &Param{
                    mutable: true,
                },
                kind: t.kind,
            },
            &ParamIns{
                decl: &Param{
                    mutable:  true,
                    variadic: true,
                },
                kind: t.kind.slc().elem,
            },
        ],
        result: t.kind,
        caller: builtin_caller_common_plain,
    }
    d.kind = &TypeKind{kind: f}
    d.model = &CommonIdentExprModel{ident: "append"}

    d = builtin_caller_common_plain(e, fc, d)
    if d != nil {
        let mut model = (&FnCallExprModel)(d.model)
        d.model = &BuiltinAppendCallExprModel{
            dest:     model.args[0],
            elements: model.args[1],
        }
    }
    ret d
}

fn builtin_caller_copy(mut &e: &Eval, mut &fc: &FnCallExpr, mut &d: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 2 {
        if fc.args.len == 1 {
            e.push_err(fc.token, LogMsg.MissingExprFor, "src")
            ret nil
        }
        e.push_err(fc.token, LogMsg.MissingExprFor, "src, values")
        ret nil
    }
    if fc.args.len > 2 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut t = e.eval_expr(fc.args[0])
    if t == nil {
        ret nil
    }

    if t.kind.slc() == nil {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    if !t.mutable {
        e.push_err(fc.args[0].token, LogMsg.MutOperationOnImmut)
    }

    let mut f = &FnIns{
        params: [
            &ParamIns{
                decl: &Param{},
                kind: t.kind,
            },
            &ParamIns{
                decl: &Param{
                    mutable: true,
                },
                kind: t.kind,
            },
        ],
        result: BUILTIN_FN_COPY.result,
        caller: builtin_caller_common_plain,
    }

    d.kind = &TypeKind{kind: f}
    d.model = &CommonIdentExprModel{ident: "copy"}

    d = builtin_caller_common_plain(e, fc, d)
    ret d
}

fn builtin_caller_clone(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret nil
    }

    let check_kind = fn(mut k: &TypeKind) {
        match {
        | k.slc() != nil:
            if !k.slc().elem.supports_cloning() {
                unsafe {
                    e.push_err(fc.args[0].token,
                        LogMsg.InternalTypeNotSupportsClone, k.to_str())
                }
            }

        | k.map() != nil:
            let m = k.map()
            if !m.key.supports_cloning() || !m.val.supports_cloning() {
                unsafe {
                    e.push_err(fc.args[0].token,
                        LogMsg.InternalTypeNotSupportsClone, k.to_str())
                }
            }

        | k.arr() != nil:
            if !k.arr().elem.supports_cloning() {
                unsafe {
                    e.push_err(fc.args[0].token,
                        LogMsg.InternalTypeNotSupportsClone, k.to_str())
                }
            }

        | k.sptr() != nil:
            if !k.sptr().elem.supports_cloning() {
                unsafe {
                    e.push_err(fc.args[0].token,
                        LogMsg.InternalTypeNotSupportsClone, k.to_str())
                }
            }

        | k.strct() != nil:
            let s = d.kind.strct()
            if !s.mutable {
                unsafe {
                    e.push_err(fc.args[0].token,
                        LogMsg.CloneImmutStruct, d.kind.to_str())
                }
            }
            if s.decl == nil ||
                s.decl.cpp_linked ||
                !s.decl.is_derives(Derive.Clone) {
                unsafe {
                    e.push_err(fc.args[0].token, LogMsg.TypeIsNotDerives,
                        d.kind.to_str(), Derive.Clone)
                }
            }

        |:
            unsafe {
                e.push_err(fc.args[0].token, LogMsg.TypeIsNotDerives,
                    d.kind.to_str(), Derive.Clone)
            }
        }
    }

    match {
    | !d.lvalue:
        e.push_err(fc.args[0].token, LogMsg.CloneNonLvalue)

    | !d.kind.supports_cloning():
        check_kind(d.kind)
    }

    d.mutable = true
    d.model = &BuiltinCloneCallExprModel{expr: d.model}
    ret d
}

fn builtin_caller_assert(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[2].token, LogMsg.ArgumentOverflow)
    }

    let mut expr = e.eval_expr(fc.args[0])
    if expr == nil {
        ret nil
    }

    if expr.kind.prim() == nil || !expr.kind.prim().is_bool() {
        e.push_err(fc.token, LogMsg.AssertNonBool)
    }

    let mut d = build_void_data()
    d.model = &BuiltinAssertCallExprModel{
        token: fc.token,
        expr:  expr.model,
    }
    ret d
}

fn builtin_caller_std_mem_size_of(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    let mut result = &Data{
        kind: &TypeKind{kind: build_prim_type(PrimKind.Uint)},
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret result
    }

    result.model = &SizeofExprModel{expr: d.model}
    ret result
}

fn builtin_caller_std_mem_align_of(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }
    let mut result = &Data{
        kind: &TypeKind{kind: build_prim_type(PrimKind.Uint)},
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "type|expr")
        ret result
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret result
    }

    result.model = &AlignofExprModel{expr: d.model}
    ret result
}

fn builtin_caller_std_jule_integrated_to_str(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if fc.generics.len > 0 {
        e.push_err(fc.token, LogMsg.NotHasGenerics)
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "expr")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr_kind(fc.args[0].kind)
    if d == nil {
        ret nil
    }

    if !is_builtin_str_convertable(d.kind) {
        e.push_err(fc.args[0].token, LogMsg.InvalidExpr)
        ret nil
    }

    ret &Data{
        kind:  &TypeKind{kind: build_prim_type(PrimKind.Str)},
        model: &IntegratedToStrExprModel{
            expr: d.model,
        },
    }
}

fn builtin_caller_std_jule_integrated_inline(mut &e: &Eval, mut &fc: &FnCallExpr, mut &_: &Data): &Data {
    if !e.is_unsafe() {
        e.push_err(fc.token, LogMsg.UnsafeBehaviorAtOutOfUnsafeScope)
    }

    if fc.args.len < 1 {
        e.push_err(fc.token, LogMsg.MissingExprFor, "code")
        ret nil
    }
    if fc.args.len > 1 {
        e.push_err(fc.args[1].token, LogMsg.ArgumentOverflow)
    }

    let mut d = e.eval_expr(fc.args[0])
    if d == nil {
        ret nil
    }

    if d.kind.prim() == nil || !d.kind.prim().is_str() {
        e.push_err(fc.args[0].token, LogMsg.IncompatibleTypes, PrimKind.Str, d.kind.to_str())
        ret nil
    }

    if !d.is_const() || !d.constant.is_str() {
        e.push_err(fc.args[0].token, LogMsg.ExprNotConst)
        ret nil
    }

    let mut r = build_void_data()

    if fc.generics.len != 0 {
        if !e.s.check_generic_quantity(1, fc.generics.len, fc.token) {
            ret nil
        }
        let mut k = build_type(fc.generics[0])
        if !e.s.check_type(k, e.lookup) {
            ret nil
        }
        r.kind = k.kind
    }

    r.model = &BackendEmitExprModel{
        code: d.constant.read_str(),
    }
    ret r
}
