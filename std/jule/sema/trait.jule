// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{Token, TokenId}

// Trait.
struct Trait {
    Token:       &Token
    Ident:       str
    Public:      bool
    Mutable:     bool
    Methods:     []&Fn
    Implemented: []&Struct
}

impl Kind for Trait {
    // Implement: Kind
    // Returns Trait's identifier.
    fn Str(self): str {
        ret self.Ident
    }

    // Reports whether types are same.
    fn Equal(&self, other: &TypeKind): bool {
        let trt = unsafe { (*(&other)).Trait() }
        ret self == trt
    }
}

impl Trait {
    // Reports whether Trait is built-in.
    fn IsBuiltin(self): bool {
        ret self.Token == nil
    }

    // Returns method by identifier.
    // Returns nil if not exist any method in this identifier.
    fn FindMethod(mut self, ident: str): &Fn {
        for (_, mut f) in self.Methods {
            if f.Ident == ident {
                ret f
            }
        }
        ret nil
    }
}