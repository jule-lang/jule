// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Directive}
use std::jule::lex::{Token}

// Iteration relationship of variables.
// Stored only for indexing variable and ranged by variable.
pub struct IterRelation {
    // Iterated variable.
    pub range: &Var
}

// Variable.
pub struct Var {
    pub scope:         &Scope
    pub token:         Token
    pub ident:         str
    pub cpp_linked:    bool
    pub constant:      bool
    pub mutable:       bool
    pub public:        bool
    pub used:          bool
    pub statically:    bool
    pub reference:     bool
    pub kind:          &TypeSymbol
    pub value:         &Value
    pub references:    &ReferenceStack
    pub directives:    []&Directive
    pub iter_relation: &IterRelation

    // This variable depended to these variables for initialization expression.
    // Nil if not global variable.
    pub depends: []&Var
}

impl Var {
    // Reports whether variable is initialized explicitly.
    pub fn is_initialized(self): bool {
        ret self.value != nil
    }

    // Reports whether variable is type inferred.
    pub fn is_type_inferred(self): bool {
        ret self.kind == nil || self.kind.decl == nil
    }
}
