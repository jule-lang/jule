// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Directive}
use std::jule::lex::{Token}

// Iteration relationship of variables.
// Stored only for indexing variable and ranged by variable.
pub struct IterRelation {
    // Iterated variable.
    pub Range: &Var
}

// Variable.
pub struct Var {
    pub Scope:         &Scope
    pub Token:         &Token
    pub Ident:         str
    pub CppLinked:    bool
    pub Constant:      bool
    pub Mutable:       bool
    pub Public:        bool
    pub Used:          bool
    pub Statically:    bool
    pub Reference:     bool
    pub Kind:          &TypeSymbol
    pub Value:         &Value
    pub Refers:        &ReferenceStack
    pub Directives:    []&Directive
    pub IterRelation: &IterRelation

    // This variable depended to these variables for initialization expression.
    // Nil if not global variable.
    pub Depends: []&Var
}

impl Var {
    // Reports whether variable is initialized explicitly.
    pub fn IsInitialized(self): bool {
        ret self.Value != nil
    }

    // Reports whether variable is type inferred.
    pub fn IsTypeInferred(self): bool {
        ret self.Kind == nil || self.Kind.Decl == nil
    }
}