// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Directive}
use std::jule::lex::{Token}

// Iteration relationship of variables.
// Stored only for indexing variable and ranged by variable.
struct IterRelation {
    // Iterated variable.
    Range: &Var
}

// Variable.
struct Var {
    Scope:        &Scope
    Token:        &Token
    Ident:        str
    CppLinked:    bool
    Constant:     bool
    Mutable:      bool
    Public:       bool
    Used:         bool
    Statically:   bool
    Reference:    bool
    Kind:         &TypeSymbol
    Value:        &Value
    Refers:       &ReferenceStack
    Directives:   []&Directive
    IterRelation: &IterRelation

    // This variable depended to these variables for initialization expression.
    // Nil if not global variable.
    Depends: []&Var
}

impl Var {
    // Reports whether variable is initialized explicitly.
    fn IsInitialized(self): bool {
        ret self.Value != nil
    }

    // Reports whether variable is type inferred.
    fn IsTypeInferred(self): bool {
        ret self.Kind == nil || self.Kind.Decl == nil
    }
}