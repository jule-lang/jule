// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/constant"
use "std/jule/token"

// Expression Model:.
enum ExprModel: type {
	&Type,
	&constant::Const,
	&Var,
	&FnIns,
	&StructIns,
	&OperandExprModel,
	&BinaryExprModel,
	&UnaryExprModel,
	&StructArgExprModel,
	&StructLitExprModel,
	&AllocStructLitExprModel,
	&CastingExprModel,
	&FnCallExprModel,
	&SliceExprModel,
	&IndexingExprModel,
	&AnonFnExprModel,
	&KeyValPairExprModel,
	&MapExprModel,
	&SlicingExprModel,
	&TraitSubIdentExprModel,
	&StructSubIdentExprModel,
	&StructStaticIdentExprModel,
	&ArrayExprModel,
	&TupleExprModel,
	&BuiltinPrintCallExprModel,
	&BuiltinPrintlnCallExprModel,
	&BuiltinNewCallExprModel,
	&BuiltinPanicCallExprModel,
	&BuiltinMakeCallExprModel,
	&BuiltinAppendCallExprModel,
	&BuiltinCopyCallExprModel,
	&BuiltinLenCallExprModel,
	&BuiltinCapCallExprModel,
	&BuiltinDeleteCallExprModel,
	&BuiltinErrorCallExprModel,
	&SizeofExprModel,
	&AlignofExprModel,
	&RuneExprModel,
	&BackendEmitExprModel,
	&FreeExprModel,
}

// Operand expression Model:.
struct OperandExprModel {
	Type:  &Type
	Model: ExprModel
}

// Binary operation expression Model:.
struct BinaryExprModel {
	Left:  &OperandExprModel
	Right: &OperandExprModel
	Op:    &token::Token
}

// Unary operation expression Model:.
struct UnaryExprModel {
	Expr: &Data
	Op:   &token::Token
}

// Structure field argument expression Model: for constructors.
// For example: &MyStruct{10, false, "-"}
struct StructArgExprModel {
	Token: &token::Token
	Field: &FieldIns
	Expr:  &Data
}

// Structure literal.
struct StructLitExprModel {
	Strct: &StructIns
	Args:  []&StructArgExprModel
}

// Heap allocated structure litral expression.
// For example: &MyStruct{}
struct AllocStructLitExprModel {
	Lit: &StructLitExprModel
}

// Casting expression Model:.
// For example: (int)(my_float)
struct CastingExprModel {
	Token:    &token::Token
	Expr:     &Data
	Type:     &Type
	ExprKind: &Type
}

// Function call expression Model:.
struct FnCallExprModel {
	Token:    &token::Token
	Func:     &FnIns
	IsCo:     bool
	Expr:     ExprModel
	Args:     []ExprModel
	Except:   &Scope
	Assigned: bool
}

// Slice expression Model:.
// For example: [1, 2, 3, 4, 5, 6, 8, 9, 10]
struct SliceExprModel {
	ElemType: &Type
	Elems:    []ExprModel
}

// Indexing expression Model:.
// For example: my_slice[my_index]
struct IndexingExprModel {
	Token: &token::Token
	Expr:  &Data
	Index: &Data
}

// Anonymous function expression Model:.
struct AnonFnExprModel {
	Captured: []&Var
	Func:     &FnIns
	Global:   bool
}

// Key-value expression pair Model:.
struct KeyValPairExprModel {
	Key: ExprModel
	Val: ExprModel
}

// Map expression Model:.
// For example; {0: false, 1: true}
struct MapExprModel {
	Kind:    &Map
	Entries: []&KeyValPairExprModel
}

// Slicing expression Model:.
// For example: mySlice[2:len(mySlice)-5]
struct SlicingExprModel {
	Token: &token::Token

	// Expression to slicing.
	Expr: ExprModel

	// Left index expression.
	// Zero integer if expression have not left index.
	Left: ExprModel

	// Right index expression.
	// Nil if expression have not right index.
	Right: ExprModel
}

// Trait sub-ident expression Model:.
// For example: my_trait.my_sub_ident
struct TraitSubIdentExprModel {
	Token:  &token::Token
	Expr:   ExprModel
	Method: &Fn
	Trt:    &Trait
}

// Structure sub-ident expression Model:.
// For example: my_struct.my_sub_ident
struct StructSubIdentExprModel {
	Token:  &token::Token
	Expr:   &Data
	Method: &FnIns
	Field:  &FieldIns
	Owner:  &StructIns
}

// Structure static ident expression Model:.
// For example: MyStruct.my_sub_ident
struct StructStaticIdentExprModel {
	Structure: &StructIns
	Expr:      ExprModel
	Method:    &FnIns
}

// Array expression Model:.
// If array filled, elems field holds 2 data.
// First data is expression, second is nil, kind of mark to that array filled.
struct ArrayExprModel {
	Kind:  &Arr
	Elems: []ExprModel
}

// Tuple expression Model:.
struct TupleExprModel {
	Datas: []&Data
}

// Expression Model: for built-in print function calls.
struct BuiltinPrintCallExprModel {
	Expr: &Data
}

// Expression Model: for built-in println function calls.
struct BuiltinPrintlnCallExprModel {
	Expr: &Data
}

// Expression Model: for built-in new function calls.
struct BuiltinNewCallExprModel {
	Type: &Type     // Element type of smart pointer.
	Init: ExprModel // Nil for not initialized.
}

// Expression Model: for built-in panic function calls.
struct BuiltinPanicCallExprModel {
	Token: &token::Token
	Expr:  ExprModel
}

// Expression Model: for built-in make function calls.
struct BuiltinMakeCallExprModel {
	Type: &Type
	Len:  ExprModel
	Cap:  ExprModel
}

// Expression Model: for built-in append function calls.
struct BuiltinAppendCallExprModel {
	Dest:     ExprModel
	Elements: ExprModel
}

// Expression Model: for built-in len function calls.
struct BuiltinLenCallExprModel {
	Expr: &Data
}

// Expression Model: for built-in cap function calls.
struct BuiltinCapCallExprModel {
	Expr: &Data
}

// Expression Model: for built-in delete function calls.
struct BuiltinDeleteCallExprModel {
	Dest: &Data
	Key:  &Data
}

// Expression Model: for built-in copy function calls.
struct BuiltinCopyCallExprModel {
	Dest: &Data
	Src:  &Data
}

// Expression Model: for built-in error function calls.
struct BuiltinErrorCallExprModel {
	Func: &FnIns
	Err:  &Data
}

// Expression Model: for sizeof expressions.
// For example, in C++: sizeof(int)
struct SizeofExprModel {
	Expr: ExprModel
}

// Expression Model: for alignof expressions.
// For example, in C++: alignof(int)
struct AlignofExprModel {
	Expr: ExprModel
}

// Rune literal expression Model:.
// For example: 'a'
struct RuneExprModel {
	Code: rune
}

// Expression Model: for inline code emit to backend.
struct BackendEmitExprModel {
	Code: str

	// Expression Model: for expression or type emit to backend from Jule source code.
	Exprs: []ExprModel
}

// Expression Model: for free calls.
// Function provided by: "std/mem"
struct FreeExprModel {
	Expr: ExprModel
}