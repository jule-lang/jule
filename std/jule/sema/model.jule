// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{Token}
use std::jule::constant::{Const}

// Expression Model:.
pub enum ExprModel: type {
    &TypeKind,
    &Const,
    &Var,
    &FnIns,
    &StructIns,
    &OperandExprModel,
    &BinopExprModel,
    &UnaryExprModel,
    &StructArgExprModel,
    &StructLitExprModel,
    &AllocStructLitExprModel,
    &CastingExprModel,
    &FnCallExprModel,
    &SliceExprModel,
    &IndexingExprModel,
    &AnonFnExprModel,
    &KeyValPairExprModel,
    &MapExprModel,
    &SlicingExprModel,
    &TraitSubIdentExprModel,
    &StructSubIdentExprModel,
    &StructStaticIdentExprModel,
    &ArrayExprModel,
    &CommonIdentExprModel,
    &CommonSubIdentExprModel,
    &TupleExprModel,
    &BuiltinOutCallExprModel,
    &BuiltinOutlnCallExprModel,
    &BuiltinCloneCallExprModel,
    &BuiltinNewCallExprModel,
    &BuiltinPanicCallExprModel,
    &BuiltinAssertCallExprModel,
    &BuiltinMakeCallExprModel,
    &BuiltinAppendCallExprModel,
    &BuiltinCopyCallExprModel,
    &BuiltinErrorCallExprModel,
    &SizeofExprModel,
    &AlignofExprModel,
    &RuneExprModel,
    &IntegratedToStrExprModel,
    &BackendEmitExprModel,
    &FreeExprModel,
}

// Operand expression Model:.
pub struct OperandExprModel {
    pub Kind:  &TypeKind
    pub Model: ExprModel
}

// Binary operation expression Model:.
pub struct BinopExprModel {
    pub Left:  &OperandExprModel
    pub Right: &OperandExprModel
    pub Op:    &Token
}

// Unary operation expression Model:.
pub struct UnaryExprModel {
    pub Expr: &Data
    pub Op:   &Token
}

// Structure field argument expression Model: for constructors.
// For example: &MyStruct{10, false, "-"}
pub struct StructArgExprModel {
    pub Field: &FieldIns
    pub Expr:  ExprModel
}

// Structure literal.
pub struct StructLitExprModel {
    pub Strct: &StructIns
    pub Args:  []&StructArgExprModel
}

// Heap allocated structure litral expression.
// For example: &MyStruct{}
pub struct AllocStructLitExprModel {
    pub Lit: &StructLitExprModel
}

// Casting expression Model:.
// For example: (int)(my_float)
pub struct CastingExprModel {
    pub Token:    &Token
    pub Expr:     ExprModel
    pub Kind:     &TypeKind
    pub ExprKind: &TypeKind
}

// Function call expression Model:.
pub struct FnCallExprModel {
    pub Token:    &Token
    pub Func:     &FnIns
    pub IsCo:     bool
    pub Expr:     ExprModel
    pub Args:     []ExprModel
    pub Except:   &Scope
    pub Assigned: bool
}

// Slice expression Model:.
// For example: [1, 2, 3, 4, 5, 6, 8, 9, 10]
pub struct SliceExprModel {
    pub ElemKind: &TypeKind
    pub Elems:    []ExprModel
}

// Indexing expression Model:.
// For example: my_slice[my_index]
pub struct IndexingExprModel {
    pub Token: &Token
    pub Expr:  &Data
    pub Index: &Data
}

// Anonymous function expression Model:.
pub struct AnonFnExprModel {
    pub Func:   &FnIns
    pub Global: bool
}

// Key-value expression pair Model:.
pub struct KeyValPairExprModel {
    pub Key: ExprModel
    pub Val: ExprModel
}

// Map expression Model:.
// For example; {0: false, 1: true}
pub struct MapExprModel {
    pub KeyKind: &TypeKind
    pub ValKind: &TypeKind
    pub Entries: []&KeyValPairExprModel
}

// Slicing expression Model:.
// For example: my_slice[2:my_slice.len-5]
pub struct SlicingExprModel {
    pub Token: &Token

    // Expression to slicing.
    pub Expr: ExprModel

    // Left index expression.
    // Zero integer if expression have not left index.
    pub Left: ExprModel

    // Right index expression.
    // Nil if expression have not right index.
    pub Right: ExprModel
}

// Trait sub-ident expression Model:.
// For example: my_trait.my_sub_ident
pub struct TraitSubIdentExprModel {
    pub Token:  &Token
    pub Expr:   ExprModel
    pub Method: &Fn
    pub Trt:    &Trait
}

// Structure sub-ident expression Model:.
// For example: my_struct.my_sub_ident
pub struct StructSubIdentExprModel {
    pub Token:    &Token
    pub Expr:     &Data
    pub ExprKind: &TypeKind
    pub Method:   &FnIns
    pub Field:    &FieldIns
}

// Structure static ident expression Model:.
// For example: MyStruct.my_sub_ident
pub struct StructStaticIdentExprModel {
    pub Structure: &StructIns
    pub Expr:      ExprModel
    pub Method:    &FnIns
}

// Array expression Model:.
// If array filled, elems field holds 2 data.
// First data is expression, second is nil, kind of mark to that array filled.
pub struct ArrayExprModel {
    pub Kind:  &Arr
    pub Elems: []ExprModel
}

// Common ident expression Model:.
pub struct CommonIdentExprModel {
    pub Ident: str
}

// Common sub-ident expression Model:.
pub struct CommonSubIdentExprModel {
    pub ExprKind: &TypeKind
    pub Expr:     ExprModel
    pub Token:    &Token
    pub Ident:    str
}

// Tuple expression Model:.
pub struct TupleExprModel {
    pub Datas: []&Data
}

// Expression Model: for built-in out function calls.
pub struct BuiltinOutCallExprModel {
    pub Expr:  ExprModel
    pub Debug: bool
}

// Expression Model: for built-in outln function calls.
pub struct BuiltinOutlnCallExprModel {
    pub Expr:  ExprModel
    pub Debug: bool
}

// Expression Model: for built-in clone function calls.
pub struct BuiltinCloneCallExprModel {
    pub Expr: ExprModel
}

// Expression Model: for built-in new function calls.
pub struct BuiltinNewCallExprModel {
    pub Kind: &TypeKind // Element type of reference.
    pub Init: ExprModel // Nil for not initialized.
}

// Expression Model: for built-in panic function calls.
pub struct BuiltinPanicCallExprModel {
    pub Token: &Token
    pub Expr:  ExprModel
}

// Expression Model: for built-in assert function calls.
pub struct BuiltinAssertCallExprModel {
    pub Token: &Token
    pub Expr:  ExprModel
    pub Log:   str
}

// Expression Model: for built-in make function calls.
pub struct BuiltinMakeCallExprModel {
    pub Kind: &TypeKind
    pub Len:  ExprModel
    pub Cap:  ExprModel
}

// Expression Model: for built-in append function calls.
pub struct BuiltinAppendCallExprModel {
    pub Dest:     ExprModel
    pub Elements: ExprModel
}

// Expression Model: for built-in copy function calls.
pub struct BuiltinCopyCallExprModel {
    pub Dest: &Data
    pub Src:  &Data
}

// Expression Model: for built-in error function calls.
pub struct BuiltinErrorCallExprModel {
    pub Func: &FnIns
    pub Err:  ExprModel
}

// Expression Model: for sizeof expressions.
// For example, in C++: sizeof(int)
pub struct SizeofExprModel {
    pub Expr: ExprModel
}

// Expression Model: for alignof expressions.
// For example, in C++: alignof(int)
pub struct AlignofExprModel {
    pub Expr: ExprModel
}

// Rune literal expression Model:.
// For example: 'a'
pub struct RuneExprModel {
    pub Code: rune
}

// Expression Model: for to_str function of std::jule::integrated library.
pub struct IntegratedToStrExprModel {
    pub Expr: ExprModel
}

// Expression Model: for inline code emit to backend.
pub struct BackendEmitExprModel {
    pub Code: str

    // Expression Model: for expression or type emit to backend from Jule source code.
    pub Exprs: []ExprModel
}

// Expression Model: for free calls.
// Function provided by: std::mem
pub struct FreeExprModel {
    pub Expr: ExprModel
}