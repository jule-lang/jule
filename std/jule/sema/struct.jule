// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{GenericDecl, Directive, Expr}
use std::jule::build
use std::jule::lex::{Token}

// Field.
struct Field {
    Owner:   &Struct
    Token:   &Token
    Public:  bool
    Mutable: bool        // Interior mutability.
    Ident:   str
    Kind:    &TypeSymbol
    Default: &Expr       // Nil if not given.
}

impl Field {
    fn instance(mut &self): &FieldIns {
        ret &FieldIns{
            Decl: self,
        }
    }
}

// Overloaded operators for instance.
// Patterns are checked.
struct Operators {
    Eq:           &FnIns
    Gt:           &FnIns
    GtEq:         &FnIns
    Lt:           &FnIns
    LtEq:         &FnIns
    Shl:          &FnIns
    Shr:          &FnIns
    Add:          &FnIns
    Sub:          &FnIns
    Div:          &FnIns
    Mul:          &FnIns
    Mod:          &FnIns
    BitAnd:       &FnIns
    BitOr:        &FnIns
    BitXor:       &FnIns
    Neg:          &FnIns
    Pos:          &FnIns
    BitNot:       &FnIns
    AddAssign:    &FnIns
    SubAssign:    &FnIns
    DivAssign:    &FnIns
    MulAssign:    &FnIns
    ModAssign:    &FnIns
    ShlAssign:    &FnIns
    ShrAssign:    &FnIns
    BitOrAssign:  &FnIns
    BitAndAssign: &FnIns
    BitXorAssign: &FnIns
}

// Structure.
struct Struct {
    // Used for type parsing.
    // Used declaration'sema sema for instance type checking.
    sema: &Sema

    // This structure depended to these structures, except binded ones.
    // Only stores plain identifier references such as A, B, and MyStruct.
    // Not includes non-pain identifier references such as *A, &B, and []MyStruct.
    Depends: []&Struct

    // This structures uses these structures.
    // Stores all referred structures.
    Uses: []&Struct

    Token:      &Token
    Ident:      str
    Fields:     []&Field
    Methods:    []&Fn
    Statics:    []&Var
    Public:     bool
    Binded:     bool
    Directives: []&Directive
    Generics:   []&GenericDecl
    Implements: []&Trait

    // Structure instances for each unique type combination of structure.
    // Nil if structure is never used.
    Instances: []&StructIns
}

impl Struct {
    fn instance(mut &self): &StructIns {
        // Returns already created instance for just one unique combination.
        if len(self.Generics) == 0 && len(self.Instances) == 1 {
            ret self.Instances[0]
        }

        let mut ins = &StructIns{
            Decl: self,
            Fields: make([]&FieldIns, 0, len(self.Fields)),
            Statics: make([]&Var, 0, len(self.Statics)),
            Refers: ReferenceStack.new(),
        }

        for (_, mut s) in self.Statics {
            ins.Statics = append(ins.Statics, new(Var, *s))
        }

        for (_, mut f) in self.Fields {
            ins.Fields = append(ins.Fields, f.instance())
            if !f.Mutable && f.Kind.Kind != nil && f.Kind.Kind.Mutable() {
                ins.Mutable = true
            }
        }

        if len(self.Generics) == 0 {
            ins.Methods = self.Methods
        } else {
            ins.Methods = make([]&Fn, 0, len(self.Methods))
            for (_, mut f) in self.Methods {
                let mut fins = new(Fn, *f)
                fins.Instances = nil
                ins.Methods = append(ins.Methods, fins)
            }
        }

        ret ins
    }

    // Appends instance if unique.
    // Returns already exist instance if given insance is not unique.
    fn appendInstance(mut self, mut &ins: &StructIns): &StructIns {
        // Skip already created instance for just one unique combination.
        if len(self.Generics) == 0 && len(self.Instances) == 1 {
            ret self.Instances[0]
        }

        for (_, mut ains) in self.Instances {
            if ains.Same(ins) {
                ret ains
            }
        }

        self.Instances = append(self.Instances, ins)
        ret nil
    }

    // Returns method by identifier.
    // Returns nil reference if not exist any method in this identifier.
    fn FindMethod(mut self, ident: str, statically: bool): &Fn {
        for (_, mut f) in self.Methods {
            if f.Statically == statically && f.Ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Returns static field by identifier.
    // Returns nil reference if not exist any static field in this identifier.
    fn FindStatic(mut self, ident: str): &Var {
        for (_, mut v) in self.Statics {
            if v.Ident == ident {
                ret v
            }
        }
        ret nil
    }

    // Returns field by identifier.
    // Returns nil reference if not exist any field in this identifier.
    fn FindField(mut self, ident: str): &Field {
        for (_, mut f) in self.Fields {
            if f.Ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Reports whether structure implements given trait.
    fn IsImplements(self, t: &Trait): bool {
        for _, it in self.Implements {
            if t == it {
                ret true
            }
        }
        ret false
    }

    // Reports whether structure is derives given derive.
    fn IsDerives(self, ident: str): bool {
        for _, d in self.Directives {
            if d.Tag.Kind == std::jule::build::Directive.Derive {
                if len(d.Args) == 1 && d.Args[0].Kind == ident {
                    ret true
                }
            }
        }
        ret false
    }

    // Reports whether structure is uses given structure.
    fn IsUses(self, s: &Struct): bool {
        for _, u in self.Uses {
            for s == u {
                ret true
            }
        }
        ret false
    }

    // Reports whether structure has only reference-type-accessible defines.
    fn HasRefAccessible(self): bool {
        for _, m in self.Methods {
            if len(m.Params) > 0 && m.Params[0].IsRef() {
                ret true
            }
        }
        ret false
    }
}

// Field instance.
struct FieldIns {
    Decl:    &Field
    Kind:    &TypeKind
    Default: &Data     // Nil if not given.
}

// Structure instance.
struct StructIns {
    Checked:    bool
    Decl:       &Struct
    Generics:   []&InsGeneric
    Fields:     []&FieldIns
    Statics:    []&Var
    Methods:    []&Fn
    Mutable:    bool            // This structure has mutable defines.
    Comparable: bool
    Refers:     &ReferenceStack
    Operators:  Operators
}

impl Kind for StructIns {
    // Implement: Kind
    // Returns Struct's type kind as string.
    fn Str(self): str {
        let mut kind = ""
        kind += self.Decl.Ident
        if len(self.Generics) > 0 {
            kind += "["
            for _, g in self.Generics {
                kind += g.Kind.Str()
                kind += ","
            }
            kind = kind[:len(kind)-1] // Remove comma.
            kind += "]"
        }
        ret kind
    }

    // Reports whether types are same.
    fn Equal(&self, other: &TypeKind): bool {
        let s = unsafe { (*(&other)).Struct() }
        if s == nil {
            ret false
        }

        if self.Decl != s.Decl {
            ret false
        }

        if len(self.Generics) != len(s.Generics) {
            ret false
        }

        let mut i = 0
        for i < len(self.Generics); i++ {
            if !self.Generics[i].Kind.Equal(s.Generics[i].Kind) {
                ret false
            }
        }

        ret true
    }
}

impl StructIns {
    // Reports whether instances are same.
    // Returns true if declarations and generics are same.
    fn Same(self, s: &StructIns): bool {
        if self.Decl != s.Decl || len(s.Generics) != len(self.Generics) {
            ret false
        }
        for i, g in self.Generics {
            let g2 = s.Generics[i]
            if g.Kind.BindIdent != g2.Kind.BindIdent || !g.Kind.Equal(g2.Kind) {
                ret false
            }
        }
        ret true
    }

    // Returns method by identifier.
    // Returns nil reference if not exist any method in this identifier.
    fn FindMethod(mut self, ident: str, statically: bool): &Fn {
        for (_, mut f) in self.Methods {
            if f.Statically == statically && f.Ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Returns field by identifier.
    // Returns nil reference if not exist any field in this identifier.
    fn FindField(mut self, ident: str): &FieldIns {
        for (_, mut f) in self.Fields {
            if f.Decl.Ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Returns static field by identifier.
    // Returns nil reference if not exist any static field in this identifier.
    fn FindStatic(mut self, ident: str): &Var {
        for (_, mut v) in self.Statics {
            if v.Ident == ident {
                ret v
            }
        }
        ret nil
    }
}