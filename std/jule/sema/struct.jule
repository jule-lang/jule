// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{GenericDecl, Directive, Expr}
use std::jule::build
use std::jule::lex::{Token}

// Field.
pub struct Field {
    pub owner:   &Struct
    pub token:   Token
    pub public:  bool
    pub mutable: bool // Interior mutability.
    pub ident:   str
    pub kind:    &TypeSymbol
    pub default: &Expr // Nil if not given.
}

impl Field {
    fn instance(mut &self): &FieldIns {
        ret &FieldIns{
            decl: self,
            kind: self.kind.kind,
        }
    }
}

// Structure.
pub struct Struct {
    // Used for type parsing.
    // Used declaration'sema sema for instance type checking.
    sema: &Sema

    // This structure depended to these structures, except cpp-linked ones.
    // Only stores plain identifier references such as A, B, and MyStruct.
    // Not includes non-pain identifier references such as *A, &B, and []MyStruct.
    pub depends: []&Struct

    // This structures uses these structures.
    // Stores all referred structures.
    pub uses: []&Struct

    pub token:      Token
    pub ident:      str
    pub fields:     []&Field
    pub methods:    []&Fn
    pub statics:    []&Var
    pub public:     bool
    pub cpp_linked: bool
    pub directives: []&Directive
    pub doc:        str
    pub generics:   []&GenericDecl
    pub implements: []&Trait

    // Structure instances for each unique type combination of structure.
    // Nil if structure is never used.
    pub instances: []&StructIns
}

impl Struct {
    fn instance(mut &self): &StructIns {
        // Returns already created instance for just one unique combination.
        if self.generics.len == 0 && self.instances.len == 1 {
            ret self.instances[0]
        }

        let mut ins = &StructIns{
            decl:       self,
            fields:     make([]&FieldIns, 0, self.fields.len),
            methods:    make([]&Fn, 0, self.methods.len),
            references: ReferenceStack.new(),
        }

        for (_, mut f) in self.fields {
            ins.fields = append(ins.fields, f.instance())
            if f.kind.kind != nil && f.kind.kind.mutable() {
                ins.mutable = true
            }
        }

        for (_, mut f) in self.methods {
            let mut fins = &Fn{
                sema:        f.sema,
                token:       f.token,
                global:      f.global,
                unsafety:    f.unsafety,
                public:      f.public,
                cpp_linked:  f.cpp_linked,
                statically:  f.statically,
                exceptional: f.exceptional,
                ident:       f.ident,
                directives:  f.directives,
                doc:         f.doc,
                scope:       f.scope,
                generics:    f.generics,
                result:      f.result,
                params:      f.params,
                owner:       f.owner,
                instances:   nil,
            }
            ins.methods = append(ins.methods, fins)
        }

        ret ins
    }

    // Appends instance if unique.
    // Returns already exist instance if given insance is not unique.
    fn append_instance(mut self, mut &ins: &StructIns): &StructIns {
        // Skip already created instance for just one unique combination.
        if self.generics.len == 0 && self.instances.len == 1 {
            ret self.instances[0]
        }

        for (_, mut ains) in self.instances {
            if ains.same(ins) {
                ret ains
            }
        }

        self.instances = append(self.instances, ins)
        ret nil
    }

    // Returns method by identifier.
    // Returns nil reference if not exist any method in this identifier.
    pub fn find_method(mut self, ident: str, statically: bool): &Fn {
        for (_, mut f) in self.methods {
            if f.statically == statically && f.ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Returns static field by identifier.
    // Returns nil reference if not exist any static field in this identifier.
    pub fn find_static(mut self, ident: str): &Var {
        for (_, mut v) in self.statics {
            if v.ident == ident {
                ret v
            }
        }
        ret nil
    }

    // Returns field by identifier.
    // Returns nil reference if not exist any field in this identifier.
    pub fn find_field(mut self, ident: str): &Field {
        for (_, mut f) in self.fields {
            if f.ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Reports whether structure implements given trait.
    pub fn is_implements(self, t: &Trait): bool {
        for _, it in self.implements {
            if t == it {
                ret true
            }
        }
        ret false
    }

    // Reports whether structure is derives given derive.
    pub fn is_derives(self, ident: str): bool {
        for _, d in self.directives {
            if d.tag.kind == std::jule::build::Directive.Derive {
                if d.args.len == 1 && d.args[0].kind == ident {
                    ret true
                }
            }
        }
        ret false
    }

    // Reports whether structure is uses given structure.
    pub fn is_uses(self, s: &Struct): bool {
        for _, u in self.uses {
            for s == u {
                ret true
            }
        }
        ret false
    }

    // Reports whether structure has only reference-type-accessible defines.
    pub fn has_ref_accessible(self): bool {
        for _, m in self.methods {
            if m.params.len > 0 && m.params[0].is_ref() {
                ret true
            }
        }
        ret false
    }
}

// Field instance.
pub struct FieldIns {
    pub decl:    &Field
    pub kind:    &TypeKind
    pub default: &Data // Nil if not given.
}

// Overloaded operators.
pub struct Operators {
    pub gt:    &FnIns
    pub gt_eq: &FnIns
    pub lt:    &FnIns
}

// Structure instance.
pub struct StructIns {
    pub checked:    bool
    pub decl:       &Struct
    pub generics:   []&TypeKind
    pub fields:     []&FieldIns
    pub methods:    []&Fn
    pub mutable:    bool // This structure has mutable defines.
    pub references: &ReferenceStack
    pub operators:  Operators
}

impl Kind for StructIns {
    // Implement: Kind
    // Returns Struct's type kind as string.
    pub fn to_str(self): str {
        let mut kind = ""
        kind += self.decl.ident
        if self.generics.len > 0 {
            kind += "["
            for _, g in self.generics {
                kind += g.to_str()
                kind += ","
            }
            kind = kind[:kind.len-1] // Remove comma.
            kind += "]"
        }
        ret kind
    }

    // Reports whether types are same.
    pub fn equals(&self, other: &TypeKind): bool {
        let s = unsafe { (*(&other)).strct() }
        if s == nil {
            ret false
        }

        if self.decl != s.decl {
            ret false
        }

        if self.generics.len != s.generics.len {
            ret false
        }

        let mut i = 0
        for i < self.generics.len; i++ {
            if !self.generics[i].equals(s.generics[i]) {
                ret false
            }
        }

        ret true
    }
}

impl StructIns {
    // Reports whether instances are same.
    // Returns true if declarations and generics are same.
    pub fn same(self, s: &StructIns): bool {
        if self.decl != s.decl || s.generics.len != self.generics.len {
            ret false
        }

        for i, g in self.generics {
            if !g.equals(s.generics[i]) {
                ret false
            }
        }
        ret true
    }

    // Returns method by identifier.
    // Returns nil reference if not exist any method in this identifier.
    pub fn find_method(mut self, ident: str, statically: bool): &Fn {
        for (_, mut f) in self.methods {
            if f.statically == statically && f.ident == ident {
                ret f
            }
        }
        ret nil
    }

    // Returns field by identifier.
    // Returns nil reference if not exist any field in this identifier.
    pub fn find_field(mut self, ident: str): &FieldIns {
        for (_, mut f) in self.fields {
            if f.decl.ident == ident {
                ret f
            }
        }
        ret nil
    }
}
