// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{Token}

// Expression model.
pub type ExprModel: any

// Binary operation expression model.
pub struct BinopExprModel {
    pub left:  ExprModel
    pub right: ExprModel
    pub op:    str
}

// Unary operation expression model.
pub struct UnaryExprModel {
    pub expr: ExprModel
    pub op:   str
}

// Structure field argument expression model for constructors.
// For example: &MyStruct{10, false, "-"}
pub struct StructArgExprModel {
    pub field: &FieldIns
    pub expr:  ExprModel
}

// Structure literal.
pub struct StructLitExprModel {
    pub strct: &StructIns
    pub args:  []&StructArgExprModel
}

// Heap allocated structure litral expression.
// For example: &MyStruct{}
pub struct AllocStructLitExprModel {
    pub lit: &StructLitExprModel
}

// Casting expression model.
// For example: (int)(my_float)
pub struct CastingExprModel {
    pub expr:      ExprModel
    pub kind:      &TypeKind
    pub expr_kind: &TypeKind
}

// Function call expression model.
pub struct FnCallExprModel {
    pub token:    Token
    pub func:     &FnIns
    pub is_co:    bool
    pub expr:     ExprModel
    pub args:     []ExprModel
    pub except:   &Scope
    pub assigned: bool
}

// Slice expression model.
// For example: [1, 2, 3, 4, 5, 6, 8, 9, 10]
pub struct SliceExprModel {
    pub elem_kind: &TypeKind
    pub elems:     []ExprModel
}

// Indexing expression model.
// For example: my_slice[my_index]
pub struct IndexigExprModel {
    pub expr:  &Data
    pub index: &Data
}

// Anonymous function expression model.
pub struct AnonFnExprModel {
    pub func:   &FnIns
    pub global: bool
}

// Key-value expression pair model.
pub struct KeyValPairExprModel {
    pub key: ExprModel
    pub val: ExprModel
}

// Map expression model.
// For example; {0: false, 1: true}
pub struct MapExprModel {
    pub key_kind: &TypeKind
    pub val_kind: &TypeKind
    pub entries:  []&KeyValPairExprModel
}

// Slicing expression model.
// For example: my_slice[2:my_slice.len-5]
pub struct SlicingExprModel {
    // Expression to slicing.
    pub expr: ExprModel
    // Left index expression.
    // Zero integer if expression have not left index.
    pub left: ExprModel
    // Right index expression.
    // Nil if expression have not right index.
    pub right: ExprModel
}

// Trait sub-ident expression model.
// For example: my_trait.my_sub_ident
pub struct TraitSubIdentExprModel {
    pub expr:  ExprModel
    pub ident: str
}

// Structure sub-ident expression model.
// For example: my_struct.my_sub_ident
pub struct StructSubIdentExprModel {
    pub expr:      ExprModel
    pub expr_kind: &TypeKind
    pub method:    &FnIns
    pub field:     &FieldIns
}

// Structure static ident expression model.
// For example: MyStruct.my_sub_ident
pub struct StructStaticIdentExprModel {
    pub structure: &StructIns
    pub expr:      ExprModel
    pub method:    &FnIns
}

// Array expression model.
// If array filled, elems field holds 2 data.
// First data is expression, second is nil, kind of mark to that array filled.
pub struct ArrayExprModel {
    pub kind:  &Arr
    pub elems: []ExprModel
}

// Common ident expression model.
pub struct CommonIdentExprModel {
    pub ident: str
}

// Common sub-ident expression model.
pub struct CommonSubIdentExprModel {
    pub expr_kind: &TypeKind
    pub expr:      ExprModel
    pub ident:     str
}

// Tuple expression model.
pub struct TupleExprModel {
    pub datas: []&Data
}

// Expression model for built-in out function calls.
pub struct BuiltinOutCallExprModel {
    pub expr: ExprModel
}

// Expression model for built-in outln function calls.
pub struct BuiltinOutlnCallExprModel {
    pub expr: ExprModel
}

// Expression model for built-in clone function calls.
pub struct BuiltinCloneCallExprModel {
    pub expr: ExprModel
}

// Expression model for built-in new function calls.
pub struct BuiltinNewCallExprModel {
    pub kind: &TypeKind // Element type of reference.
    pub init: ExprModel // Nil for not initialized.
}

// Expression model for built-in panic function calls.
pub struct BuiltinPanicCallExprModel {
    pub token: Token
    pub expr:  ExprModel
}

// Expression model for built-in make function calls.
pub struct BuiltinMakeCallExprModel {
    pub kind: &TypeKind
    pub len:  ExprModel
    pub cap:  ExprModel
}

// Expression model for built-in append function calls.
pub struct BuiltinAppendCallExprModel {
    pub dest:     ExprModel
    pub elements: ExprModel
}

// Expression model for built-in error function calls.
pub struct BuiltinErrorCallExprModel {
    pub func: &FnIns
    pub err:  ExprModel
}

// Expression model for sizeof expressions.
// For example, in C++: sizeof(int)
pub struct SizeofExprModel {
    pub expr: ExprModel
}

// Expression model for alignof expressions.
// For example, in C++: alignof(int)
pub struct AlignofExprModel {
    pub expr: ExprModel
}

// Rune literal expression model.
// For example: 'a'
pub struct RuneExprModel {
    pub code: rune
}

// Expression model for to_str function of std::jule::integrated library.
pub struct IntegratedToStrExprModel {
    pub expr: ExprModel
}

// Expression model for ternary operator.
pub struct TernaryExprModel {
    pub condition:  ExprModel
    pub true_expr:  ExprModel
    pub false_expr: ExprModel
}

// Expression model for inline code emit to backend.
pub struct BackendEmitExprModel {
    pub code: str
}
