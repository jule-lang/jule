// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/token"

// Type of AST Node's data.
enum NodeData: type {
	&EnumDecl,
	&TypeEnumDecl,
	&FnDecl,
	&StructDecl,
	&TraitDecl,
	&TypeAliasDecl,
	&Var,
	&Impl,
}

// AST Node.
struct Node {
	Token: &token::Token
	Data:  NodeData
}

// Directive.
struct Directive {
	Tag:  &token::Token
	Args: []&token::Token
}

// Kind type of type declarations.
enum TypeKind: type {
	&IdentType,
	&SubIdentType,
	&SptrTypeDecl,
	&PtrTypeDecl,
	&SlcTypeDecl,
	&ArrTypeDecl,
	&MapTypeDecl,
	&TupleTypeDecl,
	&FnDecl,
	&NamespaceType,
	&ChanTypeDecl,
}

// Type declaration.
// Also represents type expression.
//
// For primitive types:
//  - Represented by IdentType.
//  - Token's identity is data type.
//  - Primitive type kind is Ident.
//
// For function types:
//  - Function types represented by &FnDecl.
struct Type {
	Token: &token::Token
	Kind:  TypeKind
}

// Identifier type.
struct IdentType {
	Token:    &token::Token
	Ident:    str
	Binded:   bool
	Generics: []&Type
}

// Sub-identifier type.
struct SubIdentType {
	Idents: []&IdentType
}

// Namespace chain type.
struct NamespaceType {
	Namespace: &token::Token // Namespace token.
	Kind:      &Type         // Type of identifier.
}

// Channel type.
struct ChanTypeDecl {
	Recv: bool
	Send: bool
	Elem: &Type
}

// Smart pointer type.
struct SptrTypeDecl {
	Elem: &Type
}

// Slice type.
struct SlcTypeDecl {
	Elem: &Type
}

// Tuple type.
struct TupleTypeDecl {
	Types: []&Type
}

// Pointer type.
struct PtrTypeDecl {
	Elem: &Type
}

impl PtrTypeDecl {
	// Reports whether pointer is unsafe pointer (*unsafe).
	fn IsUnsafe(self): bool {
		ret self.Elem == nil
	}
}

// Array type.
// Size epxression is nil for auto-sized array.
struct ArrTypeDecl {
	Elem: &Type
	Size: &Expr
}

impl ArrTypeDecl {
	// Reports whether array is auto-sized.
	fn AutoSized(self): bool {
		ret self.Size == nil
	}
}

// Map type.
struct MapTypeDecl {
	Key: &Type
	Val: &Type
}

// Return type.
// Kind and Idents is nil for void type.
struct RetTypeDecl {
	Kind:   &Type
	Idents: []&token::Token
}

// Type of Expr's data.
enum ExprData: type {
	&RangeExpr,
	&TupleExpr,
	&LitExpr,
	&Type,
	&IdentExpr,
	&UnaryExpr,
	&SubIdentExpr,
	&NamespaceExpr,
	&VariadicExpr,
	&CastExpr,
	&FnCallExpr,
	&StructLit,
	&BraceLit,
	&SlicingExpr,
	&SliceExpr,
	&BinaryExpr,
	&UnsafeExpr,
	&IndexingExpr,
	&FnDecl,
	&FieldExprPair,
	&KeyValPair,
	&ChanRecv,
	&ChanSend,
}

// Expression.
struct Expr {
	Token: &token::Token
	End:   &token::Token
	Kind:  ExprData
}

// Channel receive expression.
struct ChanRecv {
	Expr: &Expr
}

// Range expression between parentheses.
struct RangeExpr {
	Expr: &Expr
}

// Use expression.
struct UseExpr {
	Token: &token::Token
	Expr:  &Expr
}

// Tuple expression.
struct TupleExpr {
	Expr: []&Expr
}

// Literal expression.
struct LitExpr {
	Token: &token::Token
	Value: str
}

// Unsafe expression.
struct UnsafeExpr {
	Token: &token::Token // Token of unsafe keyword.
	Expr:  &Expr
}

// Identifier expression.
struct IdentExpr {
	Token:  &token::Token // Token of identifier.
	Ident:  str
	Binded: bool
}

impl IdentExpr {
	// Reports whether identifier is self keyword.
	fn IsSelf(self): bool {
		ret self.Ident == token::Kind.Self
	}
}

// Unary expression.
struct UnaryExpr {
	Op:   &token::Token
	Expr: &Expr
}

// Variadiced expression.
struct VariadicExpr {
	Token: &token::Token
	Expr:  &Expr
}

// Casting expression.
struct CastExpr {
	Kind: &Type
	Expr: &Expr
}

// Namespace identifier selection expression.
struct NamespaceExpr {
	Namespace: &token::Token // Tokens of namespace identifier.
	Ident:     &token::Token // Token of selected identifier.
}

// Object sub identifier selection expression.
struct SubIdentExpr {
	Expr:  &Expr         // Selected object.
	Ident: &token::Token // TOken of selected identifier.
}

// Binary operation.
struct BinaryExpr {
	Left:  &Expr
	Right: &Expr
	Op:    &token::Token
}

// Function call expression kind.
struct FnCallExpr {
	Token:     &token::Token
	Expr:      &Expr
	Args:      []&Expr
	Exception: &ScopeTree // Exception handling scope.
	IsCo:      bool
}

impl FnCallExpr {
	// Reports whether exception is not handled.
	fn Unhandled(self): bool {
		ret self.Exception == nil
	}

	// Reports whether exception is ignored.
	fn Ignored(self): bool {
		// Return true if deferred field is true.
		// Deferred field used mark for exception ignored calls like: x()!
		ret self.Exception != nil && self.Exception.Deferred
	}
}

// Field-Expression pair.
struct FieldExprPair {
	Field: &token::Token // Field identifier token.
	Expr:  &Expr
}

impl FieldExprPair {
	// Reports whether pair targeted field.
	fn IsTargeted(self): bool {
		ret self.Field != nil
	}
}

// Struct literal instiating expression.
struct StructLit {
	End:   &token::Token
	Kind:  &Type
	Exprs: []&Expr // Possible types: &FieldExprPair, and other expressions.
}

// Anonymous brace instiating expression.
struct BraceLit {
	Token: &token::Token
	End:   &token::Token
	Exprs: []&Expr
}

impl BraceLit {
	// Reports whether literal is empty ( {} ).
	fn IsEmpty(self): bool {
		ret len(self.Exprs) == 0
	}
}

// Key-value pair expression.
struct KeyValPair {
	Key:   &Expr
	Val:   &Expr
	Colon: &token::Token
}

// Slice initiating expression.
// Also represents array initiating expression.
struct SliceExpr {
	Token: &token::Token
	End:   &token::Token
	Exprs: []&Expr
}

impl SliceExpr {
	// Reports whether slice is empty.
	fn IsEmpty(self): bool {
		ret len(self.Exprs) == 0
	}
}

// Indexing expression.
struct IndexingExpr {
	Token: &token::Token
	End:   &token::Token
	Expr:  &Expr // Value expression to indexing.
	Index: &Expr // Index value expression.
}

// Slicing expression.
struct SlicingExpr {
	Token: &token::Token
	End:   &token::Token
	Expr:  &Expr // Value expression to slicing.
	Start: &Expr // Start index value expression.
	To:    &Expr // To index value expression.
}

// Constraint.
struct Constraint {
	Mask: []&Type
}

// Generic type declaration.
struct GenericDecl {
	Token:      &token::Token
	Ident:      str
	Constraint: &Constraint
}

// Label statement.
struct LabelSt {
	Token: &token::Token
	Ident: str
}

// Goto statement.
struct GotoSt {
	Token: &token::Token
	Label: &token::Token
}

// Fall statement.
struct FallSt {
	Token: &token::Token
}

// Left expression of assign statement.
struct AssignLeft {
	Token:     &token::Token
	Mutable:   bool
	Reference: bool
	Ident:     str
	Expr:      &Expr
}

// Assign statement.
struct AssignSt {
	Declarative: bool
	Setter:      &token::Token
	Left:        []&AssignLeft
	Right:       &Expr
}

// Type of Stmt's data.
enum StmtData: type {
	&Var,
	&RetSt,
	&GotoSt,
	&BreakSt,
	&ContSt,
	&Expr,
	&Conditional,
	&Match,
	&Iter,
	&AssignSt,
	&FallSt,
	&LabelSt,
	&ScopeTree,
	&TypeAliasDecl,
	&UseExpr,
	&Select,
}

// Statement.
struct Stmt {
	Token: &token::Token
	End:   &token::Token
	Data:  StmtData
}

// Scope tree.
struct ScopeTree {
	Parent:   &ScopeTree // Nil if scope is root.
	Unsafety: bool
	Deferred: bool
	Stmts:    []Stmt
	End:      &token::Token
}

// Channel send data statement.
struct ChanSend {
	Chan: &Expr
	Data: &Expr
}

// Parameter.
struct ParamDecl {
	Token:     &token::Token
	Mutable:   bool
	Variadic:  bool
	Reference: bool
	Kind:      &Type
	Ident:     str
}

impl ParamDecl {
	// Reports whether parameter is self (receiver) parameter.
	fn IsSelf(self): bool {
		ret self.Ident == "&self" || self.Ident == "self"
	}

	// Reports whether self (receiver) parameter is reference.
	fn IsRef(self): bool {
		ret self.Ident != "" && self.Ident[0] == '&'
	}
}

// Function declaration.
// Also represents anonymous function expression.
struct FnDecl {
	Token:       &token::Token
	Global:      bool
	Unsafety:    bool
	Public:      bool
	Binded:      bool
	Statically:  bool
	Exceptional: bool
	Ident:       str
	Directives:  []&Directive
	Scope:       &ScopeTree
	Generics:    []&GenericDecl
	Result:      &RetTypeDecl
	Params:      []&ParamDecl
}

impl FnDecl {
	// Reports whether function is anonymous.
	fn IsAnon(self): bool {
		ret self.Ident == token::Ident.Anon
	}
}

// Variable declaration.
struct Var {
	Scope:      &ScopeTree // nil for global scopes
	Token:      &token::Token
	Setter:     &token::Token
	Ident:      str
	Binded:     bool
	Public:     bool
	Mutable:    bool
	Constant:   bool
	Statically: bool
	Reference:  bool
	Directives: []&Directive
	Kind:       &Type // nil for type inferred
	Expr:       &Expr
}

// Return statement.
struct RetSt {
	Token: &token::Token
	Expr:  &Expr
}

// Type of Iter's kind.
enum IterKind: type {
	&WhileKind,
	&RangeKind,
}

// Iteration.
struct Iter {
	Comptime: bool
	Token:    &token::Token
	Kind:     IterKind
	Scope:    &ScopeTree
}

impl Iter {
	// Reports whether iteration is infinity.
	fn IsInf(self): bool { ret self.Kind == nil }
}

// While iteration kind.
struct WhileKind {
	Expr:      &Expr
	Next:      StmtData // Nil if kind is while-next iteration.
	NextToken: &token::Token
}

impl WhileKind {
	// Reports whether kind is while-next iteration.
	fn IsWhileNext(self): bool {
		ret self.Next != nil
	}
}

// Range iteration kind.
struct RangeKind {
	InToken: &token::Token // Token of "in" keyword
	Expr:    &Expr
	KeyA:    &Var // first key of range
	KeyB:    &Var // second key of range
}

// Break statement.
struct BreakSt {
	Token: &token::Token
	Label: &token::Token
}

// Continue statement.
struct ContSt {
	Token: &token::Token
	Label: &token::Token
}

// If condition.
struct If {
	Token: &token::Token
	Expr:  &Expr
	Scope: &ScopeTree
}

// Else condition.
struct Else {
	Token: &token::Token
	Scope: &ScopeTree
}

// Condition chain.
struct Conditional {
	Head:    &If
	Tail:    []&If
	Default: &Else
}

// Type alias declaration.
struct TypeAliasDecl {
	Scope:  &ScopeTree
	Public: bool
	Binded: bool
	Token:  &token::Token
	Ident:  str
	Strict: bool
	Kind:   &Type
}

// Case of match-case.
struct Case {
	Token: &token::Token
	Scope: &ScopeTree

	// Holds expression.
	// Expressions holds *Type if If type matching.
	Exprs: []&Expr
}

// Match statement.
struct Match {
	Comptime:  bool
	Token:     &token::Token
	End:       &token::Token
	TypeMatch: bool
	Expr:      &Expr
	Cases:     []&Case
	Default:   &Else
}

// Select statement.
struct Select {
	Token:   &token::Token
	End:     &token::Token
	Cases:   []&Case
	Default: &Else
}

// Use declaration statement.
struct UseDecl {
	Token:  &token::Token
	Path:   &token::Token // Use declaration path token.
	Alias:  &token::Token // Custom alias. Nil if not given.
	Binded: bool          // Bind use declaration.
}

// Enum item.
struct EnumItemDecl {
	Token: &token::Token
	Ident: str
	Expr:  &Expr // Nil for auto expression.
}

impl EnumItemDecl {
	// Reports whether item has auto expression.
	fn AutoExpr(self): bool {
		ret self.Expr == nil
	}
}

// Enum declaration.
struct EnumDecl {
	Token:  &token::Token
	Public: bool
	Ident:  str
	Kind:   &Type
	Items:  []&EnumItemDecl
	End:    &token::Token
}

impl EnumDecl {
	// Reports whether enum's type is default.
	fn DefaultTyped(self): bool {
		ret self.Kind == nil
	}
}

// TypeEnum item.
struct TypeEnumItemDecl {
	Token: &token::Token
	Ident: str
	Kind:  &Type
}

// TypeEnum declaration.
struct TypeEnumDecl {
	Token:  &token::Token
	Public: bool
	Ident:  str
	Items:  []&TypeEnumItemDecl
	End:    &token::Token
}

// Field declaration.
struct FieldDecl {
	Token:   &token::Token
	Public:  bool
	Mutable: bool // Interior mutability.
	Ident:   str
	Kind:    &Type
	Default: &Expr // Nil if not given.
}

// Structure declaration.
struct StructDecl {
	Token:      &token::Token
	End:        &token::Token
	Ident:      str
	Fields:     []&FieldDecl
	Public:     bool
	Binded:     bool
	Directives: []&Directive
	Generics:   []&GenericDecl
}

// Trait declaration.
struct TraitDecl {
	Token:    &token::Token
	End:      &token::Token
	Ident:    str
	Public:   bool
	Inherits: []&Type
	Methods:  []&FnDecl
}

// Implementation.
struct Impl {
	End: &token::Token

	// This token available for these cases:
	//  - Implementation trait to structure, represents trait's type.
	Base: &Type

	// This token available for these cases:
	//  - Implementation trait to structure, represents structure's type.
	//  - Implementation to structure, represents structure's type.
	Dest: &Type

	// Given methods to implement.
	Methods: []&FnDecl

	// Static variables to implement.
	Statics: []&Var
}

impl Impl {
	// Reports whether implementation type is trait to structure.
	fn IsTraitImpl(self): bool {
		ret self.Base != nil
	}

	// Reports whether implementation type is append to destination structure.
	fn IsStructImpl(self): bool {
		ret self.Base == nil
	}
}