// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use conv for std::conv
use utf8 for std::unicode::utf8

// Reports whether rune is byte actually.
// In other words, whether rune is ACII.
pub fn is_ascii(r: rune): bool {
    const MAX_ASCII = 1<<7 - 1
    ret r <= MAX_ASCII
}

// Returns rune value string from bytes, not includes quotes.
// Bytes are represents rune literal, allows escape sequences.
// Returns empty string if bytes.len == 0
pub fn to_rune(bytes: []byte): rune {
    if bytes.len == 0 {
        ret 0
    }

    let mut r: rune = 0
    if bytes[0] == '\\' && bytes.len > 1 {
        let mut i = 0
        r = rune_from_esq_seq(bytes, i)
    } else {
        r, _ = utf8::decode_rune(bytes)
    }

    ret r
}

// Returns raw-string value string from bytes, not includes quotes.
// Bytes are represents string characters.
// Returns empty string if bytes.len == 0
pub fn to_raw_str(bytes: []byte): str { ret str(bytes) }

// Returns string value string from bytes, not includes quotes.
// Bytes are represents string characters, allows escape sequences.
// Returns empty string if bytes.len == 0
pub fn to_str(bytes: []byte): str {
    if bytes.len == 0 {
        ret ""
    }

    let mut s = make([]byte, 0, bytes.len)
    let mut i = 0
    for i < bytes.len {
        let b = bytes[i]
        if b == '\\' {
            s = append(s, str_esq_seq(bytes, i)...)
        } else {
            let (r, size) = utf8::decode_rune(bytes[i:])
            i += size
            s = utf8::append_rune(s, r)
        }
    }
    ret str(s)
}

fn try_btoa_common_esq(bytes: []byte): (seq: byte, ok: bool) {
    if bytes.len < 2 || bytes[0] != '\\' {
        ret
    }

    match bytes[1] {
    | '\\': seq = '\\'
    | '\'': seq = '\''
    | '"':  seq = '"'
    | 'a':  seq = '\a'
    | 'b':  seq = '\b'
    | 'f':  seq = '\f'
    | 'n':  seq = '\n'
    | 'r':  seq = '\r'
    | 't':  seq = '\t'
    | 'v':  seq = '\v'
    }

    ok = seq != 0
    ret
}

fn rune_from_esq_seq(bytes: []byte, mut &i: int): rune {
    let (b, ok) = try_btoa_common_esq(bytes[i:])
    i++ // Skip escape sequence solidus.
    if ok {
        i++ // Skip sequence specifier.
        ret rune(b)
    }

    match bytes[i] {
    | 'u':
        const SEQ_LEN = 5
        let (rc, _) = conv::parse_uint(str(bytes[i+1:i+SEQ_LEN]), 16, 64)
        i += SEQ_LEN
        let r = rune(rc)
        ret r

    | 'U':
        const SEQ_LEN = 9
        let (rc, _) = conv::parse_uint(str(bytes[i+1:i+SEQ_LEN]), 16, 64)
        i += SEQ_LEN
        let r = rune(rc)
        ret r

    | 'x':
        const SEQ_LEN = 3
        let seq = bytes[i+1:i+SEQ_LEN]
        i += SEQ_LEN
        let (b, _) = conv::parse_uint(str(seq), 16, 64)
        ret rune(b)

    |:
        const SEQ_LEN = 3
        let seq = bytes[i : i+SEQ_LEN]
        i += SEQ_LEN
        let (b, _) = conv::parse_uint(str(seq[1:]), 8, 64)
        ret rune(b)
    }
}

fn str_esq_seq(bytes: []byte, mut &i: int): []byte {
    let r = rune_from_esq_seq(bytes, i)
    if r <= 255 {
        ret [byte(r)]
    }
    ret []byte(str(r))
}
