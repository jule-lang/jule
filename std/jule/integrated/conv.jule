// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use utf16 for std::unicode::utf16

// Builtin:
// Returns string converted form of expression.
// pub fn to_str(expr: any): str

// Returns the UTF-16 encoding of the UTF-8 string
// s, with a terminating NULL added. If s includes NULL
// character at any location, ignores followed characters.
pub fn utf16_from_str(s: str): []u16 {
    // In the worst case all characters require two u16.
    // Also account for the terminating NULL character.
    // See: C Strings and Windows UTF16.

    const NULL_TERMINATION = '\x00'
    let runes = ([]rune)(s)
    let mut buff = make([]u16, 0, runes.len)
    for _, r in runes {
        if r == NULL_TERMINATION {
            break
        }
        buff = utf16::append_rune(buff, r)
    }
    ret utf16::append_rune(buff, NULL_TERMINATION)
}

// Returns the UTF-8 encoding of the UTF-16 sequence s,
// with a terminating NULL removed. Returns empty string
// if s is nil.
pub fn utf16_to_str(s: []u16): str {
    if s == nil {
        ret ""
    }
    let mut code_page = unsafe { *(&s) }
    for i, v in s {
        if v == 0 {
            code_page = code_page[:i]
            break
        }
    }
    ret str(utf16::decode(code_page))
}

// Returns the UTF-8 encoding of the UTF-16 sequence s in *u16 form,
// with a terminating NULL removed. Returns empty string if s is nil.
pub unsafe fn u16_ptr_to_str(s: *u16): str {
    if s == nil {
        ret ""
    }

    let mut code_page: []u16 = nil
    let mut i = 0
    for ; i++ {
        let r = s[i]
        if r == 0 {
            ret str(utf16::decode(code_page))
        }
        code_page = append(code_page, r)
    }
    ret ""
}

// Returns the string of s, with a terminating NULL removed.
// Returns empty string if pointer is nil.
pub unsafe fn byte_ptr_to_str(s: *byte): str {
    if s == nil {
        ret ""
    }
    unsafe {
        ret emit[str]("static_cast<{}>({})", str, s)
    }
}
