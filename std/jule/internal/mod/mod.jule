// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{File, Directory, DirEntry}
use path for std::fs::path
use build for std::jule::build::{Log, LogKind}
use strings for std::strings

// Searches module file in path.
// Reports whether module file is exist in given directory.
fn FindModuleFile(&dirents: []&DirEntry): bool {
    for _, d in dirents {
        if !d.Stat.IsDir() && d.Name == build::ModuleFile {
            ret true
        }
    }
    ret false
}

// Searches module file in path, and their parent paths.
// Returns empty string if any module file is not exist.
// Returns directory path of module file if exist.
fn FindModuleFileDeep(mut path: str): str {
    for {
        let mut dirents = Directory.Read(path) else {
            break
        }

        let exist = FindModuleFile(dirents)
        if exist {
            ret path
        }

        let n = path.len
        path = path::Dir(path)
        if path.len == n { // Same path, no difference.
            break
        }
    }

    ret ""
}

// Checks module file of given directory.
fn CheckModuleFile(path: str): []Log {
    let bytes = File.Read(path::Join(path, build::ModuleFile)) else {
        ret [{
                Kind: LogKind.Flat,
                Text: "module file could not checked because of a problem",
            }]
    }
    let s = strings::Trim(str(bytes), " \n\r\t\v")
    if s.len != 0 {
        ret [{
                Kind: LogKind.Flat,
                Text: "module file has syntax error(s)",
            }]
    }
    ret nil
}