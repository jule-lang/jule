// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{Ast}
use std::jule::build::{Log}
use std::jule::lex::{File}

// Stores information about file parsing.
struct FileInfo {
    Ast:    &Ast
    Errors: []Log
}

// Stores information about package parsing.
struct PackageInfo {
    Files: []&FileInfo
}

// Parses fileset's tokens and builds AST.
// Returns nil if f is not real.
// File should not contain comment tokens.
fn ParseFile(mut f: &File): &FileInfo {
    if f == nil {
        ret nil
    }
    let mut finf = new(FileInfo)
    finf.Ast, finf.Errors = parseFileset(f)
    if len(finf.Errors) > 0 {
        finf.Ast = nil
    }
    ret finf
}

// Parses fileset's tokens and builds AST.
// Returns nil if filesets is nil.
// Skip fileset if nil.
// Files should not contain comment tokens.
fn ParsePackage(mut filesets: []&File): &PackageInfo {
    if filesets == nil {
        ret nil
    }
    let mut pinf = new(PackageInfo)
    pinf.Files = make([]&FileInfo, 0, len(filesets))
    for (_, mut f) in filesets {
        if f == nil {
            continue
        }
        let mut finfo = ParseFile(f)
        pinf.Files = append(pinf.Files, finfo)
    }
    ret pinf
}

fn parseFileset(mut f: &File): (&Ast, []Log) {
    let mut p = new(parser)
    p.parse(f)
    ret p.ast, p.errors
}