// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/lex"

// Stores information about file parsing.
struct FileInfo {
	Ast:    &ast::AST
	Errors: []build::Log
}

// Stores information about package parsing.
struct PackageInfo {
	Files: []&FileInfo
}

// Parses fileset's tokens and builds AST.
// Returns nil if f is not real.
// File should not contain comment tokens.
fn ParseFile(mut f: &lex::File): &FileInfo {
	if f == nil {
		ret nil
	}
	mut finf := new(FileInfo)
	finf.Ast, finf.Errors = parseFileset(f)
	if len(finf.Errors) > 0 {
		finf.Ast = nil
	}
	ret finf
}

// Parses fileset's tokens and builds AST.
// Returns nil if filesets is nil.
// Skip fileset if nil.
// Files should not contain comment tokens.
fn ParsePackage(mut filesets: []&lex::File): &PackageInfo {
	if filesets == nil {
		ret nil
	}
	mut pinf := new(PackageInfo)
	pinf.Files = make([]&FileInfo, 0, len(filesets))
	for (_, mut f) in filesets {
		if f == nil {
			continue
		}
		mut finfo := ParseFile(f)
		pinf.Files = append(pinf.Files, finfo)
	}
	ret pinf
}

fn parseFileset(mut f: &lex::File): (&ast::AST, []build::Log) {
	mut p := new(parser)
	p.parse(f)
	ret p.ast, p.errors
}