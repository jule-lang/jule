// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{
    TypeDecl,
    SubIdentTypeDecl,
    IdentTypeDecl,
    NamespaceTypeDecl,
    PtrTypeDecl,
    SptrTypeDecl,
    SlcTypeDecl,
    ArrTypeDecl,
    MapTypeDecl,
}
use std::jule::build::{LogMsg}
use std::jule::lex::{Token, TokenId, TokenKind}

fn buildVoidType(): &TypeDecl {
    ret new(TypeDecl)
}

fn buildPrimType(mut t: &Token): &TypeDecl {
    ret &TypeDecl{
        Token: t,
        Kind: &IdentTypeDecl{
            Token: t,
            Ident: t.Kind,
        },
    }
}

struct typeBuilder {
    p:      &parser
    tokens: []&Token
    i:      *int
    err:    bool
}

impl typeBuilder {
    fn pushErr(mut self, token: &Token, fmt: LogMsg) {
        if self.err {
            self.p.pushErr(token, fmt)
        }
    }

    // Push suggestion to last log.
    fn pushSuggestion(mut self, fmt: LogMsg, args: ...any) {
        if self.err {
            self.p.pushSuggestion(fmt, args...)
        }
    }

    unsafe fn buildPrim(mut self): &TypeDecl {
        let mut t = buildPrimType(self.tokens[*self.i])
        *self.i++
        ret t
    }

    unsafe fn buildNamespace(mut self): &TypeDecl {
        let mut t = &TypeDecl{
            Token: self.tokens[*self.i],
        }

        let mut nst = new(NamespaceTypeDecl)
        let mut n = 0
        for *self.i < len(self.tokens); *self.i++ {
            let mut token = self.tokens[*self.i]
            if n%2 == 0 {
                if token.Id != TokenId.Ident {
                    self.pushErr(token, LogMsg.InvalidSyntax)
                    self.pushSuggestion(LogMsg.ExpectedIdentifier)
                }
                nst.Idents = append(nst.Idents, token)
            } else if token.Id != TokenId.DblColon {
                break
            }
            n++
        }

        // Remove selected identifier token.
        nst.Idents = nst.Idents[:len(nst.Idents)-1]

        *self.i-- // Set offset to last identifier.
        nst.Kind = self.buildIdent()
        t.Kind = nst
        ret t
    }

    unsafe fn buildGenerics(mut self): []&TypeDecl {
        if *self.i >= len(self.tokens) {
            ret nil
        }
        let token = self.tokens[*self.i]
        if token.Id != TokenId.Range || token.Kind != TokenKind.LBracket {
            ret nil
        }

        let mut parts = self.identGenerics()
        if len(parts) == 0 {
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }

        let mut types = make([]&TypeDecl, 0, len(parts))
        for (_, mut part) in parts {
            let mut j = 0
            let (mut t, _) = unsafe { self.p.buildType(part, &j, true) }
            if j < len(part) {
                self.pushErr(part[j], LogMsg.InvalidSyntax)
            }
            types = append(types, t)
        }
        ret types
    }

    unsafe fn identGenerics(mut self): [][]&Token {
        let first = *self.i
        let mut rangeN = 0
        for *self.i < len(self.tokens); *self.i++ {
            let token = self.tokens[*self.i]
            if token.Id == TokenId.Range {
                match token.Kind {
                | TokenKind.LBracket:
                    rangeN++
                | TokenKind.RBracket:
                    rangeN--
                }
            }
            if rangeN == 0 {
                *self.i++ // Skip right bracket
                break
            }
        }
        let mut tokens = self.tokens[first+1 : *self.i-1] // Take range of brackets.
        let (mut parts, errors) = parts(tokens, TokenId.Comma, true)
        if self.err {
            self.p.errors = append(self.p.errors, errors...)
        }
        ret parts
    }

    unsafe fn buildIdent(mut self): &TypeDecl {
        let mut next = *self.i+1 < len(self.tokens)
        if next && self.tokens[*self.i+1].Id == TokenId.DblColon {
            ret self.buildNamespace()
        }
        let mut token = self.tokens[*self.i]
        let mut it = &IdentTypeDecl{
            Token: token,
            Ident: token.Kind,
            Binded: false,
        }
        *self.i++
        let mut itd = &TypeDecl{
            Token: token,
            Kind: it,
        }
        if !next || self.tokens[*self.i].Id != TokenId.Dot {
            it.Generics = self.buildGenerics()
            ret itd
        }
        if len(self.tokens)-*self.i == 1 {
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret itd
        }
        *self.i++
        if self.tokens[*self.i].Id != TokenId.Ident {
            self.pushErr(self.tokens[*self.i-1], LogMsg.InvalidSyntax)
            ret itd
        }
        let mut sit = new(SubIdentTypeDecl)
        sit.Idents = append(sit.Idents, it)
        let mut ident = self.buildIdent()
        match type ident.Kind {
        | &IdentTypeDecl:
            sit.Idents = append(sit.Idents, (&IdentTypeDecl)(ident.Kind))
        | &SubIdentTypeDecl:
            sit.Idents = append(sit.Idents, (&SubIdentTypeDecl)(ident.Kind).Idents...)
        }
        ret &TypeDecl{
            Token: token,
            Kind: sit,
        }
    }

    unsafe fn buildCppLink(mut self): &TypeDecl {
        if *self.i+1 >= len(self.tokens) || self.tokens[*self.i+1].Id != TokenId.Dot {
            self.pushErr(self.tokens[*self.i], LogMsg.InvalidSyntax)
            ret nil
        }
        *self.i += 2 // Skip the bind keyword and dot token.
        let mut t = self.buildIdent()
        (&IdentTypeDecl)(t.Kind).Binded = true
        ret t
    }

    unsafe fn buildFn(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        let mut f = self.p.buildFnPrototype(self.tokens, *self.i, false)
        if f == nil {
            ret nil
        }
        if !f.IsAnon() {
            self.pushErr(f.Token, LogMsg.InvalidSyntax)
        }
        ret &TypeDecl{
            Token: token,
            Kind: f,
        }
    }

    unsafe fn buildPtr(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        if *self.i+1 >= len(self.tokens) {
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }

        *self.i++
        if self.tokens[*self.i].Id == TokenId.Unsafe {
            *self.i++
            ret &TypeDecl{
                Token: token,
                Kind: &PtrTypeDecl{
                    Elem: nil,// Set Elem as nil for unsafe pointer (*unsafe) type. 
                },
            }
        }

        let mut elem = self.step()
        if elem == nil {
            ret nil
        }

        ret &TypeDecl{
            Token: token,
            Kind: &PtrTypeDecl{
                Elem: elem,
            },
        }
    }

    unsafe fn buildSptr(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        if *self.i+1 >= len(self.tokens) {
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }

        *self.i++
        let mut elem = self.step()
        if elem == nil {
            ret nil
        }

        ret &TypeDecl{
            Token: token,
            Kind: &SptrTypeDecl{
                Elem: elem,
            },
        }
    }

    unsafe fn buildOp(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        match token.Kind {
        | TokenKind.Star:
            ret self.buildPtr()
        | TokenKind.Amper:
            ret self.buildSptr()
        | TokenKind.DblAmper:
            ret &TypeDecl{
                Kind: &SptrTypeDecl{
                    Elem: self.buildSptr(),
                },
            }
        |:
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }
    }

    unsafe fn buildSlc(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        *self.i++ // skip right bracket
        let mut elem = self.step()
        if elem == nil {
            ret nil
        }
        ret &TypeDecl{
            Token: token,
            Kind: &SlcTypeDecl{
                Elem: elem,
            },
        }
    }

    unsafe fn buildArr(mut self): &TypeDecl {
        let mut exprTokens = range(*self.i, TokenKind.LBracket, TokenKind.RBracket, self.tokens)
        if *self.i >= len(self.tokens) {
            self.pushErr(self.tokens[*self.i-1], LogMsg.MissingType)
            ret nil
        }

        let mut elem = self.step()
        if elem == nil {
            ret nil
        }

        let mut arrt = &ArrTypeDecl{
            Elem: elem,
        }

        let mut token = exprTokens[0]
        if len(exprTokens) == 1 && token.Id == TokenId.Op && token.Kind == TokenKind.TripleDot {
            // Ignore.
        } else {
            arrt.Size = self.p.buildExpr(exprTokens)
        }

        ret &TypeDecl{
            Token: token,
            Kind: arrt,
        }
    }

    unsafe fn buildMap(mut self): &TypeDecl {
        let mut mapToken = self.tokens[*self.i]
        *self.i++ // Skip map token.
        if *self.i >= len(self.tokens) {
            self.pushErr(mapToken, LogMsg.MissingType)
            ret nil
        }

        // Get key type tokens without brackets.
        let mut keyTokens = range(*self.i, TokenKind.LBracket, TokenKind.RBracket, self.tokens)
        if *self.i >= len(self.tokens) {
            self.pushErr(self.tokens[*self.i-1], LogMsg.MissingType)
            ret nil
        } else if len(keyTokens) == 0 {
            self.pushErr(mapToken, LogMsg.MissingType)
            ret nil
        }

        let mut mapt = new(MapTypeDecl)
        let mut j = 0
        let (mut keyt, mut ok) = self.p.buildType(keyTokens, &j, self.err)
        if !ok {
            ret nil
        } else if j < len(keyTokens) {
            self.pushErr(keyTokens[j], LogMsg.InvalidSyntax)
        }
        mapt.Key = keyt

        let (mut valt, ok) = self.p.buildType(self.tokens, self.i, self.err)
        if !ok {
            ret nil
        }
        mapt.Val = valt
        ret &TypeDecl{
            Token: mapToken,
            Kind: mapt,
        }
    }

    unsafe fn buildEnumerable(mut self): &TypeDecl {
        let mut token = self.tokens[*self.i]
        if *self.i+2 >= len(self.tokens) ||
            token.Id != TokenId.Range ||
            token.Kind != TokenKind.LBracket {
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }
        *self.i++
        token = self.tokens[*self.i]
        if token.Id == TokenId.Range && token.Kind == TokenKind.RBracket {
            ret self.buildSlc()
        }
        *self.i-- // Point to left bracket.
        ret self.buildArr()
    }

    unsafe fn step(mut self): &TypeDecl {
        let token = self.tokens[*self.i]
        match token.Id {
        | TokenId.Prim:
            ret self.buildPrim()
        | TokenId.Ident:
            ret self.buildIdent()
        | TokenId.Cpp:
            ret self.buildCppLink()
        | TokenId.Fn:
            ret self.buildFn()
        | TokenId.Op:
            ret self.buildOp()
        | TokenId.Range:
            ret self.buildEnumerable()
        | TokenId.Map:
            ret self.buildMap()
        |:
            *self.i++
            self.pushErr(token, LogMsg.InvalidSyntax)
            ret nil
        }
    }

    // Builds type.
    // Returns void if error occurs.
    unsafe fn build(mut self): (&TypeDecl, ok: bool) {
        let mut root = self.step()
        if root == nil {
            ret buildVoidType(), false
        }
        ret root, true
    }
}