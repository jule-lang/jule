// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/jule/ast"
use "std/jule/build"
use "std/jule/lex"

fn buildVoidType(): &ast::TypeDecl {
	ret new(ast::TypeDecl)
}

fn buildPrimType(mut t: &lex::Token): &ast::TypeDecl {
	ret &ast::TypeDecl{
		Token: t,
		Kind: &ast::IdentTypeDecl{
			Token: t,
			Ident: t.Kind,
		},
	}
}

struct typeBuilder {
	p:      &parser
	tokens: []&lex::Token
	i:      *int
	err:    bool
}

impl typeBuilder {
	fn pushErr(mut self, token: &lex::Token, fmt: build::LogMsg) {
		if self.err {
			self.p.pushErr(token, fmt)
		}
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: build::LogMsg, args: ...any) {
		if self.err {
			self.p.pushSuggestion(fmt, args...)
		}
	}

	unsafe fn buildNamespace(mut self): &ast::TypeDecl {
		mut t := &ast::TypeDecl{
			Token: self.tokens[*self.i],
		}
		mut ns := new(ast::NamespaceTypeDecl)
		ns.Namespace = self.tokens[*self.i]
		if ns.Namespace.Id != lex::TokenId.Ident && ns.Namespace.Id != lex::TokenId.Unsafe {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
		}
		*self.i++
		if len(self.tokens) <= *self.i {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		if self.tokens[*self.i].Id != lex::TokenId.DblColon {
			self.pushErr(self.tokens[*self.i], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		*self.i++
		if len(self.tokens) <= *self.i {
			self.pushErr(self.tokens[*self.i-1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		ns.Kind = self.buildIdent()
		t.Kind = ns
		ret t
	}

	unsafe fn buildGenerics(mut self): []&ast::TypeDecl {
		if *self.i >= len(self.tokens) {
			ret nil
		}
		token := self.tokens[*self.i]
		if token.Id != lex::TokenId.LBracket {
			ret nil
		}

		mut parts := self.identGenerics()
		if len(parts) == 0 {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}

		mut types := make([]&ast::TypeDecl, 0, len(parts))
		for (_, mut part) in parts {
			mut j := 0
			mut t, _ := unsafe { self.p.buildType(part, &j, true) }
			if j < len(part) {
				self.pushErr(part[j], build::LogMsg.InvalidSyntax)
			}
			types = append(types, t)
		}
		ret types
	}

	unsafe fn identGenerics(mut self): [][]&lex::Token {
		first := *self.i
		mut rangeN := 0
		for *self.i < len(self.tokens); *self.i++ {
			token := self.tokens[*self.i]
			match token.Id {
			| lex::TokenId.LBracket:
				rangeN++
			| lex::TokenId.RBracket:
				rangeN--
			}
			if rangeN == 0 {
				*self.i++ // Skip right bracket
				break
			}
		}
		mut tokens := self.tokens[first+1 : *self.i-1] // Take range of brackets.
		mut parts, errors := parts(tokens, lex::TokenId.Comma, true)
		if self.err {
			self.p.errors = append(self.p.errors, errors...)
		}
		ret parts
	}

	unsafe fn buildIdent(mut self): &ast::TypeDecl {
		mut next := *self.i+1 < len(self.tokens)
		if next && self.tokens[*self.i+1].Id == lex::TokenId.DblColon {
			ret self.buildNamespace()
		}
		mut token := self.tokens[*self.i]
		mut it := &ast::IdentTypeDecl{
			Token: token,
			Ident: token.Kind,
			Binded: false,
		}
		*self.i++
		mut itd := &ast::TypeDecl{
			Token: token,
			Kind: it,
		}
		if !next || self.tokens[*self.i].Id != lex::TokenId.Dot {
			it.Generics = self.buildGenerics()
			ret itd
		}
		if len(self.tokens)-*self.i == 1 {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret itd
		}
		*self.i++
		if self.tokens[*self.i].Id != lex::TokenId.Ident {
			self.pushErr(self.tokens[*self.i-1], build::LogMsg.InvalidSyntax)
			ret itd
		}
		mut sit := new(ast::SubIdentTypeDecl)
		sit.Idents = append(sit.Idents, it)
		mut ident := self.buildIdent()
		match type ident.Kind {
		| &ast::IdentTypeDecl:
			sit.Idents = append(sit.Idents, (&ast::IdentTypeDecl)(ident.Kind))
		| &ast::SubIdentTypeDecl:
			sit.Idents = append(sit.Idents, (&ast::SubIdentTypeDecl)(ident.Kind).Idents...)
		}
		ret &ast::TypeDecl{
			Token: token,
			Kind: sit,
		}
	}

	unsafe fn buildCppLink(mut self): &ast::TypeDecl {
		if *self.i+1 >= len(self.tokens) || self.tokens[*self.i+1].Id != lex::TokenId.Dot {
			self.pushErr(self.tokens[*self.i], build::LogMsg.InvalidSyntax)
			ret nil
		}
		*self.i += 2 // Skip the bind keyword and dot token.
		mut t := self.buildIdent()
		(&ast::IdentTypeDecl)(t.Kind).Binded = true
		ret t
	}

	unsafe fn buildFn(mut self): &ast::TypeDecl {
		mut token := self.tokens[*self.i]
		mut f := self.p.buildFnPrototype(self.tokens, *self.i, false)
		if f == nil {
			ret nil
		}
		if !f.IsAnon() {
			self.pushErr(f.Token, build::LogMsg.InvalidSyntax)
		}
		ret &ast::TypeDecl{
			Token: token,
			Kind: f,
		}
	}

	unsafe fn buildPtr(mut self): &ast::TypeDecl {
		mut token := self.tokens[*self.i]
		if *self.i+1 >= len(self.tokens) {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}

		*self.i++
		if self.tokens[*self.i].Id == lex::TokenId.Unsafe {
			*self.i++
			ret &ast::TypeDecl{
				Token: token,
				Kind: &ast::PtrTypeDecl{
					Elem: nil, // Set Elem as nil for unsafe pointer (*unsafe) type. 
				},
			}
		}

		mut elem := self.step()
		if elem == nil {
			ret nil
		}

		ret &ast::TypeDecl{
			Token: token,
			Kind: &ast::PtrTypeDecl{
				Elem: elem,
			},
		}
	}

	unsafe fn buildSptr(mut self): &ast::TypeDecl {
		mut token := self.tokens[*self.i]
		if *self.i+1 >= len(self.tokens) {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}

		*self.i++
		mut elem := self.step()
		if elem == nil {
			ret nil
		}

		ret &ast::TypeDecl{
			Token: token,
			Kind: &ast::SptrTypeDecl{
				Elem: elem,
			},
		}
	}

	unsafe fn buildSlc(mut self): &ast::TypeDecl {
		mut token := self.tokens[*self.i]
		*self.i++ // skip right bracket
		mut elem := self.step()
		if elem == nil {
			ret nil
		}
		ret &ast::TypeDecl{
			Token: token,
			Kind: &ast::SlcTypeDecl{
				Elem: elem,
			},
		}
	}

	unsafe fn buildArr(mut self): &ast::TypeDecl {
		mut exprTokens := range(*self.i, lex::TokenId.LBracket, lex::TokenId.RBracket, self.tokens)
		if *self.i >= len(self.tokens) {
			self.pushErr(self.tokens[*self.i-1], build::LogMsg.MissingType)
			ret nil
		}

		mut elem := self.step()
		if elem == nil {
			ret nil
		}

		mut arrt := &ast::ArrTypeDecl{
			Elem: elem,
		}

		mut token := exprTokens[0]
		if len(exprTokens) == 1 && token.Id == lex::TokenId.TripleDot {
			// Ignore.
		} else {
			arrt.Size = self.p.buildExpr(exprTokens)
		}

		ret &ast::TypeDecl{
			Token: token,
			Kind: arrt,
		}
	}

	unsafe fn buildMap(mut self): &ast::TypeDecl {
		mut mapToken := self.tokens[*self.i]
		*self.i++ // Skip map token.
		if *self.i >= len(self.tokens) {
			self.pushErr(mapToken, build::LogMsg.MissingType)
			ret nil
		}

		// Get key type tokens without brackets.
		mut keyTokens := range(*self.i, lex::TokenId.LBracket, lex::TokenId.RBracket, self.tokens)
		if *self.i >= len(self.tokens) {
			self.pushErr(self.tokens[*self.i-1], build::LogMsg.MissingType)
			ret nil
		} else if len(keyTokens) == 0 {
			self.pushErr(mapToken, build::LogMsg.MissingType)
			ret nil
		}

		mut mapt := new(ast::MapTypeDecl)
		mut j := 0
		mut keyt, mut ok := self.p.buildType(keyTokens, &j, self.err)
		if !ok {
			ret nil
		} else if j < len(keyTokens) {
			self.pushErr(keyTokens[j], build::LogMsg.InvalidSyntax)
		}
		mapt.Key = keyt

		mut valt, ok := self.p.buildType(self.tokens, self.i, self.err)
		if !ok {
			ret nil
		}
		mapt.Val = valt
		ret &ast::TypeDecl{
			Token: mapToken,
			Kind: mapt,
		}
	}

	unsafe fn buildEnumerable(mut self): &ast::TypeDecl {
		mut token := self.tokens[*self.i]
		if *self.i+2 >= len(self.tokens) {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}
		*self.i++
		token = self.tokens[*self.i]
		if token.Id == lex::TokenId.RBracket {
			ret self.buildSlc()
		}
		*self.i-- // Point to left bracket.
		ret self.buildArr()
	}

	unsafe fn step(mut self): &ast::TypeDecl {
		token := self.tokens[*self.i]
		match token.Id {
		| lex::TokenId.Ident:
			ret self.buildIdent()
		| lex::TokenId.Cpp:
			ret self.buildCppLink()
		| lex::TokenId.Unsafe:
			if len(self.tokens)-*self.i > 1 && self.tokens[*self.i+1].Id == lex::TokenId.Fn {
				// unsafe function
				*self.i++ // point to function keyword
				mut f := self.buildFn()
				if f != nil {
					(&ast::FnDecl)(f.Kind).Unsafety = true
				}
				ret f
			}
		| lex::TokenId.Fn:
			ret self.buildFn()
		| lex::TokenId.Star:
			ret self.buildPtr()
		| lex::TokenId.Amper:
			ret self.buildSptr()
		| lex::TokenId.DblAmper:
			ret &ast::TypeDecl{
				Kind: &ast::SptrTypeDecl{
					Elem: self.buildSptr(),
				},
			}
		| lex::TokenId.LBracket:
			ret self.buildEnumerable()
		| lex::TokenId.Map:
			ret self.buildMap()
		}
		*self.i++
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	// Builds type.
	// Returns void if error occurs.
	unsafe fn build(mut self): (&ast::TypeDecl, ok: bool) {
		mut root := self.step()
		if root == nil {
			ret buildVoidType(), false
		}
		ret root, true
	}
}