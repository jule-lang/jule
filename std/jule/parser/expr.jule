// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use ast for std::jule::ast
use build for std::jule::build
use lex for std::jule::lex

struct exprBuilder {
	p: &parser
}

impl exprBuilder {
	fn pushErr(mut self, token: &lex::Token, fmt: build::LogMsg, args: ...any) {
		self.p.pushErr(token, fmt, args...)
	}

	// Push suggestion to last log.
	fn pushSuggestion(mut self, fmt: build::LogMsg, args: ...any) {
		self.p.pushSuggestion(fmt, args...)
	}

	fn buildTuple(mut self, mut &parts: [][]&lex::Token): &ast::TupleExpr {
		mut tuple := &ast::TupleExpr{
			Expr: make([]&ast::Expr, 0, len(parts)),
		}
		for (_, mut part) in parts {
			tuple.Expr = append(tuple.Expr, self.buildFromTokens(part))
		}
		ret tuple
	}

	fn buildLit(self, mut token: &lex::Token): &ast::LitExpr {
		ret &ast::LitExpr{
			Token: token,
			Value: token.Kind,
		}
	}

	fn buildPrimitiveType(self, mut &token: &lex::Token): &ast::TypeDecl {
		ret buildPrimType(token)
	}

	fn buildSingle(mut self, mut token: &lex::Token): ast::ExprData {
		match token.Id {
		| lex::TokenId.Lit:
			ret self.buildLit(token)
		| lex::TokenId.TripleDot:
			ret &ast::VariadicExpr{
				Token: token,
			}
		| lex::TokenId.Ident
		| lex::TokenId.Self
		| lex::TokenId.Error:
			ret buildIdentExpr(token)
		}
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildBindIdent(mut self, mut &tokens: []&lex::Token): &ast::IdentExpr {
		if tokens[0].Id != lex::TokenId.Cpp {
			ret nil
		} else if tokens[1].Id != lex::TokenId.Dot {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDotForBind)
			ret nil
		}
		mut token := tokens[2]
		if token.Id != lex::TokenId.Ident {
			self.pushErr(tokens[2], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		mut expr := buildIdentExpr(token)
		expr.Binded = true
		ret expr
	}

	fn buildUnary(mut self, mut tokens: []&lex::Token): &ast::UnaryExpr {
		mut op := tokens[0]
		if len(tokens) == 1 {
			self.pushErr(op, build::LogMsg.MissingExprForUnary)
			ret nil
		} else if !lex::IsUnaryOp(op.Id) {
			self.pushErr(op, build::LogMsg.InvalidOpForUnary, op.Kind)
			ret nil
		}

		// Length is 1 cause all length of operator tokens is 1.
		// Change "1" with length of token's value
		// if all operators length is not 1.
		tokens = tokens[1:]

		ret &ast::UnaryExpr{
			Op: op,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildObjSubIdent(mut self, mut tokens: []&lex::Token): &ast::SubIdentExpr {
		mut i := len(tokens) - 1
		mut identToken := tokens[i]
		i-- // Set offset to delimiter token.
		tokens = tokens[:i] // Remove dot token and selected identifier token.
		if len(tokens) == 0 {
			self.pushErr(identToken, build::LogMsg.InvalidSyntax)
			ret nil
		}
		ret &ast::SubIdentExpr{
			Ident: identToken,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildNamespace(mut self, mut &tokens: []&lex::Token): &ast::NamespaceExpr {
		mut ns := new(ast::NamespaceExpr)
		if len(tokens) > 3 {
			self.pushErr(tokens[3], build::LogMsg.InvalidSyntax)
		}
		ns.Namespace = tokens[0]
		if ns.Namespace.Id != lex::TokenId.Ident && ns.Namespace.Id != lex::TokenId.Unsafe {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
		}
		if len(tokens) < 2 {
			self.pushErr(ns.Namespace, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		if tokens[1].Id != lex::TokenId.DblColon {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedDblColon)
			ret nil
		}
		if len(tokens) < 3 {
			self.pushErr(tokens[1], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		ns.Ident = tokens[2]
		if ns.Ident.Id != lex::TokenId.Ident {
			self.pushErr(ns.Ident, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedIdentifier)
			ret nil
		}
		ret ns
	}

	fn buildType(mut self, mut &tokens: []&lex::Token): &ast::TypeDecl {
		mut i := 0
		mut t, ok := unsafe { self.p.buildType(tokens, &i, false) }
		if !ok {
			self.pushErr(tokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}

		if i < len(tokens) {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
		}
		ret t
	}

	fn buildSubIdent(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		i := len(tokens) - 2 // Set offset to delimiter token.
		token := tokens[i]
		match token.Id {
		| lex::TokenId.Dot:
			ret self.buildObjSubIdent(tokens)
		| lex::TokenId.DblColon:
			ret self.buildNamespace(tokens)
		| lex::TokenId.RBracket:
			// Catch slice, array, and map types.
			ret self.buildType(tokens)
		}

		// Caught anonymous functions.
		if isAnonFnHead(tokens) {
			ret self.buildType(tokens)
		}

		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildVariadic(mut self, mut tokens: []&lex::Token): &ast::VariadicExpr {
		mut token := tokens[len(tokens)-1] // Variadic operator token.
		tokens = tokens[:len(tokens)-1] // Remove variadic operator token.
		ret &ast::VariadicExpr{
			Token: token,
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn buildBetweenParentheses(mut self, mut tokens: []&lex::Token): &ast::RangeExpr {
		if len(tokens) == 2 {
			self.pushErr(tokens[0], build::LogMsg.MissingExpr)
			self.pushSuggestion(build::LogMsg.EmptyParentNotValid)
			ret nil
		}
		tokens = tokens[1:len(tokens)-1] // Remove parentheses.
		ret &ast::RangeExpr{
			Expr: self.buildFromTokens(tokens),
		}
	}

	fn tryBuildCast(mut self, mut &tokens: []&lex::Token): &ast::CastExpr {
		mut rangeN := 0
		for i, token in tokens {
			match token.Id {
			| lex::TokenId.LBrace
			| lex::TokenId.LBracket
			| lex::TokenId.LParent:
				rangeN++
				continue
			| lex::TokenId.RBrace
			| lex::TokenId.RBracket
			| lex::TokenId.RParent:
				rangeN--
			}

			if rangeN > 0 {
				continue
			} else if i+1 == len(tokens) {
				ret nil
			}

			mut typeTokens := tokens[:i+1]
			mut exprTokens := tokens[i+1:]

			if len(exprTokens) == 0 {
				// Expression is parentheses group.
				ret nil
			}

			tok := exprTokens[0]
			if tok.Id != lex::TokenId.LParent {
				ret nil
			}

			mut cast := &ast::CastExpr{}

			// Expression tokens just parentheses.
			if len(exprTokens) == 2 {
				self.pushErr(exprTokens[0], build::LogMsg.MissingExpr)
				self.pushSuggestion(build::LogMsg.GiveExprToCast)
			}

			// Type tokens just parentheses.
			if len(typeTokens) == 2 {
				self.pushErr(typeTokens[0], build::LogMsg.MissingType)
				self.pushSuggestion(build::LogMsg.GiveTypeForCast)
			} else {
				typeTokens = typeTokens[1:len(typeTokens)-1] // Remove parentheses.
				mut typeIndex := 0
				mut t, ok := unsafe { self.p.buildType(typeTokens, &typeIndex, true) }
				if ok && typeIndex < len(typeTokens) {
					self.pushErr(typeTokens[typeIndex], build::LogMsg.InvalidSyntax)
				} else if !ok {
					ret cast
				}
				cast.Kind = t

				if len(exprTokens) > 2 {
					// Remove parentheses.
					mut j := 0
					_ = range(j, lex::TokenId.LParent, lex::TokenId.RParent, exprTokens)
					if j < len(exprTokens) {
						ret nil
					}
					exprTokens = exprTokens[:j]
					cast.Expr = self.buildFromTokens(exprTokens)
				}
			}
			ret cast
		}

		ret nil
	}

	fn pushArg(mut self, mut &args: []&ast::Expr, mut tokens: []&lex::Token, errToken: &lex::Token) {
		if len(tokens) == 0 {
			self.pushErr(errToken, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedExpr)
			ret
		}
		args = append(args, self.buildFromTokens(tokens))
	}

	fn buildArgs(mut self, mut tokens: []&lex::Token): []&ast::Expr {
		// No argument.
		if len(tokens) < 2 {
			ret nil
		}

		let mut args: []&ast::Expr = nil
		mut last := 0
		mut rangeN := 0
		tokens = tokens[1:len(tokens)-1] // Remove parentheses.
		for i, token in tokens {
			match token.Id {
			| lex::TokenId.LBrace
			| lex::TokenId.LBracket
			| lex::TokenId.LParent:
				rangeN++
			| lex::TokenId.RBrace
			| lex::TokenId.RBracket
			| lex::TokenId.RParent:
				rangeN--
			}
			if rangeN > 0 || token.Id != lex::TokenId.Comma {
				continue
			}
			self.pushArg(args, tokens[last:i], token)
			last = i + 1
		}

		if last < len(tokens) {
			if last == 0 {
				if len(tokens) > 0 {
					self.pushArg(args, tokens[last:], tokens[last])
				}
			} else {
				self.pushArg(args, tokens[last:], tokens[last-1])
			}
		}

		ret args
	}

	// Tokens should include brackets.
	fn buildCallGenerics(mut self, mut tokens: []&lex::Token): []&ast::TypeDecl {
		if len(tokens) == 0 {
			ret nil
		}

		tokens = tokens[1:len(tokens)-1] // Remove brackets.
		mut parts, errs := parts(tokens, lex::TokenId.Comma, true)
		mut generics := make([]&ast::TypeDecl, 0, len(parts))
		self.p.errors = append(self.p.errors, errs...)
		for (_, mut part) in parts {
			if len(part) == 0 {
				continue
			}
			mut j := 0
			mut generic, _ := unsafe { self.p.buildType(part, &j, true) }
			if j < len(part) {
				self.pushErr(part[j], build::LogMsg.InvalidSyntax)
			}
			generics = append(generics, generic)
		}

		ret generics
	}

	fn buildFnCall(mut self, mut &token: &lex::Token, mut &expr: []&lex::Token, mut &args: []&lex::Token): &ast::FnCallExpr {
		ret &ast::FnCallExpr{
			Token: token,
			Expr: self.buildFromTokens(expr),
			Args: self.buildArgs(args),
		}
	}

	fn buildParenthesesRange(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		mut token := tokens[0]
		if token.Id == lex::TokenId.LParent {
			mut expr := self.tryBuildCast(tokens)
			if expr != nil {
				ret expr
			}
		}
		mut exprTokens, mut argsTokens := rangeLast(tokens)
		// Expression is parentheses group if data.exprTokens is zero.
		// data.args_tokens holds tokens of parentheses range (include parentheses).
		if len(exprTokens) == 0 {
			ret self.buildBetweenParentheses(argsTokens)
		}

		// Caught anonymous function types.
		if isAnonFnHead(exprTokens) {
			ret self.buildType(tokens)
		}
		ret self.buildFnCall(token, exprTokens, argsTokens)
	}

	fn buildUnsafeExpr(mut self, mut tokens: []&lex::Token): &ast::UnsafeExpr {
		mut token := tokens[0]
		tokens = tokens[1:] // Remove unsafe keyword.
		mut i := 0
		mut rangeTokens := range(i, lex::TokenId.LBrace, lex::TokenId.RBrace, tokens)
		if len(rangeTokens) == 0 {
			self.pushErr(tokens[0], build::LogMsg.MissingExpr)
			ret nil
		}
		ret &ast::UnsafeExpr{
			Token: token,
			Expr: self.buildFromTokens(rangeTokens),
		}
	}

	fn buildAnonFn(mut self, mut &tokens: []&lex::Token): &ast::FnDecl {
		mut f := self.p.buildFn(tokens, false, false)
		if !f.IsAnon() {
			self.pushErr(f.Token, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedAnonFn)
		}
		ret f
	}

	fn buildUnsafe(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		match tokens[1].Id {
		| lex::TokenId.Fn:
			// Unsafe anonymous function.
			ret self.buildAnonFn(tokens)
		|:
			ret self.buildUnsafeExpr(tokens)
		}
	}

	fn pushRangeLitPart(mut self, mut part: []&lex::Token,
		errorToken: &lex::Token, mut &parts: [][]&lex::Token) {
		if len(part) == 0 {
			self.pushErr(errorToken, build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedExpr)
			ret
		}
		parts = append(parts, part)
	}

	// Tokens should include brace tokens.
	fn getBraceRangeLitExprParts(mut self, mut tokens: []&lex::Token): [][]&lex::Token {
		// No part.
		if len(tokens) < 2 {
			ret nil
		}

		let mut parts: [][]&lex::Token = nil

		mut last := 0
		mut rangeN := 0
		tokens = tokens[1:len(tokens)-1] // Remove parentheses.
		for i, token in tokens {
			match token.Id {
			| lex::TokenId.LBrace
			| lex::TokenId.LBracket
			| lex::TokenId.LParent:
				rangeN++
			| lex::TokenId.RBrace
			| lex::TokenId.RBracket
			| lex::TokenId.RParent:
				rangeN--
			}
			if rangeN > 0 || token.Id != lex::TokenId.Comma {
				continue
			}
			self.pushRangeLitPart(tokens[last:i], token, parts)
			last = i + 1
		}

		if last < len(tokens) {
			if last == 0 {
				if len(tokens) > 0 {
					self.pushRangeLitPart(tokens[last:], tokens[last], parts)
				}
			} else {
				self.pushRangeLitPart(tokens[last:], tokens[last-1], parts)
			}
		}

		ret parts
	}

	fn buildFieldExprPair(mut self, mut tokens: []&lex::Token): &ast::FieldExprPair {
		if len(tokens)-2 == 0 {
			self.pushErr(tokens[1], build::LogMsg.MissingExpr)
			ret nil
		}
		mut pair := &ast::FieldExprPair{
			Field: tokens[0],
		}
		tokens = tokens[2:] // Remove field identifier and colon tokens.
		pair.Expr = self.buildFromTokens(tokens)
		ret pair
	}

	fn buildStructLitExpr(mut self, mut &tokens: []&lex::Token): &ast::Expr {
		mut token := tokens[0]
		if token.Id == lex::TokenId.Ident && len(tokens) > 1 {
			token = tokens[1]
			if token.Id == lex::TokenId.Colon {
				ret &ast::Expr{
					Token: token,
					End: tokens[len(tokens)-1],
					Kind: self.buildFieldExprPair(tokens),
				}
			}
		}
		ret self.buildFromTokens(tokens)
	}

	fn buildStructLitExprs(mut self, mut &tokens: []&lex::Token): []&ast::Expr {
		mut parts := self.getBraceRangeLitExprParts(tokens)
		if len(parts) == 0 {
			ret nil
		}

		mut pairs := make([]&ast::Expr, 0, len(parts))
		for (_, mut part) in parts {
			pairs = append(pairs, self.buildStructLitExpr(part))
		}
		ret pairs
	}

	fn buildTypedStructLiteral(mut self, mut tokens: []&lex::Token): &ast::StructLit {
		mut i := 0
		mut t, ok := unsafe { self.p.buildType(tokens, &i, true) }
		if !ok {
			ret nil
		} else if i >= len(tokens) {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			ret nil
		}

		tokens = tokens[i:] // Remove type tokens.
		token := tokens[0]
		if token.Id != lex::TokenId.LBrace {
			self.pushErr(token, build::LogMsg.InvalidSyntax)
			ret nil
		}

		ret &ast::StructLit{
			End: tokens[len(tokens)-1],
			Kind: t,
			Exprs: self.buildStructLitExprs(tokens),
		}
	}

	fn buildBraceLitPart(mut self, mut &tokens: []&lex::Token): &ast::Expr {
		mut l, mut r := splitDelim(tokens, lex::TokenId.Colon)
		// If left is not nil, colon token found.
		if l != nil {
			ret &ast::Expr{
				Token: tokens[0],
				End: tokens[len(tokens)-1],
				Kind: &ast::KeyValPair{
					Colon: tokens[len(l)],
					Key: self.buildFromTokens(l),
					Val: self.buildFromTokens(r),
				},
			}
		}
		ret self.buildFromTokens(tokens)
	}

	fn buildBraceLit(mut self, mut &tokens: []&lex::Token): &ast::BraceLit {
		mut lit := &ast::BraceLit{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
		}

		mut parts := self.getBraceRangeLitExprParts(tokens)
		if parts == nil {
			ret lit
		}

		lit.Exprs = make([]&ast::Expr, 0, len(parts))
		for (_, mut part) in parts {
			lit.Exprs = append(lit.Exprs, self.buildBraceLitPart(part))
		}

		ret lit
	}

	fn buildBraceRange(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		mut exprTokens, rangeN := getRangeExprTokens(tokens)

		match {
		| len(exprTokens) == 0:
			ret self.buildBraceLit(tokens)
		| rangeN > 0:
			self.pushErr(tokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}

		// Exceptional handling.
		elseToken := exprTokens[len(exprTokens)-1]
		if exprTokens[len(exprTokens)-1].Id == lex::TokenId.Else {
			exprTokens = exprTokens[:len(exprTokens)-1] // Ignore keyword "else"
			mut d := self.build(exprTokens)
			if d == nil {
				ret nil
			}
			match type d {
			| &ast::FnCallExpr:
				tokens = tokens[len(exprTokens)+1:] // Get range: {...}
				mut i := 0
				mut rangeTokens := range(i, lex::TokenId.LBrace, lex::TokenId.RBrace, tokens)
				mut model := (&ast::FnCallExpr)(d)
				if model.Ignored() {
					self.pushErr(elseToken, build::LogMsg.InvalidSyntax)
					self.pushSuggestion(build::LogMsg.JustIgnoreOrHandle)
				}
				model.Exception = self.p.buildScope(rangeTokens, tokens[i-1])
				ret d
			|:
				self.pushErr(exprTokens[0], build::LogMsg.InvalidSyntax)
				ret nil
			}
		}

		match exprTokens[0].Id {
		| lex::TokenId.Unsafe:
			ret self.buildUnsafe(tokens)
		| lex::TokenId.Fn:
			ret self.buildAnonFn(tokens)
		| lex::TokenId.Ident
		| lex::TokenId.Cpp:
			ret self.buildTypedStructLiteral(tokens)
		|:
			self.pushErr(exprTokens[0], build::LogMsg.InvalidSyntax)
			ret nil
		}
	}

	// Tokens is should be store enumerable range tokens.
	fn getEnumerableParts(mut self, mut tokens: []&lex::Token): [][]&lex::Token {
		tokens = tokens[1:len(tokens)-1] // Remove range tokens.
		mut parts, errors := parts(tokens, lex::TokenId.Comma, true)
		self.p.errors = append(self.p.errors, errors...)
		ret parts
	}

	fn buildSlice(mut self, mut tokens: []&lex::Token): &ast::SliceExpr {
		mut slc := &ast::SliceExpr{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
		}

		mut parts := self.getEnumerableParts(tokens)
		if len(parts) == 0 {
			ret slc
		}

		slc.Exprs = make([]&ast::Expr, 0, len(parts))
		for (_, mut p) in parts {
			if len(p) == 0 {
				continue
			}
			slc.Exprs = append(slc.Exprs, self.buildFromTokens(p))
		}

		ret slc
	}

	fn buildIndexing(mut self, mut exprTokens: []&lex::Token,
		mut tokens: []&lex::Token, mut errorToken: &lex::Token): &ast::IndexingExpr {
		mut end := tokens[len(tokens)-1]
		tokens = tokens[1:len(tokens)-1] // Remove brackets.
		if len(tokens) == 0 {
			self.pushErr(errorToken, build::LogMsg.MissingExpr)
			ret nil
		}
		mut expr := self.buildFromTokens(exprTokens)
		if expr == nil {
			ret nil
		}
		mut index := self.buildFromTokens(tokens)
		if index == nil {
			ret nil
		}
		ret &ast::IndexingExpr{
			Token: errorToken,
			End: end,
			Expr: expr,
			Index: index,
		}
	}

	fn buildSlicing(mut self, mut &exprTokens: []&lex::Token, mut &start: []&lex::Token,
		mut &to: []&lex::Token, mut &errorToken: &lex::Token, mut end: &lex::Token): &ast::SlicingExpr {
		mut slc := &ast::SlicingExpr{
			Token: errorToken,
			End: end,
			Expr: self.buildFromTokens(exprTokens),
		}
		if len(start) > 0 {
			slc.Start = self.buildFromTokens(start)
		}
		if len(to) > 0 {
			slc.To = self.buildFromTokens(to)
		}
		ret slc
	}

	fn buildBracketRange(mut self, mut tokens: []&lex::Token): ast::ExprData {
		mut errorToken := tokens[0]
		mut exprTokens, rangeN := getRangeExprTokens(tokens)

		if len(exprTokens) == 0 {
			ret self.buildSlice(tokens)
		} else if rangeN > 0 {
			self.pushErr(errorToken, build::LogMsg.InvalidSyntax)
			ret nil
		}

		// Remove expression tokens.
		// Holds only indexing tokens.
		// Includes brackets.
		tokens = tokens[len(exprTokens):]

		// Catch slicing expressions.
		mut splitTokens := tokens[1:len(tokens)-1] // Remove brackets.
		mut start, mut to := splitDelim(splitTokens, lex::TokenId.Colon)
		if start != nil || to != nil {
			ret self.buildSlicing(exprTokens, start, to, errorToken, tokens[len(tokens)-1])
		}
		ret self.buildIndexing(exprTokens, tokens, errorToken)
	}

	fn buildExclRight(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		token := tokens[len(tokens)-1]
		tokens = tokens[:len(tokens)-1] // Ignore "!" token.
		mut d := self.build(tokens)
		if d == nil {
			ret nil
		}
		match type d {
		| &ast::FnCallExpr:
			(&ast::FnCallExpr)(d).Exception = &ast::ScopeTree{
				Deferred: true,
			}
			ret d
		}
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildData(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		match len(tokens) {
		| 0:
			ret nil
		| 1:
			ret self.buildSingle(tokens[0])
		| 3:
			if tokens[0].Id == lex::TokenId.Cpp {
				ret self.buildBindIdent(tokens)
			}
		}

		mut token := tokens[len(tokens)-1]
		if token.Id == lex::TokenId.TripleDot {
			ret self.buildVariadic(tokens)
		}

		token = tokens[0]

		// Unary operators.
		if lex::IsUnaryOp(token.Id) {
			// Handle pointer to primitive type.
			if len(tokens) > 1 {
				token = tokens[1]
				if token.Id == lex::TokenId.Unsafe {
					ret self.buildType(tokens)
				}
			}
			ret self.buildUnary(tokens)
		}

		if len(tokens) >= 3 {
			match token.Id {
			| lex::TokenId.LParent
			| lex::TokenId.LBrace
			| lex::TokenId.LBracket:
				// Catch type casting.
				if len(tokens) > 3 {
					t := tokens[len(tokens)-1]
					if t.Id == lex::TokenId.RParent {
						break
					}
				}

				next := tokens[1]
				if next.Id != lex::TokenId.RBracket {
					break
				}
				ret self.buildType(tokens)
			}
		}

		token = tokens[len(tokens)-1]
		match token.Id {
		| lex::TokenId.Ident:
			ret self.buildSubIdent(tokens)
		| lex::TokenId.Excl:
			ret self.buildExclRight(tokens)
		| lex::TokenId.RParent:
			ret self.buildParenthesesRange(tokens)
		| lex::TokenId.RBrace:
			ret self.buildBraceRange(tokens)
		| lex::TokenId.RBracket:
			ret self.buildBracketRange(tokens)
		}
		self.pushErr(token, build::LogMsg.InvalidSyntax)
		ret nil
	}

	fn buildBinary(mut self, mut &tokens: []&lex::Token, i: int): ast::ExprData {
		mut op := tokens[i]
		mut leftTokens := tokens[:i]
		if isTypeOp(op.Id) && isTypeRange(leftTokens) {
			// Catch slice and array types.
			ret self.buildType(tokens)
		}
		mut rightTokens := tokens[i+1:]
		if len(leftTokens) == 0 {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedLeftOperand)
			ret nil
		}
		if len(rightTokens) == 0 {
			self.pushErr(tokens[i], build::LogMsg.InvalidSyntax)
			self.pushSuggestion(build::LogMsg.ExpectedRightOperand)
			ret nil
		}
		ret &ast::BinaryExpr{
			Left: self.buildFromTokens(leftTokens),
			Right: self.buildFromTokens(rightTokens),
			Op: op,
		}
	}

	fn build(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		if tokens[0].Id == lex::TokenId.Map {
			ret self.buildType(tokens)
		}
		i := findLowestPrecOp(tokens)
		if i == -1 {
			ret self.buildData(tokens)
		}
		ret self.buildBinary(tokens, i)
	}

	fn buildKind(mut self, mut &tokens: []&lex::Token): ast::ExprData {
		mut parts, errors := parts(tokens, lex::TokenId.Comma, true)
		if errors != nil {
			self.p.errors = append(self.p.errors, errors...)
			ret nil
		} else if len(parts) > 1 {
			ret self.buildTuple(parts)
		}
		ret self.build(tokens)
	}

	fn buildFromTokens(mut self, mut tokens: []&lex::Token): &ast::Expr {
		if len(tokens) == 0 {
			ret nil
		}
		mut kind := self.buildKind(tokens)
		if kind == nil {
			ret nil
		}
		ret &ast::Expr{
			Token: tokens[0],
			End: tokens[len(tokens)-1],
			Kind: kind,
		}
	}
}

// Reports whether kind is potentially part of a type declaration.
fn isTypeOp(&id: lex::TokenId): bool {
	ret id == lex::TokenId.Amper ||
		id == lex::TokenId.DblAmper ||
		id == lex::TokenId.Star
}

// Reports whether range is potentially part of a type declaration.
fn isTypeRange(mut &tokens: []&lex::Token): bool {
	mut op := false
	for i, token in tokens {
		if token.Id == lex::TokenId.LBracket {
			if op {
				ret true
			}
			mut rangeN := 0
			mut lTokens := tokens[i:]
			for _, lToken in lTokens {
				match lToken.Id {
				| lex::TokenId.LBracket:
					rangeN++
					continue
				| lex::TokenId.RBracket:
					rangeN--
					continue
				}
				if rangeN == 0 {
					ret isTypeOp(lToken.Id)
				}
			}
			ret true
		}
		if !isTypeOp(token.Id) {
			ret false
		}
		op = true
	}
	ret true
}

// Returns expression tokens comes before block if exist, nil if not.
fn getBlockExpr(mut &tokens: []&lex::Token): []&lex::Token {
	mut braceN := 0
	mut skipToNextBraceClose := 0
	for i, tok in tokens {
		match tok.Id {
		| lex::TokenId.Unsafe:
			if len(tokens)-i > 1 && tokens[i+1].Id == lex::TokenId.LBrace {
				skipToNextBraceClose++
			}
		| lex::TokenId.LBrace:
			if braceN > 0 || skipToNextBraceClose > 0 {
				if skipToNextBraceClose > 0 {
					skipToNextBraceClose--
				}
				braceN++
				break
			}
			ret tokens[:i]
		| lex::TokenId.LBracket
		| lex::TokenId.LParent:
			braceN++
		| lex::TokenId.RBrace
		| lex::TokenId.RBracket
		| lex::TokenId.RParent:
			braceN--
		}
	}
	ret nil
}

// Returns delimiter index, left range and right range tokens.
// Returns nil slice and -1 if not found.
fn splitDelim(mut &tokens: []&lex::Token, delim: lex::TokenId): ([]&lex::Token, []&lex::Token) {
	mut func := -1
	mut rangeN := 0
	mut i := 0
	for i < len(tokens); i++ {
		token := tokens[i]
		match token.Id {
		| lex::TokenId.Fn:
			func = rangeN
		| lex::TokenId.LBrace
		| lex::TokenId.LBracket
		| lex::TokenId.LParent:
			rangeN++
			continue
		| lex::TokenId.RParent:
			rangeN--
			if func == rangeN {
				func = -1
				// Skip colon token if function builded.
				if len(tokens)-i > 1 && tokens[i+1].Id == lex::TokenId.Colon {
					i++
					continue
				}
			}
		| lex::TokenId.RBrace
		| lex::TokenId.RBracket:
			rangeN--
		}
		if token.Id == delim && rangeN == 0 {
			mut l := tokens[:i]
			mut r := tokens[i+1:]
			ret l, r
		}
	}
	ret nil, nil
}

// Finds index of priority operator and returns index of operator
// if found, returns -1 if not.
fn findLowestPrecOp(&tokens: []&lex::Token): int {
	// Set to byte.Max, there is nothing for precedence byte.Max.
	// It's provides optimization, avoid prec != -1 (if not setted) checking.
	// Always greater than actual precedences.
	// So, It's will initialized by first precedence without any checking that if not setted.
	mut prec := byte.Max
	mut precPos := -1

	mut braceN := 0
	mut skipToNextBraceOpen := false
	for i, token in tokens {
		match token.Id {
		| lex::TokenId.LBrace:
			skipToNextBraceOpen = false
			fall
		| lex::TokenId.LParent
		| lex::TokenId.LBracket:
			braceN++
			continue
		| lex::TokenId.RBrace
		| lex::TokenId.RParent
		| lex::TokenId.RBracket:
			braceN--
			continue
		| lex::TokenId.If:
			skipToNextBraceOpen = true
			continue
		}
		match {
		| skipToNextBraceOpen:
			continue
		| i == 0:
			continue
		| braceN > 0:
			continue
		| !lex::IsBinOp(token.Id):
			continue
		}

		left := tokens[i-1]

		// Skip unary operator or type annotation.
		if lex::IsUnaryOp(left.Id) || left.Id == lex::TokenId.Colon {
			continue
		}

		if i > 1 && left.Id == lex::TokenId.RBracket {
			lleft := tokens[i-2]
			if lleft.Id == lex::TokenId.LBracket {
				// Skip potential type annotations.
				if token.Id == lex::TokenId.Amper || token.Id == lex::TokenId.Star {
					continue
				}
			}
		}

		p := token.Prec()
		if p != 0 && p <= prec {
			prec = p
			precPos = i
		}
	}
	ret precPos
}

fn buildIdentExpr(mut &token: &lex::Token): &ast::IdentExpr {
	ret &ast::IdentExpr{
		Token: token,
		Ident: token.Kind,
		Binded: false,
	}
}

fn getRangeExprTokens(mut &tokens: []&lex::Token): ([]&lex::Token, int) {
	mut rangeN := 0
	mut i := len(tokens) - 1
	for i >= 0; i-- {
		tok := tokens[i]
		match tok.Id {
		| lex::TokenId.RBrace
		| lex::TokenId.RBracket
		| lex::TokenId.RParent:
			rangeN++
		| lex::TokenId.LBrace
		| lex::TokenId.LBracket
		| lex::TokenId.LParent:
			rangeN--
		}

		if rangeN == 0 {
			ret tokens[:i], rangeN
		}
	}
	ret nil, rangeN
}

fn isAnonFnHead(&tokens: []&lex::Token): bool {
	match tokens[0].Id {
	| lex::TokenId.Unsafe:
		if len(tokens) == 1 || tokens[1].Id != lex::TokenId.Fn {
			break
		}
		fall
	| lex::TokenId.Fn:
		if tokens[len(tokens)-1].Id == lex::TokenId.RBrace {
			// Not function type declaration, anonymous function expression.
			break
		}
		ret true
	}
	ret false
}