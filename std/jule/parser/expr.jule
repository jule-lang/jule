// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::ast::{
    IdentExpr,
    TupleExpr,
    ExprData,
    LitExpr,
    TypeDecl,
    UnaryExpr,
    SubIdentExpr,
    NsSelectionExpr,
    VariadicExpr,
    CastExpr,
    Expr,
    FnCallExpr,
    UnsafeExpr,
    FnDecl,
    FieldExprPair,
    StructLit,
    KeyValPair,
    BraceLit,
    SliceExpr,
    IndexingExpr,
    SlicingExpr,
    BinopExpr,
    TernaryExpr,
    ScopeTree,
}
use std::jule::build::{LogMsg}
use std::jule::lex::{
    Token,
    TokenId,
    TokenKind,
    is_unary_op,
}

struct CallData {
    expr_tokens:     []Token
    args_tokens:     []Token
    generics_tokens: []Token
}

fn get_call_data(mut &tokens: []Token): &CallData {
    let mut data = &CallData{}
    data.expr_tokens, data.args_tokens = range_last(tokens)
    if data.expr_tokens.len == 0 {
        ret data
    }

    // Below is call expression
    let token = data.expr_tokens[data.expr_tokens.len-1]
    if token.id == TokenId.Range && token.kind == TokenKind.RBracket {
        data.expr_tokens, data.generics_tokens = range_last(data.expr_tokens)
    }
    ret data
}

// Returns expression tokens comes before block if exist, nil if not.
fn get_block_expr(mut &tokens: []Token): []Token {
    let mut brace_n = 0
    let mut skip_to_next_brace_close = 0
    for i, tok in tokens {
        match tok.id {
        | TokenId.If | TokenId.Else | TokenId.Unsafe:
            skip_to_next_brace_close++

        | TokenId.Range:
            match tok.kind {
            | TokenKind.LBrace:
                if brace_n > 0 || skip_to_next_brace_close > 0 {
                    if skip_to_next_brace_close > 0 {
                        skip_to_next_brace_close--
                    }
                    brace_n++
                    break
                }
                ret tokens[:i]

            | TokenKind.LBracket
            | TokenKind.LParent:
                brace_n++

            |:
                brace_n--
            }
        }
    }
    ret nil
}

// Returns colon index, left range and right range tokens.
// Returns nil slice and -1 if not found.
fn split_colon(mut &tokens: []Token): ([]Token, []Token) {
    let mut range_n = 0
    for i, token in tokens {
        match token.id {
        | TokenId.Range:
            match token.kind {
            | TokenKind.LBrace
            | TokenKind.LBracket
            | TokenKind.LParent:
                range_n++
                continue

            |:
                range_n--
            }

        | TokenId.Colon:
            if range_n < 1 {
                let mut l = tokens[:i]
                let mut r = tokens[i+1:]
                ret l, r
            }
        }
    }
    ret nil, nil
}

// Finds index of priority operator and returns index of operator
// if found, returns -1 if not.
fn find_lowest_prec_op(&tokens: []Token): int {
    // Set to 255, there is nothing for precedence 255.
    // It's provides optimization, avoid prec != -1 (if not setted) checking.
    // Always greater than actual precedences.
    // So, It's will initialized by first precedence without any checking that if not setted.
    let mut prec: byte = 255
    let mut prec_pos = -1

    let mut brace_n = 0
    let mut skip_to_next_brace_open = false
    for i, token in tokens {
        match {
        | token.id == TokenId.Range:
            match token.kind {
            | TokenKind.LBrace:
                skip_to_next_brace_open = false
                fall
            | TokenKind.LParent
            | TokenKind.LBracket:
                brace_n++
            |:
                brace_n--
            }
            continue
        | skip_to_next_brace_open:
            continue
        | token.id == TokenId.If:
            skip_to_next_brace_open = true
            continue
        | i == 0:
            continue
        | token.id != TokenId.Op:
            continue
        | brace_n > 0:
            continue
        }

        let left = tokens[i-1]

        // Skip unary operator or type annotation.
        if left.id == TokenId.Op || left.id == TokenId.Colon {
            continue
        }

        if i > 1 && left.id == TokenId.Range && left.kind == TokenKind.RBracket {
            let lleft = tokens[i-2]
            if lleft.id == TokenId.Range && lleft.kind == TokenKind.LBracket {
                // Skip potential type annotations.
                if token.kind == TokenKind.Amper || token.kind == TokenKind.Star {
                    continue
                }
            }
        }

        let p = token.prec()
        if p != 0 && p <= prec {
            prec = p
            prec_pos = i
        }
    }

    ret prec_pos
}

fn build_ident_expr(mut &token: Token): &IdentExpr {
    ret &IdentExpr{
        token:      token,
        ident:      token.kind,
        cpp_linked: false,
    }
}

fn get_range_expr_tokens(mut &tokens: []Token): ([]Token, int) {
    let mut range_n = 0
    let mut i = tokens.len - 1
    for i >= 0; i-- {
        let tok = tokens[i]
        if tok.id == TokenId.Range {
            match tok.kind {
            | TokenKind.RBrace
            | TokenKind.RBracket
            | TokenKind.RParent:
                range_n++
            |:
                range_n--
            }
        }

        if range_n == 0 {
            ret tokens[:i], range_n
        }
    }
    ret nil, range_n
}

struct ExprBuilder {
    p: &Parser
}

impl ExprBuilder {
    fn push_err(mut self, token: Token, fmt: LogMsg, args: ...any) {
        self.p.push_err(token, fmt, args...)
    }

    // Push suggestion to last log.
    fn push_suggestion(mut self, fmt: LogMsg, args: ...any) {
        self.p.push_suggestion(fmt, args...)
    }

    fn build_tuple(mut self, mut &parts: [][]Token): &TupleExpr {
        let mut tuple = &TupleExpr{
            expr: make([]&Expr, 0, parts.len),
        }
        for (_, mut part) in parts {
            tuple.expr = append(tuple.expr, self.build_from_tokens(part))
        }
        ret tuple
    }

    fn build_lit(self, mut token: Token): &LitExpr {
        ret &LitExpr{
            token: token,
            value: token.kind,
        }
    }

    fn build_primitive_type(self, mut &token: Token): &TypeDecl {
        ret build_prim_type(token)
    }

    fn build_single(mut self, mut token: Token): ExprData {
        match token.id {
        | TokenId.Lit:
            ret self.build_lit(token)
        | TokenId.Op:
            if token.kind == TokenKind.TripleDot {
                ret &VariadicExpr{
                    token: token,
                }
            }
        | TokenId.Ident
        | TokenId.Self
        | TokenId.Error:
            ret build_ident_expr(token)
        | TokenId.Prim:
            ret self.build_primitive_type(token)
        }
        self.push_err(token, LogMsg.InvalidSyntax)
        ret nil
    }

    fn build_cpp_linked_ident(mut self, mut &tokens: []Token): &IdentExpr {
        if tokens[0].id != TokenId.Cpp {
            ret nil
        } else if tokens[1].id != TokenId.Dot {
            self.push_err(tokens[1], LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedDotForCpp)
            ret nil
        }
        let mut token = tokens[2]
        if token.id != TokenId.Ident {
            self.push_err(tokens[2], LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedIdentifier)
            ret nil
        }
        let mut expr = build_ident_expr(token)
        expr.cpp_linked = true
        ret expr
    }

    fn build_unary(mut self, mut tokens: []Token): &UnaryExpr {
        let mut op = tokens[0]
        if tokens.len == 1 {
            self.push_err(op, LogMsg.MissingExprForUnary)
            ret nil
        } else if !is_unary_op(op.kind) {
            self.push_err(op, LogMsg.InvalidOpForUnary, op.kind)
            ret nil
        }

        // Length is 1 cause all length of operator tokens is 1.
        // Change "1" with length of token's value
        // if all operators length is not 1.
        tokens = tokens[1:]

        ret &UnaryExpr{
            op:   op,
            expr: self.build_from_tokens(tokens),
        }
    }

    fn build_obj_sub_ident(mut self, mut tokens: []Token): &SubIdentExpr {
        let mut i = tokens.len - 1
        let mut ident_token = tokens[i]
        i-- // Set offset to delimiter token.
        tokens = tokens[:i] // Remove dot token and selected identifier token.
        if tokens.len == 0 {
            self.push_err(ident_token, LogMsg.InvalidSyntax)
            ret nil
        }
        ret &SubIdentExpr{
            ident: ident_token,
            expr:  self.build_from_tokens(tokens),
        }
    }

    fn build_ns_sub_ident(mut self, mut &tokens: []Token): &NsSelectionExpr {
        let mut ns = &NsSelectionExpr{}
        for (i, mut token) in tokens {
            if i%2 == 0 {
                if token.id != TokenId.Ident {
                    self.push_err(token, LogMsg.InvalidSyntax)
                    self.push_suggestion(LogMsg.ExpectedIdentifier)
                }
                ns.ns = append(ns.ns, token)
            } else if token.id != TokenId.DblColon {
                self.push_err(token, LogMsg.InvalidSyntax)
                self.push_suggestion(LogMsg.ExpectedDblColon)
            }
        }
        ns.ident = ns.ns[ns.ns.len-1]
        ns.ns = ns.ns[:ns.ns.len-1]
        ret ns
    }

    fn build_type(mut self, mut &tokens: []Token): &TypeDecl {
        let mut i = 0
        let (mut t, ok) = unsafe { self.p.build_type(tokens, &i, false) }
        if !ok {
            self.push_err(tokens[0], LogMsg.InvalidSyntax)
            ret nil
        }

        if i < tokens.len {
            self.push_err(tokens[i], LogMsg.InvalidSyntax)
        }
        ret t
    }

    fn build_sub_ident(mut self, mut &tokens: []Token): ExprData {
        let i = tokens.len - 2 // Set offset to delimiter token.
        let token = tokens[i]
        match token.id {
        | TokenId.Dot:
            ret self.build_obj_sub_ident(tokens)
        | TokenId.DblColon:
            ret self.build_ns_sub_ident(tokens)
        | TokenId.Range:
            // Catch slice, and array types.
            if token.kind == TokenKind.RBracket {
                ret self.build_type(tokens)
            }
        }
        self.push_err(token, LogMsg.InvalidSyntax)
        ret nil
    }

    fn build_variadic(mut self, mut tokens: []Token): &VariadicExpr {
        let mut token = tokens[tokens.len-1] // Variadic operator token.
        tokens = tokens[:tokens.len-1] // Remove variadic operator token.
        ret &VariadicExpr{
            token: token,
            expr:  self.build_from_tokens(tokens),
        }
    }

    fn build_op_right(mut self, mut &tokens: []Token): ExprData {
        let mut token = tokens[tokens.len-1]
        match token.kind {
        | TokenKind.Excl:
            tokens = tokens[:tokens.len-1] // Ignore "!" token.
            let mut d = self.build(tokens)
            if d == nil {
                ret nil
            }
            match type d {
            | &FnCallExpr:
                (&FnCallExpr)(d).exception = &ScopeTree{
                    deferred: true,
                }
                ret d
            }
        | TokenKind.TripleDot:
            ret self.build_variadic(tokens)
        }
        self.push_err(token, LogMsg.InvalidSyntax)
        ret nil
    }

    fn build_between_parentheses(mut self, mut tokens: []Token): &Expr {
        let token = tokens[0]
        tokens = tokens[1 : tokens.len-1] // Remove parentheses.
        if tokens.len == 0 {
            self.push_err(token, LogMsg.MissingExpr)
            self.push_suggestion(LogMsg.EmptyParentNotValid)
            ret nil
        }
        let mut expr = self.build_from_tokens(tokens)
        expr.range = true
        ret expr
    }

    fn try_build_cast(mut self, mut &tokens: []Token): &CastExpr {
        let mut range_n = 0
        for i, token in tokens {
            if token.id == TokenId.Range {
                match token.kind {
                | TokenKind.LBrace
                | TokenKind.LBracket
                | TokenKind.LParent:
                    range_n++
                    continue
                |:
                    range_n--
                }
            }

            if range_n > 0 {
                continue
            } else if i+1 == tokens.len {
                ret nil
            }

            let mut type_tokens = tokens[:i+1]
            let mut expr_tokens = tokens[i+1:]

            if expr_tokens.len == 0 {
                // Expression is parentheses group.
                ret nil
            }

            let tok = expr_tokens[0]
            if tok.id != TokenId.Range || tok.kind != TokenKind.LParent {
                ret nil
            }

            let mut cast = &CastExpr{}

            // Expression tokens just parentheses.
            if expr_tokens.len == 2 {
                self.push_err(expr_tokens[0], LogMsg.MissingExpr)
                self.push_suggestion(LogMsg.GiveExprToCast)
            }

            // Type tokens just parentheses.
            if type_tokens.len == 2 {
                self.push_err(type_tokens[0], LogMsg.MissingType)
                self.push_suggestion(LogMsg.GiveTypeForCast)
            } else {
                type_tokens = type_tokens[1:type_tokens.len-1] // Remove parentheses.
                let mut type_index = 0
                let (mut t, ok) = unsafe { self.p.build_type(type_tokens, &type_index, true) }
                if ok && type_index < type_tokens.len {
                    self.push_err(type_tokens[type_index], LogMsg.InvalidSyntax)
                } else if !ok {
                    ret cast
                }
                cast.kind = t

                if expr_tokens.len > 2 {
                    // Remove parentheses.
                    let mut j = 0
                    _ = range(j, TokenKind.LParent, TokenKind.RParent, expr_tokens)
                    if j < expr_tokens.len {
                        ret nil
                    }
                    expr_tokens = expr_tokens[:j]
                    cast.expr = self.build_from_tokens(expr_tokens)
                }
            }
            ret cast
        }

        ret nil
    }

    fn push_arg(mut self, mut &args: []&Expr, mut tokens: []Token, err_token: Token) {
        if tokens.len == 0 {
            self.push_err(err_token, LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedExpr)
            ret
        }
        args = append(args, self.build_from_tokens(tokens))
    }

    fn build_args(mut self, mut tokens: []Token): []&Expr {
        // No argument.
        if tokens.len < 2 {
            ret nil
        }

        let mut args: []&Expr = nil
        let mut last = 0
        let mut range_n = 0
        tokens = tokens[1 : tokens.len-1] // Remove parentheses.
        for i, token in tokens {
            if token.id == TokenId.Range {
                match token.kind {
                | TokenKind.LBrace
                | TokenKind.LBracket
                | TokenKind.LParent:
                    range_n++
                |:
                    range_n--
                }
            }
            if range_n > 0 || token.id != TokenId.Comma {
                continue
            }
            self.push_arg(args, tokens[last:i], token)
            last = i + 1
        }

        if last < tokens.len {
            if last == 0 {
                if tokens.len > 0 {
                    self.push_arg(args, tokens[last:], tokens[last])
                }
            } else {
                self.push_arg(args, tokens[last:], tokens[last-1])
            }
        }

        ret args
    }

    // Tokens should include brackets.
    fn build_call_generics(mut self, mut tokens: []Token): []&TypeDecl {
        if tokens.len == 0 {
            ret nil
        }

        tokens = tokens[1 : tokens.len-1] // Remove brackets.
        let (mut parts, errs) = parts(tokens, TokenId.Comma, true)
        let mut generics = make([]&TypeDecl, 0, parts.len)
        self.p.errors = append(self.p.errors, errs...)
        for (_, mut part) in parts {
            if part.len == 0 {
                continue
            }
            let mut j = 0
            let (mut generic, _) = unsafe { self.p.build_type(part, &j, true) }
            if j < part.len {
                self.push_err(part[j], LogMsg.InvalidSyntax)
            }
            generics = append(generics, generic)
        }

        ret generics
    }

    fn build_fn_call(mut self, mut &token: Token, mut &data: &CallData): &FnCallExpr {
        ret &FnCallExpr{
            token:    token,
            expr:     self.build_from_tokens(data.expr_tokens),
            generics: self.build_call_generics(data.generics_tokens),
            args:     self.build_args(data.args_tokens),
        }
    }

    fn build_parentheses_range(mut self, mut &tokens: []Token): ExprData {
        let mut token = tokens[0]
        match token.id {
        | TokenId.Range:
            match token.kind {
            | TokenKind.LParent:
                let mut expr = self.try_build_cast(tokens)
                if expr != nil {
                    ret expr
                }
            }
        }

        let mut data = get_call_data(tokens)

        // Expression is parentheses group if data.expr_tokens is zero.
        // data.args_tokens holds tokens of parentheses range (include parentheses).
        if data.expr_tokens.len == 0 {
            ret self.build_between_parentheses(data.args_tokens)
        }

        ret self.build_fn_call(token, data)
    }

    fn build_unsafe_expr(mut self, mut tokens: []Token): &UnsafeExpr {
        let mut token = tokens[0]
        tokens = tokens[1:] // Remove unsafe keyword.
        let mut i = 0
        let mut range_tokens = range(i, TokenKind.LBrace, TokenKind.RBrace, tokens)
        if range_tokens.len == 0 {
            self.push_err(tokens[0], LogMsg.MissingExpr)
            ret nil
        }
        ret &UnsafeExpr{
            token: token,
            expr:  self.build_from_tokens(range_tokens),
        }
    }

    fn build_anon_fn(mut self, mut &tokens: []Token): &FnDecl {
        let mut f = self.p.build_fn(tokens, false, false)
        if !f.is_anon() {
            self.push_err(f.token, LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedAnonFn)
        }
        ret f
    }

    fn build_unsafe(mut self, mut &tokens: []Token): ExprData {
        match tokens[1].id {
        | TokenId.Fn:
            // Unsafe anonymous function.
            ret self.build_anon_fn(tokens)
        |:
            ret self.build_unsafe_expr(tokens)
        }
    }

    fn push_range_lit_part(mut self, mut part: []Token,
        error_token: Token, mut &parts: [][]Token) {
        if part.len == 0 {
            self.push_err(error_token, LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedExpr)
            ret
        }
        parts = append(parts, part)
    }

    // Tokens should include brace tokens.
    fn get_brace_range_lit_expr_parts(mut self, mut tokens: []Token): [][]Token {
        // No part.
        if tokens.len < 2 {
            ret nil
        }

        let mut parts: [][]Token = nil

        let mut last = 0
        let mut range_n = 0
        tokens = tokens[1 : tokens.len-1] // Remove parentheses.
        for i, token in tokens {
            if token.id == TokenId.Range {
                match token.kind {
                | TokenKind.LBrace
                | TokenKind.LBracket
                | TokenKind.LParent:
                    range_n++
                |:
                    range_n--
                }
            }
            if range_n > 0 || token.id != TokenId.Comma {
                continue
            }
            self.push_range_lit_part(tokens[last:i], token, parts)
            last = i + 1
        }

        if last < tokens.len {
            if last == 0 {
                if tokens.len > 0 {
                    self.push_range_lit_part(tokens[last:], tokens[last], parts)
                }
            } else {
                self.push_range_lit_part(tokens[last:], tokens[last-1], parts)
            }
        }

        ret parts
    }

    fn build_field_expr_pair(mut self, mut tokens: []Token): &FieldExprPair {
        if tokens.len-2 == 0 {
            self.push_err(tokens[1], LogMsg.MissingExpr)
            ret nil
        }
        let mut pair = &FieldExprPair{
            field: tokens[0],
        }
        tokens = tokens[2:] // Remove field identifier and colon tokens.
        pair.expr = self.build_from_tokens(tokens)
        ret pair
    }

    fn build_struct_lit_expr(mut self, mut &tokens: []Token): &Expr {
        let mut token = tokens[0]
        if token.id == TokenId.Ident && tokens.len > 1 {
            token = tokens[1]
            if token.id == TokenId.Colon {
                ret &Expr{
                    token: token,
                    kind:  self.build_field_expr_pair(tokens),
                }
            }
        }
        ret self.build_from_tokens(tokens)
    }

    fn build_struct_lit_exprs(mut self, mut &tokens: []Token): []&Expr {
        let mut parts = self.get_brace_range_lit_expr_parts(tokens)
        if parts.len == 0 {
            ret nil
        }

        let mut pairs = make([]&Expr, 0, parts.len)
        for (_, mut part) in parts {
            pairs = append(pairs, self.build_struct_lit_expr(part))
        }
        ret pairs
    }

    fn build_typed_struct_literal(mut self, mut tokens: []Token): &StructLit {
        let mut i = 0
        let (mut t, ok) = unsafe { self.p.build_type(tokens, &i, true) }
        if !ok {
            ret nil
        } else if i >= tokens.len {
            self.push_err(tokens[i], LogMsg.InvalidSyntax)
            ret nil
        }

        tokens = tokens[i:] // Remove type tokens.
        let token = tokens[0]
        if token.id != TokenId.Range || token.kind != TokenKind.LBrace {
            self.push_err(token, LogMsg.InvalidSyntax)
            ret nil
        }

        ret &StructLit{
            kind:  t,
            exprs: self.build_struct_lit_exprs(tokens),
        }
    }

    fn build_brace_lit_part(mut self, mut &tokens: []Token): &Expr {
        let (mut l, mut r) = split_colon(tokens)
        // If left is not nil, colon token found.
        if l != nil {
            ret &Expr {
                token: tokens[0],
                kind:  &KeyValPair{
                    colon: tokens[l.len],
                    key:   self.build_from_tokens(l),
                    val:   self.build_from_tokens(r),
                },
            }
        }
        ret self.build_from_tokens(tokens)
    }

    fn build_brace_lit(mut self, mut &tokens: []Token): &BraceLit {
        let mut lit = &BraceLit{
            token: tokens[0],
        }

        let mut parts = self.get_brace_range_lit_expr_parts(tokens)
        if parts == nil {
            ret lit
        }

        lit.exprs = make([]&Expr, 0, parts.len)
        for (_, mut part) in parts {
            lit.exprs = append(lit.exprs, self.build_brace_lit_part(part))
        }

        ret lit
    }

    fn build_brace_range(mut self, mut &tokens: []Token): ExprData {
        let (mut expr_tokens, range_n) = get_range_expr_tokens(tokens)

        match {
        | expr_tokens.len == 0:
            ret self.build_brace_lit(tokens)
        | range_n > 0:
            self.push_err(tokens[0], LogMsg.InvalidSyntax)
            ret nil
        }

        // Exceptional handling.
        let else_token = expr_tokens[expr_tokens.len-1]
        if expr_tokens[expr_tokens.len-1].id == TokenId.Else {
            expr_tokens = expr_tokens[:expr_tokens.len-1] // Ignore keyword "else"
            let mut d = self.build(expr_tokens)
            if d == nil {
                ret nil
            }
            match type d {
            | &FnCallExpr:
                tokens = tokens[expr_tokens.len+1:] // Get range: {...}
                let mut i = 0
                let mut range_tokens = range(i, TokenKind.LBrace, TokenKind.RBrace, tokens)
                let mut model = (&FnCallExpr)(d)
                if model.ignored() {
                    self.push_err(else_token, LogMsg.InvalidSyntax)
                    self.push_suggestion(LogMsg.JustIgnoreOrHandle)
                }
                model.exception = self.p.build_scope(range_tokens)
                ret d
            |:
                self.push_err(expr_tokens[0], LogMsg.InvalidSyntax)
                ret nil
            }
        }

        match expr_tokens[0].id {
        | TokenId.Unsafe:
            ret self.build_unsafe(tokens)
        | TokenId.Fn:
            ret self.build_anon_fn(tokens)
        | TokenId.Ident
        | TokenId.Cpp:
            ret self.build_typed_struct_literal(tokens)
        |:
            self.push_err(expr_tokens[0], LogMsg.InvalidSyntax)
            ret nil
        }
    }

    // Tokens is should be store enumerable range tokens.
    fn get_enumerable_parts(mut self, mut tokens: []Token): [][]Token {
        tokens = tokens[1 : tokens.len-1] // Remove range tokens.
        let (mut parts, errors) = parts(tokens, TokenId.Comma, true)
        self.p.errors = append(self.p.errors, errors...)
        ret parts
    }

    fn build_slice(mut self, mut tokens: []Token): &SliceExpr {
        let mut slc = &SliceExpr{
            token: tokens[0],
        }

        let mut parts = self.get_enumerable_parts(tokens)
        if parts.len == 0 {
            ret slc
        }

        slc.exprs = make([]&Expr, 0, parts.len)
        for (_, mut p) in parts {
            if p.len == 0 {
                continue
            }
            slc.exprs = append(slc.exprs, self.build_from_tokens(p))
        }

        ret slc
    }

    fn build_indexing(mut self, mut expr_tokens: []Token,
        mut tokens: []Token, mut error_token: Token): &IndexingExpr {
        tokens = tokens[1 : tokens.len-1] // Remove brackets.
        if tokens.len == 0 {
            self.push_err(error_token, LogMsg.MissingExpr)
            ret nil
        }
        let mut expr = self.build_from_tokens(expr_tokens)
        if expr == nil {
            ret nil
        }
        let mut index = self.build_from_tokens(tokens)
        if index == nil {
            ret nil
        }
        ret &IndexingExpr{
            token: error_token,
            expr:  expr,
            index: index,
        }
    }

    fn build_slicing(mut self, mut &expr_tokens: []Token, mut &slicing_tokens: []Token,
        &colon: int, mut &error_token: Token): &SlicingExpr {
        let mut slc = &SlicingExpr{
            token: error_token,
            expr:  self.build_from_tokens(expr_tokens),
        }

        let mut start_expr_tokens = slicing_tokens[:colon]
        if start_expr_tokens.len > 0 {
            slc.start = self.build_from_tokens(start_expr_tokens)
        }

        let mut to_expr_tokens = slicing_tokens[colon+1:]
        if to_expr_tokens.len > 0 {
            slc.to = self.build_from_tokens(to_expr_tokens)
        }

        ret slc
    }

    fn build_bracket_range(mut self, mut tokens: []Token): ExprData {
        let mut error_token = tokens[0]
        let (mut expr_tokens, range_n) = get_range_expr_tokens(tokens)

        match {
        | expr_tokens.len == 0:
            ret self.build_slice(tokens)
        | expr_tokens.len == 0 || range_n > 0:
            self.push_err(error_token, LogMsg.InvalidSyntax)
            ret nil
        }

        // Remove expression tokens.
        // Holds only indexing tokens.
        // Includes brackets.
        tokens = tokens[expr_tokens.len:]

        // Use split_map_range because same thing.
        // Map types like: [KEY:VALUE]
        // Slicing expressions like: [START:TO]
        let mut i = 0
        let (mut slicing_tokens, colon) = split_map_range(tokens, i)
        if colon != -1 {
            ret self.build_slicing(expr_tokens, slicing_tokens, colon, error_token)
        }
        ret self.build_indexing(expr_tokens, tokens, error_token)
    }

    fn build_ternary(mut self, mut tokens: []Token): ExprData {
        let mut ter = &TernaryExpr{}
        ter.token = tokens[0] // "if" token

        tokens = tokens[1:] // Skip the "if" token
        let mut expr_tokens = get_block_expr(tokens)
        if expr_tokens.len == 0 {
            self.push_err(ter.token, LogMsg.MissingExpr)
        }

        ter.condition = self.build_from_tokens(expr_tokens)

        let mut i = expr_tokens.len
        let mut true_expr = range(i, TokenKind.LBrace, TokenKind.RBrace, tokens)
        if true_expr == nil {
            self.push_err(ter.token, LogMsg.BodyNotExist)
            self.push_suggestion(LogMsg.ExpectedBody)
            ret ter
        } else if true_expr.len == 0 {
            self.push_err(tokens[expr_tokens.len], LogMsg.MissingExpr)
        }

        if i >= tokens.len {
            self.push_err(ter.token, LogMsg.MissedTernaryElse)
            ret ter
        }

        let else_token = tokens[i]
        if else_token.id != TokenId.Else {
            self.push_err(else_token, LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedElseKeywordForTernary)
            ret ter
        }

        i++
        let j = i
        let mut false_expr = range(i, TokenKind.LBrace, TokenKind.RBrace, tokens)
        if false_expr == nil {
            self.push_err(else_token, LogMsg.BodyNotExist)
            self.push_suggestion(LogMsg.ExpectedBody)
            ret ter
        } else if false_expr.len == 0 {
            self.push_err(tokens[j], LogMsg.MissingExpr)
        }

        if i < tokens.len {
            self.push_err(tokens[i], LogMsg.InvalidSyntax)
        }

        ter.true_expr = self.build_from_tokens(true_expr)
        ter.false_expr = self.build_from_tokens(false_expr)

        ret ter
    }

    fn build_data(mut self, mut &tokens: []Token): ExprData {
        match tokens.len {
        | 0:
            ret nil
        | 1:
            ret self.build_single(tokens[0])
        | 3:
            if tokens[0].id == TokenId.Cpp {
                ret self.build_cpp_linked_ident(tokens)
            }
        }

        let mut token = tokens[0]
        match token.id {
        | TokenId.If:
            ret self.build_ternary(tokens)
        | TokenId.Op:
            // Handle pointer to primitive type.
            if tokens.len > 1 && token.kind == TokenKind.Star {
                token = tokens[1]
                if token.id == TokenId.Prim || token.id == TokenId.Unsafe {
                    ret self.build_type(tokens)
                }
            }

            ret self.build_unary(tokens)
        | TokenId.Range:
            if tokens.len < 3 {
                break
            }

            // Catch type casting.
            if tokens.len > 3 {
                let t = tokens[tokens.len-1]
                if t.id == TokenId.Range && t.kind == TokenKind.RParent {
                    break
                }
            }

            let next = tokens[1]
            if next.id != TokenId.Range || next.kind != TokenKind.RBracket {
                break
            }
            ret self.build_type(tokens)
        }

        token = tokens[tokens.len-1]
        match token.id {
        | TokenId.Ident:
            ret self.build_sub_ident(tokens)
        | TokenId.Prim:
            // Catch slice, and array types.
            ret self.build_type(tokens)
        | TokenId.Op:
            ret self.build_op_right(tokens)
        | TokenId.Range:
            match token.kind {
            | TokenKind.RParent:
                ret self.build_parentheses_range(tokens)
            | TokenKind.RBrace:
                ret self.build_brace_range(tokens)
            | TokenKind.RBracket:
                ret self.build_bracket_range(tokens)
            }
        }

        self.push_err(token, LogMsg.InvalidSyntax)
        ret nil
    }

    fn build_binop(mut self, mut &tokens: []Token, i: int): &BinopExpr {
        let mut left_tokens = tokens[:i]
        let mut right_tokens = tokens[i+1:]
        if left_tokens.len == 0 {
            self.push_err(tokens[i], LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedLeftOperand)
            ret nil
        }
        if right_tokens.len == 0 {
            self.push_err(tokens[i], LogMsg.InvalidSyntax)
            self.push_suggestion(LogMsg.ExpectedRightOperand)
            ret nil
        }
        ret &BinopExpr{
            left:  self.build_from_tokens(left_tokens),
            right: self.build_from_tokens(right_tokens),
            op:    tokens[i],
        }
    }

    fn build(mut self, mut &tokens: []Token): ExprData {
        let i = find_lowest_prec_op(tokens)
        if i == -1 {
            ret self.build_data(tokens)
        }
        ret self.build_binop(tokens, i)
    }

    fn build_kind(mut self, mut &tokens: []Token): ExprData {
        let (mut parts, errors) = parts(tokens, TokenId.Comma, true)
        if errors != nil {
            self.p.errors = append(self.p.errors, errors...)
            ret nil
        } else if parts.len > 1 {
            ret self.build_tuple(parts)
        }
        ret self.build(tokens)
    }

    fn build_from_tokens(mut self, mut tokens: []Token): &Expr {
        if tokens.len == 0 {
            ret nil
        }
        ret &Expr{
            token: tokens[0],
            kind:  self.build_kind(tokens),
        }
    }
}
