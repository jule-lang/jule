// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{Status, FsError}
use path for std::fs::path

// Fileset for lexing.
pub struct File {
    pub data: []byte

    _path: str
    mut _tokens: []Token
}

impl File {
    // Reports whether file path is exist and accessible.
    pub fn is_ok(self): bool {
        Status.of(self._path) else { ret false }
        ret true
    }

    // Fill data.
    pub fn fill(mut self, mut data: []byte) { self.data = data }

    // Returns path.
    pub fn path(self): str { ret self._path }

    // Returns directory of file's path.
    pub fn dir(self): str { ret path::dir(self._path) }

    // Returns filename.
    pub fn name(self): str { ret path::base(self._path) }

    // Returns self as uintptr.
    pub fn addr(self): uintptr { ret uintptr(&self) }

    // Returns tokens of file.
    // Tokens are mutable.
    pub fn tokens(mut self): []Token { ret self._tokens }

    // Returns line (not include new-line char) by row.
    // Returns empty string if line is not buffer.
    pub fn get_row(self, row: int): str {
        let mut n = 0
        let mut line_start = 0
        let mut i = 0
        for i < self.data.len; i++ {
            if self.data[i] != '\n' {
                continue
            }

            n++
            if n == row {
                ret str(self.data[line_start:i])
            }
            line_start = i+1
        }
        ret ""
    }
}

// Returns new File points to Jule file.
pub fn new_file_set(path: str): &File {
    ret &File{
        _path: path,
    }
}
