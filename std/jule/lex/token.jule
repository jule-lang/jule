// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::build::{Log}
use unicode for std::unicode
use utf8 for std::unicode::utf8
use strings for std::strings

// Punctuations.
static Puncts: [...]rune = [
    '!',
    '#',
    '$',
    ',',
    '.',
    '\'',
    '"',
    ':',
    ';',
    '<',
    '>',
    '=',
    '?',
    '-',
    '+',
    '*',
    '(',
    ')',
    '[',
    ']',
    '{',
    '}',
    '%',
    '&',
    '/',
    '\\',
    '@',
    '^',
    '_',
    '`',
    '|',
    '~',
    'Â¦',
]

// Space characters.
static Spaces: [...]rune = [
    ' ',
    '\t',
    '\v',
    '\r',
    '\n',
]

// Kind list of unary operators.
static UnaryOps: [...]TokenKind = [
    TokenKind.Minus,
    TokenKind.Plus,
    TokenKind.Caret,
    TokenKind.Excl,
    TokenKind.Star,
    TokenKind.Amper,
]

// Kind list of binary operators.
static BinOps: [...]TokenKind = [
    TokenKind.Plus,
    TokenKind.Minus,
    TokenKind.Star,
    TokenKind.Solidus,
    TokenKind.Percent,
    TokenKind.Amper,
    TokenKind.Vline,
    TokenKind.Caret,
    TokenKind.Lt,
    TokenKind.Gt,
    TokenKind.DblAmper,
    TokenKind.DblVline,
]

// Kind list of weak operators.
// These operators are weak, can used as part of expression.
static WeakOps: [...]TokenKind = [
    TokenKind.TripleDot,
    TokenKind.Colon,
]

// List of postfix operators.
static PostfixOps: [...]TokenKind = [
    TokenKind.DblPlus,
    TokenKind.DblMinus,
]

// List of assign operators.
static AssignOps: [...]TokenKind = [
    TokenKind.Eq,
    TokenKind.PlusEq,
    TokenKind.MinusEq,
    TokenKind.SolidusEq,
    TokenKind.StarEq,
    TokenKind.PercentEq,
    TokenKind.RshiftEq,
    TokenKind.LshiftEq,
    TokenKind.VlineEq,
    TokenKind.AmperEq,
    TokenKind.CaretEq,
]

// Special identifiers.
enum Ident: str {
    Ignore: "_",         // Ignore
    Anon: "<anonymous>", // Anonymous
}

// Token identities.
enum TokenId: uint {
    Na,
    Ident,
    Range,
    Ret,
    Semicolon,
    Lit,
    Op,
    Comma,
    Const,
    Type,
    Colon,
    For,
    Break,
    Cont,
    In,
    If,
    Else,
    Comment,
    Use,
    Dot,
    Goto,
    DblColon,
    Enum,
    Struct,
    Co,
    Match,
    Self,
    Trait,
    Impl,
    Cpp,
    Fall,
    Fn,
    Let,
    Unsafe,
    Mut,
    Defer,
    Static,
    Hash,
    Error,
    Map,
}

// Token kinds.
enum TokenKind: str {
    DblColon: "::",
    Colon: ":",
    Semicolon: ";",
    Comma: ",",
    TripleDot: "...",
    Dot: ".",
    PlusEq: "+=",
    MinusEq: "-=",
    StarEq: "*=",
    SolidusEq: "/=",
    PercentEq: "%=",
    LshiftEq: "<<=",
    RshiftEq: ">>=",
    CaretEq: "^=",
    AmperEq: "&=",
    VlineEq: "|=",
    Eqs: "==",
    NotEq: "!=",
    GreatEq: ">=",
    LessEq: "<=",
    DblAmper: "&&",
    DblVline: "||",
    Lshift: "<<",
    Rshift: ">>",
    DblPlus: "++",
    DblMinus: "--",
    Plus: "+",
    Minus: "-",
    Star: "*",
    Solidus: "/",
    Percent: "%",
    Amper: "&",
    Vline: "|",
    Caret: "^",
    Excl: "!",
    Lt: "<",
    Gt: ">",
    Eq: "=",
    LnComment: "//",
    RangLComment: "/*",
    RangRComment: "*/",
    LParent: "(",
    RParent: ")",
    LBracket: "[",
    RBracket: "]",
    LBrace: "{",
    RBrace: "}",
    Hash: "#",
    True: "true",
    False: "false",
    Nil: "nil",
    Const: "const",
    Ret: "ret",
    Type: "type",
    For: "for",
    Break: "break",
    Cont: "continue",
    In: "in",
    If: "if",
    Else: "else",
    Use: "use",
    Goto: "goto",
    Enum: "enum",
    Struct: "struct",
    Co: "co",
    Match: "match",
    Self: "self",
    Trait: "trait",
    Impl: "impl",
    Cpp: "cpp",
    Fall: "fall",
    Fn: "fn",
    Let: "let",
    Unsafe: "unsafe",
    Mut: "mut",
    Defer: "defer",
    Static: "static",
    Error: "error",
    Map: "map",
}

// Token is lexer token.
struct Token {
    File:   &File
    Row:    int
    Column: int
    Kind:   str
    Id:     TokenId
}

impl Token {
    // Returns operator precedence of token.
    // Returns 0 if token is not operator or
    // invalid operator for operator precedence.
    //
    // Accepts assignment tokens (like equals [=]) as precedenced operator
    // to handle expression assignments.
    fn Prec(self): byte {
        if self.Id != TokenId.Op {
            ret 0
        }
        match self.Kind {
        | TokenKind.Star
        | TokenKind.Percent
        | TokenKind.Solidus
        | TokenKind.Rshift
        | TokenKind.Lshift
        | TokenKind.Amper:
            ret 5
        | TokenKind.Plus
        | TokenKind.Minus
        | TokenKind.Vline
        | TokenKind.Caret:
            ret 4
        | TokenKind.Eqs
        | TokenKind.NotEq
        | TokenKind.Eq
        | TokenKind.Lt
        | TokenKind.LessEq
        | TokenKind.Gt
        | TokenKind.GreatEq:
            ret 3
        | TokenKind.DblAmper:
            ret 2
        | TokenKind.DblVline:
            ret 1
        |:
            ret 0
        }
    }
}

// Reports whether kind is unary operator.
fn IsUnaryOp(kind: str): bool {
    for _, op in UnaryOps {
        if kind == op {
            ret true
        }
    }
    ret false
}

// Reports whether kind is binary operator.
fn IsBinOp(kind: str): bool {
    for _, op in BinOps {
        if kind == op {
            ret true
        }
    }
    ret false
}

// Reports whether kind is weak operator.
fn IsWeakOp(kind: str): bool {
    for _, op in WeakOps {
        if kind == op {
            ret true
        }
    }
    ret false
}

// Reports whether kind is string literal.
fn IsStr(k: str): bool { ret k != "" && (k[0] == '"' || IsRawStr(k)) }

// Reports whether kind is raw string literal.
fn IsRawStr(k: str): bool { ret k != "" && k[0] == '`' }

// Reports whether kind is rune literal.
// Literal value can be byte or rune.
fn IsRune(k: str): bool { ret k != "" && k[0] == '\'' }

// Reports whether kind is nil literal.
fn IsNil(k: str): bool { ret k == TokenKind.Nil }

// Reports whether kind is boolean literal.
fn IsBool(k: str): bool { ret k == TokenKind.True || k == TokenKind.False }

// Reports whether kind is float.
fn IsFloat(k: str): bool {
    if strings::HasPrefix(k, "0x") {
        ret strings::ContainsAny(k, ".pP")
    }
    ret strings::ContainsAny(k, ".eE")
}

// Reports whether kind is numeric.
fn IsNum(k: str): bool {
    if k == "" {
        ret false
    }

    let b = k[0]
    ret b == '.' || ('0' <= b && b <= '9')
}

// Reports whether kind is literal.
fn IsLit(k: str): bool {
    ret IsNum(k) || IsStr(k) || IsRune(k) || IsNil(k) || IsBool(k)
}

// Reports whether identifier is ignore.
fn IsIgnoreIdent(ident: str): bool { ret ident == Ident.Ignore }

// Reports whether identifier is anonymous.
fn IsAnonIdent(ident: str): bool { ret ident == Ident.Anon }

// Reports whether rune is punctuation.
fn IsPunct(r: rune): bool {
    for _, cr in Puncts {
        if r == cr {
            ret true
        }
    }
    ret false
}

// Reports wheter byte is whitespace.
fn IsSpace(r: rune): bool {
    for _, cr in Spaces {
        if r == cr {
            ret true
        }
    }
    ret false
}

// Reports whether rune is letter.
fn IsLetter(r: rune): bool {
    ret unicode::IsLetter(r)
}

// Reports whether firs rune of string is allowed
// to first rune for identifier.
fn IsIdentRune(s: str): bool {
    if s == "" {
        ret false
    }
    if s[0] != '_' {
        let (r, _) = utf8::DecodeRuneStr(s)
        if !IsLetter(r) {
            ret false
        }
    }
    ret true
}

// Reports whether byte is decimal sequence.
fn IsDecimal(b: byte): bool { ret '0' <= b && b <= '9' }

// Reports whether byte is binary sequence.
fn IsBinary(b: byte): bool { ret b == '0' || b == '1' }

// Reports whether byte is octal sequence.
fn IsOctal(b: byte): bool { ret '0' <= b && b <= '7' }

// Reports whether byte is hexadecimal sequence.
fn IsHex(b: byte): bool {
    match {
    | '0' <= b && b <= '9':
        ret true
    | 'a' <= b && b <= 'f':
        ret true
    | 'A' <= b && b <= 'F':
        ret true
    |:
        ret false
    }
}

// Reports given token id is allow for
// assignment left-expression or not.
fn IsAssign(id: TokenId): bool {
    ret (id == TokenId.Ident ||
        id == TokenId.Cpp ||
        id == TokenId.Let ||
        id == TokenId.Dot ||
        id == TokenId.Self ||
        id == TokenId.Range ||
        id == TokenId.Op)
}

// Reports whether operator kind is postfix operator.
fn IsPostfixOp(kind: str): bool {
    for _, op in PostfixOps {
        if kind == op {
            ret true
        }
    }
    ret false
}

// Reports whether operator kind is assignment operator.
fn IsAssignOp(kind: str): bool {
    if IsPostfixOp(kind) {
        ret true
    }
    for _, op in AssignOps {
        if kind == op {
            ret true
        }
    }
    ret false
}