// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::build::{Log}
use unicode for std::unicode
use utf8 for std::unicode::utf8
use strings for std::strings

// Punctuations.
pub static PUNCTS: [...]rune = [
    '!',
    '#',
    '$',
    ',',
    '.',
    '\'',
    '"',
    ':',
    ';',
    '<',
    '>',
    '=',
    '?',
    '-',
    '+',
    '*',
    '(',
    ')',
    '[',
    ']',
    '{',
    '}',
    '%',
    '&',
    '/',
    '\\',
    '@',
    '^',
    '_',
    '`',
    '|',
    '~',
    'Â¦',
]

// Space characters.
pub static SPACES: [...]rune = [
    ' ',
    '\t',
    '\v',
    '\r',
    '\n',
]

// Kind list of unary operators.
pub static UNARY_OPS: [...]TokenKind = [
    TokenKind.Minus,
    TokenKind.Plus,
    TokenKind.Caret,
    TokenKind.Excl,
    TokenKind.Star,
    TokenKind.Amper,
]

// Kind list of binary operators.
pub static BIN_OPS: [...]TokenKind = [
    TokenKind.Plus,
    TokenKind.Minus,
    TokenKind.Star,
    TokenKind.Solidus,
    TokenKind.Percent,
    TokenKind.Amper,
    TokenKind.Vline,
    TokenKind.Caret,
    TokenKind.Lt,
    TokenKind.Gt,
    TokenKind.DblAmper,
    TokenKind.DblVline,
]

// Kind list of weak operators.
// These operators are weak, can used as part of expression.
pub static WEAK_OPS: [...]TokenKind = [
    TokenKind.TripleDot,
    TokenKind.Colon,
]

// List of postfix operators.
pub static POSTFIX_OPS: [...]TokenKind = [
    TokenKind.DblPlus,
    TokenKind.DblMinus,
]

// List of assign operators.
pub static ASSING_OPS: [...]TokenKind = [
    TokenKind.Eq,
    TokenKind.PlusEq,
    TokenKind.MinusEq,
    TokenKind.SolidusEq,
    TokenKind.StarEq,
    TokenKind.PercentEq,
    TokenKind.RshiftEq,
    TokenKind.LshiftEq,
    TokenKind.VlineEq,
    TokenKind.AmperEq,
    TokenKind.CaretEq,
]

// Special identifiers.
pub enum Ident: str {
    Ignore = "_",         // Ignore
    Anon = "<anonymous>", // Anonymous
}

// Token identities.
pub enum TokenId: uint {
    Na,
    Prim,
    Ident,
    Range,
    Ret,
    Semicolon,
    Lit,
    Op,
    Comma,
    Const,
    Type,
    Colon,
    For,
    Break,
    Cont,
    In,
    If,
    Else,
    Comment,
    Use,
    Dot,
    Pub,
    Goto,
    DblColon,
    Enum,
    Struct,
    Co,
    Match,
    Self,
    Trait,
    Impl,
    Cpp,
    Fall,
    Fn,
    Let,
    Unsafe,
    Mut,
    Defer,
    Static,
    Hash,
    Error,
}

// Token kinds.
pub enum TokenKind: str {
    DblColon = "::",
    Colon = ":",
    Semicolon = ";",
    Comma = ",",
    TripleDot = "...",
    Dot = ".",
    PlusEq = "+=",
    MinusEq = "-=",
    StarEq = "*=",
    SolidusEq = "/=",
    PercentEq = "%=",
    LshiftEq = "<<=",
    RshiftEq = ">>=",
    CaretEq = "^=",
    AmperEq = "&=",
    VlineEq = "|=",
    Eqs = "==",
    NotEq = "!=",
    GreatEq = ">=",
    LessEq = "<=",
    DblAmper = "&&",
    DblVline = "||",
    Lshift = "<<",
    Rshift = ">>",
    DblPlus = "++",
    DblMinus = "--",
    Plus = "+",
    Minus = "-",
    Star = "*",
    Solidus = "/",
    Percent = "%",
    Amper = "&",
    Vline = "|",
    Caret = "^",
    Excl = "!",
    Lt = "<",
    Gt = ">",
    Eq = "=",
    LnComment = "//",
    RangLComment = "/*",
    RangRComment = "*/",
    LParent = "(",
    RParent = ")",
    LBracket = "[",
    RBracket = "]",
    LBrace = "{",
    RBrace = "}",
    Hash = "#",
    I8 = "i8",
    I16 = "i16",
    I32 = "i32",
    I64 = "i64",
    U8 = "u8",
    U16 = "u16",
    U32 = "u32",
    U64 = "u64",
    F32 = "f32",
    F64 = "f64",
    Uint = "uint",
    Int = "int",
    Uintptr = "uintptr",
    Bool = "bool",
    Str = "str",
    Any = "any",
    True = "true",
    False = "false",
    Nil = "nil",
    Const = "const",
    Ret = "ret",
    Type = "type",
    For = "for",
    Break = "break",
    Cont = "continue",
    In = "in",
    If = "if",
    Else = "else",
    Use = "use",
    Pub = "pub",
    Goto = "goto",
    Enum = "enum",
    Struct = "struct",
    Co = "co",
    Match = "match",
    Self = "self",
    Trait = "trait",
    Impl = "impl",
    Cpp = "cpp",
    Fall = "fall",
    Fn = "fn",
    Let = "let",
    Unsafe = "unsafe",
    Mut = "mut",
    Defer = "defer",
    Static = "static",
    Error = "error",
}

// Token is lexer token.
pub struct Token {
    pub file:   &File
    pub row:    int
    pub column: int
    pub kind:   str
    pub id:     TokenId
}

impl Token {
    // Returns operator precedence of token.
    // Returns 0 if token is not operator or
    // invalid operator for operator precedence.
    //
    // Accepts assignment tokens (like equals [=]) as precedenced operator
    // to handle expression assignments.
    pub fn prec(self): byte {
        if self.id != TokenId.Op {
            ret 0
        }

        match self.kind {
        | TokenKind.Star
        | TokenKind.Percent
        | TokenKind.Solidus
        | TokenKind.Rshift
        | TokenKind.Lshift
        | TokenKind.Amper:
            ret 5

        | TokenKind.Plus
        | TokenKind.Minus
        | TokenKind.Vline
        | TokenKind.Caret:
            ret 4

        | TokenKind.Eqs
        | TokenKind.NotEq
        | TokenKind.Eq
        | TokenKind.Lt
        | TokenKind.LessEq
        | TokenKind.Gt
        | TokenKind.GreatEq:
            ret 3

        | TokenKind.DblAmper:
            ret 2

        | TokenKind.DblVline:
            ret 1

        |:
            ret 0
        }
    }
}

// Reports whether kind is unary operator.
pub fn is_unary_op(kind: str): bool {
    for _, op in UNARY_OPS {
        if kind == op {
            ret true
        }
    }

    ret false
}

// Reports whether kind is binary operator.
pub fn is_bin_op(kind: str): bool {
    for _, op in BIN_OPS {
        if kind == op {
            ret true
        }
    }

    ret false
}

// Reports whether kind is weak operator.
pub fn is_weak_op(kind: str): bool {
    for _, op in WEAK_OPS {
        if kind == op {
            ret true
        }
    }

    ret false
}

// Reports whether kind is string literal.
pub fn is_str(k: str): bool { ret k != "" && (k[0] == '"' || is_raw_str(k)) }
// Reports whether kind is raw string literal.
pub fn is_raw_str(k: str): bool { ret k != "" && k[0] == '`' }
// Reports whether kind is rune literal.
// Literal value can be byte or rune.
pub fn is_rune(k: str): bool { ret k != "" && k[0] == '\'' }
// Reports whether kind is nil literal.
pub fn is_nil(k: str): bool { ret k == TokenKind.Nil }
// Reports whether kind is boolean literal.
pub fn is_bool(k: str): bool { ret k == TokenKind.True || k == TokenKind.False }

// Reports whether kind is float.
pub fn is_float(k: str): bool {
    if strings::has_prefix(k, "0x") {
        ret strings::contains_any(k, ".pP")
    }
    ret strings::contains_any(k, ".eE")
}

// Reports whether kind is numeric.
pub fn is_num(k: str): bool {
    if k == "" {
        ret false
    }

    let b = k[0]
    ret b == '.' || ('0' <= b && b <= '9')
}

// Reports whether kind is literal.
pub fn is_lit(k: str): bool {
    ret is_num(k) || is_str(k) || is_rune(k) || is_nil(k) || is_bool(k)
}

// Reports whether identifier is ignore.
pub fn is_ignore_ident(ident: str): bool { ret ident == Ident.Ignore }
// Reports whether identifier is anonymous.
pub fn is_anon_ident(ident: str): bool { ret ident == Ident.Anon }

// Reports whether rune is punctuation.
pub fn is_punct(r: rune): bool {
    for _, cr in PUNCTS {
        if r == cr {
            ret true
        }
    }

    ret false
}

// Reports wheter byte is whitespace.
pub fn is_space(r: rune): bool {
    for _, cr in SPACES {
        if r == cr {
            ret true
        }
    }

    ret false
}

// Reports whether rune is letter.
pub fn is_letter(r: rune): bool {
    ret unicode::is_letter(r)
}

// Reports whether firs rune of string is allowed
// to first rune for identifier.
pub fn is_ident_rune(s: str): bool {
    if s == "" {
        ret false
    }

    if s[0] != '_' {
        let (r, _) = utf8::decode_rune_str(s)
        if !is_letter(r) {
            ret false
        }
    }

    ret true
}

// Reports whether byte is decimal sequence.
pub fn is_decimal(b: byte): bool { ret '0' <= b && b <= '9' }
// Reports whether byte is binary sequence.
pub fn is_binary(b: byte): bool { ret b == '0' || b == '1' }
// Reports whether byte is octal sequence.
pub fn is_octal(b: byte): bool { ret '0' <= b && b <= '7' }

// Reports whether byte is hexadecimal sequence.
pub fn is_hex(b: byte): bool {
    match {
    | '0' <= b && b <= '9': ret true
    | 'a' <= b && b <= 'f': ret true
    | 'A' <= b && b <= 'F': ret true
    |:
        ret false
    }
}

// Reports given token id is allow for
// assignment left-expression or not.
pub fn is_assign(id: TokenId): bool {
    ret (
        id == TokenId.Ident ||
        id == TokenId.Cpp ||
        id == TokenId.Let ||
        id == TokenId.Dot ||
        id == TokenId.Self ||
        id == TokenId.Range ||
        id == TokenId.Op
    )
}

// Reports whether operator kind is postfix operator.
pub fn is_postfix_op(kind: str): bool {
    for _, op in POSTFIX_OPS {
        if kind == op {
            ret true
        }
    }

    ret false
}

// Reports whether operator kind is assignment operator.
pub fn is_assign_op(kind: str): bool {
    if is_postfix_op(kind) {
        ret true
    }

    for _, op in ASSING_OPS {
        if kind == op {
            ret true
        }
    }

    ret false
}
