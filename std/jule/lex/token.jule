// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use unicode for std::unicode
use utf8 for std::unicode::utf8
use strings for std::strings

// Punctuations.
static Puncts: [...]rune = [
	'!',
	'#',
	'$',
	',',
	'.',
	'\'',
	'"',
	':',
	';',
	'<',
	'>',
	'=',
	'?',
	'-',
	'+',
	'*',
	'(',
	')',
	'[',
	']',
	'{',
	'}',
	'%',
	'&',
	'/',
	'\\',
	'@',
	'^',
	'_',
	'`',
	'|',
	'~',
	'Â¦',
]

// Space characters.
static Spaces: [...]rune = [
	' ',
	'\t',
	'\v',
	'\r',
	'\n',
]

// Kind list of unary operators.
static UnaryOps: [...]TokenId = [
	TokenId.Minus,
	TokenId.Plus,
	TokenId.Caret,
	TokenId.Excl,
	TokenId.Star,
	TokenId.Amper,
]

// Kind list of binary operators.
static BinOps: [...]TokenId = [
	TokenId.Plus,
	TokenId.Minus,
	TokenId.Star,
	TokenId.Solidus,
	TokenId.Percent,
	TokenId.Amper,
	TokenId.Vline,
	TokenId.Caret,
	TokenId.Shl,
	TokenId.Shr,
	TokenId.Lt,
	TokenId.Gt,
	TokenId.LtEq,
	TokenId.GtEq,
	TokenId.DblAmper,
	TokenId.DblVline,
	TokenId.Eqs,
	TokenId.NotEq,
]

// Kind list of weak operators.
// These operators are weak, can used as part of expression.
static WeakOps: [...]TokenId = [
	TokenId.TripleDot,
	TokenId.Colon,
]

// List of postfix operators.
static PostfixOps: [...]TokenId = [
	TokenId.DblPlus,
	TokenId.DblMinus,
]

// List of assign operators.
static AssignOps: [...]TokenId = [
	TokenId.Eq,
	TokenId.PlusEq,
	TokenId.MinusEq,
	TokenId.SolidusEq,
	TokenId.StarEq,
	TokenId.PercentEq,
	TokenId.ShrEq,
	TokenId.ShlEq,
	TokenId.VlineEq,
	TokenId.AmperEq,
	TokenId.CaretEq,
]

// Special identifiers.
enum Ident: str {
	Ignore: "_",         // Ignore
	Anon: "<anonymous>", // Anonymous
}

// Token identities.
enum TokenId: uint {
	Na,
	Ident,
	Ret,
	Semicolon,
	Lit,
	Comma,
	Const,
	Type,
	Colon,
	For,
	Break,
	Cont,
	In,
	If,
	Else,
	Comment,
	Use,
	Dot,
	Goto,
	DblColon,
	Enum,
	Struct,
	Co,
	Match,
	Self,
	Trait,
	Impl,
	Cpp,
	Fall,
	Fn,
	Let,
	Unsafe,
	Mut,
	Defer,
	Static,
	Hash,
	Error,
	Map,
	ColonEq,
	TripleDot,
	PlusEq,
	MinusEq,
	StarEq,
	SolidusEq,
	PercentEq,
	ShlEq,
	ShrEq,
	CaretEq,
	AmperEq,
	VlineEq,
	Eqs,
	NotEq,
	GtEq,
	LtEq,
	DblAmper,
	DblVline,
	Shl,
	Shr,
	DblPlus,
	DblMinus,
	Plus,
	Minus,
	Star,
	Solidus,
	Percent,
	Amper,
	Vline,
	Caret,
	Excl,
	Lt,
	Gt,
	Eq,
	LBrace,
	RBrace,
	LParent,
	RParent,
	LBracket,
	RBracket,
}

// Token kinds.
enum TokenKind: str {
	DblColon: "::",
	Colon: ":",
	Semicolon: ";",
	Comma: ",",
	TripleDot: "...",
	Dot: ".",
	PlusEq: "+=",
	MinusEq: "-=",
	StarEq: "*=",
	SolidusEq: "/=",
	PercentEq: "%=",
	ShlEq: "<<=",
	ShrEq: ">>=",
	CaretEq: "^=",
	AmperEq: "&=",
	VlineEq: "|=",
	Eqs: "==",
	NotEq: "!=",
	GtEq: ">=",
	LtEq: "<=",
	DblAmper: "&&",
	DblVline: "||",
	Shl: "<<",
	Shr: ">>",
	DblPlus: "++",
	DblMinus: "--",
	Plus: "+",
	Minus: "-",
	Star: "*",
	Solidus: "/",
	Percent: "%",
	Amper: "&",
	Vline: "|",
	Caret: "^",
	Excl: "!",
	Lt: "<",
	Gt: ">",
	Eq: "=",
	ColonEq: ":=",
	LnComment: "//",
	RangLComment: "/*",
	RangRComment: "*/",
	LParent: "(",
	RParent: ")",
	LBracket: "[",
	RBracket: "]",
	LBrace: "{",
	RBrace: "}",
	Hash: "#",
	Const: "const",
	Ret: "ret",
	Type: "type",
	For: "for",
	Break: "break",
	Cont: "continue",
	In: "in",
	If: "if",
	Else: "else",
	Use: "use",
	Goto: "goto",
	Enum: "enum",
	Struct: "struct",
	Co: "co",
	Match: "match",
	Self: "self",
	Trait: "trait",
	Impl: "impl",
	Cpp: "cpp",
	Fall: "fall",
	Fn: "fn",
	Let: "let",
	Unsafe: "unsafe",
	Mut: "mut",
	Defer: "defer",
	Static: "static",
	Error: "error",
	Map: "map",
}

// Token is lexer token.
struct Token {
	File:   &File
	Row:    int
	Column: int
	Kind:   str
	Id:     TokenId
}

impl Token {
	// Returns operator precedence of token.
	// Returns 0 if token is not operator or
	// invalid operator for operator precedence.
	//
	// Accepts assignment tokens (like equals [=]) as precedenced operator
	// to handle expression assignments.
	fn Prec(self): byte {
		match self.Id {
		| TokenId.Star
		| TokenId.Percent
		| TokenId.Solidus
		| TokenId.Shr
		| TokenId.Shl
		| TokenId.Amper:
			ret 5
		| TokenId.Plus
		| TokenId.Minus
		| TokenId.Vline
		| TokenId.Caret:
			ret 4
		| TokenId.Eqs
		| TokenId.NotEq
		| TokenId.Eq
		| TokenId.Lt
		| TokenId.LtEq
		| TokenId.Gt
		| TokenId.GtEq:
			ret 3
		| TokenId.DblAmper:
			ret 2
		| TokenId.DblVline:
			ret 1
		|:
			ret 0
		}
	}
}

// Reports whether kind is unary operator.
fn IsUnaryOp(id: TokenId): bool {
	for _, op in UnaryOps {
		if id == op {
			ret true
		}
	}
	ret false
}

// Reports whether kind is binary operator.
fn IsBinOp(id: TokenId): bool {
	for _, op in BinOps {
		if id == op {
			ret true
		}
	}
	ret false
}

// Reports whether kind is weak operator.
fn IsWeakOp(id: TokenId): bool {
	for _, op in WeakOps {
		if id == op {
			ret true
		}
	}
	ret false
}

// Reports whether kind is string literal.
fn IsStr(k: str): bool { ret k != "" && (k[0] == '"' || IsRawStr(k)) }

// Reports whether kind is raw string literal.
fn IsRawStr(k: str): bool { ret k != "" && k[0] == '`' }

// Reports whether kind is rune literal.
// Literal value can be byte or rune.
fn IsRune(k: str): bool { ret k != "" && k[0] == '\'' }

// Reports whether kind is nil literal.
fn IsNil(k: str): bool { ret k == "nil" }

// Reports whether kind is boolean literal.
fn IsBool(k: str): bool { ret k == "true" || k == "false" }

// Reports whether kind is float.
fn IsFloat(k: str): bool {
	if strings::HasPrefix(k, "0x") {
		ret strings::ContainsAny(k, ".pP")
	}
	ret strings::ContainsAny(k, ".eE")
}

// Reports whether kind is numeric.
fn IsNum(k: str): bool {
	if k == "" {
		ret false
	}

	b := k[0]
	ret b == '.' || ('0' <= b && b <= '9')
}

// Reports whether kind is literal.
fn IsLit(k: str): bool {
	ret IsNum(k) || IsStr(k) || IsRune(k) || IsNil(k) || IsBool(k)
}

// Reports whether identifier is ignore.
fn IsIgnoreIdent(ident: str): bool { ret ident == Ident.Ignore }

// Reports whether identifier is anonymous.
fn IsAnonIdent(ident: str): bool { ret ident == Ident.Anon }

// Reports whether rune is punctuation.
fn IsPunct(r: rune): bool {
	for _, cr in Puncts {
		if r == cr {
			ret true
		}
	}
	ret false
}

// Reports wheter byte is whitespace.
fn IsSpace(r: rune): bool {
	for _, cr in Spaces {
		if r == cr {
			ret true
		}
	}
	ret false
}

// Reports whether rune is letter.
fn IsLetter(r: rune): bool {
	ret unicode::IsLetter(r)
}

// Reports whether firs rune of string is allowed
// to first rune for identifier.
fn IsIdentRune(s: str): bool {
	if s == "" {
		ret false
	}
	if s[0] != '_' {
		r, _ := utf8::DecodeRuneStr(s)
		if !IsLetter(r) {
			ret false
		}
	}
	ret true
}

// Reports whether byte is decimal sequence.
fn IsDecimal(b: byte): bool { ret '0' <= b && b <= '9' }

// Reports whether byte is binary sequence.
fn IsBinary(b: byte): bool { ret b == '0' || b == '1' }

// Reports whether byte is octal sequence.
fn IsOctal(b: byte): bool { ret '0' <= b && b <= '7' }

// Reports whether byte is hexadecimal sequence.
fn IsHex(b: byte): bool {
	match {
	| '0' <= b && b <= '9':
		ret true
	| 'a' <= b && b <= 'f':
		ret true
	| 'A' <= b && b <= 'F':
		ret true
	|:
		ret false
	}
}

// Reports given token id is allow for
// assignment left-expression or not.
fn IsAssign(id: TokenId): bool {
	ret (id == TokenId.Ident ||
		id == TokenId.Cpp ||
		id == TokenId.Let ||
		id == TokenId.Mut ||
		id == TokenId.Self ||
		id == TokenId.LParent ||
		id == TokenId.Star ||
		id == TokenId.Amper)
}

// Reports whether operator kind is postfix operator.
fn IsPostfixOp(id: TokenId): bool {
	for _, op in PostfixOps {
		if id == op {
			ret true
		}
	}
	ret false
}

// Reports whether operator kind is assignment operator.
fn IsAssignOp(id: TokenId): bool {
	if IsPostfixOp(id) {
		ret true
	}
	for _, op in AssignOps {
		if id == op {
			ret true
		}
	}
	ret false
}