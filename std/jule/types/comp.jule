// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether i8 is compatible with kind.
pub fn IsI8Compatible(mut k: str): bool {
    ret k == TypeKind.I8
}

// Reports whether i16 is compatible with kind.
pub fn IsI16Compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16
}

// Reports whether i32 is compatible with kind.
pub fn IsI32Compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32 ||
        k == TypeKind.U8 // Byte
}

// Reports whether i64 is compatible with kind.
pub fn IsI64Compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32 ||
        k == TypeKind.I64
}

// Reports whether u8 is compatible with kind.
pub fn IsU8Compatible(mut k: str): bool {
    ret k == TypeKind.U8
}

// Reports whether u16 is compatible with kind.
pub fn IsU16Compatible(mut k: str): bool {
    ret k == TypeKind.U8 || k == TypeKind.U16
}

// Reports whether u32 is compatible with kind.
pub fn IsU32Compatible(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32
}

// Reports whether u64 is compatible with kind.
pub fn IsU64Compatible(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32 ||
        k == TypeKind.U64
}

// Reports whether f32 is compatible with kind.
pub fn IsF32Compatible(mut k: str): bool {
    ret k == TypeKind.F32
}

// Reports whether f64 is compatible with kind.
pub fn IsF64Compatible(mut k: str): bool {
    ret k == TypeKind.F64
}

// Reports types are compatible.
// k1 is the destination type, k2 is the source type.
// Return false if k2 is unsupported kind.
pub fn TypesAreCompatible(mut k1: str, k2: str): bool {
    match k1 {
    | TypeKind.Any:
        ret true
    | TypeKind.Int:
        ret k2 == TypeKind.Int
    | TypeKind.Uintptr:
        ret k2 == TypeKind.Uintptr
    | TypeKind.Uint:
        ret k2 == TypeKind.Uint
    | TypeKind.I8:
        ret IsI8Compatible(k2)
    | TypeKind.I16:
        ret IsI16Compatible(k2)
    | TypeKind.I32:
        ret IsI32Compatible(k2)
    | TypeKind.I64:
        ret IsI64Compatible(k2)
    | TypeKind.U8:
        ret IsU8Compatible(k2)
    | TypeKind.U16:
        ret IsU16Compatible(k2)
    | TypeKind.U32:
        ret IsU32Compatible(k2)
    | TypeKind.U64:
        ret IsU64Compatible(k2)
    | TypeKind.F32:
        ret IsF32Compatible(k2)
    | TypeKind.F64:
        ret IsF64Compatible(k2)
    | TypeKind.Bool:
        ret k2 == TypeKind.Bool
    | TypeKind.Str:
        ret k2 == TypeKind.Str
    |:
        ret false
    }
}

// Reports whether i16 is greater than given kind.
pub fn IsI16Greater(mut k: str): bool {
    ret k == TypeKind.I8
}

// Reports whether i32 is greater than given kind.
pub fn IsI32Greater(mut k: str): bool {
    ret k == TypeKind.I8 || k == TypeKind.I16
}

// Reports whether i64 is greater than given kind.
pub fn IsI64Greater(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32
}

// Reports whether u16 is greater than given kind.
pub fn IsU16Greater(mut k: str): bool {
    ret k == TypeKind.U8
}

// Reports whether u32 is greater than given kind.
pub fn IsU32Greater(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16
}

// Reports whether u64 is greater than given kind.
pub fn IsU64Greater(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32
}

// Reports whether f32 is greater than given kind.
pub fn IsF32Greater(k: str): bool {
    ret k != TypeKind.F64
}

// Reports whether f64 is greater than given kind.
pub fn IsF64Greater(k: str): bool {
    ret true
}

// Reports whether k1 kind greater than k2 kind.
pub fn IsGreater(mut k1: str, k2: str): bool {
    match k1 {
    | TypeKind.Int:
        ret IsSigInt(k2)
    | TypeKind.Uint:
        ret IsUnsigInt(k2)
    | TypeKind.Uintptr:
        ret IsUnsigInt(k2)
    | TypeKind.I16:
        ret IsI16Greater(k2)
    | TypeKind.I32:
        ret IsI32Greater(k2)
    | TypeKind.I64:
        ret IsI64Greater(k2)
    | TypeKind.U16:
        ret IsU16Greater(k2)
    | TypeKind.U32:
        ret IsU32Greater(k2)
    | TypeKind.U64:
        ret IsU64Greater(k2)
    | TypeKind.F32:
        ret IsF32Greater(k2)
    | TypeKind.F64:
        ret IsF64Greater(k2)
    | TypeKind.Any:
        ret true
    |:
        ret false
    }
}