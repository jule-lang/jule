// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether i16 is greater than given kind.
fn IsI16Greater(mut k: str): bool {
	ret k == TypeKind.I8
}

// Reports whether i32 is greater than given kind.
fn IsI32Greater(mut k: str): bool {
	ret k == TypeKind.I8 || k == TypeKind.I16
}

// Reports whether i64 is greater than given kind.
fn IsI64Greater(mut k: str): bool {
	ret k == TypeKind.I8 ||
		k == TypeKind.I16 ||
		k == TypeKind.I32
}

// Reports whether u16 is greater than given kind.
fn IsU16Greater(mut k: str): bool {
	ret k == TypeKind.U8
}

// Reports whether u32 is greater than given kind.
fn IsU32Greater(mut k: str): bool {
	ret k == TypeKind.U8 ||
		k == TypeKind.U16
}

// Reports whether u64 is greater than given kind.
fn IsU64Greater(mut k: str): bool {
	ret k == TypeKind.U8 ||
		k == TypeKind.U16 ||
		k == TypeKind.U32
}

// Reports whether f32 is greater than given kind.
fn IsF32Greater(k: str): bool {
	ret k != TypeKind.F64
}

// Reports whether f64 is greater than given kind.
fn IsF64Greater(k: str): bool {
	ret true
}

// Reports whether k1 kind greater than k2 kind.
fn IsGreater(mut k1: str, k2: str): bool {
	match k1 {
	| TypeKind.Int:
		ret IsSigInt(k2)
	| TypeKind.Uint:
		ret IsUnsigInt(k2)
	| TypeKind.Uintptr:
		ret IsUnsigInt(k2)
	| TypeKind.I16:
		ret IsI16Greater(k2)
	| TypeKind.I32:
		ret IsI32Greater(k2)
	| TypeKind.I64:
		ret IsI64Greater(k2)
	| TypeKind.U16:
		ret IsU16Greater(k2)
	| TypeKind.U32:
		ret IsU32Greater(k2)
	| TypeKind.U64:
		ret IsU64Greater(k2)
	| TypeKind.F32:
		ret IsF32Greater(k2)
	| TypeKind.F64:
		ret IsF64Greater(k2)
	| TypeKind.Any:
		ret true
	|:
		ret false
	}
}