// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Reports whether i8 is compatible with kind.
pub fn is_i8_compatible(mut k: str): bool {
    ret k == TypeKind.I8
}

// Reports whether i16 is compatible with kind.
pub fn is_i16_compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16
}

// Reports whether i32 is compatible with kind.
pub fn is_i32_compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32 ||
        k == TypeKind.U8 // Byte
}

// Reports whether i64 is compatible with kind.
pub fn is_i64_compatible(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32 ||
        k == TypeKind.I64
}

// Reports whether u8 is compatible with kind.
pub fn is_u8_compatible(mut k: str): bool {
    ret k == TypeKind.U8
}

// Reports whether u16 is compatible with kind.
pub fn is_u16_compatible(mut k: str): bool {
    ret k == TypeKind.U8 || k == TypeKind.U16
}

// Reports whether u32 is compatible with kind.
pub fn is_u32_compatible(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32
}

// Reports whether u64 is compatible with kind.
pub fn is_u64_compatible(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32 ||
        k == TypeKind.U64
}

// Reports whether f32 is compatible with kind.
pub fn is_f32_compatible(mut k: str): bool {
    ret k == TypeKind.F32
}

// Reports whether f64 is compatible with kind.
pub fn is_f64_compatible(mut k: str): bool {
    ret k == TypeKind.F64
}

// Reports types are compatible.
// k1 is the destination type, k2 is the source type.
// Return false if k2 is unsupported kind.
pub fn types_are_compatible(mut k1: str, k2: str): bool {
    match k1 {
    | TypeKind.Any:
        ret true
    | TypeKind.Int:
        ret k2 == TypeKind.Int
    | TypeKind.Uintptr:
        ret k2 == TypeKind.Uintptr
    | TypeKind.Uint:
        ret k2 == TypeKind.Uint
    | TypeKind.I8:
        ret is_i8_compatible(k2)
    | TypeKind.I16:
        ret is_i16_compatible(k2)
    | TypeKind.I32:
        ret is_i32_compatible(k2)
    | TypeKind.I64:
        ret is_i64_compatible(k2)
    | TypeKind.U8:
        ret is_u8_compatible(k2)
    | TypeKind.U16:
        ret is_u16_compatible(k2)
    | TypeKind.U32:
        ret is_u32_compatible(k2)
    | TypeKind.U64:
        ret is_u64_compatible(k2)
    | TypeKind.F32:
        ret is_f32_compatible(k2)
    | TypeKind.F64:
        ret is_f64_compatible(k2)
    | TypeKind.Bool:
        ret k2 == TypeKind.Bool
    | TypeKind.Str:
        ret k2 == TypeKind.Str
    |:  ret false
    }
}

// Reports whether i16 is greater than given kind.
pub fn is_i16_greater(mut k: str): bool {
    ret k == TypeKind.I8
}

// Reports whether i32 is greater than given kind.
pub fn is_i32_greater(mut k: str): bool {
    ret k == TypeKind.I8 || k == TypeKind.I16
}

// Reports whether i64 is greater than given kind.
pub fn is_i64_greater(mut k: str): bool {
    ret k == TypeKind.I8 ||
        k == TypeKind.I16 ||
        k == TypeKind.I32
}

// Reports whether u16 is greater than given kind.
pub fn is_u16_greater(mut k: str): bool {
    ret k == TypeKind.U8
}

// Reports whether u32 is greater than given kind.
pub fn is_u32_greater(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16
}

// Reports whether u64 is greater than given kind.
pub fn is_u64_greater(mut k: str): bool {
    ret k == TypeKind.U8 ||
        k == TypeKind.U16 ||
        k == TypeKind.U32
}

// Reports whether f32 is greater than given kind.
pub fn is_f32_greater(k: str): bool {
    ret k != TypeKind.F64
}

// Reports whether f64 is greater than given kind.
pub fn is_f64_greater(k: str): bool {
    ret true
}

// Reports whether k1 kind greater than k2 kind.
pub fn is_greater(mut k1: str, k2: str): bool {
    match k1 {
    | TypeKind.Int:
        ret is_sig_int(k2)
    | TypeKind.Uint:
        ret is_unsig_int(k2)
    | TypeKind.Uintptr:
        ret is_unsig_int(k2)
    | TypeKind.I16:
        ret is_i16_greater(k2)
    | TypeKind.I32:
        ret is_i32_greater(k2)
    | TypeKind.I64:
        ret is_i64_greater(k2)
    | TypeKind.U16:
        ret is_u16_greater(k2)
    | TypeKind.U32:
        ret is_u32_greater(k2)
    | TypeKind.U64:
        ret is_u64_greater(k2)
    | TypeKind.F32:
        ret is_f32_greater(k2)
    | TypeKind.F64:
        ret is_f64_greater(k2)
    | TypeKind.Any:
        ret true
    |:
        ret false
    }
}
