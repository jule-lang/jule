// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use conv for std::conv
use strings for std::strings
use build for std::jule::build

type bitChecker: fn(v: str, base: int, bit: int): bool

// Bit-size of target architecture.
// Possible values are: 32, and 64.
static BitSize = 0

// Signed integer kind of target architecture.
// Is equavalent to "int", but specific bit-sized integer kind.
static SysInt = ""

// Unsigned integer kind of target architecture.
// Is equavalent to "uint" and "uintptr", but specific bit-sized integer kind.
static SysUint = ""

fn checkBit(v: str, bit: int, checker: bitChecker): bool {
    match {
    | v == "":
        ret false
    | v.len == 1:
        ret true
    | strings::HasPrefix(v, "0x"):
        ret checker(v[2:], 1 << 4, bit) // Hexadecimal
    | strings::HasPrefix(v, "0b"):
        ret checker(v[2:], 1 << 1, bit) // Binary
    | strings::HasPrefix(v, "0o"):
        ret checker(v[2:], 1 << 3, bit) // Octal
    | v[0] == '0':
        ret checker(v[1:], 1 << 3, bit) // Octal
    |:
        ret checker(v, 1 << 3 + 2, bit) // Decimal
    }
}

// Returns kind's bit-specific kind if bit-specific like int, uint, and uintptr.
// Returns kind if not bit-specific.
// Bit-size is determined by runtime.
fn RealKindOf(kind: str): str {
    match kind {
    | TypeKind.Int:
        ret SysInt
    | TypeKind.Uint
    | TypeKind.Uintptr:
        ret SysUint
    |:
        ret kind
    }
}

// Returns kind's bit-size.
// Returns -1 if kind is not numeric.
fn BitsizeOf(k: str): int {
    match k {
    | TypeKind.I8
    | TypeKind.U8:
        ret 1 << 3
    | TypeKind.I16
    | TypeKind.U16:
        ret 1 << 4
    | TypeKind.I32
    | TypeKind.U32
    | TypeKind.F32:
        ret 1 << 5
    | TypeKind.I64
    | TypeKind.U64
    | TypeKind.F64:
        ret 1 << 6
    | TypeKind.Uint
    | TypeKind.Int:
        ret BitSize
    |:
        ret -1
    }
}

// Returns signed integer kind by bit-size.
// Possible bit-sizes are: 8, 16, 32, and 64.
// Returns empty string if bits is invalid.
fn IntFromBits(bits: int): str {
    match bits {
    | 1 << 3:
        ret TypeKind.I8
    | 1 << 4:
        ret TypeKind.I16
    | 1 << 5:
        ret TypeKind.I32
    | 1 << 6:
        ret TypeKind.I64
    |:
        ret ""
    }
}

// Returns unsigned integer kind by bit-size.
// Possible bit-sizes are: 8, 16, 32, and 64.
// Returns empty string if bits is invalid.
fn UintFromBits(bits: int): str {
    match bits {
    | 1 << 3:
        ret TypeKind.U8
    | 1 << 4:
        ret TypeKind.U16
    | 1 << 5:
        ret TypeKind.U32
    | 1 << 6:
        ret TypeKind.U64
    |:
        ret ""
    }
}

// Returns floating-point kind by bit-size.
// Possible bit-sizes are: 32, and 64.
// Returns empty string if bits is invalid.
fn FloatFromBits(bits: int): str {
    match bits {
    | 1 << 5:
        ret TypeKind.F32
    | 1 << 6:
        ret TypeKind.F64
    |:
        ret ""
    }
}

// Reports whether signed integer literal is compatible given bit-size.
fn CheckBitInt(v: str, bit: int): bool {
    ret checkBit(v, bit, fn(v: str, base: int, bit: int): bool {
        _ = conv::ParseInt(v, base, bit) else { ret false }
        ret true
    })
}

// Reports whether unsigned integer literal is compatible given bit-size.
fn CheckBitUint(v: str, bit: int): bool {
    ret checkBit(v, bit, fn(v: str, base: int, bit: int): bool {
        _ = conv::ParseUint(v, base, bit) else { ret false }
        ret true
    })
}

// Reports whether float literal is compatible given bit-size.
fn CheckBitFloat(val: str, bit: int): bool {
    _ = conv::ParseFloat(val, bit) else { ret false }
    ret true
}

// Reports minimum bit-size of given floating-point.
//
// Possible values are:
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitsizeOfFloat(x: f64): int {
    match {
    | MinF32 <= x && x <= MaxF32:
        ret 1 << 5
    |:
        ret 1 << 6
    }
}

// Reports minimum bit-size of given signed integer.
//
// Possible values are:
//  - 8 for 8-bit
//  - 16 for 16-bit
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitsizeOfInt(x: i64): int {
    match {
    | MinI8 <= x && x <= MaxI8:
        ret 1 << 3
    | MinI16 <= x && x <= MaxI16:
        ret 1 << 4
    | MinI32 <= x && x <= MaxI32:
        ret 1 << 5
    |:
        ret 1 << 6
    }
}

// Reports minimum bit-size of given unsigned integer.
//
// Possible values are:
//  - 8 for 8-bit
//  - 16 for 16-bit
//  - 32 for 32-bit
//  - 64 for 64-bit
fn BitsizeOfUint(x: u64): int {
    match {
    | x <= MaxU8:
        ret 1 << 3
    | x <= MaxU16:
        ret 1 << 4
    | x <= MaxU32:
        ret 1 << 5
    |:
        ret 1 << 6
    }
}

// Updates platform-specific informations by target.
// If you will update target configuration, you should call this function.
// In other words, new configurations is not applied for types.
fn UpdateTarget() {
    unsafe {
        match build::Arch {
        | "arm64" | "amd64":
            *(&BitSize) = 1 << 6
            *(&SysInt) = TypeKind.I64
            *(&SysUint) = TypeKind.U64
        | "i386":
            *(&BitSize) = 1 << 5
            *(&SysInt) = TypeKind.I32
            *(&SysUint) = TypeKind.U32
        }
    }
}

fn init() {
    UpdateTarget()
}