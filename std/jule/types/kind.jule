// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds of primitive types.
// These kinds are must match keyword form itself.
enum Kind: str {
	I8: "i8",           // Kind of signed 8-bit integer
	I16: "i16",         // Kind of signed 16-bit integer
	I32: "i32",         // Kind of signed 32-bit integer
	I64: "i64",         // Kind of signed 64-bit integer
	U8: "u8",           // Kind of unsigned 8-bit integer
	U16: "u16",         // Kind of unsigned 16-bit integer
	U32: "u32",         // Kind of unsigned 32-bit integer
	U64: "u64",         // Kind of unsigned 64-bit integer
	F32: "f32",         // Kind of 32-bit floating-point
	F64: "f64",         // Kind of 64-bit floating-point
	Uint: "uint",       // Kind of system specific bit-size unsigned integer
	Int: "int",         // Kind of system specific bit-size signed integer
	Uintptr: "uintptr", // Kind of system specific bit-size unsigned integer
	Bool: "bool",       // Kind of boolean
	Str: "str",         // Kind of string
	Any: "any",         // Kind of any type
}

// Reports whether kind is signed integer.
fn IsSigInt(mut k: str): bool {
	ret k == Kind.I8 ||
		k == Kind.I16 ||
		k == Kind.I32 ||
		k == Kind.I64 ||
		k == Kind.Int
}

// Reports kind is unsigned integer.
fn IsUnsigInt(mut k: str): bool {
	ret k == Kind.U8 ||
		k == Kind.U16 ||
		k == Kind.U32 ||
		k == Kind.U64 ||
		k == Kind.Uint ||
		k == Kind.Uintptr
}

// Reports whether kind is signed/unsigned integer.
fn IsInt(k: str): bool {
	ret IsSigInt(k) || IsUnsigInt(k)
}

// Reports whether kind is float.
fn IsFloat(k: str): bool {
	ret k == Kind.F32 || k == Kind.F64
}

// Reports whether kind is numeric.
fn IsNum(k: str): bool {
	ret IsInt(k) || IsFloat(k)
}

// Reports whether kind is signed numeric.
fn IsSigNum(k: str): bool {
	ret IsSigInt(k) || IsFloat(k)
}