// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// List of all possible std::runtime::OS values:
enum runtimeOs: str {
    Windows: "windows",
    Darwin: "darwin",
    Linux: "linux",
}

// List of all possible std::runtime::ARCH values:
enum runtimeArch: str {
    I386: "i386",
    Amd64: "amd64",
    Arm64: "arm64",
}

// Operating Systems for file annotation kind.
pub enum DistOs: str {
    Windows: "windows",
    Linux: "linux",
    Darwin: "darwin",
    Unix: "unix",
}

// Architectures for file annotation kind.
pub enum DistArch: str {
    I386: "i386",
    Arm64: "arm64",
    Amd64: "amd64",
    X32: "x32",
    X64: "x64",
}

// Reports whether os is windows.
pub fn IsWindows(os: str): bool { ret os == runtimeOs.Windows }

// Reports whether os is darwin.
pub fn IsDarwin(os: str): bool { ret os == runtimeOs.Darwin }

// Reports whether os is linux.
pub fn IsLinux(os: str): bool { ret os == runtimeOs.Linux }

// Reports whether architecture is intel 386.
pub fn IsI386(arch: str): bool { ret arch == runtimeArch.I386 }

// Reports whether architecture is amd64.
pub fn IsAmd64(arch: str): bool { ret arch == runtimeArch.Amd64 }

// Reports whether architecture is arm64.
pub fn IsArm64(arch: str): bool { ret arch == runtimeArch.Arm64 }

// Reports whether os is unix.
pub fn IsUnix(os: str): bool { ret IsDarwin(os) || IsLinux(os) }

// Reports whether architecture is 32-bit.
pub fn Is32Bit(arch: str): bool { ret IsI386(arch) }

// Reports whether architecture is 64-bit.
pub fn Is64Bit(arch: str): bool { ret IsAmd64(arch) || IsArm64(arch) }