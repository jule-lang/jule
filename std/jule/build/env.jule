// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use env for std::env
use process for std::process

// Environment Variables.
// Initialized by initializer function.
pub static PATH_STDLIB = "" // Path of standard library.
pub static PATH_EXEC = ""   // Path of executable file's directory.
pub static PATH_WD = ""     // Path of working directory.
pub static PATH_API = ""    // Path of main API header file.

fn init() {
    let mut path = process::executable()
    if path == "" {
        panic("std::jule::build: executable file cannot found")
    }

    let pwd = env::working_dir() else {
        panic("std::jule::build: working directory path cannot found")
        ret // To avoid assignment error.
    }

    let path_exec = path::dir(path)

    // Go to parent directory.
    path = path::join(path_exec, "..")

    // Break immutability to assign paths.
    unsafe {
        *(&PATH_WD) = pwd
        *(&PATH_EXEC) = path_exec
        *(&PATH_STDLIB) = path::join(path, STDLIB)
        
        *(&PATH_API) = path::join(PATH_EXEC, "..")
        *(&PATH_API) = path::join(PATH_API, "api")
        *(&PATH_API) = path::join(PATH_API, "jule.hpp")
    }
}
