// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use env for std::env
use process for std::process

// Environment Variables.
// Initialized by initializer function.
pub static PathStdlib = "" // Path of standard library.
pub static PathExec = ""   // Path of executable file's directory.
pub static PathWd = ""     // Path of working directory.
pub static PathApi = ""    // Path of main API header file.

// Target operating system.
// Setted to runtime operating system by default.
pub static mut Os = env::Os

// Target architecture.
// Setted to runtime architecture by default.
pub static mut Arch = env::Arch

fn init() {
    let mut path = process::Executable()
    if path == "" {
        panic("std::jule::build: executable file cannot found")
    }

    // Break immutability to assign paths.
    unsafe {
        *(&PathWd) = env::WorkingDir() else {
            panic("std::jule::build: working directory path cannot found")
            ret // To avoid assignment error.
        }
        *(&PathExec) = path::Dir(path)
        *(&PathStdlib) = path::Join(PathExec, "..", Stdlib)
        *(&PathApi) = path::Join(PathExec, "..", "api", "jule.hpp")
    }
}