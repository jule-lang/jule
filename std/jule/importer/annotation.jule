// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/fs/path"
use "std/jule/build"
use "std/strings"

fn checkOs(arg: str): (ok: bool, exist: bool) {
	ok = false
	exist = true
	match arg {
	| build::DistOS.Windows:
		ok = build::IsWindows(build::OS)
	| build::DistOS.Darwin:
		ok = build::IsDarwin(build::OS)
	| build::DistOS.Linux:
		ok = build::IsLinux(build::OS)
	| build::DistOS.Unix:
		ok = build::IsUnix(build::OS)
	|:
		ok = true
		exist = false
	}
	ret
}

fn checkArch(arg: str): (ok: bool, exist: bool) {
	ok = false
	exist = true
	match arg {
	| build::DistArch.I386:
		ok = build::IsI386(build::Arch)
	| build::DistArch.Amd64:
		ok = build::IsAmd64(build::Arch)
	| build::DistArch.Arm64:
		ok = build::IsArm64(build::Arch)
	| build::DistArch.X64:
		ok = build::Is64Bit(build::Arch)
	| build::DistArch.X32:
		ok = build::Is32Bit(build::Arch)
	|:
		ok = true
		exist = false
	}
	ret
}

// Reports whether file path passes file annotation by current system.
fn isPassFileAnnotation(mut p: str): bool {
	p = path::Base(p)
	n := len(p)
	p = p[:n-len(path::Ext(p))]

	// a1 is the second annotation.
	// Should be architecture annotation if exist annotation 2 (aka a2),
	// can operating system or architecture annotation if not.
	mut a1 := ""
	// a2 is first filter.
	// Should be operating system filter if exist and valid annotation.
	mut a2 := ""

	// Annotation 1
	mut i := strings::FindLastByte(p, '_')
	if i == -1 {
		// Check file name directly if not exist any _ character.
		mut ok, mut exist := checkOs(p)
		if exist {
			ret ok
		}
		ok, exist = checkArch(p)
		ret !exist || ok
	}
	if i+1 >= n {
		ret true
	}
	a1 = p[i+1:]

	p = p[:i]

	// Annotation 2
	i = strings::FindLastByte(p, '_')
	if i != -1 {
		a2 = p[i+1:]
	}

	if a2 == "" {
		mut ok, mut exist := checkOs(a1)
		if exist {
			ret ok
		}
		ok, exist = checkArch(a1)
		ret !exist || ok
	}

	mut ok, mut exist := checkArch(a1)
	if exist {
		if !ok {
			ret false
		}
		ok, exist = checkOs(a2)
		ret !exist || ok
	}

	// a1 is not architecture, for this reason bad couple pattern.
	// Accept as one pattern, so a1 can be platform.
	ok, exist = checkOs(a1)
	ret !exist || ok
}