// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{OFlag, FsError, DirEntry, File, Directory}
use std::fs::path::{Join}
use std::jule::ast::{Ast}
use build for std::jule::build::{
    Directive,
    LogKind,
    Log,
    Ext,
}
use mod for std::jule::internal::mod
use std::jule::lex::{
    LexMode,
    Token,
    NewFileSet,
    Lex,
}
use std::jule::parser::{ParseFile}
use std::jule::sema::{
    Importer,
    ImportInfo,
}
use process for std::process
use strings for std::strings

// Read buffer by file path.
fn readBuff(path: str): []byte {
    ret File.Read(path) else {
        outln("error: file cannot read")
        const ErrorExitCode = 1
        process::Exit(ErrorExitCode)
        ret nil // Avoid error
    }
}

// Make compiler error, just text.
// Not includes row, column, and etc. informations.
fn flatCompilerErr(text: str): Log {
    ret Log{
        Kind: LogKind.Error,
        Text: text,
    }
}

// Default importer for the reference Jule compiler.
pub struct JuleImporter {
    mods: []str
    mod:  str
    pkgs: []&ImportInfo
    vars: []str
}

impl JuleImporter {
    // Returns new importer instance by compile information.
    pub static fn New(info: CompileInfo): &JuleImporter {
        let mut imp = &JuleImporter{
            mods: [build::PathStdlib],
        }
        initVars(imp.vars, info)
        ret imp
    }

    // Returns all imported packages.
    // The return value is mutable reference to internal buffer.
    // You should be care about using that copy.
    pub fn AllPackages(mut self): []&ImportInfo {
        ret self.pkgs
    }
}

impl Importer for JuleImporter {
    pub fn SetModPath(mut self, path: str) {
        self.mod = path
    }

    pub fn GetModPath(self): str {
        ret self.mod
    }

    pub fn ModById(self, id: int): str {
        ret self.mods[id]
    }

    pub fn GetImport(mut self, path: str): &ImportInfo {
        for (_, mut p) in self.pkgs {
            if p.Path == path {
                ret p
            }
        }
        ret nil
    }

    pub fn ImportPackage(mut self, path: str, update_mod: bool): ([]&Ast, []Log) {
        let mut dirents = Directory.Read(path) else {
            ret nil, [flatCompilerErr("connot read package directory: " + path)]
        }

        if update_mod {
            let newMod = mod::FindModuleFileDeep(path)
            if newMod != self.mod {
                self.mod = newMod
                let mut errs = mod::CheckModuleFile(self.mod)
                if errs.len != 0 {
                    ret nil, errs
                }
            }
        }

        let mut asts = make([]&Ast, 0, dirents.len)
        for _, dirent in dirents {
            // Skip directories, and non-jule files.
            if dirent.Stat.IsDir() || !strings::HasSuffix(dirent.Name, build::Ext) {
                continue
            }

            let _path = Join(path, dirent.Name)
            let mut file = NewFileSet(_path)
            file.Fill(readBuff(file.Path))
            let mut errors = Lex(file, LexMode.Standard)
            if errors.len > 0 {
                ret nil, errors
            }

            let mut finfo = ParseFile(file)
            if finfo.Errors.len > 0 {
                ret nil, finfo.Errors
            }

            // Skip this source file if file annotation is failed.
            if !isPassFileAnnotation(dirent.Name) {
                continue
            }

            let (r, mut logs) = self.isPassBuildDirectives(finfo.Ast)
            if logs.len > 0 {
                ret nil, logs
            }

            // Skip file if can't pass build directives.
            if !r {
                continue
            }

            asts = append(asts, finfo.Ast)
        }

        ret asts, nil
    }

    pub fn Imported(mut self, mut imp: &ImportInfo) {
        // Already imported?
        for _, p in self.pkgs {
            if p.CppLinked == imp.CppLinked && p.LinkPath == imp.LinkPath {
                ret
            }
        }

        if self.mod.len != 0 {
            for i, mod in self.mods {
                if self.mod == mod {
                    imp.ModId = i
                    goto setted
                }
            }
            imp.ModId = self.mods.len
            self.mods = append(self.mods, self.mod)
        setted:
        }

        self.pkgs = append(self.pkgs, imp)
    }
}

impl JuleImporter {
    // Reports whether file passes build directives.
    fn isPassBuildDirectives(mut self, mut &file: &Ast): (bool, []Log) {
        for (_, mut td) in file.TopDirectives {
            if td.Tag.Kind != Directive.Build {
                continue
            }
            let mut de = directiveEval{
                d: td,
                vars: self.vars,
            }
            let result = de.eval()
            if de.logs.len > 0 {
                ret false, de.logs
            }
            if !result {
                ret false, nil
            }
        }
        ret true, nil
    }
}