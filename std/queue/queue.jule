// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use dynar for std::internal::dynar

const growFactor = 2

// FIFO data structure which is commonly called as queue.
//
// Deallocates itself when destroyed.
//
// Queues aren't use shared allocation between themselves.
// Allocates new space and copies (not deep copy) items into space.
pub struct Queue[T] {
    mem: dynar::Dynar[T]
}

impl Queue {
    // Returns new queue instance with capacity.
    pub static fn New(cap: int): Queue[T] {
        let mut queue = Queue[T]{
            mem: dynar::Dynar[T].New(),
        }
        if cap > 0 {
            queue.resize(cap)
        }
        ret queue
    }

    fn resize(mut self, n: int) {
        let ok = self.mem.Resize(n)
        if !ok {
            panic("Queue[T]: heap reallocation failed")
        }
    }

    // Deallocate heap.
    pub fn Dispose(mut self) {
        self.mem.Dispose()
    }

    // Set capacity to length.
    // Removes additional capacity that waiting to use.
    // Allocates new memory to cut additional capacity.
    pub fn Fit(mut self) {
        if self.Len() != self.Cap() {
            self.resize(self.Len())
        }
    }

    // Returns length of queue.
    // Another meaning is count of elements.
    pub fn Len(self): int {
        ret self.mem.Buff.len
    }

    // Returns capacity of queue.
    // Another meaning is additional redy-to-use allocation size.
    pub fn Cap(self): int {
        ret self.mem.Buff.cap
    }

    // Reports whether queue is empty.
    pub fn Empty(self): bool {
        ret self.Len() == 0
    }

    // Removes all elements.
    // Does not deallocates buffer, keeps capacity.
    pub fn Clear(mut self) {
        self.mem.Buff.len = 0
    }

    // Pushes element to rear of the queue.
    pub fn Push(mut self, mut t: T) {
        if self.Len() >= self.Cap() {
            self.resize((self.Cap() * growFactor) + 1)
        }
        unsafe {
            self.mem.Buff.heap[self.Len()] = t
        }
        self.mem.Buff.len++
    }

    // Returns element front of the queue, then removes front element.
    // Panics if queue is empty.
    pub fn Pop(mut self): T {
        if self.Empty() {
            panic("Queue[T]: pop with zero-length queue")
        }
        let mut t = unsafe { self.mem.Buff.heap[0] }
        if self.Len() != 1 {
            self.mem.ShiftLeft(1, self.Len(), 1)
        }
        self.mem.Buff.len--
        ret t
    }

    // Returns front element of the queue.
    // Panics if queue is empty.
    pub fn Front(mut self): T {
        if self.Empty() {
            panic("Queue[T]: front with zero-length queue")
        }
        unsafe {
            ret self.mem.Buff.heap[0]
        }
    }

    // Returns slice that contains elements of queue.
    // Slice is not mutable reference to internal buffer, but can effect internal
    // buffer if T is mutable type.
    // Appends elements in front-to-rear order.
    pub fn Slice(mut self): []T {
        if self.Empty() {
            ret nil
        }
        let mut s = make([]T, 0, self.Len())
        let mut i = self.mem.Buff.heap
        let j = self.mem.Buff.heap + self.Len()
        for i < j; i++ {
            s = append(s, unsafe { *i })
        }
        ret s
    }
}