// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::internal::dynar::{Dynar}

const growFactor = 2

// Wrapper for dynamic array.
// Uses capacity for performance.
// Grows capacity if necessary.
// But always allocates more for future pushes.
// The elements are stored contiguously.
//
// Deallocates itself when destroyed.
//
// Vectors aren't use shared allocation between themselves.
// Allocates new space and copies (not deep copy) items into space.
struct Vec[T] {
    mem: Dynar[T]
}

impl Vec {
    // Allocate new vector with capacity.
    static fn New(cap: int): Vec[T] {
        let mut vec = Vec[T]{
            mem: Dynar[T].New(),
        }
        if cap > 0 {
            vec.resize(cap)
        }
        ret vec
    }

    fn resize(mut self, n: int) {
        let ok = self.mem.Resize(n)
        if !ok {
            panic("Vec[T]: heap reallocation failed")
        }
    }

    fn calcGrow(self, delta: int): int {
        let t = self.Len() + delta
        ret t * growFactor
    }

    fn reviewSize(mut self, delta: int) {
        if self.Len()+delta > self.Cap() {
            self.resize(self.calcGrow(delta))
        }
    }

    // Deallocate heap.
    fn Dispose(mut self) {
        self.mem.Dispose()
    }

    // Set capacity to length.
    // Removes additional capacity that waiting to use.
    // Allocates new memory to cut additional capacity.
    fn Fit(mut self) {
        if self.Len() != self.Cap() {
            self.resize(self.Len())
        }
    }

    // Returns length.
    fn Len(self): int {
        ret self.mem.Buff.len
    }

    // Returns capacity.
    fn Cap(self): int {
        ret self.mem.Buff.cap
    }

    // Sets length.
    // Sets length to zero if n < 0.
    // Don't set length if n >= length of vector.
    fn SetLen(mut self, n: int) {
        if n < 0 {
            self.mem.Buff.len = 0
            ret
        }
        if n >= self.Len() {
            ret
        }
        self.mem.Buff.len = n
    }

    // Returns item by index.
    fn At(mut self, i: int): T {
        if i < 0 || i >= self.Len() {
            panic("Vec[T].At: out of range")
        }
        unsafe {
            ret self.mem.Buff.heap[i]
        }
    }

    // Set element by index.
    fn Set(mut self, i: int, mut item: T) {
        if i < 0 || i >= self.Len() {
            panic("Vec[T].Set: out of range")
        }
        unsafe {
            self.mem.Buff.heap[i] = item
        }
    }

    // Removes all elements.
    // Does not deallocates buffer, keeps capacity.
    fn Clear(mut self) {
        self.mem.Buff.len = 0
    }

    // Push item to end of heap.
    fn Push(mut self, mut item: T) {
        if self.Len() >= self.Cap() {
            self.resize((self.Cap() * growFactor) + 1)
        }
        unsafe {
            self.mem.Buff.heap[self.Len()] = item
        }
        self.mem.Buff.len++
    }

    // Push item to front of heap.
    fn PushFront(mut self, mut item: T) {
        if self.Len() >= self.Cap() {
            self.resize((self.Cap() * growFactor) + 1)
        }
        self.mem.ShiftRight(0, 1)
        unsafe {
            self.mem.Buff.heap[0] = item
        }
        self.mem.Buff.len++
    }

    // Push items to end of heap.
    fn Append(mut self, mut items: ...T) {
        if len(items) == 0 {
            ret
        }
        self.reviewSize(len(items))
        self.mem.Set(self.Len(), &items[0], len(items))
        self.mem.Buff.len += len(items)
    }

    // Merge items to end of heap.
    fn Merge(mut self, mut vec: Vec[T]) {
        if vec.Len() == 0 {
            ret
        }
        self.reviewSize(vec.Len())
        self.mem.Set(self.Len(), vec.mem.Begin(), vec.Len())
        self.mem.Buff.len += vec.Len()
    }

    // Merge items to front of heap.
    fn MergeFront(mut self, mut vec: Vec[T]) {
        if vec.Len() == 0 {
            ret
        }
        self.reviewSize(vec.Len())
        self.mem.ShiftRight(0, vec.Len())
        self.mem.Set(0, vec.mem.Begin(), vec.Len())
        self.mem.Buff.len += vec.Len()
    }

    // Remove range from heap.
    fn RemoveRange(mut self, start: int, n: int) {
        if n < 1 {
            ret
        }
        if start < -1 {
            panic("Vec[T].RemoveRange: removing starts at negative index")
        }
        if start >= self.Len() {
            panic("Vec[T].RemoveRange: removing starts at out of range")
        }
        if self.Len()-start-n < 0 {
            panic("Vec[T].RemoveRange: removing continues at out of range")
        }
        self.mem.ShiftLeft(start + n, self.Len(), n)
        self.mem.Buff.len -= n
    }

    // Insert item by index.
    fn Insert(mut self, i: int, mut item: T) {
        if i < 0 {
            panic("Vec[T].Insert: insertion starts at negative index")
        }
        if i > self.Len() {
            panic("Vec[T].Insert: insertion starts at out of range")
        }
        if self.Len() >= self.Cap() {
            self.resize((self.Cap() * growFactor) + 1)
        }
        self.mem.ShiftRight(i, 1)
        unsafe {
            self.mem.Buff.heap[i] = item
        }
        self.mem.Buff.len++
    }

    // Slice between indexes except end position.
    // Not clones internal buffer, so slice vector can effect
    // to internal buffer if type is mutable.
    fn Slice(mut self, start: int, end: int): Vec[T] {
        if start < 0 {
            panic("Vec[T].Slice: slicing starts at negative index")
        }
        if start > self.Len() {
            panic("Vec[T].Slice: slicing starts at out of range")
        }
        if end > self.Len() {
            panic("Vec[T].Slice: slicing ends at out of range")
        }
        if end < 0 {
            panic("Vec[T].Slice: slicing ends at negative index")
        }
        if start > end {
            panic("Vec[T].Slice: start point < end point")
        }
        if start == end {
            ret Vec[T].New(0)
        }
        let mut vec = Vec[T].New(end - start)
        vec.mem.Set(0, self.mem.Begin() + start, vec.Cap())
        vec.mem.Buff.len = vec.Cap()
        ret vec
    }
}