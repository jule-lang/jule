// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::internal::dynar::{Dynar}

const GROW_FACTOR = 2

// Wrapper for dynamic array.
// Uses capacity for performance.
// Grows capacity if necessary.
// But always allocates more for future pushes.
// The elements are stored contiguously.
//
// Deallocates itself when destroyed.
//
// Vectors aren't use shared allocation between themselves.
// Allocates new space and copies (not deep copy) items into space.
pub struct Vec[T] {
    mem: Dynar[T]
}

impl Vec {
    // Allocate new vector with capacity.
    pub static fn new(cap: int): Vec[T] {
        let mut vec = Vec[T]{
            mem: Dynar[T].new(),
        }
        if cap > 0 {
            vec.resize(cap)
        }
        ret vec
    }

    fn resize(mut self, n: int) {
        let ok = self.mem.resize(n)
        if !ok {
            panic("Vec[T]: heap reallocation failed")
        }
    }

    fn calc_grow(self, delta: int): int {
        let t = self.len() + delta
        ret t * GROW_FACTOR
    }

    fn review_size(mut self, delta: int) {
        if self.len()+delta > self.cap() {
            self.resize(self.calc_grow(delta))
        }
    }

    // Deallocate heap.
    pub fn dispose(mut self) {
        self.mem.dispose()
    }

    // Set capacity to length.
    // Removes additional capacity that waiting to use.
    // Allocates new memory to cut additional capacity.
    pub fn fit(mut self) {
        if self.len() != self.cap() {
            self.resize(self.len())
        }
    }

    // Returns length.
    pub fn len(self): int {
        ret self.mem.buff.len
    }

    // Returns capacity.
    pub fn cap(self): int {
        ret self.mem.buff.cap
    }

    // Sets length.
    // Sets length to zero if n < 0.
    // Don't set length if n >= length of vector.
    pub fn set_len(mut self, n: int) {
        if n < 0 {
            self.mem.buff.len = 0
            ret
        }
        if n >= self.len() {
            ret
        }
        self.mem.buff.len = n
    }

    // Returns item by index.
    pub fn at(mut self, i: int): T {
        if i < 0 || i >= self.len() {
            panic("Vec[T].at: out of range")
        }
        unsafe {
            ret self.mem.buff.heap[i]
        }
    }

    // Set element by index.
    pub fn set(mut self, i: int, mut item: T) {
        if i < 0 || i >= self.len() {
            panic("Vec[T].set: out of range")
        }
        unsafe {
            self.mem.buff.heap[i] = item
        }
    }

    // Removes all elements.
    // Does not deallocates buffer, keeps capacity.
    pub fn clear(mut self) {
        self.mem.buff.len = 0
    }

    // Push item to end of heap.
    pub fn push(mut self, mut item: T) {
        if self.len() >= self.cap() {
            self.resize((self.cap() * GROW_FACTOR) + 1)
        }
        unsafe {
            self.mem.buff.heap[self.len()] = item
        }
        self.mem.buff.len++
    }

    // Push item to front of heap.
    pub fn push_front(mut self, mut item: T) {
        if self.len() >= self.cap() {
            self.resize((self.cap() * GROW_FACTOR) + 1)
        }
        self.mem.shift_right(0, 1)
        unsafe {
            self.mem.buff.heap[0] = item
        }
        self.mem.buff.len++
    }

    // Push items to end of heap.
    pub fn append(mut self, mut items: ...T) {
        if items.len == 0 {
            ret
        }
        self.review_size(items.len)
        self.mem.set(self.len(), &items[0], items.len)
        self.mem.buff.len += items.len
    }

    // Merge items to end of heap.
    pub fn merge(mut self, mut vec: Vec[T]) {
        if vec.len() == 0 {
            ret
        }
        self.review_size(vec.len())
        self.mem.set(self.len(), vec.mem.begin(), vec.len())
        self.mem.buff.len += vec.len()
    }

    // Merge items to front of heap.
    pub fn merge_front(mut self, mut vec: Vec[T]) {
        if vec.len() == 0 {
            ret
        }
        self.review_size(vec.len())
        self.mem.shift_right(0, vec.len())
        self.mem.set(0, vec.mem.begin(), vec.len())
        self.mem.buff.len += vec.len()
    }

    // Remove range from heap.
    pub fn remove_range(mut self, start: int, n: int) {
        if n < 1 {
            ret
        }
        if start < -1 {
            panic("Vec[T].remove_range: removing starts at negative index")
        }
        if start >= self.len() {
            panic("Vec[T].remove_range: removing starts at out of range")
        }
        if self.len()-start-n < 0 {
            panic("Vec[T].remove_range: removing continues at out of range")
        }
        self.mem.shift_left(start + n, self.len(), n)
        self.mem.buff.len -= n
    }

    // Insert item by index.
    pub fn insert(mut self, i: int, mut item: T) {
        if i < 0 {
            panic("Vec[T].insert: insertion starts at negative index")
        }
        if i > self.len() {
            panic("Vec[T].insert: insertion starts at out of range")
        }
        if self.len() >= self.cap() {
            self.resize((self.cap() * GROW_FACTOR) + 1)
        }
        self.mem.shift_right(i, 1)
        unsafe {
            self.mem.buff.heap[i] = item
        }
        self.mem.buff.len++
    }

    // Slice between indexes except end position.
    // Not clones internal buffer, so slice vector can effect
    // to internal buffer if type is mutable.
    pub fn slice(mut self, start: int, end: int): Vec[T] {
        if start < 0 {
            panic("Vec[T].slice: slicing starts at negative index")
        }
        if start > self.len() {
            panic("Vec[T].slice: slicing starts at out of range")
        }
        if end > self.len() {
            panic("Vec[T].slice: slicing ends at out of range")
        }
        if end < 0 {
            panic("Vec[T].slice: slicing ends at negative index")
        }
        if start > end {
            panic("Vec[T].slice: start point < end point")
        }
        if start == end {
            ret Vec[T].new(0)
        }
        let mut vec = Vec[T].new(end - start)
        vec.mem.set(0, self.mem.begin() + start, vec.cap())
        vec.mem.buff.len = vec.cap()
        ret vec
    }
}