// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use strings for std::strings

// Table for standard base32 encoding.
static T32 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"

// Standard byte for padding.
const PADDING_BYTE = '='

// Encodes source bytes with standard base32 table.
// Returns encoded base32 bytes if success, nil slice if not.
// Adds padding if pad is true.
pub fn encode(src: []byte, pad: bool): []byte {
        let mut dest: []byte = nil
        let mut bits: u64 = 0
        let mut buffer: u32 = 0
        let p = &T32[0]
        for _, b in src {
            buffer <<= 8
            buffer += b
            bits += 8
            for bits >= 5 {
                dest = append(dest, unsafe { p[(buffer >> (bits - 5)) & 0x3F] })
                buffer &= ^(0x1F << (bits - 5));
                bits -= 5
            }
        }

        match src.len%5 {
        | 1:
            buffer <<= 2
            dest = append(dest, T32[buffer & 0x1F])
            if pad {
                dest = append(dest, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE)
            }

        | 2:
            buffer <<= 4
            dest = append(dest, T32[buffer & 0x1F])
            if pad {
                dest = append(dest, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE)
            }

        | 3:
            buffer <<= 1
            if pad {
                dest = append(dest, T32[buffer & 0x1F])
            }
            dest = append(dest, PADDING_BYTE, PADDING_BYTE, PADDING_BYTE)

        | 4:
            buffer <<= 3
            if pad {
                dest = append(dest, T32[buffer & 0x1F])
            }
            dest = append(dest, PADDING_BYTE)
        }
        ret dest
}

// Decodes source bytes with standard base32 table.
// Returns decoded bytes if success, nil slice if not.
// Detects padding by default, no required padding specification.
pub fn decode(src: []byte): []byte {
    let mut dest: []byte = nil
    let mut buffer: u32 = 0
    let mut bits: u64 = 0
    for _, b in src {
        let i = strings::find_byte(T32, b)
        let mut group: u32 = if i != -1 { u32(31 - (31 - i)) } else { 0 }
        buffer <<= 5
        bits += 5
        buffer += group
        if bits >= 8 {
            if b != PADDING_BYTE {
                dest = append(dest, byte(buffer >> (bits - 8)))
            }
            buffer &= ^(0xFF << (bits - 8))
            bits -= 8
        }
    }
    ret dest
}
