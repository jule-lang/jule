// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#build test

use std::testing::{T}

static encodeDecodeMap = [
    // RFC 4648 examples.
    [[]byte(""), []byte("")],
    [[]byte("f"), []byte("MY======")],
    [[]byte("fo"), []byte("MZXQ====")],
    [[]byte("foo"), []byte("MZXW6===")],
    [[]byte("foob"), []byte("MZXW6YQ=")],
    [[]byte("fooba"), []byte("MZXW6YTB")],
    [[]byte("foobar"), []byte("MZXW6YTBOI======")],

    // Wikipedia examples, converted to base32.
    [[]byte("sure."), []byte("ON2XEZJO")],
    [[]byte("sure"), []byte("ON2XEZI=")],
    [[]byte("sur"), []byte("ON2XE===")],
    [[]byte("su"), []byte("ON2Q====")],
    [[]byte("leasure."), []byte("NRSWC43VOJSS4===")],
    [[]byte("easure."), []byte("MVQXG5LSMUXA====")],
    [[]byte("asure."), []byte("MFZXK4TFFY======")],
]

#test
fn testEncode(t: &T) {
    for _, case in encodeDecodeMap {
        let r = Encode(nil, case[0], true)
        let d = case[1]
        if len(r) != len(d) {
            t.Fail()
            continue
        }
        for i in r {
            if r[i] != d[i] {
                t.Fail()
                break
            }
        }
    }
}

#test
fn testDecode(t: &T) {
    for _, case in encodeDecodeMap {
        let r = Decode(nil, case[1])
        let d = case[0]
        if len(r) != len(d) {
            t.Fail()
            continue
        }
        for i in r {
            if r[i] != d[i] {
                t.Fail()
                break
            }
        }
    }
}