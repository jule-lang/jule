// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.20/src/encoding/csv/writer.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use io for std::io
use strings for std::strings
use unicode for std::unicode
use utf8 for std::unicode::utf8

// A Writer writes records using CSV encoding.
//
// As returned by new, a Writer writes records terminated by a
// newline and uses ',' as the field delimiter. The exported fields can be
// changed to customize the details before the first call to write or write_all.
//
// Comma is the field delimiter.
//
// If use_crlf is true, the Writer ends each output line with \r\n instead of \n.
//
// The writes of individual records are buffered.
// After all data has been written, the client should call the
// Flush method to guarantee all data has been forwarded to
// the underlying io::Writer.
pub struct Writer {
    pub comma:    rune // Field delimiter (set to ',' by new)
    pub use_crlf: bool // True to use \r\n as the line terminator

    w: io::Writer
}

impl Writer {
    // Returns new Writer instance that writes w.
    pub static fn new(mut w: io::Writer): &Writer {
        ret &Writer{
            comma: ',',
            w:     w,
        }
    }

    // Reports whether our field must be enclosed in quotes.
    // Fields with a comma, fields with a quote or newline, and
    // fields which start with a space must be enclosed in quotes.
    // We used to quote empty strings, but we do not anymore (as of Go 1.4).
    // The two representations should be equivalent, but Postgres distinguishes
    // quoted vs non-quoted empty string during database imports, and it has
    // an option to force the quoted behavior for non-quoted CSV but it has
    // no option to force the non-quoted behavior for quoted CSV, making
    // CSV with quoted empty strings strictly less useful.
    // Not quoting the empty string also makes this package match the behavior
    // of Microsoft Excel and Google Drive.
    // For Postgres, quote the data terminating string `\.`.
    fn field_needs_quotes(self, field: str): bool {
        if field.len == 0 {
            ret false
        }
    
        if field == `\.` {
            ret true
        }
    
        if self.comma < utf8::RUNE_SELF {
            let mut i = 0
            for i < field.len; i++ {
                let c = field[i]
                if c == '\n' || c == '\r' || c == '"' || c == byte(self.comma) {
                    ret true
                }
            }
        } else {
            if strings::contains_rune(field, self.comma) || strings::contains_any(field, "\"\r\n") {
                ret true
            }
        }
    
        let (r1, _) = utf8::decode_rune_str(field)
        ret unicode::is_space(r1)
    }

    // Writes a single CSV record along with any necessary quoting.
    // A record is a slice of strings with each string being one field.
    // Forwards any exceptional from internal objects such as writer.
    pub fn write(mut self, record: []str)! {
        if !valid_delim(self.comma) {
            error(CsvError.InvalidDelim)
        }
        for (n, mut field) in record {
            if n > 0 {
                let mut bytes = make([]byte, utf8::UTF_MAX)
                let n = utf8::encode_rune(bytes, self.comma)
                self.w.write(bytes[:n]) else { error(error) }
            }

            // If we don't have to have a quoted field then just
            // write out the field and continue to the next field.
            if !self.field_needs_quotes(field) {
                self.w.write([]byte(field)) else { error(error) }
                continue
            }

            self.w.write(['"']) else { error(error) }

            for field.len > 0 {
                // Search for special characters.
                let mut i = strings::find_any(field, "\"\r\n")
                if i < 0 {
                    i = field.len
                }
    
                // Copy verbatim everything before the special character.
                self.w.write([]byte(field[:i])) else { error(error) }
                field = field[i:]
    
                // Encode the special character.
                if field.len > 0 {
                    match field[0] {
                    | '"':
                        self.w.write(['"', '"']) else { error(error) }

                    | '\r':
                        if !self.use_crlf {
                            self.w.write(['\r']) else { error(error) }
                        }

                    | '\n':
                        if self.use_crlf {
                            self.w.write(['\r', '\n']) else { error(error) }
                        } else {
                            self.w.write(['\n']) else { error(error) }
                        }
                    }
                    field = field[1:]
                }
            }
    
            self.w.write(['"']) else { error(error) }
        }
        if self.use_crlf {
            self.w.write(['\r', '\n']) else { error(error) }
        } else {
            self.w.write(['\n']) else { error(error) }
        }
    }

    // Writes multiple CSV records using [Writer.write] and
    // forwording any exception.
    pub fn write_all(mut self, records: [][]str)! {
        for _, record in records {
            self.write(record) else { error(error) }
        }
    }
}
