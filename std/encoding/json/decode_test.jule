// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

#test
fn testDecodeStr(t: &testing::T) {
	for i, case in strCases {
		if i == 3 || i == 7 {
			// Skip error rune cases.
			continue
		}
		mut s := ""
		Decode(case.output, s) else {
			t.Errorf("Decode(case.output) failed")
			ret
		}
		if s != case.input {
			t.Errorf("expected {} for {}, found {}", case.input, case.output, s)
		}
	}
}

#test
fn testDecodeMapStrKey(t: &testing::T) {
	const json = `{"foo": "foo key","bar": "bar key", "baz": "baz key"}`
	let mut m: map[str]str = nil
	Decode([]byte(json), m) else {
		t.Errorf("Decode({}, map[str]str) failed", json)
		ret
	}
	_, mut ok := m["foo"]
	t.Assert(ok, `m["foo"] is not exist`)
	_, ok = m["bar"]
	t.Assert(ok, `m["bar"] is not exist`)
	_, ok := m["baz"]
	t.Assert(ok, `m["baz"] is not exist`)
}

#test
fn testDecodeMapNumKey(t: &testing::T) {
	const json = `{"234": "foo key","49": "bar key", "0": "baz key"}`
	let mut m: map[int]str = nil
	Decode([]byte(json), m) else {
		t.Errorf("Decode({}, map[int]str) failed", json)
		ret
	}
	_, mut ok := m[234]
	t.Assert(ok, `m[234] is not exist`)
	_, ok = m[49]
	t.Assert(ok, `m[49] is not exist`)
	_, ok := m[0]
	t.Assert(ok, `m[0] is not exist`)
}

#test
fn testDecodeArray(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	let mut a: [3]str
	Decode([]byte(json), a) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(a[0] == "foo", `a[0] != "foo"`)
	t.Assert(a[1] == "bar", `a[1] != "bar"`)
	t.Assert(a[2] == "baz", `a[2] != "baz"`)
}

#test
fn testDecodeArrayWithRemainder(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	let mut a: [5]str = ["foo", "foo", "foo", "foo", "foo"]
	Decode([]byte(json), a) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(a[0] == "foo", `a[0] != "foo"`)
	t.Assert(a[1] == "bar", `a[1] != "bar"`)
	t.Assert(a[2] == "baz", `a[2] != "baz"`)
	t.Assert(a[3] == "", `a[3] != ""`)
	t.Assert(a[4] == "", `a[4] != ""`)
}

#test
fn testDecodeSlice(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	mut s := []str(nil)
	Decode([]byte(json), s) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(len(s) == 3, `len(s) != 3`)
	t.Assert(s[0] == "foo", `s[0] != "foo"`)
	t.Assert(s[1] == "bar", `s[1] != "bar"`)
	t.Assert(s[2] == "baz", `s[2] != "baz"`)
}

#test
fn testDecodeSliceWithRemainder(t: &testing::T) {
	const json = `["foo", "bar", "baz"]`
	mut s := ["foo", "foo", "foo", "foo", "foo"]
	Decode([]byte(json), s) else {
		t.Errorf("Decode({}) failed", json)
		ret
	}
	t.Assert(len(s) == 3, `len(s) != 3`)
	t.Assert(s[0] == "foo", `s[0] != "foo"`)
	t.Assert(s[1] == "bar", `s[1] != "bar"`)
	t.Assert(s[2] == "baz", `s[2] != "baz"`)
}

#test
fn testDecodeByteSlice(t: &testing::T) {
	for _, case in encodeByteSliceCases {
		mut bytes := []byte(nil)
		Decode(case.output, bytes) else {
			t.Errorf("Decode({}) failed", case.output)
			ret
		}
		if len(bytes) != len(case.input) {
			t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
			continue
		}
		for i in bytes {
			if bytes[i] != case.input[i] {
				t.Errorf("expected {} for {}, found {}", case.input, case.output, bytes)
				break
			}
		}
	}
}

#test
fn testDecodeBigHead(t: &testing::T) {
	mut out := (&encodeTree)(nil)
	Decode(bigBytes, out) else {
		t.Errorf("Decode(bigBytes) failed")
	}
}