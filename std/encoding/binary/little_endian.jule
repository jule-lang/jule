// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Binary encoding implementation for little-endian order.
pub struct LittleEndian {}

impl LittleEndian {
    // Encodes unsigned 16-bit integer into 2-bytes slice.
    pub static fn encode_u16(mut b: []byte, x: u16) {
        b[0] = byte(x)
        b[1] = byte(x >> 8)
    }

    // Decodes unsigned 16-bit integer from 2-bytes.
    pub static fn decode_u16(b: []byte): u16 {
        ret u16(b[0]) | u16(b[1])<<8
    }

    // Encodes unsigned 32-bit integer into 4-bytes slice.
    pub static fn encode_u32(mut b: []byte, x: u32) {
        b[0] = byte(x)
        b[1] = byte(x >> 8)
        b[2] = byte(x >> 16)
        b[3] = byte(x >> 24)
    }

    // Decodes unsigned 32-bit integer from 4-bytes.
    pub static fn decode_u32(b: []byte): u32 {
        ret u32(b[0]) | u32(b[1])<<8 | u32(b[2])<<16 | u32(b[3])<<24
    }

    // Encodes unsigned 64-bit integer into 8-bytes slice.
    pub static fn encode_u64(mut b: []byte, x: u64) {
        b[0] = byte(x)
        b[1] = byte(x >> 8)
        b[2] = byte(x >> 16)
        b[3] = byte(x >> 24)
        b[4] = byte(x >> 32)
        b[5] = byte(x >> 40)
        b[6] = byte(x >> 48)
        b[7] = byte(x >> 56)
    }

    // Decodes unsigned 64-bit integer from 8-bytes.
    pub static fn decode_u64(b: []byte): u64 {
        ret u64(b[0]) | u64(b[1])<<8 | u64(b[2])<<16 | u64(b[3])<<24 |
            u64(b[4])<<32 | u64(b[5])<<40 | u64(b[6])<<48 | u64(b[7])<<56
    }
}
