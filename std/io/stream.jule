// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{FsError, File}

// Reader trait mask for stream reader.
pub trait Reader {
    // Read bytes to buffer from stream and returns readed byte count.
    // The number of bytes readed can never exceed the length of the buff.
    // If the buff is larger than the number of bytes that can be read,
    // the buffer will not cause an overflow.
    pub fn read(mut self, mut buff: []byte)!: (n: int)
}

// Reader trait mask for stream writer.
pub trait Writer {
    // Writes bytes to stream and returns writed byte count.
    // The number of bytes written can never exceed the length of the buff.
    pub fn write(mut self, buff: []byte)!: (n: int)
}

// Stream trait mask for R/W streams.
pub trait Stream {
    // Derived from Reader trait.
    pub fn read(mut self, mut buff: []byte)!: (n: int)
    // Derived from Writer trait.
    pub fn write(mut self, buff: []byte)!: (n: int)
}

// Stream implementation for file handles.
pub struct FileStream {
    buff: &File
}

impl FileStream {
    // Returns new FileStream instance for file.
    pub static fn new(mut f: &File): &FileStream {
        ret &FileStream{buff: f}
    }
}

impl Reader for FileStream {} // Implemented by Stream trait
impl Writer for FileStream {} // Implemented by Stream trait

impl Stream for FileStream {
    pub fn read(mut self, mut buff: []byte)!: (n: int) {
        let (n, fserr) = self.buff.read(buff)
        if fserr != FsError.Ok {
            error(fserr)
        }
        ret n
    }

    pub fn write(mut self, buff: []byte)!: (n: int) {
        let (n, fserr) = self.buff.write(buff)
        if fserr != FsError.Ok {
            error(fserr)
        }
        ret n
    }
}

impl FileStream {
    // Reads line from file handle via &File.read method.
    // Returns bytes until line delimiter (\n) byte.
    // Returns zero-length byte slice when reached EOF.
    pub fn read_line(mut self)!: []byte {
        const LINE_DELIMITER = '\n'

        let mut buff = make([]byte, 0, 1024)
        let mut part = make([]byte, 1)
        for {
            let (n, fserr) = self.buff.read(part)
            if fserr != FsError.Ok {
                error(fserr)
            }
            if n == 0 {
                break
            }

            let b = part[0]
            buff = append(buff, b)

            if b == LINE_DELIMITER {
                break
            }
        }
        ret buff
    }
}
