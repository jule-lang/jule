// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Stream implementation for bytes.
// Uses internally mutable buffer.
// Does not clearing internal buffer at all.
// Large buffers can be memory hungry.
pub struct ByteStream {
    buff: []byte
}

impl Reader for ByteStream {} // Implemented by Stream trait
impl Writer for ByteStream {} // Implemented by Stream trait

impl Stream for ByteStream {
    // Read bytes to buffer from stream and returns readed byte count.
    // The number of bytes readed can never exceed the length of the buff.
    // If the buff is larger than the number of bytes that can be read,
    // the buffer will not cause an overflow.
    pub fn read(mut self, mut buff: []byte)!: (n: int) {
        if !self.data() {
            ret 0
        }
        n = copy(buff, self.buff)
        self.buff = self.buff[n:]
        ret
    }

    // Writes bytes to stream and returns writed byte count.
    // The number of bytes written can never exceed the length of the buff.
    pub fn write(mut self, buff: []byte)!: (n: int) {
        n = buff.len
        self.buff = append(self.buff, buff...)
        ret
    }
}

impl ByteStream {
    // Returns new ByteStream instance.
    pub static fn new(): &ByteStream {
        ret new(ByteStream)
    }

    // Reports whether buffer have readable data.
    pub fn data(self): bool {
        ret self.buff.len != 0
    }

    // Removes readed bytes from buffer.
    // Maybe help to reduce memory usage for large buffers.
    pub fn fit(mut self) {
        if !self.data() {
            self.buff = nil
            ret
        }
        let mut buff = make([]byte, self.buff.len)
        _ = copy(buff, self.buff)
        self.buff = buff
    }
}
