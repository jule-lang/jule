// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use nosafe for std::internal::nosafe

// Stream implementation for bytes.
// Uses internally mutable buffer.
// Does not clearing internal buffer at all.
// Large buffers can be memory hungry.
struct ByteStream {
    buff: []byte
}

impl Reader for ByteStream {}

impl Writer for ByteStream {}

impl Stream for ByteStream {}

impl ByteStream {
    // Returns new ByteStream instance.
    static fn New(): &ByteStream {
        ret new(ByteStream)
    }

    // Reports whether buffer have readable data.
    fn Data(self): bool {
        ret self.buff.len != 0
    }

    // Removes readed bytes from buffer.
    // Maybe help to reduce memory usage for large buffers.
    fn Fit(mut self) {
        if !self.Data() {
            self.buff = nil
            ret
        }
        let mut buff = make([]byte, self.buff.len)
        _ = copy(buff, self.buff)
        self.buff = buff
    }

    // Read bytes to buffer from stream and returns readed byte count.
    // The number of bytes readed can never exceed the length of the buff.
    // If the buff is larger than the number of bytes that can be read,
    // the buffer will not cause an overflow.
    fn Read(mut self, mut buff: []byte)!: (n: int) {
        if !self.Data() {
            ret 0
        }
        n = copy(buff, self.buff)
        self.buff = self.buff[n:]
        ret
    }

    // Writes bytes to stream and returns writed byte count.
    // The number of bytes written can never exceed the length of the buff.
    fn Write(mut self, buff: []byte)!: (n: int) {
        n = buff.len
        self.buff = append(self.buff, buff...)
        ret
    }

    // Same as write, but writes string.
    // This method is more efficient than write method for strings.
    fn WriteStr(mut self, s: str)!: (n: int) {
        ret self.Write(nosafe::Stobs(s)) else { error(error) }
    }
}