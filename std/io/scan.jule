// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{File}

// Scanner for files or etc.
// Scans bytes line-by-line.
pub struct Scanner {
    mut r: Reader
    mut b: []byte
    mut e: Error
}

impl Scanner {
    // New &Scanner from Reader.
    pub static fn new(mut r: Reader): &Scanner {
        ret &Scanner{
            r: r,
        }
    }

    // New &Scanner from &File.
    // Uses &FileStream for Reader trait compatibility.
    pub static fn newf(mut f: &File): &Scanner {
        ret &Scanner{
            r: FileStream.new(f),
        }
    }
}

impl Scanner {
    fn reset(self) {
        self.b = nil
        self.e = nil
    }

    // Returns bytes of recent scan.
    // Returned slice is mutable copy of buffer.
    pub fn bytes(self): []byte { ret self.b }

    // Returns error of recent scan.
    pub fn err(self): Error { ret self.e }

    // Returns text from bytes of recent scan.
    pub fn text(self): str { ret str(self.b) }

    // Scans line from handle via read method.
    // Scans bytes until line delimiter (\n) byte, delimiter not included.
    // Reports whether readed byte into buffer.
    // Sets error if any error occurs.
    pub fn scan(self): bool {
        const LINE_DELIMITER = '\n'

        self.reset()

        let mut buff = make([]byte, 0, 1024)
        let mut part = make([]byte, 1)
        for {
            let (n, mut err) = self.r.read(part)
            if err != nil {
                self.e = err
                ret false
            }
            if n == 0 {
                break
            }

            let b = part[0]

            if b == LINE_DELIMITER {
                break
            }

            buff = append(buff, b)
        }

        self.b = buff
        ret part[0] != 0
    }
}
