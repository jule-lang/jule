// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns all keys in a slice of map.
// Returns nil if m == nil || len(m) == 0.
fn Keys[M: map[K]V, K, V](mut m: M): []K {
    if len(m) == 0 {
        ret nil
    }
    let mut s = make([]K, 0, len(m))
    for (mut k) in m {
        s = append(s, k)
    }
    ret s
}

// Returns all values in a slice of map.
// Returns nil if m == nil || len(m) == 0.
fn Values[M: map[K]V, K, V](mut m: M): []V {
    if len(m) == 0 {
        ret nil
    }
    let mut s = make([]V, 0, len(m))
    for (_, mut v) in m {
        s = append(s, v)
    }
    ret s
}