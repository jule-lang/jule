// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use utf8 for std::unicode::utf8

// Returns string that equals to concatenation of n-count s.
// Returns empty string is n <= 0.
pub fn repeat(s: str, mut n: int): str {
    if n <= 0 {
        ret ""
    }

    let mut ss = s
    for n > 1; n-- {
        ss += s
    }
    ret ss
}

fn _has_prefix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    let mut i = 0
    for i < sub.len; i, start = i + 1, start + 1 {
        if s[start] != sub[i] {
            ret false
        }
    }
    ret true
}

// Reports string has prefix as specified substring or not.
pub fn has_prefix(s: str, sub: str): bool {
    ret _has_prefix(s, sub, 0)
}

fn _has_suffix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    start = s.len - start
    let mut i = 0
    for i < sub.len; i++ {
        if s[start-i-1] != sub[sub.len-i-1] {
            ret false
        }
    }
    ret true
}

// Reports string has suffix as specified substring or not.
pub fn has_suffix(s: str, sub: str): bool {
    ret _has_suffix(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
pub fn find(s: str, sub: str): int {
    if s.len < sub.len {
        ret -1
    }
    let mut i = 0
    for i < s.len; i++ {
        if _has_prefix(s, sub, i) {
            ret i
        }
    }
    ret -1
}
