// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use nosafe for std::internal::nosafe
use unicode for std::unicode
use utf8 for std::unicode::utf8

// Returns string that equals to concatenation of n-count s.
// Returns empty string is n <= 0.
fn Repeat(s: str, mut n: int): str {
    if n <= 0 {
        ret ""
    }
    if s.len > int.Max/n {
        panic("std::strings: repeat: integer buffer size overflow")
    }

    let mut ss = make(str, s.len * n)
    for n > 0; n-- {
        ss += s
    }
    ret ss
}

fn hasPrefix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    let mut i = 0
    for i < sub.len; i, start = i + 1, start + 1 {
        if s[start] != sub[i] {
            ret false
        }
    }
    ret true
}

// Reports string has prefix as specified substring or not.
fn HasPrefix(s: str, sub: str): bool {
    ret hasPrefix(s, sub, 0)
}

fn hasSuffix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    start = s.len - start
    let mut i = 0
    for i < sub.len; i++ {
        if s[start-i-1] != sub[sub.len-i-1] {
            ret false
        }
    }
    ret true
}

// Reports string has suffix as specified substring or not.
fn HasSuffix(s: str, sub: str): bool {
    ret hasSuffix(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
fn FindAt(s: str, sub: str, mut i: int): int {
    if i < 0 || s.len < sub.len || sub.len == 0 {
        ret -1
    }
    for i < s.len; i++ {
        if hasPrefix(s, sub, i) {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn Find(s: str, sub: str): int {
    ret FindAt(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
fn FindLastAt(s: str, sub: str, i: int): int {
    let mut j = i - sub.len + 1
    if sub.len == 0 || i < 0 || i >= s.len || j < 0 {
        ret -1
    }
loop:
    for j >= 0; j-- {
        let mut k = j
        let mut z = 0
        for z < sub.len; k, z = k + 1, z + 1 {
            if s[k] != sub[z] {
                continue loop
            }
        }
        ret j
    }
    ret -1
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLast(s: str, sub: str): int {
    ret FindLastAt(s, sub, s.len - 1)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of string to right. Starts searching s at given index.
// Returns -1, if i < 0.
fn FindFnAt(s: str, mut i: int, f: fn(mut rune): bool): int {
    if i < 0 {
        ret -1
    }
    let bytes = nosafe::Stobs(s)
    for i < bytes.len {
        let (r, n) = utf8::DecodeRune(bytes[i:])
        if f(r) {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindFn(s: str, f: fn(mut rune): bool): int {
    ret FindFnAt(s, 0, f)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of string to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
fn FindFnLastAt(s: str, mut i: int, f: fn(mut rune): bool): int {
    if i < 0 || i >= s.len {
        ret -1
    }
    let bytes = nosafe::Stobs(s)
    for i > 0 {
        let (r, n) = utf8::DecodeRune(bytes[i:])
        if f(r) {
            ret i
        }
        i -= n
    }
    ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindFnLast(s: str, f: fn(mut rune): bool): int {
    ret FindFnLastAt(s, s.len - 1, f)
}

fn findRune(&s: []byte, r: rune): int {
    let mut i = 0
    for i < s.len {
        let (br, n) = utf8::DecodeRune(s[i:])
        if r == br {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindByte(s: str, b: byte): int {
    for i, sb in s {
        if sb == b {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastByte(s: str, b: byte): int {
    let mut i = s.len - 1
    for i >= 0; i-- {
        if s[i] == b {
            ret i
        }
    }
    ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindRune(s: str, r: rune): int {
    let bytes = nosafe::Stobs(s)
    ret findRune(bytes, r)
}

fn findLastRune(&s: []byte, r: rune): int {
    let mut i = s.len
    for i > 0 {
        let (br, n) = utf8::DecodeLastRune(s[:i])
        if r == br {
            ret i - 1
        }
        i -= n
    }
    ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastRune(s: str, r: rune): int {
    let bytes = nosafe::Stobs(s)
    ret findLastRune(bytes, r)
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindAny(s: str, runes: str): int {
    let sb = nosafe::Stobs(s)
    let mut rb = nosafe::Stobs(runes)
    let mut i = 0
    for i < sb.len {
        let (r, n) = utf8::DecodeRune(sb[i:])
        if findRune(rb, r) != -1 {
            ret i
        }
        i += n
    }
    ret -1
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastAny(s: str, runes: str): int {
    let sb = nosafe::Stobs(s)
    let mut rb = nosafe::Stobs(runes)
    let mut i = sb.len
    for i > 0 {
        let (r, n) = utf8::DecodeLastRune(sb[:i])
        if findRune(rb, r) != -1 {
            ret i - 1
        }
        i -= n
    }
    ret -1
}

// Splits the string into the specified number of parts to the specified substring.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
fn Split(s: str, sub: str, mut n: int): []str {
    let mut cap = n
    if n < 0 {
        cap = 1 << 4
    }
    let mut parts = make([]str, 0, cap)
    if n == 0 {
        ret parts
    }
    if n < 0 {
        n = s.len
    }
    let mut i = 0
    for n > 0; n-- {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        parts = append(parts, s[i:j])
        i = j + sub.len
    }
    if n > 0 && i < s.len {
        parts = append(parts, s[i:])
    }
    ret parts
}

// Reports whether string includes substring.
fn Contains(s: str, sub: str): bool {
    ret FindAt(s, sub, 0) != -1
}

// Reports whether string includes byte.
fn ContainsByte(s: str, b: byte): bool {
    ret FindByte(s, b) != -1
}

// Reports whether string includes rune.
fn ContainsRune(s: str, r: rune): bool {
    let bytes = nosafe::Stobs(s)
    ret findRune(bytes, r) != -1
}

// Reports whether string includes any of runes.
fn ContainsAny(s: str, runes: str): bool {
    ret FindAny(s, runes) != -1
}

// Counts the number of non-overlapping instances of substring in s.
// Returns zero if substring is empty.
fn Count(s: str, sub: str): int {
    if sub.len == 0 {
        ret 0
    }
    let mut n = 0
    let mut i = 0
    for {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        n++
        i = j + sub.len
    }
    ret n
}

// Replaces all substrings matching sub in the string with new.
// Returns same string if n is equals to zero.
// Replaces all matches if n less than zero.
fn Replace(s: str, sub: str, new: str, mut n: int): str {
    if n == 0 || sub == new {
        ret s
    }

    let m = Count(s, sub)
    if m == 0 {
        ret s
    }
    if n < 0 || m < n {
        n = m
    }

    let mut ss = make(str, s.len + n * (new.len - sub.len))
    let mut i = 0
    for n > 0; n-- {
        let j = FindAt(s, sub, i)
        if j == -1 {
            break
        }
        ss += s[i:j]
        ss += new
        i = j + sub.len
    }
    ss += s[i:]
    ret ss
}

// Returns a copy of the string s with all its characters modified
// according to the mapping function. If mapping returns a negative value,
// the character is dropped from the string with no replacement.
fn Map(s: str, mapping: fn(mut rune): rune): str {
    let mut ss = make(str, s.len)
    let mut bytes = nosafe::Stobs(s)
    let mut i = 0
    for i < bytes.len {
        let (mut r, n) = utf8::DecodeRune(bytes[i:])
        i += n
        r = mapping(r)
        if r >= 0 {
            ss += str(r)
        }
    }
    ret ss
}

// Returns s with all Unicode letters mapped to their lower case.
fn ToLower(s: str): str {
    ret Map(s, unicode::ToLower)
}

// Returns s with all Unicode letters mapped to their upper case.
fn ToUpper(s: str): str {
    ret Map(s, unicode::ToUpper)
}

fn trimLeft(mut &s: []byte, &cutset: []byte) {
    let mut i = 0
    for i < s.len {
        let (r, n) = utf8::DecodeRune(s[i:])
        if findRune(cutset, r) == -1 {
            s = s[i:]
            ret
        }
        i += n
    }
    s = nil
}

// Trims string by specified runes at left.
// Cutset should include runes to trim.
fn TrimLeft(s: str, cutset: str): str {
    let mut bytes = nosafe::Stobs(s)
    let bcutset = nosafe::Stobs(cutset)
    trimLeft(bytes, bcutset)
    ret str(bytes)
}

fn trimRight(mut &s: []byte, &cutset: []byte) {
    let mut i = s.len
    for i > 0 {
        let (r, n) = utf8::DecodeLastRune(s[:i])
        if findRune(cutset, r) == -1 {
            s = s[:i]
            ret
        }
        i -= n
    }
    s = nil
}

// Trims string by specified runes at right.
// Cutset should include runes to trim.
fn TrimRight(s: str, cutset: str): str {
    let mut bytes = nosafe::Stobs(s)
    let bcutset = nosafe::Stobs(cutset)
    trimRight(bytes, bcutset)
    ret str(bytes)
}

// Trims string by specified runes at left and right.
// Cutset should include runes to trim.
fn Trim(s: str, cutset: str): str {
    let mut bytes = nosafe::Stobs(s)
    let bcutset = nosafe::Stobs(cutset)
    trimLeft(bytes, bcutset)
    trimRight(bytes, bcutset)
    ret str(bytes)
}

// Concatenates the parts of its first argument to create a single string.
// The separator sep is placed between parts in the resulting string.
fn Join(parts: []str, sep: str): str {
    match parts.len {
    | 0:
        ret ""
    | 1:
        ret parts[0]
    }
    let mut s = parts[0]
    for _, part in parts[1:] {
        s += sep
        s += part
    }
    ret s
}