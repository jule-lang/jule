// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use unicode for std::unicode
use utf8 for std::unicode::utf8

// Negative situation index such as not found, not exist, or etc.
const N_INDEX = -1

// Returns string that equals to concatenation of n-count s.
// Returns empty string is n <= 0.
pub fn repeat(s: str, mut n: int): str {
    if n <= 0 {
        ret ""
    }

    let mut ss = s
    for n > 1; n-- {
        ss += s
    }
    ret ss
}

fn _has_prefix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    let mut i = 0
    for i < sub.len; i, start = i+1, start+1 {
        if s[start] != sub[i] {
            ret false
        }
    }
    ret true
}

// Reports string has prefix as specified substring or not.
pub fn has_prefix(s: str, sub: str): bool {
    ret _has_prefix(s, sub, 0)
}

fn _has_suffix(&s: str, &sub: str, mut start: int): bool {
    if sub.len == 0 || s.len-start < sub.len {
        ret false
    }

    start = s.len - start
    let mut i = 0
    for i < sub.len; i++ {
        if s[start-i-1] != sub[sub.len-i-1] {
            ret false
        }
    }
    ret true
}

// Reports string has suffix as specified substring or not.
pub fn has_suffix(s: str, sub: str): bool {
    ret _has_suffix(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn find_at(s: str, sub: str, mut i: int): int {
    if i < 0 || s.len < sub.len || sub.len == 0 {
        ret N_INDEX
    }
    for i < s.len; i++ {
        if _has_prefix(s, sub, i) {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
pub fn find(s: str, sub: str): int {
    ret find_at(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= s.len.
pub fn find_last_at(s: str, sub: str, i: int): int {
    let mut j = i - sub.len + 1
    if sub.len == 0 || i < 0 || i >= s.len || j < 0 {
        ret N_INDEX
    }
loop:
    for j >= 0; j-- {
        let mut k = j
        let mut z = 0
        for z < sub.len; k, z = k+1, z+1 {
            if s[k] != sub[z] {
                continue loop
            }
        }
        ret j
    }
    ret N_INDEX
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
pub fn find_last(s: str, sub: str): int {
    ret find_last_at(s, sub, s.len-1)
}

fn _find_rune(&s: []byte, r: rune): int {
    let mut i = 0
    for i < s.len {
        let (br, n) = utf8::decode_rune(s[i:])
        if r == br {
            ret i
        }
        i += n
    }
    ret N_INDEX
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
pub fn find_byte(s: str, b: byte): int {
    for i, sb in s {
        if sb == b {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
pub fn find_byte_last(s: str, b: byte): int {
    let mut i = s.len - 1
    for i >= 0; i-- {
        if s[i] == b {
            ret i
        }
    }
    ret N_INDEX
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
pub fn find_rune(s: str, r: rune): int {
    let bytes = stobs(s)
    ret _find_rune(bytes, r)
}

fn _find_rune_last(&s: []byte, r: rune): int {
    let mut i = s.len
    for i > 0 {
        let (br, n) = utf8::decode_last_rune(s[:i])
        if r == br {
            ret i - 1
        }
        i -= n
    }
    ret N_INDEX
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
pub fn find_rune_last(s: str, r: rune): int {
    let bytes = stobs(s)
    ret _find_rune_last(bytes, r)
}

// Splits the string into the specified number of parts to the specified substring.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
pub fn split(s: str, sub: str, mut n: int): []str {
    let mut parts = make([]str, 0, if n < 0 { 10 } else { n })
    if n == 0 {
        ret parts
    }
    if n < 0 {
        n = s.len
    }
    let mut i = 0
    for n > 0; n-- {
        let j = find_at(s, sub, i)
        if j == N_INDEX {
            break
        }
        parts = append(parts, s[i:j])
        i = j + sub.len
    }
    if n > 0 && i < s.len {
        parts = append(parts, s[i:])
    }
    ret parts
}

// Reports whether string includes substring.
pub fn contains(s: str, sub: str): bool {
    ret find_at(s, sub, 0) != N_INDEX
}

// Reports whether string includes rune.
pub fn contains_rune(s: str, r: rune): bool {
    let bytes = stobs(s)
    ret _find_rune(bytes, r) != N_INDEX
}

// Counts the number of non-overlapping instances of substring in s.
// Returns zero if substring is empty.
pub fn count(s: str, sub: str): int {
    if sub.len == 0 {
        ret 0
    }
    let mut n = 0
    let mut i = 0
    for {
        let j = find_at(s, sub, i)
        if j == N_INDEX {
            break
        }
        n++
        i = j + sub.len
    }
    ret n
}

// Replaces all substrings matching sub in the string with new.
// Returns same string if n is equals to zero.
// Replaces all matches if n less than zero.
pub fn replace(s: str, sub: str, new: str, mut n: int): str {
    if n == 0 || sub == new {
        ret s
    }

    if n < 0 {
        n = s.len
    }

    let mut ss = ""
    let mut i = 0
    for n > 0; n-- {
        let j = find_at(s, sub, i)
        if j == N_INDEX {
            break
        }
        ss += s[i:j]
        ss += new
        i = j + sub.len
    }
    ss += s[i:]
    ret ss
}

// Returns a copy of the string s with all its characters modified
// according to the mapping function. If mapping returns a negative value,
// the character is dropped from the string with no replacement.
pub fn map(s: str, mapping: fn(mut rune): rune): str {
    let mut ss = ""
    for (_, mut r) in []rune(s) {
        r = mapping(r)
        if r >= 0 {
            ss += str(r)
        }
    }
    ret ss
}

// Returns s with all Unicode letters mapped to their lower case.
pub fn to_lower(s: str): str {
    ret map(s, unicode::to_lower)
}

// Returns s with all Unicode letters mapped to their upper case.
pub fn to_upper(s: str): str {
    ret map(s, unicode::to_upper)
}

fn _trim_left(mut &s: []byte, &cutset: []byte) {
    let mut i = 0
    for i < s.len {
        let (r, n) = utf8::decode_rune(s[i:])
        if _find_rune(cutset, r) == N_INDEX {
            s = s[i:]
            break
        }
        i += n
    }
}

// Trims string by specified runes at left.
// Cutset should include runes to trim.
pub fn trim_left(s: str, cutset: str): str {
    let mut bytes = stobs(s)
    let bcutset = stobs(cutset)
    _trim_left(bytes, bcutset)
    ret str(bytes)
}

fn _trim_right(mut &s: []byte, &cutset: []byte) {
    let mut i = s.len
    for i > 0 {
        let (r, n) = utf8::decode_last_rune(s[:i])
        if _find_rune(cutset, r) == N_INDEX {
            s = s[:i]
            ret
        }
        i -= n
    }
}

// Trims string by specified runes at right.
// Cutset should include runes to trim.
pub fn trim_right(s: str, cutset: str): str {
    let mut bytes = stobs(s)
    let bcutset = stobs(cutset)
    _trim_right(bytes, bcutset)
    ret str(bytes)
}

// Trims string by specified runes at left and right.
// Cutset should include runes to trim.
pub fn trim(s: str, cutset: str): str {
    let mut bytes = stobs(s)
    let bcutset = stobs(cutset)
    _trim_left(bytes, bcutset)
    _trim_right(bytes, bcutset)
    ret str(bytes)
}
