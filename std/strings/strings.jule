// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use unicode for std::unicode
use utf8 for std::unicode::utf8
use fastbytes for std::internal::fastbytes

// Returns string that equals to concatenation of n-count s.
// Returns empty string is n <= 0.
fn Repeat(s: str, mut n: int): str {
	if n <= 0 {
		ret ""
	}
	if len(s) > int.Max/n {
		panic("std::strings: repeat: integer buffer size overflow")
	}
	mut ss := StrBuilder.New(len(s) * n)
	for n > 0; n-- {
		ss.WriteStr(s)
	}
	ret ss.Str()
}

// Reports string has prefix as specified substring or not.
fn HasPrefix(s: str, sub: str): bool {
	ret len(s) >= len(sub) && s[:len(sub)] == sub
}

// Reports string has suffix as specified substring or not.
fn HasSuffix(s: str, sub: str): bool {
	ret len(s) >= len(sub) && s[len(s)-len(sub):] == sub
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindAt(s: str, sub: str, mut i: int): int {
	if i < 0 || len(s) < len(sub) || len(sub) == 0 {
		ret -1
	}
	for i < len(s); i++ {
		if HasPrefix(s[i:], sub) {
			ret i
		}
	}
	ret -1
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn Find(s: str, sub: str): int {
	ret FindAt(s, sub, 0)
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindLastAt(s: str, sub: str, i: int): int {
	mut j := i - len(sub) + 1
	if len(sub) == 0 || i < 0 || i >= len(s) || j < 0 {
		ret -1
	}
loop:
	for j >= 0; j-- {
		mut k := j
		mut z := 0
		for z < len(sub); k, z = k + 1, z + 1 {
			if s[k] != sub[z] {
				continue loop
			}
		}
		ret j
	}
	ret -1
}

// Returns index of first matched item with specified substring,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLast(s: str, sub: str): int {
	ret FindLastAt(s, sub, len(s)-1)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of string to right. Starts searching s at given index.
// Returns -1, if i < 0.
fn FindFnAt(s: str, mut i: int, f: fn(mut rune): bool): int {
	if i < 0 {
		ret -1
	}
	for i < len(s) {
		r, n := utf8::DecodeRuneStr(s[i:])
		if f(r) {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindFn(s: str, f: fn(mut rune): bool): int {
	ret FindFnAt(s, 0, f)
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of string to left. Starts searching s at given index.
// Returns -1, if i < 0 || i >= len(s).
fn FindFnLastAt(s: str, mut i: int, f: fn(mut rune): bool): int {
	if i < 0 || i >= len(s) {
		ret -1
	}
	for i > 0 {
		r, n := utf8::DecodeRuneStr(s[i:])
		if f(r) {
			ret i
		}
		i -= n
	}
	ret -1
}

// Returns index of first matched item with finder function,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindFnLast(s: str, f: fn(mut rune): bool): int {
	ret FindFnLastAt(s, len(s)-1, f)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindByte(s: str, b: byte): int {
	ret fastbytes::FindByteStr(s, b)
}

// Returns index of first matched item with specified byte,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastByte(s: str, b: byte): int {
	ret fastbytes::FindLastByteStr(s, b)
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindRune(s: str, r: rune): int {
	mut i := 0
	for i < len(s) {
		br, n := utf8::DecodeRuneStr(s[i:])
		if r == br {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with specified rune,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastRune(s: str, r: rune): int {
	mut i := len(s)
	for i > 0 {
		br, n := utf8::DecodeLastRuneStr(s[:i])
		if r == br {
			ret i - 1
		}
		i -= n
	}
	ret -1
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at left
// of string to right.
fn FindAny(s: str, runes: str): int {
	mut i := 0
	for i < len(s) {
		r, n := utf8::DecodeRuneStr(s[i:])
		if FindRune(runes, r) != -1 {
			ret i
		}
		i += n
	}
	ret -1
}

// Returns index of first matched item with any of runes,
// returns -1 if not exist any match. Starts searching at right
// of string to left.
fn FindLastAny(s: str, runes: str): int {
	mut i := len(s)
	for i > 0 {
		r, n := utf8::DecodeLastRuneStr(s[:i])
		if FindRune(runes, r) != -1 {
			ret i - 1
		}
		i -= n
	}
	ret -1
}

// Splits the string into the specified number of parts to the specified substring.
// Returns empty slice if n is equals to zero.
// Returns all parts if n less than zero.
fn Split(s: str, sub: str, mut n: int): []str {
	mut cap := n
	if n < 0 {
		cap = 1 << 4
	}
	mut parts := make([]str, 0, cap)
	if n == 0 {
		ret parts
	}
	if n < 0 {
		n = len(s)
	}
	mut i := 0
	for n > 0; n-- {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		parts = append(parts, s[i:j])
		i = j + len(sub)
	}
	if n > 0 && i < len(s) {
		parts = append(parts, s[i:])
	}
	ret parts
}

// Reports whether string includes substring.
fn Contains(s: str, sub: str): bool {
	ret FindAt(s, sub, 0) != -1
}

// Reports whether string includes byte.
fn ContainsByte(s: str, b: byte): bool {
	ret FindByte(s, b) != -1
}

// Reports whether string includes rune.
fn ContainsRune(s: str, r: rune): bool {
	ret FindRune(s, r) != -1
}

// Reports whether string includes any of runes.
fn ContainsAny(s: str, runes: str): bool {
	ret FindAny(s, runes) != -1
}

// Counts the number of non-overlapping instances of substring in s.
// Returns zero if substring is empty.
fn Count(s: str, sub: str): int {
	if len(sub) == 0 {
		ret 0
	}
	mut n := 0
	mut i := 0
	for {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		n++
		i = j + len(sub)
	}
	ret n
}

// Replaces all substrings matching sub in the string with new.
// Returns same string if n is equals to zero.
// Replaces all matches if n less than zero.
fn Replace(s: str, sub: str, new: str, mut n: int): str {
	if n == 0 || sub == new {
		ret s
	}

	m := Count(s, sub)
	if m == 0 {
		ret s
	}
	if n < 0 || m < n {
		n = m
	}

	mut ss := StrBuilder.New((len(s) + n*(len(new)-len(sub))) + 1)
	mut i := 0
	for n > 0; n-- {
		j := FindAt(s, sub, i)
		if j == -1 {
			break
		}
		ss.WriteStr(s[i:j])
		ss.WriteStr(new)
		i = j + len(sub)
	}
	ss.WriteStr(s[i:])
	ret ss.Str()
}

// Returns a copy of the string s with all its characters modified
// according to the mapping function. If mapping returns a negative value,
// the character is dropped from the string with no replacement.
fn Map(s: str, mapping: fn(mut rune): rune): str {
	mut ss := StrBuilder.New(len(s) + 1)
	mut i := 0
	for i < len(s) {
		mut r, n := utf8::DecodeRuneStr(s[i:])
		i += n
		r = mapping(r)
		if r >= 0 {
			ss.WriteRune(r)
		}
	}
	ret ss.Str()
}

// Returns s with all Unicode letters mapped to their lower case.
fn ToLower(s: str): str {
	ret Map(s, unicode::ToLower)
}

// Returns s with all Unicode letters mapped to their upper case.
fn ToUpper(s: str): str {
	ret Map(s, unicode::ToUpper)
}

// Trims string by specified runes at left.
// Cutset should include runes to trim.
fn TrimLeft(mut s: str, cutset: str): str {
	mut i := 0
	for i < len(s) {
		r, n := utf8::DecodeRuneStr(s[i:])
		if FindRune(cutset, r) == -1 {
			ret s[i:]
		}
		i += n
	}
	ret ""
}

// Trims string by specified runes at right.
// Cutset should include runes to trim.
fn TrimRight(s: str, cutset: str): str {
	mut i := len(s)
	for i > 0 {
		r, n := utf8::DecodeLastRuneStr(s[:i])
		if FindRune(cutset, r) == -1 {
			ret s[:i]
		}
		i -= n
	}
	ret ""
}

// Trims string by specified runes at left and right.
// Cutset should include runes to trim.
fn Trim(s: str, cutset: str): str {
	ret TrimLeft(TrimRight(s, cutset), cutset)
}

// Concatenates the parts of its first argument to create a single string.
// The separator sep is placed between parts in the resulting string.
fn Join(parts: []str, sep: str): str {
	match len(parts) {
	| 0:
		ret ""
	| 1:
		ret parts[0]
	}
	mut n := 0
	for _, part in parts {
		n += len(part)
		n++
	}
	mut s := StrBuilder.New(n + 1)
	s.WriteStr(parts[0])
	for _, part in parts[1:] {
		s.WriteStr(sep)
		s.WriteStr(part)
	}
	ret s.Str()
}

// Cut slices s around the first instance of sep,
// returning the text before and after sep.
// The found result reports whether sep appears in s.
// If sep does not appear in s, cut returns s, "", false.
fn Cut(s: str, sep: str): (before: str, after: str, found: bool) {
	i := Find(s, sep)
	if i >= 0 {
		ret s[:i], s[i+len(sep):], true
	}
	ret s, "", false
}