// Copyright 2022-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/unicode/utf8/utf8.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Package utf8 implements functions and constants to support text encoded in
// UTF-8. It includes functions to translate between runes and UTF-8 byte sequences.
// See https://en.wikipedia.org/wiki/UTF-8

// The conditions RuneError==std::unicode::ReplacementChar and
// MaxRune==std::unicode::MaxRune are verified in the tests.
// Defining them locally avoids this package depending on package std::unicode.

// Numbers fundamental to the encoding.

// The "error" rune or "Unicode replacement character"
pub const RuneError = '\uFFFD'

// Characters below RuneSelf are represented as themselves in a single byte.
pub const RuneSelf = 0x80

// Maximum valid Unicode code point.
pub const MaxRune = '\U0010FFFF'

// Maximum number of bytes of a UTF-8 encoded Unicode character.
pub const UtfMax = 4

// Code points in the surrogate range are not valid for UTF-8.
const surrogateMin = 0xD800
const surrogateMax = 0xDFFF

const t1 = 0b00000000
const tx = 0b10000000
const t2 = 0b11000000
const t3 = 0b11100000
const t4 = 0b11110000
const t5 = 0b11111000

const maskX = 0b00111111
const mask2 = 0b00011111
const mask3 = 0b00001111
const mask4 = 0b00000111

const rune1max = 1 << 7 - 1
const rune2max = 1 << 11 - 1
const rune3max = 1 << 16 - 1

// The default lowest and highest continuation byte.
const locb = 0b10000000
const hicb = 0b10111111

// These names of these constants are chosen to give nice alignment in the
// table below. The first nibble is an index into acceptRanges or F for
// special one-byte cases. The second nibble is the Rune length or the
// Status for the special one-byte case.
const xx = 0xF1 // invalid: size 1
const as = 0xF0 // ASCII: size 1
const s1 = 0x02 // accept 0, size 2
const s2 = 0x13 // accept 1, size 3
const s3 = 0x03 // accept 0, size 3
const s4 = 0x23 // accept 2, size 3
const s5 = 0x34 // accept 3, size 4
const s6 = 0x04 // accept 0, size 4
const s7 = 0x44 // accept 4, size 4

// Is information about the first byte in a UTF-8 sequence.
static first: [256]byte = [
    //   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x00-0x0F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x10-0x1F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x20-0x2F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x30-0x3F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x40-0x4F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x50-0x5F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x60-0x6F
    as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, as, // 0x70-0x7F
    //   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, // 0x80-0x8F
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, // 0x90-0x9F
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, // 0xA0-0xAF
    xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, // 0xB0-0xBF
    xx, xx, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, // 0xC0-0xCF
    s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, s1, // 0xD0-0xDF
    s2, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s3, s4, s3, s3, // 0xE0-0xEF
    s5, s6, s6, s6, s7, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, // 0xF0-0xFF
]

// Gives the range of valid values for the second byte in a UTF-8 sequence.
struct acceptRange {
    lo: byte // lowest value for second byte.
    hi: byte // highest value for second byte.
}

// Has size 16 to avoid bounds checks in the code that uses it.
static acceptRanges: [16]acceptRange = [
    {locb, hicb},
    {0xA0, hicb},
    {locb, 0x9F},
    {0x90, hicb},
    {locb, 0x8F},
]

// Reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
// An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
pub fn FullRune(p: []byte): bool {
    if p.len == 0 {
        ret false
    }
    let x = first[p[0]]
    if p.len >= int(x&7) {
        ret true // ASCII, invalid or valid.
    }
    // Must be short or invalid.
    let accept = acceptRanges[x>>4]
    if p.len > 1 && (p[1] < accept.lo || accept.hi < p[1]) {
        ret true
    } else if p.len > 2 && (p[2] < locb || hicb < p[2]) {
        ret true
    }
    ret false
}

// Is like FullRune but its input is a string.
pub fn FullRuneStr(s: str): bool {
    if s.len == 0 {
        ret false
    }
    let x = first[s[0]]
    if s.len >= int(x&7) {
        ret true // ASCII, invalid, or valid.
    }
    // Must be short or invalid.
    let accept = acceptRanges[x>>4]
    if s.len > 1 && (s[1] < accept.lo || accept.hi < s[1]) {
        ret true
    } else if s.len > 2 && (s[2] < locb || hicb < s[2]) {
        ret true
    }
    ret false
}

// Unpacks the first UTF-8 encoding in p and returns the rune and
// its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if
// the encoding is invalid, it returns (RuneError, 1). Both are impossible
// results for correct, non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub fn DecodeRune(p: []byte): (r: rune, size: int) {
    if p.len < 1 {
        ret RuneError, 0
    }
    let p0 = p[0]
    let x = first[p0]
    if x >= as {
        // The following code simulates an additional check for x == XX and
        // handling the ASCII and invalid cases accordingly. This mask-and-or
        // approach prevents an additional branch.
        let mask: rune = x << 31 >> 31 // Create 0x0000 or 0xFFFF.
        ret rune(p[0]) & ^mask | RuneError & mask, 1
    }
    let sz = int(x & 7)
    let accept = acceptRanges[x>>4]
    if p.len < sz {
        ret RuneError, 1
    }
    let b1 = p[1]
    if b1 < accept.lo || accept.hi < b1 {
        ret RuneError, 1
    }
    if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
        ret rune(p0 & mask2) << 6 | rune(b1 & maskX), 2
    }
    let b2 = p[2]
    if b2 < locb || hicb < b2 {
        ret RuneError, 1
    }
    if sz <= 3 {
        ret rune(p0 & mask3) << 12 | rune(b1 & maskX) << 6 | rune(b2 & maskX), 3
    }
    let b3 = p[3]
    if b3 < locb || hicb < b3 {
        ret RuneError, 1
    }
    ret rune(p0 & mask4) << 18 | rune(b1 & maskX) << 12 | rune(b2 & maskX) << 6 | rune(b3 & maskX), 4
}

// Is like DecodeRune but its input is a string. If s is empty
// it returns (RuneError, 0). Otherwise, if the encoding is invalid, it
// returns (RuneError, 1). Both are impossible results for correct, non-empty
// UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub fn DecodeRuneStr(s: str): (r: rune, size: int) {
    if s.len < 1 {
        ret RuneError, 0
    }
    let s0 = s[0]
    let x = first[s0]
    if x >= as {
        // The following code simulates an additional check for x == xx and
        // handling the ASCII and invalid cases accordingly. This mask-and-or
        // approach prevents an additional branch.
        let mask: rune = x << 31 >> 31 // Create 0x0000 or 0xFFFF.
        ret rune(s[0]) & ^mask | RuneError & mask, 1
    }
    let sz = int(x & 7)
    let accept = acceptRanges[x>>4]
    if s.len < sz {
        ret RuneError, 1
    }
    let s1 = s[1]
    if s1 < accept.lo || accept.hi < s1 {
        ret RuneError, 1
    }
    if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
        ret rune(s0 & mask2) << 6 | rune(s1 & maskX), 2
    }
    let s2 = s[2]
    if s2 < locb || hicb < s2 {
        ret RuneError, 1
    }
    if sz <= 3 {
        ret rune(s0 & mask3) << 12 | rune(s1 & maskX) << 6 | rune(s2 & maskX), 3
    }
    let s3 = s[3]
    if s3 < locb || hicb < s3 {
        ret RuneError, 1
    }
    ret rune(s0 & mask4) << 18 | rune(s1 & maskX) << 12 | rune(s2 & maskX) << 6 | rune(s3 & maskX), 4
}

// Unpacks the last UTF-8 encoding in p and returns the rune and
// its width in bytes. If p is empty it returns (RuneError, 0). Otherwise, if
// the encoding is invalid, it returns (RuneError, 1). Both are impossible
// results for correct, non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub fn DecodeLastRune(p: []byte): (r: rune, size: int) {
    if p.len == 0 {
        ret RuneError, 0
    }
    let end = p.len
    let mut start = end - 1
    r = rune(p[start])
    if r < RuneSelf {
        ret r, 1
    }
    // guard against O(n^2) behavior when traversing
    // backwards through strings with long sequences of
    // invalid UTF-8.
    let mut lim = end - UtfMax
    if lim < 0 {
        lim = 0
    }
    start--
    for start >= lim; start-- {
        if RuneStart(p[start]) {
            break
        }
    }
    if start < 0 {
        start = 0
    }
    r, size = DecodeRune(p[start:end])
    if start+size != end {
        ret RuneError, 1
    }
    ret r, size
}

// Is like DecodeLastRune but its input is a string. If
// s is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid,
// it returns (RuneError, 1). Both are impossible results for correct,
// non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub fn DecodeLastRuneStr(s: str): (r: rune, size: int) {
    if s.len == 0 {
        ret RuneError, 0
    }
    let end = s.len
    let mut start = end - 1
    r = rune(s[start])
    if r < RuneSelf {
        ret r, 1
    }
    // guard against O(n^2) behavior when traversing
    // backwards through strings with long sequences of
    // invalid UTF-8.
    let mut lim = end - UtfMax
    if lim < 0 {
        lim = 0
    }
    start--
    for start >= lim; start-- {
        if RuneStart(s[start]) {
            break
        }
    }
    if start < 0 {
        start = 0
    }
    r, size = DecodeRuneStr(s[start:end])
    if start+size != end {
        ret RuneError, 1
    }
    ret r, size
}

// Returns the number of bytes required to encode the rune.
// It returns -1 if the rune is not a valid value to encode in UTF-8.
pub fn RuneLen(r: rune): int {
    match {
    | r < 0:
        ret -1
    | r <= rune1max:
        ret 1
    | r <= rune2max:
        ret 2
    | surrogateMin <= r && r <= surrogateMax:
        ret -1
    | r <= rune3max:
        ret 3
    | r <= MaxRune:
        ret 4
    |:
        ret -1
    }
}

// Writes into p (which must be large enough) the UTF-8 encoding of the rune.
// If the rune is out of range, it writes the encoding of RuneError.
// It returns the number of bytes written.
pub fn EncodeRune(mut p: []byte, mut r: rune): int {
    // Negative values are erroneous. Making it unsigned addresses the problem.
    let i = u32(r)
    match {
    | i <= rune1max:
        p[0] = byte(r)
        ret 1
    | i <= rune2max:
        p[0] = t2 | byte(r >> 6)
        p[1] = tx | byte(r) & maskX
        ret 2
    | i > MaxRune | surrogateMin <= i && i <= surrogateMax:
        r = RuneError
        fall
    | i <= rune3max:
        p[0] = t3 | byte(r >> 12)
        p[1] = tx | byte(r >> 6) & maskX
        p[2] = tx | byte(r) & maskX
        ret 3
    |:
        p[0] = t4 | byte(r >> 18)
        p[1] = tx | byte(r >> 12) & maskX
        p[2] = tx | byte(r >> 6) & maskX
        p[3] = tx | byte(r) & maskX
        ret 4
    }
}

// Appends the UTF-8 encoding of r to the end of p and
// returns the extended buffer. If the rune is out of range,
// it appends the encoding of RuneError.
pub fn AppendRune(mut p: []byte, r: rune): []byte {
    if r <= rune1max {
        ret append(p, byte(r))
    }
    ret appendRuneNonASCII(p, r)
}

fn appendRuneNonASCII(mut p: []byte, mut r: rune): []byte {
    // Negative values are erroneous. Making it unsigned addresses the problem.
    let i = u32(r)
    match {
    | i <= rune2max:
        ret append(p, t2 | byte(r >> 6), tx | byte(r) & maskX)
    | i > MaxRune | surrogateMin <= i && i <= surrogateMax:
        r = RuneSelf
        fall
    | i <= rune3max:
        ret append(p, t3 | byte(r >> 12), tx | byte(r >> 6) & maskX, tx | byte(r) & maskX)
    |:
        ret append(p, t4 | byte(r >> 18), tx | byte(r >> 12) & maskX, tx | byte(r >> 6) & maskX, tx | byte(r) & maskX)
    }
}

// Returns the number of runes in p. Erroneous and short
// encodings are treated as single runes of width 1 byte.
pub fn RuneCount(p: []byte): (n: int) {
    let mut i = 0
    for i < p.len {
        n++
        let mut c = p[i]
        if c < RuneSelf {
            // ASCII fast path
            i++
            continue
        }
        let x = first[c]
        if x == xx {
            i++ // invalid.
            continue
        }
        let mut size = int(x & 7)
        if i+size > p.len {
            i++ // Short or invalid.
            continue
        }
        let accept = acceptRanges[x>>4]
        c = p[i+1]
        if c < accept.lo || accept.hi < c {
            size = 1
        } else if size == 2 {
        } else {
            c = p[i+2]
            if c < locb || hicb < c {
                size = 1
            } else if size == 3 {
            } else {
                c = p[i+3]
                if c < locb || hicb < c {
                    size = 1
                }
            }
        }
        i += size
    }
    ret n
}

// Is like RuneCount but its input is a string.
pub fn RuneCountStr(s: str): (n: int) {
    let mut i = 0
    for i < s.len; n++ {
        let mut c = s[i]
        if c < RuneSelf {
            // ASCII fast path
            i++
            continue
        }
        let x = first[c]
        if x == xx {
            i++ // invalid.
            continue
        }
        let mut size = int(x & 7)
        if i+size > s.len {
            i++ // Short or invalid.
            continue
        }
        let accept = acceptRanges[x>>4]
        c = s[i+1]
        if c < accept.lo || accept.hi < c {
            size = 1
        } else if size == 2 {
        } else {
            c = s[i+2]
            if c < locb || hicb < c {
                size = 1
            } else if size == 3 {
            } else {
                c = s[i+3]
                if c < locb || hicb < c {
                    size = 1
                }
            }
        }
        i += size
    }
    ret n
}

// Reports whether the byte could be the first byte of an encoded,
// possibly invalid rune. Second and subsequent bytes always have the top two
// bits set to 10.
pub fn RuneStart(b: byte): bool { ret b&0xC0 != 0x80 }

// Reports whether p consists entirely of valid UTF-8-encoded runes.
pub fn Valid(p: []byte): bool {
    // Break immutability, it is safe because
    // p's content is not changed by this function.
    let mut cp = unsafe { *(&p) }

    // Fast path. Check for and skip 8 bytes of ASCII characters per iteration.
    for cp.len >= 8 {
        // Combining two 32 bit loads allows the same code to be used
        // for 32 and 64 bit platforms.
        let first32 = u32(cp[0]) | u32(cp[1]) << 8 | u32(cp[2]) << 16 | u32(cp[3]) << 24
        let second32 = u32(cp[4]) | u32(cp[5]) << 8 | u32(cp[6]) << 16 | u32(cp[7]) << 24
        if (first32 | second32)&0x80808080 != 0 {
            // Found a non ASCII byte (>= RneSelf).
            break
        }
        cp = cp[8:]
    }
    let mut i = 0
    for i < cp.len {
        let pi = cp[i]
        if pi < RuneSelf {
            i++
            continue
        }
        let x = first[pi]
        if x == xx {
            ret false // Illegal starter byte.
        }
        let size = int(x & 7)
        if i+size > cp.len {
            ret false // Short or invalid.
        }
        let accept = acceptRanges[x>>4]
        let mut c = cp[i+1]
        if c < accept.lo || accept.hi < c {
            ret false
        } else if size == 2 {
        } else {
            c = cp[i+2]
            if c < locb || hicb < c {
                ret false
            } else if size == 3 {
            } else {
                c = cp[i+3]
                if c < locb || hicb < c {
                    ret false
                }
            }
        }
        i += size
    }
    ret true
}

// Reports whether s consists entirely of valid UTF-8-encoded runes.
pub fn ValidStr(mut s: str): bool {
    // Fast path. Check for and skip 8 bytes of ASCII characters per iteration.
    for s.len >= 8 {
        // Combining two 32 bit loads allows the same code to be used
        // for 32 and 64 bit platforms.
        let first32 = u32(s[0]) | u32(s[1]) << 8 | u32(s[2]) << 16 | u32(s[3]) << 24
        let second32 = u32(s[4]) | u32(s[5]) << 8 | u32(s[6]) << 16 | u32(s[7]) << 24
        if (first32 | second32)&0x80808080 != 0 {
            // Found a non ASCII byte (>= RuneSelf).
            break
        }
        s = s[8:]
    }
    let mut i = 0
    for i < s.len {
        let si = s[i]
        if si < RuneSelf {
            i++
            continue
        }
        let x = first[si]
        if x == xx {
            ret false // Illegal starter byte.
        }
        let size = int(x & 7)
        if i+size > s.len {
            ret false // Short or invalid.
        }
        let accept = acceptRanges[x>>4]
        let mut c = s[i+1]
        if c < accept.lo || accept.hi < c {
            ret false
        } else if size == 2 {
        } else {
            c = s[i+2]
            if c < locb || hicb < c {
                ret false
            } else if size == 3 {
            } else {
                c = s[i+3]
                if c < locb || hicb < c {
                    ret false
                }
            }
        }
        i += size
    }
    ret true
}

// Reports whether r can be legally encoded as UTF-8.
// Code points that are out of range or a surrogate half are illegal.
pub fn ValidRune(r: rune): bool {
    match {
    | 0 <= r && r < surrogateMin:
        ret true
    | surrogateMax < r && r <= MaxRune:
        ret true
    |:
        ret false
    }
}