// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use integrated for std::jule::integrated
use sys for std::sys

impl Directory {
    // Reads the named directory and returs all its directory entries can read.
    //
    // Possible errors:
    //  Denied InvalidDescriptor PerProcessLimit SystemWideLimit
    //  NotExist InsufficientMemory NotDir
    pub static fn read(path: str)!: (dirents: []&DirEntry) {
        let mut dir = unsafe { sys::opendir(&path[0]) }
        if dir == nil {
            error(get_last_fs_error())
        }
        for {
            let dirent = unsafe { sys::readdir(dir) }
            if dirent == nil {
                break
            }
            let name = unsafe { integrated::byte_ptr_to_str((*u8)(dirent.d_name)) }
            let mut stat = Status.of(path::join(path, name)) else { error(error) }
            dirents = append(dirents, &DirEntry{
                name: name,
                stat: stat,
            })
        }
        _ = unsafe { sys::closedir(dir) }
        ret
    }

    // Creates directory.
    //
    // Possible errors: Denied Exist ReadOnly NoSpace
    pub static fn create(path: str)! {
        // NOTICE
        // Also can has EMLINK error-code.
        // Make sure this situation should documented or not.
        if unsafe { sys::mkdir(&path[0], 0700) } != 0 {
            error(get_last_fs_error())
        }
    }

    // Removes empty directory.
    //
    // Possible errors: Denined NotExist NotEmpty SyncIO IO Loop NotDir
    pub static fn remove(path: str)! {
        if unsafe { sys::rmdir(&path[0]) } != 0 {
            error(get_last_fs_error())
        }
    }
}
