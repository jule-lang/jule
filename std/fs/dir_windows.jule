// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use path for std::fs::path
use integ for std::jule::integrated
use sys for std::sys

impl Directory {
	// Reads the named directory and returs all its directory entries can read.
	//
	// Possible errors:
	//  Denied InvalidDescriptor PerProcessLimit SystemWideLimit
	//  NotExist InsufficientMemory NotDir
	static fn Read(path: str)!: (dirents: []&DirEntry) {
		utf16Path := integ::UTF16FromStr(path::Join(path, "*"))
		mut data := sys::Win32FindData{}
		handle := unsafe { sys::FindFirstFile(&utf16Path[0], &data) }
		if handle == sys::InvalidHandle {
			ret
		}
		for {
			mut entry := &DirEntry{
				Name: unsafe { integ::U16PtrToStr((*u16)(data.cFileName)) },
			}
			entry.Stat = Status.Of(path::Join(path, entry.Name)) else { error(error) }
			dirents = append(dirents, entry)
			if unsafe { sys::FindNextFile(handle, &data) } == 0 {
				break
			}
		}
		sys::FindClose(handle)
		ret
	}

	// Creates directory.
	//
	// Possible errors: Denied Exist ReadOnly NoSpace
	static fn Create(path: str)! {
		// NOTICE
		// Also can has EMLINK error-code.
		// Make sure this situation should documented or not.

		utf16Path := integ::UTF16FromStr(path)
		if unsafe { !std::sys::CreateDirectory(&utf16Path[0]) } {
			error(getLastFsError())
		}
	}

	// Removes empty directory.
	//
	// Possible errors: Denined NotExist NotEmpty SyncIO IO Loop NotDir
	static fn Remove(path: str)! {
		utf16Path := integ::UTF16FromStr(path)
		if unsafe { !std::sys::RemoveDirectory(&utf16Path[0]) } {
			error(getLastFsError())
		}
	}
}