// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integrated for std::jule::integrated
use sys for std::sys
use utf8 for std::unicode::utf8
use utf16 for std::unicode::utf16

impl File {
    // Opens file stream with named file, specified flag
    // (OFlag.Rdwr, OFlag.Trunc etc.) and perm. If named file does
    // not exist and OFlag.Creat flag is passed, will created with
    // mode (before umask). If successful, returns File reference with handle
    // to file stream and the reference can used for I/O operations.
    //
    // Possible errors:
    //  Denied Exist Signal SyncIO IO IsDir Loop PerProcessLimit LongPath
    //  SystemWideLimit NotExist UnableStream NoSpace NotDir Device Overflow
    //  ReadOnly Retry Busy
    static fn Open(path: str, flag: OFlag, mode: int)!: &File {
        let utf16Path = integrated::Utf16FromStr(path)
        let handle = unsafe { sys::Wopen(&utf16Path[0], int(flag), mode) }
        if handle == -1 {
            error(getLastFsError())
        }
        ret File.New(uintptr(handle))
    }

    // Removes named file.
    //
    // Possible errors:
    //  Denined Busy LongPath NotExist InsufficientMemory NotDir
    static fn Remove(path: str)! {
        let utf16Path = integrated::Utf16FromStr(path)
        if unsafe { !sys::DeleteFile(&utf16Path[0]) } {
            error(getLastFsError())
        }
    }
}

impl File {
    // Writes bytes to handle and returns writed byte count.
    // The number of bytes written can never exceed the length of the buff.
    //
    // Possible errors:
    //  Retry InvalidDescriptor Big Signal IO NoSpace Pipe Range SyncIO
    //  Seek Device Buffer
    fn Write(mut self, buff: []byte)!: (n: int) {
        if len(buff) == 0 {
            ret 0
        }

        if isConsoleHandle(self.handle) {
            let utf16Buff = integrated::Utf16FromStr(str(buff))
            let ok = unsafe { sys::WriteConsole(self.handle, &utf16Buff[0], len(utf16Buff), n, nil) }
            if !ok {
                error(getLastFsError())
            }
            ret n
        }

        n = unsafe { sys::Write(int(self.handle), &buff[0], uint(len(buff))) }
        if n == -1 {
            error(getLastFsError())
        }
        ret n
    }

    // Read bytes to buffer from handle and returns readed byte count.
    // The number of bytes readed can never exceed the length of the buff.
    // If the buff is larger than the number of bytes that can be read,
    // the buffer will not cause an overflow. Offset will be shifted
    // by the number of bytes read.
    //
    // Possible errors:
    //  Retry InvalidDescriptor Signal SyncIO IO IsDir Overflow Buffer
    //  InsufficientMemory Device Seek
    fn Read(mut self, mut buff: []byte)!: (n: int) {
        if len(buff) == 0 {
            ret 0
        }

        if isConsoleHandle(self.handle) {
            let mut codepage = make([]u16, len(buff))
            let ok = unsafe { sys::ReadConsole(self.handle, &codepage[0], len(buff), n) }
            if !ok {
                error(getLastFsError())
            }

            let runes = utf16::Decode(codepage[:n])
            n = 0
            for _, r in runes {
                let size = utf8::RuneLen(r)
                if n+size > len(buff) {
                    break
                }
                _ = utf8::EncodeRune(buff[n:], r)
                n += size
            }

            ret n
        }

        n = unsafe { sys::Read(int(self.handle), &buff[0], uint(len(buff))) }
        if n == -1 {
            error(getLastFsError())
        }
        ret n
    }
}

fn isConsoleHandle(handle: uintptr): bool {
    ret handle == sys::STDIN ||
        handle == sys::STDOUT ||
        handle == sys::STDERR
}