// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/sync/atomic"

// Represents an object that can be locked and unlocked.
trait Locker {
	fn Lock(self)
	fn Unlock(self)
}

const mutexUnlocked = 0
const mutexLocked = 1

// Muxtex is a primitive used to protect memory in
// multi-threading situations such as concurrent access.
//
// Mutextes are uses internal mutability and internal states.
// Locking, unlocking and etc is not mutable operations.
// But there is no internal mutable memory, so mutexes are not use shared memory.
// Therefore, for correct use, a mutex instance should not be copied.
// Otherwise internal state will be copied and not mutated by other instances.
//
// Mutexes are not implemented using API of operating system. Implemented in pure Jule.
// This mutex implementation is not fair and will not optimize starvations.
// Also it will not check ownership of the mutex,
// so another thread can unlock the mutex locked by another thread.
struct Mutex {
	mut state: i32
}

impl Locker for Mutex {}

impl Mutex {
	// Locks the mutex. If the mutex is locked by
	// another thread, it stops the execution of the
	// algorithm to seize it and waits to lock the mutex.
	fn Lock(self) {
		for !self.TryLock() {
		}
	}

	// Unlock the mutex you locked and make it open
	// to locking by the thread.
	fn Unlock(self) {
		old := atomic::Add(self.state, -mutexLocked, atomic::SeqCst)
		if old == 0 {
			panic("sync: Mutex: unlock of unlocked mutex")
		}
	}

	// Try locking the mutex. But unlike the lock
	// method, it just tries to lock instead of waiting
	// to lock. Returns true if the locking was
	// successful, false otherwise.
	fn TryLock(self): bool {
		ret atomic::CompareSwap(self.state, mutexUnlocked, mutexLocked, atomic::SeqCst)
	}
}