// Copyright 2023-2025 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"

// Represents an object that can be locked and unlocked.
trait Locker {
	fn Lock(self)
	fn Unlock(self)
}

// Muxtex is a primitive used to protect memory in
// multi-threading situations such as concurrent access.
//
// Mutextes are uses internal mutability and internal states.
// Locking, unlocking and etc is not mutable operations.
// But there is no internal mutable memory, so mutexes are not use shared memory.
// Therefore, for correct use, a mutex instance should not be copied after first use.
// Otherwise internal state will be copied and not mutated by other instances.
//
// Mutexes are not implemented using API of operating system. Implemented in pure Jule.
// This mutex implementation will not check ownership of the mutex.
// So, a locked Mutex is not associated with a particular thread.
// It is allowed for one thread to lock a Mutex and then
// arrange for another thread to unlock it.
struct Mutex {
	m: runtime::mutex
}

impl Locker for Mutex {}

impl Mutex {
	// Locks mutex.
	// If the lock is already in use, the calling thread
	// blocks until the mutex is available.
	fn Lock(self) {
		self.m.lock()
	}

	// Unlocks mutex.
	// It is a run-time error if mutex is not locked on entry to Unlock.
	fn Unlock(self) {
		self.m.unlock()
	}

	// Tries to lock mutwx and reports whether it succeeded.
	//
	// Note that while correct uses of TryLock do exist, they are rare,
	// and use of TryLock is often a sign of a deeper problem
	// in a particular use of mutexes.
	fn TryLock(self): bool {
		ret self.m.tryLock()
	}
}