// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp use "sync.hpp"

#namespace "std"
#typedef
cpp struct mutex {
    lock:     fn()
    unlock:   fn()
    try_lock: fn(): bool
}

#typedef
cpp struct __jule_mutex_handle {
    drop:  fn()
    mutex: fn(): *cpp.mutex
}

// Muxtex is a primitive used to protect memory in
// multi-threading situations such as concurrent access.
//
// If you try to lock an already locked mutex again
// in the same thread or exhibit similar behavior, a system
// signal is likely to occur.
pub struct Mutex {
    handle: cpp.__jule_mutex_handle
    mut locked: bool
}

impl Mutex {
    // Returns new initialized ready-for-use Mutex.
    pub static fn new(): &Mutex {
        ret &Mutex{}
    }
}

impl Mutex {
    // Locks the mutex. If the mutex is locked by
    // another thread, it stops the execution of the
    // algorithm to seize it and waits to lock the mutex.
    pub fn lock(self) {
        unsafe { self.handle.mutex().lock() }
        self.locked = true
    }

    // Unlock the mutex you locked and make it open
    // to locking by the thread.
    pub fn unlock(self) {
        unsafe { self.handle.mutex().unlock() }
    }

    // Try locking the mutex. But unlike the lock
    // method, it just tries to lock instead of waiting
    // to lock. Returns true if the locking was
    // successful, false otherwise.
    pub fn try_lock(self): bool {
        ret unsafe { self.handle.mutex().try_lock() }
    }

    // Dispose all resources.
    // After this function called, mutex will be uninitialized.
    pub fn dispose(mut self) {
        self.handle.drop()
    }
}
