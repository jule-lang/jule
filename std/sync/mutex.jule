// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integ for std::jule::integrated

cpp use "<mutex>"

#namespace "std"
#typedef
cpp struct mutex {
    lock:     fn()
    unlock:   fn()
    try_lock: fn(): bool
}

struct mutex {
    p: *cpp.mutex
}

impl mutex {
    static fn new(): &mutex {
        let mut mtx = &mutex{
            p: integ::new[cpp.mutex](),
        }
        if mtx.p == nil {
            panic("std::sync: mutex: allocation failed")
        }
        ret mtx
    }

    pub fn dispose(mut self) {
        unsafe { integ::delete[cpp.mutex](self.p) }
    }
}

// Muxtex is a primitive used to protect memory in
// multi-threading situations such as concurrent access.
//
// If you try to lock an already locked mutex again
// in the same thread or exhibit similar behavior, a system
// signal is likely to occur.
//
// Mutextes are uses internal mutability and internal allocations.
// Locking, unlocking and etc is not mutable operations.
// Mutex suitable for using without smart pointers thanks to internal allocations.
// The internal allocation automatically deallocated by smart pointer.
pub struct Mutex {
    mtx: &mutex
}

impl Mutex {
    // Returns new initialized ready-for-use Mutex.
    pub static fn new(): Mutex {
        ret Mutex{
            mtx: mutex.new(),
        }
    }
}

impl Mutex {
    // Locks the mutex. If the mutex is locked by
    // another thread, it stops the execution of the
    // algorithm to seize it and waits to lock the mutex.
    pub fn lock(self) {
        unsafe { self.mtx.p.lock() }
    }

    // Unlock the mutex you locked and make it open
    // to locking by the thread.
    pub fn unlock(self) {
        unsafe { self.mtx.p.unlock() }
    }

    // Try locking the mutex. But unlike the lock
    // method, it just tries to lock instead of waiting
    // to lock. Returns true if the locking was
    // successful, false otherwise.
    pub fn try_lock(self): bool {
        ret unsafe { self.mtx.p.try_lock() }
    }
}
