// Copyright 2022-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#cdef
cpp unsafe fn __jule_atomic_swap_explicit[T](
	mut addr: *T, new: T, order: MemoryOrder): (old: T)

#cdef
cpp unsafe fn __jule_atomic_compare_swap_explicit[T](mut addr: *T, old: *T,
	new: T, suc: MemoryOrder, fail: MemoryOrder): (swapped: bool)

#cdef
cpp unsafe fn __jule_atomic_add_explicit[T](
	mut addr: *T, delta: T, order: MemoryOrder): (old: T)

#cdef
cpp unsafe fn __jule_atomic_load_explicit[T](addr: *T, order: MemoryOrder): T

#cdef
cpp unsafe fn __jule_atomic_store_explicit[T](
	mut addr: *T, val: T, order: MemoryOrder)

// Memory order for atomic operations.
// Specifies how memory accesses.
enum MemoryOrder {
	// The weakest memory order.
	// There no synchronization or ordering on read/write access.
	// Only the operation is guaranteed to be atomic.
	// Usually performs fastest atomicity performance.
	Relaxed: 0,

	// Combined with a load, if the loaded value was written
	// by a store operation with a Release or stronger order,
	// all subsequent operations are ordered after that store.
	// Especially all subsequent uploads will see the data
	// written before the repository.
	Acquire: 2,

	// When combined with a store, all previous operations are
	// ordered with the Acquire or stronger order before any load
	// of that value. In particular, all previous writes become
	// visible to all threads that perform an Acquire or stronger
	// load of this value.
	Release: 3,

	// Acquire and Release combined.
	// Aka acquire/release.
	// For loads it uses Acquire, for stores it uses Release ordering.
	AcqRel: 4,

	// Default memory order for most things.
	// Aka sequentially consistent.
	// Operations are sequenced consistently.
	SeqCst: 5,
}

struct atomicNumber[T] {
	n: T
}

impl atomicNumber {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: T, order: MemoryOrder): (old: T) {
		ret unsafe { cpp.__jule_atomic_swap_explicit[T](&self.n, new, order) }
	}

	// Executes the compare-and-swap operation.
	fn CompareSwap(mut self, old: T, new: T, order: MemoryOrder): (swapped: bool) {
		ret unsafe { cpp.__jule_atomic_compare_swap_explicit[T](&self.n, &old, new, order, order) }
	}

	// Atomically adds delta to value and returns the previous value.
	fn Add(mut self, delta: T, order: MemoryOrder): (old: T) {
		ret unsafe { cpp.__jule_atomic_add_explicit[T](&self.n, delta, order) }
	}

	// Atomically reads and returns value.
	fn Load(self, order: MemoryOrder): T {
		ret unsafe { cpp.__jule_atomic_load_explicit[T](&self.n, order) }
	}

	// Atomically assigns to value.
	fn Store(mut self, val: T, order: MemoryOrder) {
		unsafe { cpp.__jule_atomic_store_explicit[T](&self.n, val, order) }
	}
}

impl atomicNumber {
	// Returns new atomic instance for type with initializer value.
	static fn New(n: T): atomicNumber[T] {
		ret atomicNumber[T]{n: n}
	}
}

// Type alias for private wrapper structure for i8 type.
type AtomicI8: atomicNumber[i8]

// Type alias for private wrapper structure for i16 type.
type AtomicI16: atomicNumber[i16]

// Type alias for private wrapper structure for i32 type.
type AtomicI32: atomicNumber[i32]

// Type alias for private wrapper structure for i64 type.
type AtomicI64: atomicNumber[i64]

// Type alias for private wrapper structure for int type.
type AtomicInt: atomicNumber[int]

// Type alias for private wrapper structure for u8 type.
type AtomicU8: atomicNumber[u8]

// Type alias for private wrapper structure for u16 type.
type AtomicU16: atomicNumber[u16]

// Type alias for private wrapper structure for u32 type.
type AtomicU32: atomicNumber[u32]

// Type alias for private wrapper structure for u64 type.
type AtomicU64: atomicNumber[u64]

// Type alias for private wrapper structure for uint type.
type AtomicUint: atomicNumber[uint]

// Type aliases for private wrapper structure for uintptr type.
type AtomicUintptr: atomicNumber[uintptr]

// Atomically stores new into addr and returns the previous addr value.
// Only integer types are supported.
fn Swap[T](mut &addr: T, new: T, order: MemoryOrder): (old: T) {
	match type T {
	| int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr:
		ret unsafe { cpp.__jule_atomic_swap_explicit[T](&addr, new, order) }
	|:
		panic("std::sync::atomic: swap: T is unsupported type, only integer types are supported")
	}
}

// Executes the compare-and-swap operation for value.
// Only integer types are supported.
fn CompareSwap[T](mut &addr: T, old: T, new: T, order: MemoryOrder): (swapped: bool) {
	match type T {
	| int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr:
		ret unsafe { cpp.__jule_atomic_compare_swap_explicit[T](&addr, &old, new, order, order) }
	|:
		panic("std::sync::atomic: compare_swap: T is unsupported type, only integer types are supported")
	}
}

// Atomically adds delta to addr and returns the previous addr value.
// Only integer types are supported.
fn Add[T](mut &addr: T, delta: T, order: MemoryOrder): (old: T) {
	match type T {
	| int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr:
		ret unsafe { cpp.__jule_atomic_add_explicit[T](&addr, delta, order) }
	|:
		panic("std::sync::atomic: add: T is unsupported type, only integer types are supported")
	}
}

// Atomically loads addr.
// Only integer types are supported.
fn Load[T](&addr: T, order: MemoryOrder): T {
	match type T {
	| int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr:
		ret unsafe { cpp.__jule_atomic_load_explicit[T](&addr, order) }
	|:
		panic("std::sync::atomic: load: T is unsupported type, only integer types are supported")
	}
}

// Atomically stores val into addr.
// Only integer types are supported.
fn Store[T](mut &addr: T, val: T, order: MemoryOrder) {
	match type T {
	| int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr:
		unsafe { cpp.__jule_atomic_store_explicit[T](&addr, val, order) }
	|:
		panic("std::sync::atomic: store: T is unsupported type, only integer types are supported")
	}
}