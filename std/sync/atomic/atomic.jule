// Copyright 2022-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"

// Memory order for atomic operations.
// Specifies how memory accesses.
enum MemoryOrder {
	// The weakest memory order.
	// There no synchronization or ordering on read/write access.
	// Only the operation is guaranteed to be atomic.
	// Usually performs fastest atomicity performance.
	Relaxed: runtime::atomicRelaxed,

	// Combined with a load, if the loaded value was written
	// by a store operation with a Release or stronger order,
	// all subsequent operations are ordered after that store.
	// Especially all subsequent uploads will see the data
	// written before the repository.
	Acquire: runtime::atomicAcquire,

	// When combined with a store, all previous operations are
	// ordered with the Acquire or stronger order before any load
	// of that value. In particular, all previous writes become
	// visible to all threads that perform an Acquire or stronger
	// load of this value.
	Release: runtime::atomicRelease,

	// Acquire and Release combined.
	// Aka acquire/release.
	// For loads it uses Acquire, for stores it uses Release ordering.
	AcqRel: runtime::atomicAcqRel,

	// Default memory order for most things.
	// Aka sequentially consistent.
	// Operations are sequenced consistently.
	SeqCst: runtime::atomicSeqCst,
}

struct number[T] {
	n: T
}

impl number {
	// Atomically stores new value and returns the previous value.
	fn Swap(mut self, new: T, order: MemoryOrder): (old: T) {
		ret unsafe { runtime::atomicSwap[T](&self.n, &new, order) }
	}

	// Executes the compare-and-swap operation.
	fn CompareSwap(mut self, old: T, new: T, order: MemoryOrder): (swapped: bool) {
		ret unsafe { runtime::atomicCompareSwap[T](&self.n, &old, &new, order, order) }
	}

	// Atomically adds delta to value and returns the previous value.
	fn Add(mut self, delta: T, order: MemoryOrder): (old: T) {
		ret unsafe { runtime::atomicAdd[T](&self.n, delta, order) }
	}

	// Atomically reads and returns value.
	fn Load(self, order: MemoryOrder): T {
		ret unsafe { runtime::atomicLoad[T](&self.n, order) }
	}

	// Atomically assigns to value.
	fn Store(mut self, val: T, order: MemoryOrder) {
		unsafe { runtime::atomicStore[T](&self.n, &val, order) }
	}
}

impl number {
	// Returns new atomic instance for type with initializer value.
	static fn New(n: T): number[T] {
		ret number[T]{n: n}
	}
}

// Type alias for private wrapper structure for i8 type.
type I8 = number[i8]

// Type alias for private wrapper structure for i16 type.
type I16 = number[i16]

// Type alias for private wrapper structure for i32 type.
type I32 = number[i32]

// Type alias for private wrapper structure for i64 type.
type I64 = number[i64]

// Type alias for private wrapper structure for int type.
type Int = number[int]

// Type alias for private wrapper structure for u8 type.
type U8 = number[u8]

// Type alias for private wrapper structure for u16 type.
type U16 = number[u16]

// Type alias for private wrapper structure for u32 type.
type U32 = number[u32]

// Type alias for private wrapper structure for u64 type.
type U64 = number[u64]

// Type alias for private wrapper structure for uint type.
type Uint = number[uint]

// Type aliases for private wrapper structure for uintptr type.
type Uintptr = number[uintptr]

// Atomically stores new into addr and returns the previous addr value.
// Only integer types are supported.
fn Swap[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, new: T, order: MemoryOrder): (old: T) {
	ret unsafe { runtime::atomicSwap[T](&addr, &new, order) }
}

// Executes the compare-and-swap operation for value.
// Only integer types are supported.
fn CompareSwap[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, old: T, new: T, order: MemoryOrder): (swapped: bool) {
	ret unsafe { runtime::atomicCompareSwap[T](&addr, &old, &new, order, order) }
}

// Atomically adds delta to addr and returns the previous addr value.
// Only integer types are supported.
fn Add[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, delta: T, order: MemoryOrder): (old: T) {
	ret unsafe { runtime::atomicAdd[T](&addr, delta, order) }
}

// Atomically loads addr.
// Only integer types are supported.
fn Load[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](&addr: T, order: MemoryOrder): T {
	ret unsafe { runtime::atomicLoad[T](&addr, order) }
}

// Atomically stores val into addr.
// Only integer types are supported.
fn Store[T: int | uint | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | uintptr](mut &addr: T, val: T, order: MemoryOrder) {
	unsafe { runtime::atomicStore[T](&addr, &val, order) }
}