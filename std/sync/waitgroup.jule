// Copyright 2022-2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sync::atomic::{MemoryOrder, add, load, compare_swap}

// Do not copy an instance of WaitGroup, use a ref or pointer instead.
//
// usage: in main thread:
// `wg: std::sync::WaitGroup
// `wg.add(delta)` before starting tasks with `co ...`
// `wg.wait()` to wait for all tasks to have finished
//
// in each parallel job:
// `wg.done()` when finished
pub struct WaitGroup {
    task_n: u32  // current task count - reading/writing should be atomic
    wait_n: u32  // current wait count - reading/writing should be atomic
}

impl WaitGroup {
    // Increments (+delta) or decrements (-delta) task count by delta
    // and unblocks any wait() calls if task count becomes zero.
    // Panics if task count reaches below zero.
    pub fn add(mut self, delta: int) {
        let old_nr_tasks = int(add[u32](self.task_n, u32(delta), MemoryOrder.Relaxed))
        let new_nr_tasks = old_nr_tasks + delta
        if new_nr_tasks < 0 {
            panic("negative number of tasks in WaitGroup")
        }

        if new_nr_tasks != 0 {
            ret
        }

        let mut n_waiters = load[u32](self.wait_n, MemoryOrder.Relaxed)
        if n_waiters == 0 {
            ret
        }
        // clear waiters
        for {
            compare_swap[u32](self.wait_n, n_waiters, 0, MemoryOrder.Relaxed)
            if n_waiters == 0 {
                ret
            }
            n_waiters = load[u32](self.wait_n, MemoryOrder.Relaxed)
        }
    }

    // Decrements the WaitGroup counter by one.
    pub fn done(mut self) { self.add(-1) }

    // Blocks until all tasks are done (task count becomes zero)
    pub fn wait(mut self) {
        let nr_tasks = int(load[u32](self.task_n, MemoryOrder.Relaxed))
        if nr_tasks == 0 {
            // no need to wait
            ret
        }
        add[u32](self.wait_n, 1, MemoryOrder.Relaxed)
        // blocks until task_n becomes 0
        for load[u32](self.wait_n, MemoryOrder.Relaxed) != 0 {}
    }
}
