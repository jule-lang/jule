// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.21.2/src/sync/once.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

use std::sync::atomic::{MemoryOrder, AtomicU32}

// Once is an object that will perform exactly one action.
// A Once must not be copied after first use.
pub struct Once {
    // done indicates whether the action has been performed.
    // It is first in the struct because it is used in the hot path.
    // The hot path is inlined at every call site.
    // Placing done first allows more compact instructions on some architectures (amd64/i386),
    // and fewer instructions (to calculate offset) on other architectures.
    mut done: AtomicU32
    mut m:    Mutex
}

impl Once {
    // Calls the function f if and only if do is being called for the
    // first time for this instance of Once. In other words, given
    //
    //  let once = Once{}
    //
    // if once.do(f) is called multiple times, only the first call will invoke f,
    // even if f has a different value in each invocation. A new instance of
    // Once is required for each function to execute.
    //
    // do is intended for initialization that must be run exactly once. Since f
    // is niladic, it may be necessary to use a function literal to capture the
    // arguments to a function to be invoked by do:
    //
    //  config.once.do(func() { config.init(filename) })
    //
    // Because no call to do returns until the one call to f returns, if f causes
    // do to be called, it will deadlock.
    //
    // If f panics, do considers it to have returned; future calls of do return
    // without calling f.
    pub fn do(self, f: fn()) {
        // Note: Here is an incorrect implementation of do:
        //
        //  if self.done.compare_swap(0, 1) {
        //      f()
        //  }
        //
        // do guarantees that when it returns, f has finished.
        // This implementation would not implement that guarantee:
        // given two simultaneous calls, the winner of the cas would
        // call f, and the second would return immediately, without
        // waiting for the first's call to f to complete.
        // This is why the slow path falls back to a mutex, and why
        // the self.done.store must be delayed until after f returns.

        if self.done.load(MemoryOrder.Relaxed) == 0 {
            // Outlined slow-path to allow inlining of the fast-path.
            self.do_slow(f)
        }
    }

    fn do_slow(self, f: fn()) {
        self.m.lock()
        if self.done.load(MemoryOrder.Relaxed) == 0 {
            f()
        }
        self.done.store(1, MemoryOrder.Relaxed)
        self.m.unlock()
    }
}
