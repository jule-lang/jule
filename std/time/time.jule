// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp use "<time.h>"

cpp type time_t: u64

cpp unsafe fn time(t: *cpp.time_t): cpp.time_t

const HOUR = 3600
const DAY = HOUR * 24

// unix-year offset by today
const UNIX_YEAR_OFFSET = 1900

// unix-month offset by today
const UNIX_MONTH_OFFSET = 1

const NSEC_PER_MSEC = 1000000
const NSEC_PER_SEC = NSEC_PER_MSEC * MSEC_PER_SEC
const MSEC_PER_SEC = 1000
const DAYS_PER_Y = 365
const DAYS_PER_400Y = DAYS_PER_Y * 400 + 97
const DAYS_PER_100Y = DAYS_PER_Y * 100 + 24
const DAYS_PER_4Y = DAYS_PER_Y * 4 + 1

// 2000-03-01 (mod 400 year, immediately after feb29
const _2000_03_01 = 946684800
const MOD_APOCH = _2000_03_01 + DAY * (31 + 29)

// Days in month.
static MDAYS: [...]u64 = [31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29]

// Type of unix-time seconds.
pub type UnixTime: u64

// Type of abstract time data.
pub type TimeData: u64

// Abstract time.
pub struct AbsTime {
    pub day:      TimeData
    pub week_day: TimeData
    pub year_day: TimeData
    pub month:    TimeData
    pub year:     TimeData
    pub second:   TimeData
    pub minute:   TimeData
    pub hour:     TimeData
}

impl AbsTime {
    // Returns abstract time as unix-time seconds.
    pub fn unix(self): UnixTime {
        let mut leap = false
        let mut y = self.year - UNIX_YEAR_OFFSET
        let mut m = self.month - UNIX_MONTH_OFFSET
        if m >= 12 || m < 0 {
            let mut adj = m / 12
            m %= 12
            if m < 0 {
                adj--
                m += 12
            }
            y += adj
        }
        let mut t = unix_year_to_seconds(y, leap)
        t += unix_month_to_seconds(m, leap)
        t += DAY * (self.day - 1)
        t += HOUR * self.hour
        t += 60 * self.minute
        t += self.second
        ret t
    }
}

// Timestamp.
// If you are going to use this structure to process data
// of a time, you can obtain an 'AbsTime' instance by using
// the `abs()` method to be more efficient. Each function of
// this structure, such as `day` or `year`, uses an `abs()`
// call in the background. Back-to-back calls may cause you
// to make the same calculation over and over again.
pub struct Time {
    sec: UnixTime
}

impl Time {
    // Returns new time instance from unix-time.
    pub static fn unix(sec: UnixTime): Time {
        ret Time{
            sec: sec,
        }
    }

    // Returns time instance of the moment.
    pub static fn now(): Time {
        ret Time.unix(unix())
    }
}

impl Time {
    // Returns time as unix-time.
    pub fn unix(self): UnixTime { ret self.sec }

    // Returns day of month.
    pub fn day(self): TimeData { ret self.abs().day }

    // Returns month.
    pub fn month(self): TimeData { ret self.abs().month }

    // Returns year.
    pub fn year(self): TimeData { ret self.abs().year }

    // Returns second.
    pub fn second(self): TimeData { ret self.abs().second }

    // Returns minute.
    pub fn minute(self): TimeData { ret self.abs().minute }

    // Returns hour.
    pub fn hour(self): TimeData { ret self.abs().hour }

    // Returns time as abstract time.
    pub fn abs(self): AbsTime {
        let secs = self.sec - MOD_APOCH
        let mut days = secs / DAY
        let mut rem_secs = secs % DAY
        if rem_secs < 0 {
            rem_secs += DAY
            days--
        }

        let mut qc_cycles = days / DAYS_PER_400Y
        let mut rem_days = days % DAYS_PER_400Y
        if rem_days < 0 {
            rem_days += DAYS_PER_400Y
            qc_cycles--
        }

        let mut c_cycles = rem_days / DAYS_PER_100Y
        if c_cycles == 4 {
            c_cycles--
        }
        rem_days -= c_cycles * DAYS_PER_100Y

        let mut q_cycles = rem_days / DAYS_PER_4Y
        if q_cycles == 25 {
            q_cycles--
        }
        rem_days -= q_cycles * DAYS_PER_4Y

        let mut rem_years = rem_days / DAYS_PER_Y
        if rem_years == 4 {
            rem_years--
        }
        rem_days -= rem_years * DAYS_PER_Y

        let mut leap = u64(0)
        if rem_years == 0 && (q_cycles > 0 || c_cycles == 0) {
            leap = 1
        }
        let mut y_day = rem_days + 31 + 28 + leap
        if y_day >= DAYS_PER_Y+leap {
            y_day -= DAYS_PER_Y + leap
        }

        let mut months: u64 = 0
        for MDAYS[months] <= rem_days; months++ {
            rem_days -= MDAYS[months]
        }

        let mut t = AbsTime{}
        t.year = rem_years + 4 * q_cycles + 100 * c_cycles + 400 * qc_cycles + 100
        t.month = months + 2
        if t.month >= 12 {
            t.month -= 12
            t.year++
        }
        t.month += UNIX_MONTH_OFFSET
        t.year += UNIX_YEAR_OFFSET
        t.day = rem_days + 1
        t.week_day = (3 + days) % 7
        if t.week_day < 0 {
            t.week_day += 7
        }
        t.year_day = y_day
        t.hour = rem_secs / HOUR
        t.minute = rem_secs / 60 % 60
        t.second = rem_secs % 60
        ret t
    }
}

// Integer type of durations.
pub type DurInt: i64

// Duration is the time between two times.
pub struct Duration {}

impl Duration {
    // A nanosecond.
    pub const Nanosecond: DurInt = 1

    // Nanoseconds in microsecond.
    // How many nanoseconds are in microsecond.
    pub const Microsecond: DurInt = 1000 * Duration.Nanosecond

    // Nanoseconds in millisecond.
    // How many nanoseconds are in millisecond.
    pub const Millisecond: DurInt = 1000 * Duration.Microsecond

    // Nanoseconds in second.
    // How many nanoseconds are in second.
    pub const Second: DurInt = 1000 * Duration.Millisecond

    // Nanoseconds in minute.
    // How many nanoseconds are in minute.
    pub const Minute: DurInt = 60 * Duration.Second

    // Nanoseconds in hour.
    // How many nanoseconds are in hour.
    pub const Hour: DurInt = 60 * Duration.Minute

    // Returns how many nanoseconds are in given nanoseconds.
    pub static fn nanoseconds(d: DurInt): DurInt {
        ret d * Duration.Nanosecond
    }

    // Returns how many nanoseconds are in given microseconds.
    pub static fn microseconds(d: DurInt): DurInt {
        ret d * Duration.Microsecond
    }

    // Returns how many nanoseconds are in given milliseconds.
    pub static fn milliseconds(d: DurInt): DurInt {
        ret d * Duration.Millisecond
    }

    // Returns how many nanoseconds are in given seconds.
    pub static fn seconds(d: DurInt): DurInt {
        ret d * Duration.Second
    }

    // Returns how many nanoseconds are in given minutes.
    pub static fn minutes(d: DurInt): DurInt {
        ret d * Duration.Minute
    }

    // Returns how many nanoseconds are in given hours.
    pub static fn hours(d: DurInt): DurInt {
        ret d * Duration.Hour
    }
}

// Returns current unix time UTC.
fn unix(): UnixTime {
    ret UnixTime(unsafe { cpp.time(nil) })
}

fn unix_year_to_seconds(y: TimeData, mut &leap: bool): UnixTime {
    if y-2 <= 136 {
        let mut leaps = (y - 68) >> 2
        leap = (y - 68)&3 == 0
        if leap {
            leaps--
        }
        ret 31536000 * (y - 70) + DAY * leaps
    }

    let mut leaps: TimeData = 0
    let mut centuries: TimeData = 0
    let mut cycles = (y - 100) / 400
    let mut rem = (y - 100) % 400
    if rem < 0 {
        cycles--
        rem += 400
    }
    if rem == 0 {
        leap = true
        centuries = 0
        leaps = 0
    } else {
        if rem >= 200 {
            if rem >= 300 {
                centuries = 3
                rem -= 300
            } else {
                centuries = 2
                rem -= 200
            }
        } else {
            if rem >= 100 {
                centuries = 1
                rem -= 100
            } else {
                centuries = 0
            }
        }
        if rem == 0 {
            leap = false
            leaps = 0
        } else {
            leaps = rem / 4
            rem %= 4
            leap = rem == 0
        }
    }

    leaps += 97 * cycles + 24 * centuries
    if leap {
        leaps++
    }

    ret (y - 100) * 31536000 + leaps * DAY + 946684800 + DAY
}

fn unix_month_to_seconds(m: TimeData, leap: bool): UnixTime {
    // Set seconds through month.
    let mut t: UnixTime = 0
    match m {
    | 1:
        t = 31 * DAY
    | 2:
        t = 59 * DAY
    | 3:
        t = 90 * DAY
    | 4:
        t = 120 * DAY
    | 5:
        t = 151 * DAY
    | 6:
        t = 181 * DAY
    | 7:
        t = 212 * DAY
    | 8:
        t = 243 * DAY
    | 9:
        t = 273 * DAY
    | 10:
        t = 304 * DAY
    | 11:
        t = 334 * DAY
    }

    if leap && m >= 2 {
        t += DAY
    }
    ret t
}