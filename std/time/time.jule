// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/runtime"

// The unsigned zero year for internal Unix time calculations.
// Must be 1 mod 400, and times before it will not compute correctly,
// but otherwise can be changed at will.
const absoluteZeroYear = -292277022399

// Offsets to convert between internal and absolute or Unix times.
const absoluteToUnix = -9223372028715321600

// A Time represents an instant in time with nanosecond precision.
//
// Zero-value indicates the beginning of Unix time, i.e. zero seconds.
// This means the date January 1, 1970. Implementation can also handle
// the Unix time in the negative plane. For example, -10 seconds should be
// equivalent to Wed Dec 31 1969 23:59:50 UTC+0000.
struct Time {
	sec:  i64
	nsec: i64
}

impl Time {
	// Returns time in Unix time, nanoseconds will be ignored.
	fn Unix(self): i64 {
		ret self.sec
	}
}

// Returns the current system time with UTC local.
fn Now(): Time {
	sec, nsec := runtime::timeNow()
	ret Time{sec: sec, nsec: nsec}
}

// Returns new time by Unix time with nanoseconds.
// It is not valid to pass nanoseconds outside the range (0, 999999999).
// Any invalid range will cause panic.
fn Unix(sec: i64, nsec: i64): Time {
	if nsec < 0 || nsec >= 1e9 {
		panic("std/time: Unix: invalid nanoseconds range")
	}
	ret Time{sec: sec, nsec: nsec}
}

// Absolute time.
struct AbsTime {
	Day:     int
	WeekDay: int
	YearDay: int
	Month:   int
	Year:    int
	Second:  int
	Minute:  int
	Hour:    int
}

impl AbsTime {
	// Returns absolute time in Unix time.
	fn Unix(self): i64 {
		ret absUnix(i64(self.Year), i64(self.Month), i64(self.Day),
			i64(self.Hour), i64(self.Minute), i64(self.Second))
	}
}