// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp use "<time.h>"

cpp type time_t: u64

cpp unsafe fn time(t: *cpp.time_t): cpp.time_t

const hour = 3600
const day = hour * 24

// unix-year offset by today
const unixYearOffset = 1900

// unix-month offset by today
const unixMonthOffset = 1

const nsecPerMsec = 1000000
const nsecPerSec = nsecPerMsec * msecPerSec
const msecPerSec = 1000
const daysPerY = 365
const daysPer400Y = daysPerY*400 + 97
const daysPer100Y = daysPerY*100 + 24
const daysPer4Y = daysPerY*4 + 1

// 2000-03-01 (mod 400 year, immediately after feb29
const _2000_03_01 = 946684800
const modApoch = _2000_03_01 + day*(31+29)

// Days in month.
static mdays: [...]u64 = [31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29]

// Type of unix-time seconds.
type UnixTime: u64

// Type of abstract time data.
type TimeData: u64

// Abstract time.
struct AbsTime {
	Day:     TimeData
	WeekDay: TimeData
	YearDay: TimeData
	Month:   TimeData
	Year:    TimeData
	Second:  TimeData
	Minute:  TimeData
	Hour:    TimeData
}

impl AbsTime {
	// Returns abstract time as unix-time seconds.
	fn Unix(self): UnixTime {
		mut leap := false
		mut y := self.Year - unixYearOffset
		mut m := self.Month - unixMonthOffset
		if m >= 12 || m < 0 {
			mut adj := m / 12
			m %= 12
			if m < 0 {
				adj--
				m += 12
			}
			y += adj
		}
		mut t := unixYearToSeconds(y, leap)
		t += unixMonthToSeconds(m, leap)
		t += day * (self.Day - 1)
		t += hour * self.Hour
		t += 60 * self.Minute
		t += self.Second
		ret t
	}
}

// Timestamp.
// If you are going to use this structure to process data
// of a time, you can obtain an 'AbsTime' instance by using
// the `abs()` method to be more efficient. Each function of
// this structure, such as `day` or `year`, uses an `abs()`
// call in the background. Back-to-back calls may cause you
// to make the same calculation over and over again.
struct Time {
	sec: UnixTime
}

impl Time {
	// Returns new time instance from unix-time.
	static fn Unix(sec: UnixTime): Time {
		ret Time{
			sec: sec,
		}
	}

	// Returns time instance of the moment.
	static fn Now(): Time {
		ret Time.Unix(unix())
	}
}

impl Time {
	// Returns time as unix-time.
	fn Unix(self): UnixTime { ret self.sec }

	// Returns day of month.
	fn Day(self): TimeData { ret self.Abs().Day }

	// Returns month.
	fn Month(self): TimeData { ret self.Abs().Month }

	// Returns year.
	fn Year(self): TimeData { ret self.Abs().Year }

	// Returns second.
	fn Second(self): TimeData { ret self.Abs().Second }

	// Returns minute.
	fn Minute(self): TimeData { ret self.Abs().Minute }

	// Returns hour.
	fn Hour(self): TimeData { ret self.Abs().Hour }

	// Returns time as abstract time.
	fn Abs(self): AbsTime {
		secs := self.sec - modApoch
		mut days := secs / day
		mut remSecs := secs % day
		if remSecs < 0 {
			remSecs += day
			days--
		}

		mut qcCycles := days / daysPer400Y
		mut remDays := days % daysPer400Y
		if remDays < 0 {
			remDays += daysPer400Y
			qcCycles--
		}

		mut cCycles := remDays / daysPer100Y
		if cCycles == 4 {
			cCycles--
		}
		remDays -= cCycles * daysPer100Y

		mut qCycles := remDays / daysPer4Y
		if qCycles == 25 {
			qCycles--
		}
		remDays -= qCycles * daysPer4Y

		mut remYears := remDays / daysPerY
		if remYears == 4 {
			remYears--
		}
		remDays -= remYears * daysPerY

		mut leap := u64(0)
		if remYears == 0 && (qCycles > 0 || cCycles == 0) {
			leap = 1
		}
		mut yDay := remDays + 31 + 28 + leap
		if yDay >= daysPerY+leap {
			yDay -= daysPerY + leap
		}

		mut months := u64(0)
		for mdays[months] <= remDays; months++ {
			remDays -= mdays[months]
		}

		mut t := AbsTime{}
		t.Year = TimeData(remYears + 4*qCycles + 100*cCycles + 400*qcCycles + 100)
		t.Month = TimeData(months + 2)
		if t.Month >= 12 {
			t.Month -= 12
			t.Year++
		}
		t.Month += unixMonthOffset
		t.Year += unixYearOffset
		t.Day = TimeData(remDays + 1)
		t.WeekDay = TimeData((3 + days) % 7)
		if t.WeekDay < 0 {
			t.WeekDay += 7
		}
		t.YearDay = TimeData(yDay)
		t.Hour = TimeData(remSecs / hour)
		t.Minute = TimeData(remSecs / 60 % 60)
		t.Second = TimeData(remSecs % 60)
		ret t
	}
}

// Returns current unix time UTC.
fn unix(): UnixTime {
	ret unsafe { UnixTime(cpp.time(nil)) }
}

fn unixYearToSeconds(y: TimeData, mut &leap: bool): UnixTime {
	if y-2 <= 136 {
		mut leaps := (y - 68) >> 2
		leap = (y-68)&3 == 0
		if leap {
			leaps--
		}
		ret UnixTime(31536000*(y-70) + day*leaps)
	}

	mut leaps := TimeData(0)
	mut centuries := TimeData(0)
	mut cycles := (y - 100) / 400
	mut rem := (y - 100) % 400
	if rem < 0 {
		cycles--
		rem += 400
	}
	if rem == 0 {
		leap = true
		centuries = 0
		leaps = 0
	} else {
		if rem >= 200 {
			if rem >= 300 {
				centuries = 3
				rem -= 300
			} else {
				centuries = 2
				rem -= 200
			}
		} else {
			if rem >= 100 {
				centuries = 1
				rem -= 100
			} else {
				centuries = 0
			}
		}
		if rem == 0 {
			leap = false
			leaps = 0
		} else {
			leaps = rem / 4
			rem %= 4
			leap = rem == 0
		}
	}

	leaps += 97*cycles + 24*centuries
	if leap {
		leaps++
	}

	ret UnixTime((y-100)*31536000 + leaps*day + 946684800 + day)
}

fn unixMonthToSeconds(m: TimeData, leap: bool): UnixTime {
	// Set seconds through month.
	mut t := UnixTime(0)
	match m {
	| 1:
		t = 31 * day
	| 2:
		t = 59 * day
	| 3:
		t = 90 * day
	| 4:
		t = 120 * day
	| 5:
		t = 151 * day
	| 6:
		t = 181 * day
	| 7:
		t = 212 * day
	| 8:
		t = 243 * day
	| 9:
		t = 273 * day
	| 10:
		t = 304 * day
	| 11:
		t = 334 * day
	}
	if leap && m >= 2 {
		t += day
	}
	ret t
}