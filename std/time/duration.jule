// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Integer type of durations.
type DurInt: i64

// Duration is the time between two times.
struct Duration {}

impl Duration {
    // A nanosecond.
    const Nanosecond: DurInt = 1

    // Nanoseconds in microsecond.
    // How many nanoseconds are in microsecond.
    const Microsecond: DurInt = 1000 * Duration.Nanosecond

    // Nanoseconds in millisecond.
    // How many nanoseconds are in millisecond.
    const Millisecond: DurInt = 1000 * Duration.Microsecond

    // Nanoseconds in second.
    // How many nanoseconds are in second.
    const Second: DurInt = 1000 * Duration.Millisecond

    // Nanoseconds in minute.
    // How many nanoseconds are in minute.
    const Minute: DurInt = 60 * Duration.Second

    // Nanoseconds in hour.
    // How many nanoseconds are in hour.
    const Hour: DurInt = 60 * Duration.Minute

    // Returns duration as nanoseconds.
    static fn Nanoseconds(d: DurInt): DurInt {
        ret d
    }

    // Returns duration as microseconds.
    static fn Microseconds(d: DurInt): DurInt {
        ret d / Duration.Microsecond
    }

    // Returns duration as milliseconds.
    static fn Milliseconds(d: DurInt): DurInt {
        ret d / Duration.Millisecond
    }

    // Returns duration as floating-point seconds.
    static fn Seconds(d: DurInt): f64 {
        let sec = d / Duration.Second
        let nsec = d % Duration.Second
        ret f64(sec) + f64(nsec) / 1e9
    }

    // Returns duration as floating-point minutes.
    static fn Minutes(d: DurInt): f64 {
        let min = d / Duration.Minute
        let nsec = d % Duration.Minute
        ret f64(min) + f64(nsec) / (60 * 1e9)
    }

    // Returns duration as floating-point hours.
    static fn Hours(d: DurInt): f64 {
        let hour = d / Duration.Hour
        let nsec = d % Duration.Hour
        ret f64(hour) + f64(nsec) / (60 * 60 * 1e9)
    }
}
