// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct unixTest {
	sec: i64
	abs: AbsTime
}

static unixAbsTests = []unixTest([
	{0, {Year: 1970, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{966702998, {Year: 2000, Month: 8, Day: 19, Hour: 16, Minute: 36, Second: 38}},
	{77784758457, {Year: 4434, Month: 11, Day: 25, Hour: 13, Minute: 20, Second: 57}},
	{974735338, {Year: 2000, Month: 11, Day: 20, Hour: 15, Minute: 48, Second: 58}},
	{327428778204, {Year: 12345, Month: 10, Day: 21, Hour: 22, Minute: 23, Second: 24}},
	{-10, {Year: 1969, Month: 12, Day: 31, Hour: 23, Minute: 59, Second: 50}},
	{-9999998088000, {Year: -314918, Month: 9, Day: 4, Hour: 9, Minute: 20, Second: 0}},
	{-16295527509, {Year: 1453, Month: 8, Day: 13, Hour: 8, Minute: 34, Second: 51}},
	{-16314912000, {Year: 1453, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{-31020451200, {Year: 987, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{-62135596800, {Year: 1, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{-62198755200, {Year: -1, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{-62167219200, {Year: 0, Month: 1, Day: 1, Hour: 0, Minute: 0, Second: 0}},
	{-126010455062, {Year: -2024, Month: 11, Day: 20, Hour: 15, Minute: 48, Second: 58}},
	{-125253072662, {Year: -2000, Month: 11, Day: 20, Hour: 15, Minute: 48, Second: 58}},
])

fn absEqual(a1: AbsTime, a2: AbsTime): bool {
	ret a1.Year == a2.Year &&
		a1.Month == a2.Month &&
		a1.Day == a2.Day &&
		a1.Hour == a2.Hour &&
		a1.Minute == a2.Minute &&
		a1.Second == a2.Second
}

#test
fn testTimeYear(t: &testing::T) {
	for i, test in unixAbsTests {
		time := Unix(test.sec, 0)
		year := time.Year()
		if year != test.abs.Year {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testTimeHour(t: &testing::T) {
	for i, test in unixAbsTests {
		time := Unix(test.sec, 0)
		hour := time.Hour()
		if hour != test.abs.Hour {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testUnix(t: &testing::T) {
	for i, test in unixAbsTests {
		time := Unix(test.sec, 0)
		unixtime := time.Unix()
		if unixtime != test.sec || !absEqual(UnixAbs(unixtime), test.abs) {
			t.Errorf("#{} conversion failed", i)
			continue
		}
	}
}

#test
fn testUnixAbs(t: &testing::T) {
	for i, test in unixAbsTests {
		abs := UnixAbs(test.sec)
		if !absEqual(abs, test.abs) {
			t.Errorf("#{} conversion failed", i)
		}
	}
}

#test
fn testDate(t: &testing::T) {
	for i, test in unixAbsTests {
		unixtime := Date(
			test.abs.Year, test.abs.Month, test.abs.Day,
			test.abs.Hour, test.abs.Minute, test.abs.Second, 0)
		if unixtime.Unix() != test.sec {
			t.Errorf("#{} conversion failed", i)
		}
	}
}