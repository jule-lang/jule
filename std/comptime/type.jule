// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds.
enum Kind {
    Void,      // Void
    Int,       // int
    Uint,      // uint
    Uintptr,   // uinptr
    I8,        // i8
    I16,       // i16
    I32,       // i32
    I64,       // i64
    U8,        // u8
    U16,       // u16
    U32,       // u32
    U64,       // u64
    F32,       // f32
    F64,       // f64
    Str,       // str
    Bool,      // bool
    Any,       // any
    Array,     // Array
    Slice,     // Slice
    Map,       // Map
    Struct,    // Structure
    Trait,     // Trait
    Enum,      // Enum
    Ptr,       // Raw pointer
    UnsafePtr, // Unsafe raw pointer
    Ref,       // Smart pointer
    Func,      // Function
}

// Returns compile-time type information.
// Cannot assign to memory, just available in compile-time.
// The expression is evaluated to determine type in compile-time and
// will not executed at runtime.
// fn TypeOf(TYPE || EXPRESSION): comptimeTypeInfo

/* >>> Hint comptimeTypeInfo implementation.

// Private compile-time type information wrapper.
struct comptimeTypeInfo {}

impl comptimeTypeInfo {
    // Returns Kind of type.
    // Returns as constant expression.
    fn Kind(self): Kind

    // Returns string value of type.
    // Returns as constant expression.
    fn Str(self): str

    // Returns bitsize of type.
    // Supports only primitive integer and floating-point types.
    // Returns as constant expression.
    fn Bits(self): int

    // Returns comptimeTypeInfo for element type.
    // Supports only pointers (except unsafe pointer), smart pointers, arrays, slices, and enums.
    fn Elem(self): comptimeTypeInfo

    // Returns size of array.
    // Returns as constant expression.
    // Returns zero if array type is auto-sized declaration.
    fn Size(self): int

    // Returns type information for key type.
    // Supports only map types.
    fn Key(self): comptimeTypeInfo

    // Returns type information for value type.
    // Supports only map types.
    fn Value(self): comptimeTypeInfo

    // Returns field informations for type.
    // Supports only structure and enum types.
    fn Fields(self): comptimeStructFields | comptimeEnumFields

    // Reports whether type is public as constant expression.
    // Supports only structures, enums, type enums, and traits.
    fn Public(self): bool

    // Reports whether type is binded as constant expression.
    fn Binded(self): bool

    // Reports whether kind supports ordered constrait as constant expression.
    fn Ordered(self): bool

    // Reports whether kind supports comparable constrait as constant expression.
    fn Comparable(self): bool

    // Reports whether kind is mutable as constant expression.
    fn Mutable(self): bool
}

*/

/* >>> Hint comptimeStructFields implementation.

// Private compile-time information wrapper for struct fields.
// Supports iterable implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeStructFields {}

*/

/* >>> Hint comptimeStructField implementation.

// Private compile-time struct field information wrapper.
struct comptimeStructField {}

impl comptimeStructField {
    // Returns name of field.
    // Returns as constant expression.
    fn Name(self): str

    // Reports whether field is public as constant expression.
    fn Public(self): bool

    // Returns type information for field.
    fn Type(self): comptimeTypeInfo
}

*/

/* >>> Hint comptimeEnumFields implementation.

// Private compile-time information wrapper for enum fields.
// Supports iterable implementations.
// Using with built-in len function returns count of fields as constant expression.
struct comptimeEnumFields {}

*/

/* >>> Hint comptimeEnumField implementation.

// Private compile-time enum field information wrapper.
struct comptimeEnumField {}

impl comptimeStructField {
    // Returns name of field.
    // Returns as constant expression.
    fn Name(self): str
}

*/