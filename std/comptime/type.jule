// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Type kinds.
enum Kind {
    Void,      // Void
    Int,       // int
    Uint,      // uint
    Uintptr,   // uinptr
    I8,        // i8
    I16,       // i16
    I32,       // i32
    I64,       // i64
    U8,        // u8
    U16,       // u16
    U32,       // u32
    U64,       // u64
    F32,       // f32
    F64,       // f64
    Str,       // str
    Bool,      // bool
    Any,       // any
    Array,     // Array
    Slice,     // Slice
    Map,       // Map
    Struct,    // Structure
    Trait,     // Trait
    Enum,      // Enum
    Ptr,       // Raw pointer
    UnsafePtr, // Unsafe raw pointer
    Ref,       // Smart pointer
    Func,      // Function
}

// Returns compile-time type information.
// Cannot assign to memory, just available in compile-time.
// The expression is evaluated to determine type in compile-time and
// will not executed at runtime.
// fn TypeOf(TYPE || EXPRESSION): comptimeTypeInfo

// Private compile-time type information wrapper.
// struct comptimeTypeInfo
//
// Returns Kind of type.
// Returns as constant expression.
// fn Kind(self): Kind
//
// Returns string value of type.
// Returns as constant expression.
// fn Str(self): str
//
// Returns bitsize of type.
// Supports only primitive integer and floating-point types.
// Returns as constant expression.
// fn Bits(self): int