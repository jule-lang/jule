// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sync::{WaitGroup}
use std::sync::atomic::{AtomicInt, MemoryOrder}

static mut n: AtomicInt = AtomicInt.New(0)

fn addToN(mut wg: *WaitGroup) {
    unsafe defer { wg.Done() }
    n.Add(1, MemoryOrder.Relaxed)
}

fn main() {
    let mut wg = WaitGroup{}

    let mut j = 0
    for j < 100; j++ {
        wg.Add(1)
        co addToN(&wg)
    }

    wg.Wait()

    outln(n.Load(MemoryOrder.Relaxed))
}