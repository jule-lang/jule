// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

fn successVoid()! {
    outln("success void")
}

fn failVoid()! {
    error("not implemented")
}

fn successRet()!: int {
    ret 20
}

fn failRet()!: int {
    error("not implemented")
}

fn successRet1()!: (a: int) {
    a = 40
    ret
}

fn failRet1()!: (a: int) {
    error("not implemented")
}

fn successRet2()!: (a: int, b: int) {
    a = 40
    b = 50
    ret
}

fn failRet2()!: (a: int, b: int) {
    error("not implemented")
}

fn main() {
    successVoid() else {
        panic("successVoid failed, should be success")
    }
    failVoid() else {
        outln("handled error of failVoid")
    }

    successRet() else {
        panic("successRet failed, should be success")
    }
    failRet() else {
        outln("handled error of failRet")
    }

    successRet1() else {
        panic("successRet1 failed, should be success")
    }
    failRet1() else {
        outln("handled error of failRet1")
    }

    successRet2() else {
        panic("success_ret2 failed, should be success")
    }
    failRet2() else {
        outln("handled error of failRet2")
    }
}