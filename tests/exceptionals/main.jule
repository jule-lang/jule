// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

fn success_void()! {
    outln("success void")
}

fn fail_void()! {
    error("not implemented")
}

fn success_ret()!: int {
    ret 20
}

fn fail_ret()!: int {
    error("not implemented")
}

fn success_ret1()!: (a: int) {
    a = 40
    ret
}

fn fail_ret1()!: (a: int) {
    error("not implemented")
}

fn success_ret2()!: (a: int, b: int) {
    a = 40
    b = 50
    ret
}

fn fail_ret2()!: (a: int, b: int) {
    error("not implemented")
}

fn main() {
    success_void() else {
        panic("success_void failed, should be success")
    }
    fail_void() else {
        outln("handled error of fail_void")
    }

    success_ret() else {
        panic("success_ret failed, should be success")
    }
    fail_ret() else {
        outln("handled error of fail_ret")
    }

    success_ret1() else {
        panic("success_ret1 failed, should be success")
    }
    fail_ret1() else {
        outln("handled error of fail_ret1")
    }

    success_ret2() else {
        panic("success_ret2 failed, should be success")
    }
    fail_ret2() else {
        outln("handled error of fail_ret2")
    }
}
