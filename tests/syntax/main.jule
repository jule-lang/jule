type TestTypeAlias: i32

// Test for global variable.
static TestGlobal: int = 10

// Test for global constant variable.
const TestConst = 20

fn testStringConcat() {
    _ = "Hello" + " " + "World!"
}

fn testIntergers() {
    _ = 13e+1
    _ = 3536
    _ = 0x0FDDA24
    _ = 05353
}

fn testVariable() {
    let a: int = 0
    _ = a
    let mut x = 10
    x = 100
    outln(x)
}

fn testAssignment() {
    let mut x = 10
    x += 100
}

fn testSlice() {
    let my_slice = [
        ["Apple", "Banana"],
        ["Bred", "Cheese"],
    ]
    outln(
        my_slice[0])
}

fn testArray() {
    let my_array: [2][3]str = [
        ["Apple", "Banana", "TEST"],
        ["Bred", "Cheese", "BLA"],
    ]
    outln(
        my_array[0])
}

fn testAnonymousFunction() {
    let myFunc: fn() = fn() {
        outln("Hello World!")
    }
    myFunc()
    let rf = fn(): i32 {
        ret 90
    }()
    _ = rf
    fn() {
        outln("Anonymous Outln")
    }()
    let a = 0
    _ = a
}

fn testMultipleVariable() {
    let (mut a, mut b, _, c) = 100, 200, nil, false
    _ = c
    a, b = 10, 20
    a, b = b, a
    outln(a)
    outln(b)
    a, b, _ = testMultipleReturn()
}

fn testMultipleReturn(): (int, int, bool) { ret 5, 5, false }

fn testIter() {
    // Infinity iteration
    for {
        break
        continue
    }

    // While iteration
    for !false {
        break
    }

    // Foreach iteration
    for in "Hello" {
        outln("Jule")
    }

    for index in "Hello" {
        outln(index)
    }

    for _, c in "Hello" {
        outln(c)
    }

    for _, element in ["The", "Jule", "Programming", "Language"] {
        outln(element)
    }

    for index in "TEST" {
        _ = index
    }

    for  { break }

    let mut a = 0
    for a <= 3; a++ {
        outln(a)
    }
}

fn testIfExpressions() {
    if true {
        outln("IF")
    } else if true {
        outln("ELSE_IF0")
    } else if false {
        outln("ELSE_IF_1")
        if true == true {
            outln("ELSE_IF_1_IF")
        } else {
            outln("ELSE")
        }
    } else {
        outln("ELSE")
    }
}

fn testParameters(a: i32, b: bool) {}

fn testParameters2(a: i32, b: i32, c: bool, d: bool) {}

fn testVariadicParameters(lnEvery: bool, values: ...i32) {
    for _, i in values {
        if lnEvery {
            outln(i)
        } else {
            out(i)
        }
    }
}

fn testVariadicParameters2(...str) {}

fn testCasting() {
    let a: *int = nil
    _ = uintptr(a)
    _ = f32(5000)
    let bytes = []byte("Hello Bytes")
    outln(bytes)
    outln(str(bytes))
}

fn testRawString() {
    _ = `Hello
    raw`

    _ = `
  strings`
}

fn testMap() {
    let mut m: map[int]str = {
        0: "The",
        1: "Jule",
        2: "Programming",
        3: "Language",
    }
    m[4] = "Maps"
    outln(m)
    for key, value in m {
        out(key)
        out(": ")
        outln(value)
    }
}

fn testInblockTypeAlias() {
    type integer: i32
    let x: integer = 10
    _ = x
}

fn testInblockBlock() {
    {
        outln("INBLOCK_BLOCK")
    }
}

fn testGoto() {
    let s = "Hello World"
    {
        let mut ok = false
        {
            if !ok {
                ok = true
                goto bla
            }
            goto test
        }
    bla:
        outln(ok)
    }
test:
    {
        outln("TEST")
        goto end
    }
    outln(s)
end:
}

enum testEnum {
    item1,
    item2,
    item3: 369,
    item4,
}

struct testStruct {
    a: str
    b: i32
    c: byte
    d: bool
}

impl testStruct {
    fn func1(mut self) {
        self.a = "test"
    }

    fn func2[T1](mut self) {
        self.d = !self.d
    }
}

fn testGenericFunc[T](a: T, b: T): T { ret a + b }

fn testRetVars(): (x: int) { ret }

fn testPostfix() {
    let mut a = 10
    a++
    a--
}

fn testMatchCase() {
    match 10 {
    | 1:
        outln("one")
    | 2:
        outln("two")
    |:
        outln("default")
    }

    match {
    | false:
        outln("false")
    | !true:
        outln("!true")
    | false | true:
        outln("false, true")
    |:
        outln("default")
    }
}

fn init() {
    outln("Syntax Test")
}

// Entry point function of program.
fn main() {
    testIntergers()
    testStringConcat()
    testVariable()
    testAssignment()
    testSlice()
    testArray()
    testAnonymousFunction()
    testMultipleVariable()
    testIter()
    testIfExpressions()
    testParameters(24, false)
    testParameters2(24, 52, true, false)
    testVariadicParameters(true)
    testVariadicParameters(true, 10, 20)
    testVariadicParameters(!false, [i32(1), 2, 3, 4, 5]...)
    testVariadicParameters2()
    testVariadicParameters2("TEST", "TEST_1")
    testCasting()
    testRawString()
    testMap()
    testInblockTypeAlias()
    testInblockBlock()
    testGoto()
    outln(testEnum.item3)
    testGenericFunc[int](2, -30)
    testGenericFunc[uint](6, 2)
    testGenericFunc[f64](4.2, 35.23)
    testMatchCase()
}